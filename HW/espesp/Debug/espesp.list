
espesp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba8  08003ba8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba8  08003ba8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  20000068  08003c18  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  08003c18  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008957  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc0  00000000  00000000  00028a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000606  00000000  00000000  0002adf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d55  00000000  00000000  0002b3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1b8  00000000  00000000  0004314b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000841e5  00000000  00000000  0004d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027bc  00000000  00000000  000d14e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d3ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a2c 	.word	0x08003a2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003a2c 	.word	0x08003a2c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	; (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	; (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	; (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	; (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	; (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	; (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1a      	ldr	r2, [pc, #104]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2120      	movs	r1, #32
 80001d4:	4815      	ldr	r0, [pc, #84]	; (800022c <MX_GPIO_Init+0xd0>)
 80001d6:	f001 f80b 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <MX_GPIO_Init+0xd4>)
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	; (8000234 <MX_GPIO_Init+0xd8>)
 80001f0:	f000 fe7a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001f4:	2320      	movs	r3, #32
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <MX_GPIO_Init+0xd0>)
 800020c:	f000 fe6c 	bl	8000ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2028      	movs	r0, #40	; 0x28
 8000216:	f000 fd7e 	bl	8000d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021a:	2028      	movs	r0, #40	; 0x28
 800021c:	f000 fd97 	bl	8000d4e <HAL_NVIC_EnableIRQ>

}
 8000220:	bf00      	nop
 8000222:	3720      	adds	r7, #32
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	40010800 	.word	0x40010800
 8000230:	10110000 	.word	0x10110000
 8000234:	40011000 	.word	0x40011000

08000238 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int fd, char *ptr, int len)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b29a      	uxth	r2, r3
 8000248:	f04f 33ff 	mov.w	r3, #4294967295
 800024c:	68b9      	ldr	r1, [r7, #8]
 800024e:	4804      	ldr	r0, [pc, #16]	; (8000260 <_write+0x28>)
 8000250:	f001 fc68 	bl	8001b24 <HAL_UART_Transmit>
	return len;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	200008d8 	.word	0x200008d8

08000264 <_read>:

int _read(int file, char *ptr, int len)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	b29a      	uxth	r2, r3
 8000274:	f04f 33ff 	mov.w	r3, #4294967295
 8000278:	68b9      	ldr	r1, [r7, #8]
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <_read+0x28>)
 800027c:	f001 fcd5 	bl	8001c2a <HAL_UART_Receive>
	return len;
 8000280:	687b      	ldr	r3, [r7, #4]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200008d8 	.word	0x200008d8

08000290 <WriteBuffer>:

uint8_t Rx_buffer[1024];
uint16_t Rx_Head = 0;
uint16_t Rx_Tail = 0;

void WriteBuffer(uint8_t buff){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	Rx_buffer[Rx_Head] = buff;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <WriteBuffer+0x60>)
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <WriteBuffer+0x64>)
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	5453      	strb	r3, [r2, r1]
	Rx_Head = (Rx_Head + 1) % UART_RX_BUFFER_SIZE;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <WriteBuffer+0x60>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	425a      	negs	r2, r3
 80002ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80002b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80002b6:	bf58      	it	pl
 80002b8:	4253      	negpl	r3, r2
 80002ba:	b29a      	uxth	r2, r3
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <WriteBuffer+0x60>)
 80002be:	801a      	strh	r2, [r3, #0]
	if(Rx_Head == Rx_Tail)
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <WriteBuffer+0x60>)
 80002c2:	881a      	ldrh	r2, [r3, #0]
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <WriteBuffer+0x68>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d10c      	bne.n	80002e6 <WriteBuffer+0x56>
		Rx_Tail = (Rx_Tail + 1) % UART_RX_BUFFER_SIZE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <WriteBuffer+0x68>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	425a      	negs	r2, r3
 80002d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80002d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80002dc:	bf58      	it	pl
 80002de:	4253      	negpl	r3, r2
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <WriteBuffer+0x68>)
 80002e4:	801a      	strh	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	20000888 	.word	0x20000888
 80002f4:	20000488 	.word	0x20000488
 80002f8:	2000088a 	.word	0x2000088a

080002fc <ReadBuffer>:

uint8_t ReadBuffer(){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
	if(Rx_Tail == Rx_Head)
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <ReadBuffer+0x48>)
 8000304:	881a      	ldrh	r2, [r3, #0]
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <ReadBuffer+0x4c>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	429a      	cmp	r2, r3
 800030c:	d101      	bne.n	8000312 <ReadBuffer+0x16>
		return 0;
 800030e:	2300      	movs	r3, #0
 8000310:	e013      	b.n	800033a <ReadBuffer+0x3e>
	uint8_t data = Rx_buffer[Rx_Tail];
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <ReadBuffer+0x48>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <ReadBuffer+0x50>)
 800031a:	5c9b      	ldrb	r3, [r3, r2]
 800031c:	71fb      	strb	r3, [r7, #7]
	Rx_Tail = (Rx_Tail + 1) % UART_RX_BUFFER_SIZE;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <ReadBuffer+0x48>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	425a      	negs	r2, r3
 8000326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800032a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800032e:	bf58      	it	pl
 8000330:	4253      	negpl	r3, r2
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <ReadBuffer+0x48>)
 8000336:	801a      	strh	r2, [r3, #0]
	return data;
 8000338:	79fb      	ldrb	r3, [r7, #7]
}
 800033a:	4618      	mov	r0, r3
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	2000088a 	.word	0x2000088a
 8000348:	20000888 	.word	0x20000888
 800034c:	20000488 	.word	0x20000488

08000350 <AT_COMMAND>:
uint8_t Send_sign[] = "send fail\r\n";
uint8_t Success_sign[] = "success\r\n";
uint8_t Error_sign[] = "error\r\n";
uint8_t None_sign[] = "none\r\n";

uint8_t AT_COMMAND(uint8_t *cmd, uint8_t repeat, uint16_t timeout){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
 800035c:	4613      	mov	r3, r2
 800035e:	803b      	strh	r3, [r7, #0]


	while(repeat > 0){
 8000360:	e018      	b.n	8000394 <AT_COMMAND+0x44>
		memset(BBOX, 0, sizeof(BBOX));
 8000362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000366:	2100      	movs	r1, #0
 8000368:	481f      	ldr	r0, [pc, #124]	; (80003e8 <AT_COMMAND+0x98>)
 800036a:	f002 fc70 	bl	8002c4e <memset>
		BBOX_count = 0;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <AT_COMMAND+0x9c>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Transmit(&huart1, cmd, strlen((char *)cmd), 100) == HAL_OK) {
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f7ff fee9 	bl	800014c <strlen>
 800037a:	4603      	mov	r3, r0
 800037c:	b29a      	uxth	r2, r3
 800037e:	2364      	movs	r3, #100	; 0x64
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	481b      	ldr	r0, [pc, #108]	; (80003f0 <AT_COMMAND+0xa0>)
 8000384:	f001 fbce 	bl	8001b24 <HAL_UART_Transmit>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <AT_COMMAND+0x4c>
			break;
		}
		repeat--;
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	3b01      	subs	r3, #1
 8000392:	70fb      	strb	r3, [r7, #3]
	while(repeat > 0){
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1e3      	bne.n	8000362 <AT_COMMAND+0x12>
 800039a:	e000      	b.n	800039e <AT_COMMAND+0x4e>
			break;
 800039c:	bf00      	nop
	}
	if(repeat == 0){
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d119      	bne.n	80003d8 <AT_COMMAND+0x88>
		//HAL_UART_Transmit(&huart2, Send_sign, strlen((char *)Send_sign), 100);
		//printf("send fail\r\n");
		return false;
 80003a4:	2300      	movs	r3, #0
 80003a6:	e01b      	b.n	80003e0 <AT_COMMAND+0x90>
	}
	while(timeout > 0){

		if (strstr((char *)BBOX, "OK") != 0){
 80003a8:	4912      	ldr	r1, [pc, #72]	; (80003f4 <AT_COMMAND+0xa4>)
 80003aa:	480f      	ldr	r0, [pc, #60]	; (80003e8 <AT_COMMAND+0x98>)
 80003ac:	f002 fc57 	bl	8002c5e <strstr>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <AT_COMMAND+0x6a>
			//HAL_UART_Transmit(&huart2, Success_sign, strlen((char *)Success_sign), 100);
			//printf("\r\nOK\r\n");
			return true;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e012      	b.n	80003e0 <AT_COMMAND+0x90>
		}
		// ERROR -> FAIL
		else if (strstr((char *)BBOX, "FAIL") != 0){
 80003ba:	490f      	ldr	r1, [pc, #60]	; (80003f8 <AT_COMMAND+0xa8>)
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <AT_COMMAND+0x98>)
 80003be:	f002 fc4e 	bl	8002c5e <strstr>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <AT_COMMAND+0x7c>
			//HAL_UART_Transmit(&huart2, Error_sign, strlen((char *)Error_sign), 100);
			//printf("\r\nError\r\n");
			return false;
 80003c8:	2300      	movs	r3, #0
 80003ca:	e009      	b.n	80003e0 <AT_COMMAND+0x90>
		}

		timeout -= 10;
 80003cc:	883b      	ldrh	r3, [r7, #0]
 80003ce:	3b0a      	subs	r3, #10
 80003d0:	803b      	strh	r3, [r7, #0]
		HAL_Delay(10);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f000 fba4 	bl	8000b20 <HAL_Delay>
	while(timeout > 0){
 80003d8:	883b      	ldrh	r3, [r7, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1e4      	bne.n	80003a8 <AT_COMMAND+0x58>


	//HAL_UART_Transmit(&huart2, None_sign, strlen((char *)None_sign), 100);
	//HAL_UART_Transmit(&huart2, BBOX, strlen((char *)BBOX), 100);

	return false;
 80003de:	2300      	movs	r3, #0


}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000084 	.word	0x20000084
 80003ec:	20000485 	.word	0x20000485
 80003f0:	20000890 	.word	0x20000890
 80003f4:	08003a44 	.word	0x08003a44
 80003f8:	08003a48 	.word	0x08003a48

080003fc <WifiAccess>:
}



// AT CWJAP
uint8_t WifiAccess() {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	//uint8_t res = AT_COMMAND((uint8_t *)"AT+CWLAP\r\n" , 10, 1000);
	uint8_t res = AT_COMMAND((uint8_t *)"AT+CWJAP=\"801em1\",\"ssafy1357\"\r\n" , 10, 1000);
 8000402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000406:	210a      	movs	r1, #10
 8000408:	4807      	ldr	r0, [pc, #28]	; (8000428 <WifiAccess+0x2c>)
 800040a:	f7ff ffa1 	bl	8000350 <AT_COMMAND>
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
//	uint8_t res = AT_COMMAND((uint8_t *)"AT+CWJAP=\"vnqzl\",\"104vnqzl\"" , 10, 1000);
	if(res)
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <WifiAccess+0x20>
		return false;
 8000418:	2300      	movs	r3, #0
 800041a:	e000      	b.n	800041e <WifiAccess+0x22>
	return true;
 800041c:	2301      	movs	r3, #1
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	08003a64 	.word	0x08003a64

0800042c <SendData>:
		return false;
	return true;
}

// Rasp Send data size & data // target => 0 is rasp // 1 is AWS    // data is real data
uint8_t SendData(uint8_t size, uint8_t is_MUX, uint8_t target, uint8_t * data) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b0a4      	sub	sp, #144	; 0x90
 8000430:	af00      	add	r7, sp, #0
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	460b      	mov	r3, r1
 800043a:	71bb      	strb	r3, [r7, #6]
 800043c:	4613      	mov	r3, r2
 800043e:	717b      	strb	r3, [r7, #5]
	uint8_t str[128] = {0, };
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	227c      	movs	r2, #124	; 0x7c
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fbfe 	bl	8002c4e <memset>
	uint8_t res = 0U;
 8000452:	2300      	movs	r3, #0
 8000454:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t res1 = 0U;
 8000458:	2300      	movs	r3, #0
 800045a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

	if(is_MUX == 0) {
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d11b      	bne.n	800049c <SendData+0x70>
		sprintf((char *)str, "AT+CIPSEND=%u\r\n", size);
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4921      	ldr	r1, [pc, #132]	; (80004f0 <SendData+0xc4>)
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fb8b 	bl	8002b88 <siprintf>

		res = AT_COMMAND(str, 10, 1000);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800047a:	210a      	movs	r1, #10
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff67 	bl	8000350 <AT_COMMAND>
 8000482:	4603      	mov	r3, r0
 8000484:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		res1 = AT_COMMAND(data, 10, 1000);
 8000488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800048c:	210a      	movs	r1, #10
 800048e:	6838      	ldr	r0, [r7, #0]
 8000490:	f7ff ff5e 	bl	8000350 <AT_COMMAND>
 8000494:	4603      	mov	r3, r0
 8000496:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800049a:	e01a      	b.n	80004d2 <SendData+0xa6>
	}
	else {
		sprintf((char *)str, "AT+CIPSEND=%u,%u\r\n", target, size);
 800049c:	797a      	ldrb	r2, [r7, #5]
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f107 000c 	add.w	r0, r7, #12
 80004a4:	4913      	ldr	r1, [pc, #76]	; (80004f4 <SendData+0xc8>)
 80004a6:	f002 fb6f 	bl	8002b88 <siprintf>

		res = AT_COMMAND(str, 10, 1000);
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b2:	210a      	movs	r1, #10
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff4b 	bl	8000350 <AT_COMMAND>
 80004ba:	4603      	mov	r3, r0
 80004bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		res1 = AT_COMMAND(data, 10, 1000);
 80004c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c4:	210a      	movs	r1, #10
 80004c6:	6838      	ldr	r0, [r7, #0]
 80004c8:	f7ff ff42 	bl	8000350 <AT_COMMAND>
 80004cc:	4603      	mov	r3, r0
 80004ce:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	}


	if(res || res1)
 80004d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d103      	bne.n	80004e2 <SendData+0xb6>
 80004da:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SendData+0xba>
		return false;
 80004e2:	2300      	movs	r3, #0
 80004e4:	e000      	b.n	80004e8 <SendData+0xbc>
	return true;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3790      	adds	r7, #144	; 0x90
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08003ad4 	.word	0x08003ad4
 80004f4:	08003ae4 	.word	0x08003ae4

080004f8 <RaspiTCPSocketAccess>:
		return false;
	return true;
}


uint8_t RaspiTCPSocketAccess() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	uint8_t res = AT_COMMAND((uint8_t *)"AT+CIPSTART=\"TCP\",\"192.168.0.41\",12345\r\n" , 10, 1000);
 80004fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000502:	210a      	movs	r1, #10
 8000504:	4807      	ldr	r0, [pc, #28]	; (8000524 <RaspiTCPSocketAccess+0x2c>)
 8000506:	f7ff ff23 	bl	8000350 <AT_COMMAND>
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	if(res)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <RaspiTCPSocketAccess+0x20>
		return false;
 8000514:	2300      	movs	r3, #0
 8000516:	e000      	b.n	800051a <RaspiTCPSocketAccess+0x22>
	return true;
 8000518:	2301      	movs	r3, #1
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	08003b10 	.word	0x08003b10

08000528 <HAL_UART_RxCpltCallback>:
//}




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_UART_RxCpltCallback+0x48>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d115      	bne.n	8000566 <HAL_UART_RxCpltCallback+0x3e>
		// !!!- DO not printf Here -!!!
		BBOX[BBOX_count++] = buff;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_UART_RxCpltCallback+0x4c>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	b2d1      	uxtb	r1, r2
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_UART_RxCpltCallback+0x4c>)
 8000546:	7011      	strb	r1, [r2, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_UART_RxCpltCallback+0x50>)
 800054c:	7819      	ldrb	r1, [r3, #0]
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_UART_RxCpltCallback+0x54>)
 8000550:	5499      	strb	r1, [r3, r2]
		WriteBuffer(buff);
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe9a 	bl	8000290 <WriteBuffer>
		HAL_UART_Receive_IT(huart, &buff, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	4906      	ldr	r1, [pc, #24]	; (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fbf4 	bl	8001d4e <HAL_UART_Receive_IT>
	}

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40013800 	.word	0x40013800
 8000574:	20000485 	.word	0x20000485
 8000578:	20000484 	.word	0x20000484
 800057c:	20000084 	.word	0x20000084

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <main+0x84>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6858      	ldr	r0, [r3, #4]
 800058c:	2300      	movs	r3, #0
 800058e:	2202      	movs	r2, #2
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fa4b 	bl	8002a2c <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <main+0x84>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6898      	ldr	r0, [r3, #8]
 800059c:	2300      	movs	r3, #0
 800059e:	2202      	movs	r2, #2
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fa43 	bl	8002a2c <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fa59 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f833 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f7ff fdd5 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f97b 	bl	80008ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f94f 	bl	8000858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
//  uint8_t send_AT[] = "AT\r\n";
//  HAL_UART_Transmit(&huart1, send_AT, strlen((char *)send_AT), 1000);

  // Wait for Interrupt
  HAL_UART_Receive_IT(&huart1, &buff, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	4912      	ldr	r1, [pc, #72]	; (8000608 <main+0x88>)
 80005be:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x8c>)
 80005c0:	f001 fbc5 	bl	8001d4e <HAL_UART_Receive_IT>
//
//  SendAT();
//
//  HAL_Delay(100);

  WifiAccess();
 80005c4:	f7ff ff1a 	bl	80003fc <WifiAccess>

  HAL_Delay(5000);
 80005c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005cc:	f000 faa8 	bl	8000b20 <HAL_Delay>

  RaspiTCPSocketAccess();
 80005d0:	f7ff ff92 	bl	80004f8 <RaspiTCPSocketAccess>

  HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f000 faa3 	bl	8000b20 <HAL_Delay>

  // SendData(uint8_t size, uint8_t is_MUX, uint8_t target, uint8_t * data)

  SendData(strlen((char *)"ABCDEFG\r\n"), 0, 0, (uint8_t *)"ABCDEFG\r\n");
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <main+0x90>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2009      	movs	r0, #9
 80005e2:	f7ff ff23 	bl	800042c <SendData>

	  // change [1] ==> HAL_UART_Transmit -> HAL_UART_Transmit_IT



	  uint8_t data = ReadBuffer();
 80005e6:	f7ff fe89 	bl	80002fc <ReadBuffer>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	  if(data != 0)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d003      	beq.n	80005fc <main+0x7c>
		  printf("%c", data);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa10 	bl	8002a1c <putchar>
//	  uint8_t len_str[15] = {0, };
//	  sprintf(len_str, "len=%u\r\n", len);
//	  HAL_UART_Transmit(&huart2, BBOX, len, 100);
//	  HAL_Delay(100);
//	  HAL_UART_Transmit(&huart2, len_str, strlen((char *)len_str), 100);
	  HAL_Delay(100);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f000 fa8f 	bl	8000b20 <HAL_Delay>
  {
 8000602:	e7f0      	b.n	80005e6 <main+0x66>
 8000604:	20000064 	.word	0x20000064
 8000608:	20000484 	.word	0x20000484
 800060c:	20000890 	.word	0x20000890
 8000610:	08003b3c 	.word	0x08003b3c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fb13 	bl	8002c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2310      	movs	r3, #16
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000642:	2300      	movs	r3, #0
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fe0a 	bl	8001264 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000656:	f000 f818 	bl	800068a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f878 	bl	8001768 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067e:	f000 f804 	bl	800068a <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3740      	adds	r7, #64	; 0x40
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068e:	b672      	cpsid	i
}
 8000690:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000692:	e7fe      	b.n	8000692 <Error_Handler+0x8>

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_MspInit+0x5c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <HAL_MspInit+0x5c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_MspInit+0x5c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_MspInit+0x5c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_MspInit+0x60>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_MspInit+0x60>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010000 	.word	0x40010000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 f9d3 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <USART1_IRQHandler+0x10>)
 800074e:	f001 fb23 	bl	8001d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000890 	.word	0x20000890

0800075c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <USART2_IRQHandler+0x10>)
 8000762:	f001 fb19 	bl	8001d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200008d8 	.word	0x200008d8

08000770 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000774:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000778:	f000 fd52 	bl	8001220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a6:	605a      	str	r2, [r3, #4]
  return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <_isatty>:

int _isatty(int file)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e8:	4a14      	ldr	r2, [pc, #80]	; (800083c <_sbrk+0x5c>)
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <_sbrk+0x60>)
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <_sbrk+0x64>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <_sbrk+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <_sbrk+0x64>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	429a      	cmp	r2, r3
 800080e:	d207      	bcs.n	8000820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000810:	f002 fa82 	bl	8002d18 <__errno>
 8000814:	4603      	mov	r3, r0
 8000816:	220c      	movs	r2, #12
 8000818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	e009      	b.n	8000834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <_sbrk+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <_sbrk+0x64>)
 8000830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20005000 	.word	0x20005000
 8000840:	00000400 	.word	0x00000400
 8000844:	2000088c 	.word	0x2000088c
 8000848:	20000a70 	.word	0x20000a70

0800084c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART1_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000864:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000890:	f001 f8f8 	bl	8001a84 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f7ff fef6 	bl	800068a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000890 	.word	0x20000890
 80008a8:	40013800 	.word	0x40013800

080008ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f001 f8ce 	bl	8001a84 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f7ff fecc 	bl	800068a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200008d8 	.word	0x200008d8
 80008fc:	40004400 	.word	0x40004400

08000900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a39      	ldr	r2, [pc, #228]	; (8000a00 <HAL_UART_MspInit+0x100>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d13a      	bne.n	8000996 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <HAL_UART_MspInit+0x104>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a37      	ldr	r2, [pc, #220]	; (8000a04 <HAL_UART_MspInit+0x104>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <HAL_UART_MspInit+0x104>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <HAL_UART_MspInit+0x104>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <HAL_UART_MspInit+0x104>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <HAL_UART_MspInit+0x104>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0318 	add.w	r3, r7, #24
 8000962:	4619      	mov	r1, r3
 8000964:	4828      	ldr	r0, [pc, #160]	; (8000a08 <HAL_UART_MspInit+0x108>)
 8000966:	f000 fabf 	bl	8000ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	4619      	mov	r1, r3
 800097e:	4822      	ldr	r0, [pc, #136]	; (8000a08 <HAL_UART_MspInit+0x108>)
 8000980:	f000 fab2 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2025      	movs	r0, #37	; 0x25
 800098a:	f000 f9c4 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800098e:	2025      	movs	r0, #37	; 0x25
 8000990:	f000 f9dd 	bl	8000d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000994:	e030      	b.n	80009f8 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <HAL_UART_MspInit+0x10c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d12b      	bne.n	80009f8 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x104>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x104>)
 80009a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009aa:	61d3      	str	r3, [r2, #28]
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x104>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_UART_MspInit+0x104>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x104>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_UART_MspInit+0x104>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d0:	230c      	movs	r3, #12
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2302      	movs	r3, #2
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <HAL_UART_MspInit+0x108>)
 80009e4:	f000 fa80 	bl	8000ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2026      	movs	r0, #38	; 0x26
 80009ee:	f000 f992 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f2:	2026      	movs	r0, #38	; 0x26
 80009f4:	f000 f9ab 	bl	8000d4e <HAL_NVIC_EnableIRQ>
}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40004400 	.word	0x40004400

08000a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ff1c 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a16:	490c      	ldr	r1, [pc, #48]	; (8000a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a2c:	4c09      	ldr	r4, [pc, #36]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 f973 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fd9f 	bl	8000580 <main>
  bx lr
 8000a42:	4770      	bx	lr
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a4c:	08003bb0 	.word	0x08003bb0
  ldr r2, =_sbss
 8000a50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a54:	20000a70 	.word	0x20000a70

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f947 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe0c 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f95f 	bl	8000d6a <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f927 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <HAL_IncTick+0x20>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000920 	.word	0x20000920

08000b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000920 	.word	0x20000920

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fff0 	bl	8000b0c <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffe0 	bl	8000b0c <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4906      	ldr	r1, [pc, #24]	; (8000c00 <__NVIC_EnableIRQ+0x34>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff90 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff2d 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff42 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff90 	bl	8000c58 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5f 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff35 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d008      	beq.n	8000dac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e020      	b.n	8000dee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 020e 	bic.w	r2, r2, #14
 8000dba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d005      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2204      	movs	r2, #4
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e051      	b.n	8000ec0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 020e 	bic.w	r2, r2, #14
 8000e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <HAL_DMA_Abort_IT+0xd4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d029      	beq.n	8000e9a <HAL_DMA_Abort_IT+0xa2>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <HAL_DMA_Abort_IT+0xd8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d022      	beq.n	8000e96 <HAL_DMA_Abort_IT+0x9e>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <HAL_DMA_Abort_IT+0xdc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d01a      	beq.n	8000e90 <HAL_DMA_Abort_IT+0x98>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_DMA_Abort_IT+0xe0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d012      	beq.n	8000e8a <HAL_DMA_Abort_IT+0x92>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_DMA_Abort_IT+0xe4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00a      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x8c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <HAL_DMA_Abort_IT+0xe8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d102      	bne.n	8000e7e <HAL_DMA_Abort_IT+0x86>
 8000e78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e7c:	e00e      	b.n	8000e9c <HAL_DMA_Abort_IT+0xa4>
 8000e7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e82:	e00b      	b.n	8000e9c <HAL_DMA_Abort_IT+0xa4>
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	e008      	b.n	8000e9c <HAL_DMA_Abort_IT+0xa4>
 8000e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8e:	e005      	b.n	8000e9c <HAL_DMA_Abort_IT+0xa4>
 8000e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e94:	e002      	b.n	8000e9c <HAL_DMA_Abort_IT+0xa4>
 8000e96:	2310      	movs	r3, #16
 8000e98:	e000      	b.n	8000e9c <HAL_DMA_Abort_IT+0xa4>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_DMA_Abort_IT+0xec>)
 8000e9e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
    } 
  }
  return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020008 	.word	0x40020008
 8000ed0:	4002001c 	.word	0x4002001c
 8000ed4:	40020030 	.word	0x40020030
 8000ed8:	40020044 	.word	0x40020044
 8000edc:	40020058 	.word	0x40020058
 8000ee0:	4002006c 	.word	0x4002006c
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	e169      	b.n	80011d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000efc:	2201      	movs	r2, #1
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8158 	bne.w	80011ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4a9a      	ldr	r2, [pc, #616]	; (8001188 <HAL_GPIO_Init+0x2a0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d05e      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000f24:	4a98      	ldr	r2, [pc, #608]	; (8001188 <HAL_GPIO_Init+0x2a0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d875      	bhi.n	8001016 <HAL_GPIO_Init+0x12e>
 8000f2a:	4a98      	ldr	r2, [pc, #608]	; (800118c <HAL_GPIO_Init+0x2a4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d058      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000f30:	4a96      	ldr	r2, [pc, #600]	; (800118c <HAL_GPIO_Init+0x2a4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d86f      	bhi.n	8001016 <HAL_GPIO_Init+0x12e>
 8000f36:	4a96      	ldr	r2, [pc, #600]	; (8001190 <HAL_GPIO_Init+0x2a8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d052      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000f3c:	4a94      	ldr	r2, [pc, #592]	; (8001190 <HAL_GPIO_Init+0x2a8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d869      	bhi.n	8001016 <HAL_GPIO_Init+0x12e>
 8000f42:	4a94      	ldr	r2, [pc, #592]	; (8001194 <HAL_GPIO_Init+0x2ac>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d04c      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000f48:	4a92      	ldr	r2, [pc, #584]	; (8001194 <HAL_GPIO_Init+0x2ac>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d863      	bhi.n	8001016 <HAL_GPIO_Init+0x12e>
 8000f4e:	4a92      	ldr	r2, [pc, #584]	; (8001198 <HAL_GPIO_Init+0x2b0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d046      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000f54:	4a90      	ldr	r2, [pc, #576]	; (8001198 <HAL_GPIO_Init+0x2b0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d85d      	bhi.n	8001016 <HAL_GPIO_Init+0x12e>
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d82a      	bhi.n	8000fb4 <HAL_GPIO_Init+0xcc>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d859      	bhi.n	8001016 <HAL_GPIO_Init+0x12e>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <HAL_GPIO_Init+0x80>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000fe3 	.word	0x08000fe3
 8000f6c:	08000fbd 	.word	0x08000fbd
 8000f70:	08000fcf 	.word	0x08000fcf
 8000f74:	08001011 	.word	0x08001011
 8000f78:	08001017 	.word	0x08001017
 8000f7c:	08001017 	.word	0x08001017
 8000f80:	08001017 	.word	0x08001017
 8000f84:	08001017 	.word	0x08001017
 8000f88:	08001017 	.word	0x08001017
 8000f8c:	08001017 	.word	0x08001017
 8000f90:	08001017 	.word	0x08001017
 8000f94:	08001017 	.word	0x08001017
 8000f98:	08001017 	.word	0x08001017
 8000f9c:	08001017 	.word	0x08001017
 8000fa0:	08001017 	.word	0x08001017
 8000fa4:	08001017 	.word	0x08001017
 8000fa8:	08001017 	.word	0x08001017
 8000fac:	08000fc5 	.word	0x08000fc5
 8000fb0:	08000fd9 	.word	0x08000fd9
 8000fb4:	4a79      	ldr	r2, [pc, #484]	; (800119c <HAL_GPIO_Init+0x2b4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fba:	e02c      	b.n	8001016 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	623b      	str	r3, [r7, #32]
          break;
 8000fc2:	e029      	b.n	8001018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e024      	b.n	8001018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e01f      	b.n	8001018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	330c      	adds	r3, #12
 8000fde:	623b      	str	r3, [r7, #32]
          break;
 8000fe0:	e01a      	b.n	8001018 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fea:	2304      	movs	r3, #4
 8000fec:	623b      	str	r3, [r7, #32]
          break;
 8000fee:	e013      	b.n	8001018 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d105      	bne.n	8001004 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	611a      	str	r2, [r3, #16]
          break;
 8001002:	e009      	b.n	8001018 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001004:	2308      	movs	r3, #8
 8001006:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	615a      	str	r2, [r3, #20]
          break;
 800100e:	e003      	b.n	8001018 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
          break;
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x130>
          break;
 8001016:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2bff      	cmp	r3, #255	; 0xff
 800101c:	d801      	bhi.n	8001022 <HAL_GPIO_Init+0x13a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	e001      	b.n	8001026 <HAL_GPIO_Init+0x13e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3304      	adds	r3, #4
 8001026:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2bff      	cmp	r3, #255	; 0xff
 800102c:	d802      	bhi.n	8001034 <HAL_GPIO_Init+0x14c>
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	e002      	b.n	800103a <HAL_GPIO_Init+0x152>
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	3b08      	subs	r3, #8
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	210f      	movs	r1, #15
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	401a      	ands	r2, r3
 800104c:	6a39      	ldr	r1, [r7, #32]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	431a      	orrs	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80b1 	beq.w	80011ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_GPIO_Init+0x2b8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x2b8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <HAL_GPIO_Init+0x2b8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001080:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_GPIO_Init+0x2bc>)
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <HAL_GPIO_Init+0x2c0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d013      	beq.n	80010d4 <HAL_GPIO_Init+0x1ec>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d00d      	beq.n	80010d0 <HAL_GPIO_Init+0x1e8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3e      	ldr	r2, [pc, #248]	; (80011b0 <HAL_GPIO_Init+0x2c8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x1e4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_GPIO_Init+0x1e0>
 80010c4:	2303      	movs	r3, #3
 80010c6:	e006      	b.n	80010d6 <HAL_GPIO_Init+0x1ee>
 80010c8:	2304      	movs	r3, #4
 80010ca:	e004      	b.n	80010d6 <HAL_GPIO_Init+0x1ee>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x1ee>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_GPIO_Init+0x1ee>
 80010d4:	2300      	movs	r3, #0
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4093      	lsls	r3, r2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e6:	492f      	ldr	r1, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x2bc>)
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	492c      	ldr	r1, [pc, #176]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	608b      	str	r3, [r1, #8]
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	4928      	ldr	r1, [pc, #160]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001118:	4013      	ands	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	4922      	ldr	r1, [pc, #136]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	60cb      	str	r3, [r1, #12]
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	491e      	ldr	r1, [pc, #120]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001140:	4013      	ands	r3, r2
 8001142:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4918      	ldr	r1, [pc, #96]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	4914      	ldr	r1, [pc, #80]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 8001168:	4013      	ands	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d021      	beq.n	80011bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	490e      	ldr	r1, [pc, #56]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
 8001184:	e021      	b.n	80011ca <HAL_GPIO_Init+0x2e2>
 8001186:	bf00      	nop
 8001188:	10320000 	.word	0x10320000
 800118c:	10310000 	.word	0x10310000
 8001190:	10220000 	.word	0x10220000
 8001194:	10210000 	.word	0x10210000
 8001198:	10120000 	.word	0x10120000
 800119c:	10110000 	.word	0x10110000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40011400 	.word	0x40011400
 80011b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_GPIO_Init+0x304>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4909      	ldr	r1, [pc, #36]	; (80011ec <HAL_GPIO_Init+0x304>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	3301      	adds	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	fa22 f303 	lsr.w	r3, r2, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f47f ae8e 	bne.w	8000efc <HAL_GPIO_Init+0x14>
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	372c      	adds	r7, #44	; 0x2c
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f806 	bl	8001250 <HAL_GPIO_EXTI_Callback>
  }
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e272      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8087 	beq.w	8001392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001284:	4b92      	ldr	r3, [pc, #584]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b04      	cmp	r3, #4
 800128e:	d00c      	beq.n	80012aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001290:	4b8f      	ldr	r3, [pc, #572]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d112      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5e>
 800129c:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d10b      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012aa:	4b89      	ldr	r3, [pc, #548]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d06c      	beq.n	8001390 <HAL_RCC_OscConfig+0x12c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d168      	bne.n	8001390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e24c      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x76>
 80012cc:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a7f      	ldr	r2, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e02e      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x98>
 80012e2:	4b7b      	ldr	r3, [pc, #492]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a7a      	ldr	r2, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a77      	ldr	r2, [pc, #476]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0xbc>
 8001306:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a71      	ldr	r2, [pc, #452]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6e      	ldr	r2, [pc, #440]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 8001320:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a6a      	ldr	r2, [pc, #424]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fbe4 	bl	8000b0c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fbe0 	bl	8000b0c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e200      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5d      	ldr	r3, [pc, #372]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xe4>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fbd0 	bl	8000b0c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fbcc 	bl	8000b0c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1ec      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x10c>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139e:	4b4c      	ldr	r3, [pc, #304]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x18c>
 80013b6:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x176>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c0      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4939      	ldr	r1, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb85 	bl	8000b0c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fb81 	bl	8000b0c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a1      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4927      	ldr	r1, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fb64 	bl	8000b0c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fb60 	bl	8000b0c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e180      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03a      	beq.n	80014e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d019      	beq.n	80014ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_RCC_OscConfig+0x274>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff fb44 	bl	8000b0c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fb40 	bl	8000b0c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e160      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f000 face 	bl	8001a48 <RCC_Delay>
 80014ac:	e01c      	b.n	80014e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_RCC_OscConfig+0x274>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fb2a 	bl	8000b0c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ba:	e00f      	b.n	80014dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb26 	bl	8000b0c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d908      	bls.n	80014dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e146      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	42420000 	.word	0x42420000
 80014d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	4b92      	ldr	r3, [pc, #584]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1e9      	bne.n	80014bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a6 	beq.w	8001642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a87      	ldr	r2, [pc, #540]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x4c8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d118      	bne.n	8001560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x4c8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7e      	ldr	r2, [pc, #504]	; (800172c <HAL_RCC_OscConfig+0x4c8>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fae7 	bl	8000b0c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001542:	f7ff fae3 	bl	8000b0c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b64      	cmp	r3, #100	; 0x64
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e103      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x4c8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x312>
 8001568:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6213      	str	r3, [r2, #32]
 8001574:	e02d      	b.n	80015d2 <HAL_RCC_OscConfig+0x36e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x334>
 800157e:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a69      	ldr	r2, [pc, #420]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b67      	ldr	r3, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a66      	ldr	r2, [pc, #408]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	e01c      	b.n	80015d2 <HAL_RCC_OscConfig+0x36e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d10c      	bne.n	80015ba <HAL_RCC_OscConfig+0x356>
 80015a0:	4b61      	ldr	r3, [pc, #388]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a60      	ldr	r2, [pc, #384]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6213      	str	r3, [r2, #32]
 80015ac:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a5d      	ldr	r2, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0x36e>
 80015ba:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a5a      	ldr	r2, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	4b58      	ldr	r3, [pc, #352]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a57      	ldr	r2, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d015      	beq.n	8001606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fa97 	bl	8000b0c <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff fa93 	bl	8000b0c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0b1      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ee      	beq.n	80015e2 <HAL_RCC_OscConfig+0x37e>
 8001604:	e014      	b.n	8001630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fa81 	bl	8000b0c <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fa7d 	bl	8000b0c <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e09b      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ee      	bne.n	800160e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d105      	bne.n	8001642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8087 	beq.w	800175a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d061      	beq.n	800171c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d146      	bne.n	80016ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fa51 	bl	8000b0c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fa4d 	bl	8000b0c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e06d      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4921      	ldr	r1, [pc, #132]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a19      	ldr	r1, [r3, #32]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	430b      	orrs	r3, r1
 80016ba:	491b      	ldr	r1, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fa21 	bl	8000b0c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fa1d 	bl	8000b0c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e03d      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x46a>
 80016ec:	e035      	b.n	800175a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa0a 	bl	8000b0c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa06 	bl	8000b0c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e026      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x498>
 800171a:	e01e      	b.n	800175a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e019      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
 8001728:	40021000 	.word	0x40021000
 800172c:	40007000 	.word	0x40007000
 8001730:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x500>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	429a      	cmp	r2, r3
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0d0      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d910      	bls.n	80017ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0207 	bic.w	r2, r3, #7
 8001792:	4965      	ldr	r1, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d040      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d115      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e073      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06b      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4936      	ldr	r1, [pc, #216]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff f958 	bl	8000b0c <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff f954 	bl	8000b0c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e053      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d210      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4922      	ldr	r1, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f821 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	5ccb      	ldrb	r3, [r1, r3]
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1cc>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1d0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f8b6 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	08003b48 	.word	0x08003b48
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b04      	cmp	r3, #4
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x30>
 8001966:	2b08      	cmp	r3, #8
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x36>
 800196a:	e027      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800196e:	613b      	str	r3, [r7, #16]
      break;
 8001970:	e027      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0c9b      	lsrs	r3, r3, #18
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d010      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0c5b      	lsrs	r3, r3, #17
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800199e:	fb03 f202 	mul.w	r2, r3, r2
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e004      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	613b      	str	r3, [r7, #16]
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019be:	613b      	str	r3, [r7, #16]
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	693b      	ldr	r3, [r7, #16]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	08003b60 	.word	0x08003b60
 80019dc:	08003b70 	.word	0x08003b70
 80019e0:	003d0900 	.word	0x003d0900

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff2 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08003b58 	.word	0x08003b58

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08003b58 	.word	0x08003b58

08001a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <RCC_Delay+0x34>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <RCC_Delay+0x38>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0a5b      	lsrs	r3, r3, #9
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a64:	bf00      	nop
  }
  while (Delay --);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <RCC_Delay+0x1c>
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e042      	b.n	8001b1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe ff28 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	; 0x24
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fe57 	bl	800277c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d16d      	bne.n	8001c20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_UART_Transmit+0x2c>
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e066      	b.n	8001c22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2221      	movs	r2, #33	; 0x21
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b62:	f7fe ffd3 	bl	8000b0c <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	d108      	bne.n	8001b90 <HAL_UART_Transmit+0x6c>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	e003      	b.n	8001b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b98:	e02a      	b.n	8001bf0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fba6 	bl	80022f6 <UART_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e036      	b.n	8001c22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	e007      	b.n	8001be2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3301      	adds	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1cf      	bne.n	8001b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fb76 	bl	80022f6 <UART_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e006      	b.n	8001c22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b08a      	sub	sp, #40	; 0x28
 8001c2e:	af02      	add	r7, sp, #8
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d17c      	bne.n	8001d44 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_UART_Receive+0x2c>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e075      	b.n	8001d46 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2222      	movs	r2, #34	; 0x22
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe ff4d 	bl	8000b0c <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c88:	d108      	bne.n	8001c9c <HAL_UART_Receive+0x72>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d104      	bne.n	8001c9c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	e003      	b.n	8001ca4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ca4:	e043      	b.n	8001d2e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2120      	movs	r1, #32
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fb20 	bl	80022f6 <UART_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e042      	b.n	8001d46 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	e01f      	b.n	8001d20 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce8:	d007      	beq.n	8001cfa <HAL_UART_Receive+0xd0>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <HAL_UART_Receive+0xde>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e008      	b.n	8001d1a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1b6      	bne.n	8001ca6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d112      	bne.n	8001d8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_UART_Receive_IT+0x26>
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e00b      	b.n	8001d90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fb24 	bl	80023d2 <UART_Start_Receive_IT>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	e000      	b.n	8001d90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
  }
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ba      	sub	sp, #232	; 0xe8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_UART_IRQHandler+0x66>
 8001dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fc01 	bl	80025fe <UART_Receive_IT>
      return;
 8001dfc:	e25b      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80de 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x22c>
 8001e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80d1 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xae>
 8001e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
 8001e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_UART_IRQHandler+0xf6>
 8001e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f043 0204 	orr.w	r2, r3, #4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <HAL_UART_IRQHandler+0x126>
 8001e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f043 0208 	orr.w	r2, r3, #8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 81f2 	beq.w	80022ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x14e>
 8001ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fb8c 	bl	80025fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_UART_IRQHandler+0x17a>
 8001f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04f      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fa96 	bl	8002444 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d041      	beq.n	8001faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f34:	e853 3f00 	ldrex	r3, [r3]
 8001f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3314      	adds	r3, #20
 8001f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f62:	e841 2300 	strex	r3, r2, [r1]
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1d9      	bne.n	8001f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d013      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	; (8002178 <HAL_UART_IRQHandler+0x3e0>)
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe ff36 	bl	8000df8 <HAL_DMA_Abort_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	e00e      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f993 	bl	80022ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e00a      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f98f 	bl	80022ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	e006      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f98b 	bl	80022ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001fbe:	e175      	b.n	80022ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	bf00      	nop
    return;
 8001fc2:	e173      	b.n	80022ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f040 814f 	bne.w	800226c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8148 	beq.w	800226c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8141 	beq.w	800226c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80b6 	beq.w	800217c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800201c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8145 	beq.w	80022b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800202a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800202e:	429a      	cmp	r2, r3
 8002030:	f080 813e 	bcs.w	80022b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800203a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b20      	cmp	r3, #32
 8002044:	f000 8088 	beq.w	8002158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002074:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002080:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1d9      	bne.n	8002048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3314      	adds	r3, #20
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209e:	e853 3f00 	ldrex	r3, [r3]
 80020a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80020a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3314      	adds	r3, #20
 80020b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020c4:	e841 2300 	strex	r3, r2, [r1]
 80020c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e1      	bne.n	8002094 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3314      	adds	r3, #20
 80020d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020da:	e853 3f00 	ldrex	r3, [r3]
 80020de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3314      	adds	r3, #20
 80020f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e3      	bne.n	80020d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	f023 0310 	bic.w	r3, r3, #16
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800213a:	65ba      	str	r2, [r7, #88]	; 0x58
 800213c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fe15 	bl	8000d82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002166:	b29b      	uxth	r3, r3
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	b29b      	uxth	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8b6 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002174:	e09c      	b.n	80022b0 <HAL_UART_IRQHandler+0x518>
 8002176:	bf00      	nop
 8002178:	08002509 	.word	0x08002509
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808e 	beq.w	80022b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8089 	beq.w	80022b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	e853 3f00 	ldrex	r3, [r3]
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021c6:	647a      	str	r2, [r7, #68]	; 0x44
 80021c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e3      	bne.n	80021a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	623b      	str	r3, [r7, #32]
   return(result);
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e3      	bne.n	80021da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	330c      	adds	r3, #12
 8002240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002244:	61fa      	str	r2, [r7, #28]
 8002246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002248:	69b9      	ldr	r1, [r7, #24]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	617b      	str	r3, [r7, #20]
   return(result);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e3      	bne.n	8002220 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800225e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f83b 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800226a:	e023      	b.n	80022b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800226c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_UART_IRQHandler+0x4f4>
 8002278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f953 	bl	8002530 <UART_Transmit_IT>
    return;
 800228a:	e014      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800228c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <HAL_UART_IRQHandler+0x51e>
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f992 	bl	80025ce <UART_EndTransmit_IT>
    return;
 80022aa:	e004      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80022ac:	bf00      	nop
 80022ae:	e002      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022b4:	bf00      	nop
  }
}
 80022b6:	37e8      	adds	r7, #232	; 0xe8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b090      	sub	sp, #64	; 0x40
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002306:	e050      	b.n	80023aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d04c      	beq.n	80023aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <UART_WaitOnFlagUntilTimeout+0x30>
 8002316:	f7fe fbf9 	bl	8000b0c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002322:	429a      	cmp	r2, r3
 8002324:	d241      	bcs.n	80023aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002346:	637a      	str	r2, [r7, #52]	; 0x34
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800234c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800234e:	e841 2300 	strex	r3, r2, [r1]
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e5      	bne.n	8002326 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3314      	adds	r3, #20
 8002360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	e853 3f00 	ldrex	r3, [r3]
 8002368:	613b      	str	r3, [r7, #16]
   return(result);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3314      	adds	r3, #20
 8002378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237a:	623a      	str	r2, [r7, #32]
 800237c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237e:	69f9      	ldr	r1, [r7, #28]
 8002380:	6a3a      	ldr	r2, [r7, #32]
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	61bb      	str	r3, [r7, #24]
   return(result);
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e5      	bne.n	800235a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e00f      	b.n	80023ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d09f      	beq.n	8002308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3740      	adds	r7, #64	; 0x40
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2222      	movs	r2, #34	; 0x22
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b095      	sub	sp, #84	; 0x54
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	330c      	adds	r3, #12
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	e853 3f00 	ldrex	r3, [r3]
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246c:	643a      	str	r2, [r7, #64]	; 0x40
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e5      	bne.n	800244c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3314      	adds	r3, #20
 8002486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	e853 3f00 	ldrex	r3, [r3]
 800248e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3314      	adds	r3, #20
 800249e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e5      	bne.n	8002480 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d119      	bne.n	80024f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	330c      	adds	r3, #12
 80024c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	e853 3f00 	ldrex	r3, [r3]
 80024ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f023 0310 	bic.w	r3, r3, #16
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024dc:	61ba      	str	r2, [r7, #24]
 80024de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	e841 2300 	strex	r3, r2, [r1]
 80024e8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e5      	bne.n	80024bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024fe:	bf00      	nop
 8002500:	3754      	adds	r7, #84	; 0x54
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fed3 	bl	80022ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b21      	cmp	r3, #33	; 0x21
 8002542:	d13e      	bne.n	80025c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254c:	d114      	bne.n	8002578 <UART_Transmit_IT+0x48>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d110      	bne.n	8002578 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800256a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	621a      	str	r2, [r3, #32]
 8002576:	e008      	b.n	800258a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6211      	str	r1, [r2, #32]
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4619      	mov	r1, r3
 8002598:	84d1      	strh	r1, [r2, #38]	; 0x26
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fe64 	bl	80022bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08c      	sub	sp, #48	; 0x30
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b22      	cmp	r3, #34	; 0x22
 8002610:	f040 80ae 	bne.w	8002770 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261c:	d117      	bne.n	800264e <UART_Receive_IT+0x50>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d113      	bne.n	800264e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263c:	b29a      	uxth	r2, r3
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	1c9a      	adds	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
 800264c:	e026      	b.n	800269c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d007      	beq.n	8002672 <UART_Receive_IT+0x74>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <UART_Receive_IT+0x82>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e008      	b.n	8002692 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800268c:	b2da      	uxtb	r2, r3
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4619      	mov	r1, r3
 80026aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15d      	bne.n	800276c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0220 	bic.w	r2, r2, #32
 80026be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d135      	bne.n	8002762 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	e853 3f00 	ldrex	r3, [r3]
 800270a:	613b      	str	r3, [r7, #16]
   return(result);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f023 0310 	bic.w	r3, r3, #16
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	623a      	str	r2, [r7, #32]
 800271e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	69f9      	ldr	r1, [r7, #28]
 8002722:	6a3a      	ldr	r2, [r7, #32]
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	61bb      	str	r3, [r7, #24]
   return(result);
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e5      	bne.n	80026fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b10      	cmp	r3, #16
 800273c:	d10a      	bne.n	8002754 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fdc0 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
 8002760:	e002      	b.n	8002768 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fd fee0 	bl	8000528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e002      	b.n	8002772 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3730      	adds	r7, #48	; 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027b6:	f023 030c 	bic.w	r3, r3, #12
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <UART_SetConfig+0x114>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027e4:	f7ff f91c 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	e002      	b.n	80027f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027ec:	f7ff f904 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80027f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <UART_SetConfig+0x118>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	0119      	lsls	r1, r3, #4
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb2 f2f3 	udiv	r2, r2, r3
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <UART_SetConfig+0x118>)
 800282a:	fba3 0302 	umull	r0, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	3332      	adds	r3, #50	; 0x32
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <UART_SetConfig+0x118>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	4419      	add	r1, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009a      	lsls	r2, r3, #2
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <UART_SetConfig+0x118>)
 8002862:	fba3 0302 	umull	r0, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <UART_SetConfig+0x118>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	440a      	add	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40013800 	.word	0x40013800
 8002894:	51eb851f 	.word	0x51eb851f

08002898 <std>:
 8002898:	2300      	movs	r3, #0
 800289a:	b510      	push	{r4, lr}
 800289c:	4604      	mov	r4, r0
 800289e:	e9c0 3300 	strd	r3, r3, [r0]
 80028a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028a6:	6083      	str	r3, [r0, #8]
 80028a8:	8181      	strh	r1, [r0, #12]
 80028aa:	6643      	str	r3, [r0, #100]	; 0x64
 80028ac:	81c2      	strh	r2, [r0, #14]
 80028ae:	6183      	str	r3, [r0, #24]
 80028b0:	4619      	mov	r1, r3
 80028b2:	2208      	movs	r2, #8
 80028b4:	305c      	adds	r0, #92	; 0x5c
 80028b6:	f000 f9ca 	bl	8002c4e <memset>
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <std+0x58>)
 80028bc:	6224      	str	r4, [r4, #32]
 80028be:	6263      	str	r3, [r4, #36]	; 0x24
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <std+0x5c>)
 80028c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <std+0x60>)
 80028c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <std+0x64>)
 80028ca:	6323      	str	r3, [r4, #48]	; 0x30
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <std+0x68>)
 80028ce:	429c      	cmp	r4, r3
 80028d0:	d006      	beq.n	80028e0 <std+0x48>
 80028d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80028d6:	4294      	cmp	r4, r2
 80028d8:	d002      	beq.n	80028e0 <std+0x48>
 80028da:	33d0      	adds	r3, #208	; 0xd0
 80028dc:	429c      	cmp	r4, r3
 80028de:	d105      	bne.n	80028ec <std+0x54>
 80028e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e8:	f000 ba40 	b.w	8002d6c <__retarget_lock_init_recursive>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	bf00      	nop
 80028f0:	08002bc9 	.word	0x08002bc9
 80028f4:	08002beb 	.word	0x08002beb
 80028f8:	08002c23 	.word	0x08002c23
 80028fc:	08002c47 	.word	0x08002c47
 8002900:	20000924 	.word	0x20000924

08002904 <stdio_exit_handler>:
 8002904:	4a02      	ldr	r2, [pc, #8]	; (8002910 <stdio_exit_handler+0xc>)
 8002906:	4903      	ldr	r1, [pc, #12]	; (8002914 <stdio_exit_handler+0x10>)
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <stdio_exit_handler+0x14>)
 800290a:	f000 b869 	b.w	80029e0 <_fwalk_sglue>
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c
 8002914:	08003649 	.word	0x08003649
 8002918:	20000018 	.word	0x20000018

0800291c <cleanup_stdio>:
 800291c:	6841      	ldr	r1, [r0, #4]
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <cleanup_stdio+0x34>)
 8002920:	b510      	push	{r4, lr}
 8002922:	4299      	cmp	r1, r3
 8002924:	4604      	mov	r4, r0
 8002926:	d001      	beq.n	800292c <cleanup_stdio+0x10>
 8002928:	f000 fe8e 	bl	8003648 <_fflush_r>
 800292c:	68a1      	ldr	r1, [r4, #8]
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <cleanup_stdio+0x38>)
 8002930:	4299      	cmp	r1, r3
 8002932:	d002      	beq.n	800293a <cleanup_stdio+0x1e>
 8002934:	4620      	mov	r0, r4
 8002936:	f000 fe87 	bl	8003648 <_fflush_r>
 800293a:	68e1      	ldr	r1, [r4, #12]
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <cleanup_stdio+0x3c>)
 800293e:	4299      	cmp	r1, r3
 8002940:	d004      	beq.n	800294c <cleanup_stdio+0x30>
 8002942:	4620      	mov	r0, r4
 8002944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002948:	f000 be7e 	b.w	8003648 <_fflush_r>
 800294c:	bd10      	pop	{r4, pc}
 800294e:	bf00      	nop
 8002950:	20000924 	.word	0x20000924
 8002954:	2000098c 	.word	0x2000098c
 8002958:	200009f4 	.word	0x200009f4

0800295c <global_stdio_init.part.0>:
 800295c:	b510      	push	{r4, lr}
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <global_stdio_init.part.0+0x30>)
 8002960:	4c0b      	ldr	r4, [pc, #44]	; (8002990 <global_stdio_init.part.0+0x34>)
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <global_stdio_init.part.0+0x38>)
 8002964:	4620      	mov	r0, r4
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	2104      	movs	r1, #4
 800296a:	2200      	movs	r2, #0
 800296c:	f7ff ff94 	bl	8002898 <std>
 8002970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002974:	2201      	movs	r2, #1
 8002976:	2109      	movs	r1, #9
 8002978:	f7ff ff8e 	bl	8002898 <std>
 800297c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002980:	2202      	movs	r2, #2
 8002982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002986:	2112      	movs	r1, #18
 8002988:	f7ff bf86 	b.w	8002898 <std>
 800298c:	20000a5c 	.word	0x20000a5c
 8002990:	20000924 	.word	0x20000924
 8002994:	08002905 	.word	0x08002905

08002998 <__sfp_lock_acquire>:
 8002998:	4801      	ldr	r0, [pc, #4]	; (80029a0 <__sfp_lock_acquire+0x8>)
 800299a:	f000 b9e8 	b.w	8002d6e <__retarget_lock_acquire_recursive>
 800299e:	bf00      	nop
 80029a0:	20000a65 	.word	0x20000a65

080029a4 <__sfp_lock_release>:
 80029a4:	4801      	ldr	r0, [pc, #4]	; (80029ac <__sfp_lock_release+0x8>)
 80029a6:	f000 b9e3 	b.w	8002d70 <__retarget_lock_release_recursive>
 80029aa:	bf00      	nop
 80029ac:	20000a65 	.word	0x20000a65

080029b0 <__sinit>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	4604      	mov	r4, r0
 80029b4:	f7ff fff0 	bl	8002998 <__sfp_lock_acquire>
 80029b8:	6a23      	ldr	r3, [r4, #32]
 80029ba:	b11b      	cbz	r3, 80029c4 <__sinit+0x14>
 80029bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c0:	f7ff bff0 	b.w	80029a4 <__sfp_lock_release>
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__sinit+0x28>)
 80029c6:	6223      	str	r3, [r4, #32]
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <__sinit+0x2c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f5      	bne.n	80029bc <__sinit+0xc>
 80029d0:	f7ff ffc4 	bl	800295c <global_stdio_init.part.0>
 80029d4:	e7f2      	b.n	80029bc <__sinit+0xc>
 80029d6:	bf00      	nop
 80029d8:	0800291d 	.word	0x0800291d
 80029dc:	20000a5c 	.word	0x20000a5c

080029e0 <_fwalk_sglue>:
 80029e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e4:	4607      	mov	r7, r0
 80029e6:	4688      	mov	r8, r1
 80029e8:	4614      	mov	r4, r2
 80029ea:	2600      	movs	r6, #0
 80029ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029f0:	f1b9 0901 	subs.w	r9, r9, #1
 80029f4:	d505      	bpl.n	8002a02 <_fwalk_sglue+0x22>
 80029f6:	6824      	ldr	r4, [r4, #0]
 80029f8:	2c00      	cmp	r4, #0
 80029fa:	d1f7      	bne.n	80029ec <_fwalk_sglue+0xc>
 80029fc:	4630      	mov	r0, r6
 80029fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a02:	89ab      	ldrh	r3, [r5, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d907      	bls.n	8002a18 <_fwalk_sglue+0x38>
 8002a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	d003      	beq.n	8002a18 <_fwalk_sglue+0x38>
 8002a10:	4629      	mov	r1, r5
 8002a12:	4638      	mov	r0, r7
 8002a14:	47c0      	blx	r8
 8002a16:	4306      	orrs	r6, r0
 8002a18:	3568      	adds	r5, #104	; 0x68
 8002a1a:	e7e9      	b.n	80029f0 <_fwalk_sglue+0x10>

08002a1c <putchar>:
 8002a1c:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <putchar+0xc>)
 8002a1e:	4601      	mov	r1, r0
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	6882      	ldr	r2, [r0, #8]
 8002a24:	f000 be99 	b.w	800375a <_putc_r>
 8002a28:	20000064 	.word	0x20000064

08002a2c <setvbuf>:
 8002a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a30:	461d      	mov	r5, r3
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <setvbuf+0x158>)
 8002a34:	4604      	mov	r4, r0
 8002a36:	681f      	ldr	r7, [r3, #0]
 8002a38:	460e      	mov	r6, r1
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	b127      	cbz	r7, 8002a48 <setvbuf+0x1c>
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	b913      	cbnz	r3, 8002a48 <setvbuf+0x1c>
 8002a42:	4638      	mov	r0, r7
 8002a44:	f7ff ffb4 	bl	80029b0 <__sinit>
 8002a48:	f1b8 0f02 	cmp.w	r8, #2
 8002a4c:	d006      	beq.n	8002a5c <setvbuf+0x30>
 8002a4e:	f1b8 0f01 	cmp.w	r8, #1
 8002a52:	f200 8094 	bhi.w	8002b7e <setvbuf+0x152>
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	f2c0 8091 	blt.w	8002b7e <setvbuf+0x152>
 8002a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a5e:	07da      	lsls	r2, r3, #31
 8002a60:	d405      	bmi.n	8002a6e <setvbuf+0x42>
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	059b      	lsls	r3, r3, #22
 8002a66:	d402      	bmi.n	8002a6e <setvbuf+0x42>
 8002a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a6a:	f000 f980 	bl	8002d6e <__retarget_lock_acquire_recursive>
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4638      	mov	r0, r7
 8002a72:	f000 fde9 	bl	8003648 <_fflush_r>
 8002a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a78:	b141      	cbz	r1, 8002a8c <setvbuf+0x60>
 8002a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a7e:	4299      	cmp	r1, r3
 8002a80:	d002      	beq.n	8002a88 <setvbuf+0x5c>
 8002a82:	4638      	mov	r0, r7
 8002a84:	f000 f976 	bl	8002d74 <_free_r>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6363      	str	r3, [r4, #52]	; 0x34
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61a3      	str	r3, [r4, #24]
 8002a90:	6063      	str	r3, [r4, #4]
 8002a92:	89a3      	ldrh	r3, [r4, #12]
 8002a94:	0618      	lsls	r0, r3, #24
 8002a96:	d503      	bpl.n	8002aa0 <setvbuf+0x74>
 8002a98:	4638      	mov	r0, r7
 8002a9a:	6921      	ldr	r1, [r4, #16]
 8002a9c:	f000 f96a 	bl	8002d74 <_free_r>
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	f1b8 0f02 	cmp.w	r8, #2
 8002aa6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	d05f      	beq.n	8002b72 <setvbuf+0x146>
 8002ab2:	ab01      	add	r3, sp, #4
 8002ab4:	466a      	mov	r2, sp
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	4638      	mov	r0, r7
 8002aba:	f000 fded 	bl	8003698 <__swhatbuf_r>
 8002abe:	89a3      	ldrh	r3, [r4, #12]
 8002ac0:	4318      	orrs	r0, r3
 8002ac2:	81a0      	strh	r0, [r4, #12]
 8002ac4:	bb2d      	cbnz	r5, 8002b12 <setvbuf+0xe6>
 8002ac6:	9d00      	ldr	r5, [sp, #0]
 8002ac8:	4628      	mov	r0, r5
 8002aca:	f000 f99b 	bl	8002e04 <malloc>
 8002ace:	4606      	mov	r6, r0
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d150      	bne.n	8002b76 <setvbuf+0x14a>
 8002ad4:	f8dd 9000 	ldr.w	r9, [sp]
 8002ad8:	45a9      	cmp	r9, r5
 8002ada:	d13e      	bne.n	8002b5a <setvbuf+0x12e>
 8002adc:	f04f 35ff 	mov.w	r5, #4294967295
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60a2      	str	r2, [r4, #8]
 8002ae4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002ae8:	6022      	str	r2, [r4, #0]
 8002aea:	6122      	str	r2, [r4, #16]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002af2:	6162      	str	r2, [r4, #20]
 8002af4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	07d1      	lsls	r1, r2, #31
 8002afc:	81a3      	strh	r3, [r4, #12]
 8002afe:	d404      	bmi.n	8002b0a <setvbuf+0xde>
 8002b00:	059b      	lsls	r3, r3, #22
 8002b02:	d402      	bmi.n	8002b0a <setvbuf+0xde>
 8002b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b06:	f000 f933 	bl	8002d70 <__retarget_lock_release_recursive>
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	b003      	add	sp, #12
 8002b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b12:	2e00      	cmp	r6, #0
 8002b14:	d0d8      	beq.n	8002ac8 <setvbuf+0x9c>
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	b913      	cbnz	r3, 8002b20 <setvbuf+0xf4>
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f7ff ff48 	bl	80029b0 <__sinit>
 8002b20:	f1b8 0f01 	cmp.w	r8, #1
 8002b24:	bf08      	it	eq
 8002b26:	89a3      	ldrheq	r3, [r4, #12]
 8002b28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002b2c:	bf04      	itt	eq
 8002b2e:	f043 0301 	orreq.w	r3, r3, #1
 8002b32:	81a3      	strheq	r3, [r4, #12]
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	6026      	str	r6, [r4, #0]
 8002b38:	f013 0208 	ands.w	r2, r3, #8
 8002b3c:	d01d      	beq.n	8002b7a <setvbuf+0x14e>
 8002b3e:	07da      	lsls	r2, r3, #31
 8002b40:	bf41      	itttt	mi
 8002b42:	2200      	movmi	r2, #0
 8002b44:	426d      	negmi	r5, r5
 8002b46:	60a2      	strmi	r2, [r4, #8]
 8002b48:	61a5      	strmi	r5, [r4, #24]
 8002b4a:	bf58      	it	pl
 8002b4c:	60a5      	strpl	r5, [r4, #8]
 8002b4e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002b50:	f015 0501 	ands.w	r5, r5, #1
 8002b54:	d0d4      	beq.n	8002b00 <setvbuf+0xd4>
 8002b56:	2500      	movs	r5, #0
 8002b58:	e7d7      	b.n	8002b0a <setvbuf+0xde>
 8002b5a:	4648      	mov	r0, r9
 8002b5c:	f000 f952 	bl	8002e04 <malloc>
 8002b60:	4606      	mov	r6, r0
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d0ba      	beq.n	8002adc <setvbuf+0xb0>
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	464d      	mov	r5, r9
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6e:	81a3      	strh	r3, [r4, #12]
 8002b70:	e7d1      	b.n	8002b16 <setvbuf+0xea>
 8002b72:	2500      	movs	r5, #0
 8002b74:	e7b4      	b.n	8002ae0 <setvbuf+0xb4>
 8002b76:	46a9      	mov	r9, r5
 8002b78:	e7f5      	b.n	8002b66 <setvbuf+0x13a>
 8002b7a:	60a2      	str	r2, [r4, #8]
 8002b7c:	e7e7      	b.n	8002b4e <setvbuf+0x122>
 8002b7e:	f04f 35ff 	mov.w	r5, #4294967295
 8002b82:	e7c2      	b.n	8002b0a <setvbuf+0xde>
 8002b84:	20000064 	.word	0x20000064

08002b88 <siprintf>:
 8002b88:	b40e      	push	{r1, r2, r3}
 8002b8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b8e:	b500      	push	{lr}
 8002b90:	b09c      	sub	sp, #112	; 0x70
 8002b92:	ab1d      	add	r3, sp, #116	; 0x74
 8002b94:	9002      	str	r0, [sp, #8]
 8002b96:	9006      	str	r0, [sp, #24]
 8002b98:	9107      	str	r1, [sp, #28]
 8002b9a:	9104      	str	r1, [sp, #16]
 8002b9c:	4808      	ldr	r0, [pc, #32]	; (8002bc0 <siprintf+0x38>)
 8002b9e:	4909      	ldr	r1, [pc, #36]	; (8002bc4 <siprintf+0x3c>)
 8002ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba4:	9105      	str	r1, [sp, #20]
 8002ba6:	6800      	ldr	r0, [r0, #0]
 8002ba8:	a902      	add	r1, sp, #8
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	f000 fa38 	bl	8003020 <_svfiprintf_r>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	9b02      	ldr	r3, [sp, #8]
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	b01c      	add	sp, #112	; 0x70
 8002bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bbc:	b003      	add	sp, #12
 8002bbe:	4770      	bx	lr
 8002bc0:	20000064 	.word	0x20000064
 8002bc4:	ffff0208 	.word	0xffff0208

08002bc8 <__sread>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	460c      	mov	r4, r1
 8002bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd0:	f000 f87e 	bl	8002cd0 <_read_r>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	bfab      	itete	ge
 8002bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bda:	89a3      	ldrhlt	r3, [r4, #12]
 8002bdc:	181b      	addge	r3, r3, r0
 8002bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002be2:	bfac      	ite	ge
 8002be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002be6:	81a3      	strhlt	r3, [r4, #12]
 8002be8:	bd10      	pop	{r4, pc}

08002bea <__swrite>:
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	461f      	mov	r7, r3
 8002bf0:	898b      	ldrh	r3, [r1, #12]
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	d505      	bpl.n	8002c08 <__swrite+0x1e>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c04:	f000 f852 	bl	8002cac <_lseek_r>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	4632      	mov	r2, r6
 8002c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c10:	81a3      	strh	r3, [r4, #12]
 8002c12:	4628      	mov	r0, r5
 8002c14:	463b      	mov	r3, r7
 8002c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1e:	f000 b869 	b.w	8002cf4 <_write_r>

08002c22 <__sseek>:
 8002c22:	b510      	push	{r4, lr}
 8002c24:	460c      	mov	r4, r1
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 f83f 	bl	8002cac <_lseek_r>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	bf15      	itete	ne
 8002c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c3e:	81a3      	strheq	r3, [r4, #12]
 8002c40:	bf18      	it	ne
 8002c42:	81a3      	strhne	r3, [r4, #12]
 8002c44:	bd10      	pop	{r4, pc}

08002c46 <__sclose>:
 8002c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4a:	f000 b81f 	b.w	8002c8c <_close_r>

08002c4e <memset>:
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4402      	add	r2, r0
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d100      	bne.n	8002c58 <memset+0xa>
 8002c56:	4770      	bx	lr
 8002c58:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5c:	e7f9      	b.n	8002c52 <memset+0x4>

08002c5e <strstr>:
 8002c5e:	780a      	ldrb	r2, [r1, #0]
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	b96a      	cbnz	r2, 8002c80 <strstr+0x22>
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d109      	bne.n	8002c7e <strstr+0x20>
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f6      	beq.n	8002c64 <strstr+0x6>
 8002c76:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002c7a:	429e      	cmp	r6, r3
 8002c7c:	d0f7      	beq.n	8002c6e <strstr+0x10>
 8002c7e:	3001      	adds	r0, #1
 8002c80:	7803      	ldrb	r3, [r0, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ef      	bne.n	8002c66 <strstr+0x8>
 8002c86:	4618      	mov	r0, r3
 8002c88:	e7ec      	b.n	8002c64 <strstr+0x6>
	...

08002c8c <_close_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4d05      	ldr	r5, [pc, #20]	; (8002ca8 <_close_r+0x1c>)
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	f7fd fd72 	bl	8000780 <_close>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d102      	bne.n	8002ca6 <_close_r+0x1a>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <_close_r+0x1a>
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000a60 	.word	0x20000a60

08002cac <_lseek_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4604      	mov	r4, r0
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4d05      	ldr	r5, [pc, #20]	; (8002ccc <_lseek_r+0x20>)
 8002cb8:	602a      	str	r2, [r5, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7fd fd84 	bl	80007c8 <_lseek>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d102      	bne.n	8002cca <_lseek_r+0x1e>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	b103      	cbz	r3, 8002cca <_lseek_r+0x1e>
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	20000a60 	.word	0x20000a60

08002cd0 <_read_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4d05      	ldr	r5, [pc, #20]	; (8002cf0 <_read_r+0x20>)
 8002cdc:	602a      	str	r2, [r5, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7fd fac0 	bl	8000264 <_read>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_read_r+0x1e>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_read_r+0x1e>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	20000a60 	.word	0x20000a60

08002cf4 <_write_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4d05      	ldr	r5, [pc, #20]	; (8002d14 <_write_r+0x20>)
 8002d00:	602a      	str	r2, [r5, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7fd fa98 	bl	8000238 <_write>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_write_r+0x1e>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_write_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	20000a60 	.word	0x20000a60

08002d18 <__errno>:
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <__errno+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000064 	.word	0x20000064

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	2600      	movs	r6, #0
 8002d28:	4d0c      	ldr	r5, [pc, #48]	; (8002d5c <__libc_init_array+0x38>)
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	42a6      	cmp	r6, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	f000 fe7a 	bl	8003a2c <_init>
 8002d38:	2600      	movs	r6, #0
 8002d3a:	4d0a      	ldr	r5, [pc, #40]	; (8002d64 <__libc_init_array+0x40>)
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <__libc_init_array+0x44>)
 8002d3e:	1b64      	subs	r4, r4, r5
 8002d40:	10a4      	asrs	r4, r4, #2
 8002d42:	42a6      	cmp	r6, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4c:	4798      	blx	r3
 8002d4e:	3601      	adds	r6, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d56:	4798      	blx	r3
 8002d58:	3601      	adds	r6, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08003ba8 	.word	0x08003ba8
 8002d60:	08003ba8 	.word	0x08003ba8
 8002d64:	08003ba8 	.word	0x08003ba8
 8002d68:	08003bac 	.word	0x08003bac

08002d6c <__retarget_lock_init_recursive>:
 8002d6c:	4770      	bx	lr

08002d6e <__retarget_lock_acquire_recursive>:
 8002d6e:	4770      	bx	lr

08002d70 <__retarget_lock_release_recursive>:
 8002d70:	4770      	bx	lr
	...

08002d74 <_free_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4605      	mov	r5, r0
 8002d78:	2900      	cmp	r1, #0
 8002d7a:	d040      	beq.n	8002dfe <_free_r+0x8a>
 8002d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d80:	1f0c      	subs	r4, r1, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bfb8      	it	lt
 8002d86:	18e4      	addlt	r4, r4, r3
 8002d88:	f000 f8e4 	bl	8002f54 <__malloc_lock>
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <_free_r+0x8c>)
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	b933      	cbnz	r3, 8002da0 <_free_r+0x2c>
 8002d92:	6063      	str	r3, [r4, #4]
 8002d94:	6014      	str	r4, [r2, #0]
 8002d96:	4628      	mov	r0, r5
 8002d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d9c:	f000 b8e0 	b.w	8002f60 <__malloc_unlock>
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	d908      	bls.n	8002db6 <_free_r+0x42>
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	1821      	adds	r1, r4, r0
 8002da8:	428b      	cmp	r3, r1
 8002daa:	bf01      	itttt	eq
 8002dac:	6819      	ldreq	r1, [r3, #0]
 8002dae:	685b      	ldreq	r3, [r3, #4]
 8002db0:	1809      	addeq	r1, r1, r0
 8002db2:	6021      	streq	r1, [r4, #0]
 8002db4:	e7ed      	b.n	8002d92 <_free_r+0x1e>
 8002db6:	461a      	mov	r2, r3
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b10b      	cbz	r3, 8002dc0 <_free_r+0x4c>
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	d9fa      	bls.n	8002db6 <_free_r+0x42>
 8002dc0:	6811      	ldr	r1, [r2, #0]
 8002dc2:	1850      	adds	r0, r2, r1
 8002dc4:	42a0      	cmp	r0, r4
 8002dc6:	d10b      	bne.n	8002de0 <_free_r+0x6c>
 8002dc8:	6820      	ldr	r0, [r4, #0]
 8002dca:	4401      	add	r1, r0
 8002dcc:	1850      	adds	r0, r2, r1
 8002dce:	4283      	cmp	r3, r0
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	d1e0      	bne.n	8002d96 <_free_r+0x22>
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4408      	add	r0, r1
 8002dda:	6010      	str	r0, [r2, #0]
 8002ddc:	6053      	str	r3, [r2, #4]
 8002dde:	e7da      	b.n	8002d96 <_free_r+0x22>
 8002de0:	d902      	bls.n	8002de8 <_free_r+0x74>
 8002de2:	230c      	movs	r3, #12
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	e7d6      	b.n	8002d96 <_free_r+0x22>
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	1821      	adds	r1, r4, r0
 8002dec:	428b      	cmp	r3, r1
 8002dee:	bf01      	itttt	eq
 8002df0:	6819      	ldreq	r1, [r3, #0]
 8002df2:	685b      	ldreq	r3, [r3, #4]
 8002df4:	1809      	addeq	r1, r1, r0
 8002df6:	6021      	streq	r1, [r4, #0]
 8002df8:	6063      	str	r3, [r4, #4]
 8002dfa:	6054      	str	r4, [r2, #4]
 8002dfc:	e7cb      	b.n	8002d96 <_free_r+0x22>
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	20000a68 	.word	0x20000a68

08002e04 <malloc>:
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <malloc+0xc>)
 8002e06:	4601      	mov	r1, r0
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	f000 b823 	b.w	8002e54 <_malloc_r>
 8002e0e:	bf00      	nop
 8002e10:	20000064 	.word	0x20000064

08002e14 <sbrk_aligned>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4e0e      	ldr	r6, [pc, #56]	; (8002e50 <sbrk_aligned+0x3c>)
 8002e18:	460c      	mov	r4, r1
 8002e1a:	6831      	ldr	r1, [r6, #0]
 8002e1c:	4605      	mov	r5, r0
 8002e1e:	b911      	cbnz	r1, 8002e26 <sbrk_aligned+0x12>
 8002e20:	f000 fda0 	bl	8003964 <_sbrk_r>
 8002e24:	6030      	str	r0, [r6, #0]
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 fd9b 	bl	8003964 <_sbrk_r>
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	d00a      	beq.n	8002e48 <sbrk_aligned+0x34>
 8002e32:	1cc4      	adds	r4, r0, #3
 8002e34:	f024 0403 	bic.w	r4, r4, #3
 8002e38:	42a0      	cmp	r0, r4
 8002e3a:	d007      	beq.n	8002e4c <sbrk_aligned+0x38>
 8002e3c:	1a21      	subs	r1, r4, r0
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 fd90 	bl	8003964 <_sbrk_r>
 8002e44:	3001      	adds	r0, #1
 8002e46:	d101      	bne.n	8002e4c <sbrk_aligned+0x38>
 8002e48:	f04f 34ff 	mov.w	r4, #4294967295
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	20000a6c 	.word	0x20000a6c

08002e54 <_malloc_r>:
 8002e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e58:	1ccd      	adds	r5, r1, #3
 8002e5a:	f025 0503 	bic.w	r5, r5, #3
 8002e5e:	3508      	adds	r5, #8
 8002e60:	2d0c      	cmp	r5, #12
 8002e62:	bf38      	it	cc
 8002e64:	250c      	movcc	r5, #12
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	4607      	mov	r7, r0
 8002e6a:	db01      	blt.n	8002e70 <_malloc_r+0x1c>
 8002e6c:	42a9      	cmp	r1, r5
 8002e6e:	d905      	bls.n	8002e7c <_malloc_r+0x28>
 8002e70:	230c      	movs	r3, #12
 8002e72:	2600      	movs	r6, #0
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4630      	mov	r0, r6
 8002e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f50 <_malloc_r+0xfc>
 8002e80:	f000 f868 	bl	8002f54 <__malloc_lock>
 8002e84:	f8d8 3000 	ldr.w	r3, [r8]
 8002e88:	461c      	mov	r4, r3
 8002e8a:	bb5c      	cbnz	r4, 8002ee4 <_malloc_r+0x90>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4638      	mov	r0, r7
 8002e90:	f7ff ffc0 	bl	8002e14 <sbrk_aligned>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	4604      	mov	r4, r0
 8002e98:	d155      	bne.n	8002f46 <_malloc_r+0xf2>
 8002e9a:	f8d8 4000 	ldr.w	r4, [r8]
 8002e9e:	4626      	mov	r6, r4
 8002ea0:	2e00      	cmp	r6, #0
 8002ea2:	d145      	bne.n	8002f30 <_malloc_r+0xdc>
 8002ea4:	2c00      	cmp	r4, #0
 8002ea6:	d048      	beq.n	8002f3a <_malloc_r+0xe6>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	4631      	mov	r1, r6
 8002eac:	4638      	mov	r0, r7
 8002eae:	eb04 0903 	add.w	r9, r4, r3
 8002eb2:	f000 fd57 	bl	8003964 <_sbrk_r>
 8002eb6:	4581      	cmp	r9, r0
 8002eb8:	d13f      	bne.n	8002f3a <_malloc_r+0xe6>
 8002eba:	6821      	ldr	r1, [r4, #0]
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	1a6d      	subs	r5, r5, r1
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7ff ffa7 	bl	8002e14 <sbrk_aligned>
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d037      	beq.n	8002f3a <_malloc_r+0xe6>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	442b      	add	r3, r5
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d038      	beq.n	8002f4a <_malloc_r+0xf6>
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	42a2      	cmp	r2, r4
 8002edc:	d12b      	bne.n	8002f36 <_malloc_r+0xe2>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e00f      	b.n	8002f04 <_malloc_r+0xb0>
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	1b52      	subs	r2, r2, r5
 8002ee8:	d41f      	bmi.n	8002f2a <_malloc_r+0xd6>
 8002eea:	2a0b      	cmp	r2, #11
 8002eec:	d917      	bls.n	8002f1e <_malloc_r+0xca>
 8002eee:	1961      	adds	r1, r4, r5
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	6025      	str	r5, [r4, #0]
 8002ef4:	bf18      	it	ne
 8002ef6:	6059      	strne	r1, [r3, #4]
 8002ef8:	6863      	ldr	r3, [r4, #4]
 8002efa:	bf08      	it	eq
 8002efc:	f8c8 1000 	streq.w	r1, [r8]
 8002f00:	5162      	str	r2, [r4, r5]
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	4638      	mov	r0, r7
 8002f06:	f104 060b 	add.w	r6, r4, #11
 8002f0a:	f000 f829 	bl	8002f60 <__malloc_unlock>
 8002f0e:	f026 0607 	bic.w	r6, r6, #7
 8002f12:	1d23      	adds	r3, r4, #4
 8002f14:	1af2      	subs	r2, r6, r3
 8002f16:	d0ae      	beq.n	8002e76 <_malloc_r+0x22>
 8002f18:	1b9b      	subs	r3, r3, r6
 8002f1a:	50a3      	str	r3, [r4, r2]
 8002f1c:	e7ab      	b.n	8002e76 <_malloc_r+0x22>
 8002f1e:	42a3      	cmp	r3, r4
 8002f20:	6862      	ldr	r2, [r4, #4]
 8002f22:	d1dd      	bne.n	8002ee0 <_malloc_r+0x8c>
 8002f24:	f8c8 2000 	str.w	r2, [r8]
 8002f28:	e7ec      	b.n	8002f04 <_malloc_r+0xb0>
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	6864      	ldr	r4, [r4, #4]
 8002f2e:	e7ac      	b.n	8002e8a <_malloc_r+0x36>
 8002f30:	4634      	mov	r4, r6
 8002f32:	6876      	ldr	r6, [r6, #4]
 8002f34:	e7b4      	b.n	8002ea0 <_malloc_r+0x4c>
 8002f36:	4613      	mov	r3, r2
 8002f38:	e7cc      	b.n	8002ed4 <_malloc_r+0x80>
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	f000 f80e 	bl	8002f60 <__malloc_unlock>
 8002f44:	e797      	b.n	8002e76 <_malloc_r+0x22>
 8002f46:	6025      	str	r5, [r4, #0]
 8002f48:	e7dc      	b.n	8002f04 <_malloc_r+0xb0>
 8002f4a:	605b      	str	r3, [r3, #4]
 8002f4c:	deff      	udf	#255	; 0xff
 8002f4e:	bf00      	nop
 8002f50:	20000a68 	.word	0x20000a68

08002f54 <__malloc_lock>:
 8002f54:	4801      	ldr	r0, [pc, #4]	; (8002f5c <__malloc_lock+0x8>)
 8002f56:	f7ff bf0a 	b.w	8002d6e <__retarget_lock_acquire_recursive>
 8002f5a:	bf00      	nop
 8002f5c:	20000a64 	.word	0x20000a64

08002f60 <__malloc_unlock>:
 8002f60:	4801      	ldr	r0, [pc, #4]	; (8002f68 <__malloc_unlock+0x8>)
 8002f62:	f7ff bf05 	b.w	8002d70 <__retarget_lock_release_recursive>
 8002f66:	bf00      	nop
 8002f68:	20000a64 	.word	0x20000a64

08002f6c <__ssputs_r>:
 8002f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	461f      	mov	r7, r3
 8002f72:	688e      	ldr	r6, [r1, #8]
 8002f74:	4682      	mov	sl, r0
 8002f76:	42be      	cmp	r6, r7
 8002f78:	460c      	mov	r4, r1
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	680b      	ldr	r3, [r1, #0]
 8002f7e:	d82c      	bhi.n	8002fda <__ssputs_r+0x6e>
 8002f80:	898a      	ldrh	r2, [r1, #12]
 8002f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f86:	d026      	beq.n	8002fd6 <__ssputs_r+0x6a>
 8002f88:	6965      	ldr	r5, [r4, #20]
 8002f8a:	6909      	ldr	r1, [r1, #16]
 8002f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f90:	eba3 0901 	sub.w	r9, r3, r1
 8002f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f98:	1c7b      	adds	r3, r7, #1
 8002f9a:	444b      	add	r3, r9
 8002f9c:	106d      	asrs	r5, r5, #1
 8002f9e:	429d      	cmp	r5, r3
 8002fa0:	bf38      	it	cc
 8002fa2:	461d      	movcc	r5, r3
 8002fa4:	0553      	lsls	r3, r2, #21
 8002fa6:	d527      	bpl.n	8002ff8 <__ssputs_r+0x8c>
 8002fa8:	4629      	mov	r1, r5
 8002faa:	f7ff ff53 	bl	8002e54 <_malloc_r>
 8002fae:	4606      	mov	r6, r0
 8002fb0:	b360      	cbz	r0, 800300c <__ssputs_r+0xa0>
 8002fb2:	464a      	mov	r2, r9
 8002fb4:	6921      	ldr	r1, [r4, #16]
 8002fb6:	f000 fcf3 	bl	80039a0 <memcpy>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	6126      	str	r6, [r4, #16]
 8002fc8:	444e      	add	r6, r9
 8002fca:	6026      	str	r6, [r4, #0]
 8002fcc:	463e      	mov	r6, r7
 8002fce:	6165      	str	r5, [r4, #20]
 8002fd0:	eba5 0509 	sub.w	r5, r5, r9
 8002fd4:	60a5      	str	r5, [r4, #8]
 8002fd6:	42be      	cmp	r6, r7
 8002fd8:	d900      	bls.n	8002fdc <__ssputs_r+0x70>
 8002fda:	463e      	mov	r6, r7
 8002fdc:	4632      	mov	r2, r6
 8002fde:	4641      	mov	r1, r8
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	f000 fc83 	bl	80038ec <memmove>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	68a3      	ldr	r3, [r4, #8]
 8002fea:	1b9b      	subs	r3, r3, r6
 8002fec:	60a3      	str	r3, [r4, #8]
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	4433      	add	r3, r6
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff8:	462a      	mov	r2, r5
 8002ffa:	f000 fcdf 	bl	80039bc <_realloc_r>
 8002ffe:	4606      	mov	r6, r0
 8003000:	2800      	cmp	r0, #0
 8003002:	d1e0      	bne.n	8002fc6 <__ssputs_r+0x5a>
 8003004:	4650      	mov	r0, sl
 8003006:	6921      	ldr	r1, [r4, #16]
 8003008:	f7ff feb4 	bl	8002d74 <_free_r>
 800300c:	230c      	movs	r3, #12
 800300e:	f8ca 3000 	str.w	r3, [sl]
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	e7e9      	b.n	8002ff4 <__ssputs_r+0x88>

08003020 <_svfiprintf_r>:
 8003020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003024:	4698      	mov	r8, r3
 8003026:	898b      	ldrh	r3, [r1, #12]
 8003028:	4607      	mov	r7, r0
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	460d      	mov	r5, r1
 800302e:	4614      	mov	r4, r2
 8003030:	b09d      	sub	sp, #116	; 0x74
 8003032:	d50e      	bpl.n	8003052 <_svfiprintf_r+0x32>
 8003034:	690b      	ldr	r3, [r1, #16]
 8003036:	b963      	cbnz	r3, 8003052 <_svfiprintf_r+0x32>
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	f7ff ff0b 	bl	8002e54 <_malloc_r>
 800303e:	6028      	str	r0, [r5, #0]
 8003040:	6128      	str	r0, [r5, #16]
 8003042:	b920      	cbnz	r0, 800304e <_svfiprintf_r+0x2e>
 8003044:	230c      	movs	r3, #12
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	e0d0      	b.n	80031f0 <_svfiprintf_r+0x1d0>
 800304e:	2340      	movs	r3, #64	; 0x40
 8003050:	616b      	str	r3, [r5, #20]
 8003052:	2300      	movs	r3, #0
 8003054:	9309      	str	r3, [sp, #36]	; 0x24
 8003056:	2320      	movs	r3, #32
 8003058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800305c:	2330      	movs	r3, #48	; 0x30
 800305e:	f04f 0901 	mov.w	r9, #1
 8003062:	f8cd 800c 	str.w	r8, [sp, #12]
 8003066:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003208 <_svfiprintf_r+0x1e8>
 800306a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800306e:	4623      	mov	r3, r4
 8003070:	469a      	mov	sl, r3
 8003072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003076:	b10a      	cbz	r2, 800307c <_svfiprintf_r+0x5c>
 8003078:	2a25      	cmp	r2, #37	; 0x25
 800307a:	d1f9      	bne.n	8003070 <_svfiprintf_r+0x50>
 800307c:	ebba 0b04 	subs.w	fp, sl, r4
 8003080:	d00b      	beq.n	800309a <_svfiprintf_r+0x7a>
 8003082:	465b      	mov	r3, fp
 8003084:	4622      	mov	r2, r4
 8003086:	4629      	mov	r1, r5
 8003088:	4638      	mov	r0, r7
 800308a:	f7ff ff6f 	bl	8002f6c <__ssputs_r>
 800308e:	3001      	adds	r0, #1
 8003090:	f000 80a9 	beq.w	80031e6 <_svfiprintf_r+0x1c6>
 8003094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003096:	445a      	add	r2, fp
 8003098:	9209      	str	r2, [sp, #36]	; 0x24
 800309a:	f89a 3000 	ldrb.w	r3, [sl]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80a1 	beq.w	80031e6 <_svfiprintf_r+0x1c6>
 80030a4:	2300      	movs	r3, #0
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ae:	f10a 0a01 	add.w	sl, sl, #1
 80030b2:	9304      	str	r3, [sp, #16]
 80030b4:	9307      	str	r3, [sp, #28]
 80030b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030ba:	931a      	str	r3, [sp, #104]	; 0x68
 80030bc:	4654      	mov	r4, sl
 80030be:	2205      	movs	r2, #5
 80030c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c4:	4850      	ldr	r0, [pc, #320]	; (8003208 <_svfiprintf_r+0x1e8>)
 80030c6:	f000 fc5d 	bl	8003984 <memchr>
 80030ca:	9a04      	ldr	r2, [sp, #16]
 80030cc:	b9d8      	cbnz	r0, 8003106 <_svfiprintf_r+0xe6>
 80030ce:	06d0      	lsls	r0, r2, #27
 80030d0:	bf44      	itt	mi
 80030d2:	2320      	movmi	r3, #32
 80030d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030d8:	0711      	lsls	r1, r2, #28
 80030da:	bf44      	itt	mi
 80030dc:	232b      	movmi	r3, #43	; 0x2b
 80030de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030e2:	f89a 3000 	ldrb.w	r3, [sl]
 80030e6:	2b2a      	cmp	r3, #42	; 0x2a
 80030e8:	d015      	beq.n	8003116 <_svfiprintf_r+0xf6>
 80030ea:	4654      	mov	r4, sl
 80030ec:	2000      	movs	r0, #0
 80030ee:	f04f 0c0a 	mov.w	ip, #10
 80030f2:	9a07      	ldr	r2, [sp, #28]
 80030f4:	4621      	mov	r1, r4
 80030f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030fa:	3b30      	subs	r3, #48	; 0x30
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d94d      	bls.n	800319c <_svfiprintf_r+0x17c>
 8003100:	b1b0      	cbz	r0, 8003130 <_svfiprintf_r+0x110>
 8003102:	9207      	str	r2, [sp, #28]
 8003104:	e014      	b.n	8003130 <_svfiprintf_r+0x110>
 8003106:	eba0 0308 	sub.w	r3, r0, r8
 800310a:	fa09 f303 	lsl.w	r3, r9, r3
 800310e:	4313      	orrs	r3, r2
 8003110:	46a2      	mov	sl, r4
 8003112:	9304      	str	r3, [sp, #16]
 8003114:	e7d2      	b.n	80030bc <_svfiprintf_r+0x9c>
 8003116:	9b03      	ldr	r3, [sp, #12]
 8003118:	1d19      	adds	r1, r3, #4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	9103      	str	r1, [sp, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	bfbb      	ittet	lt
 8003122:	425b      	neglt	r3, r3
 8003124:	f042 0202 	orrlt.w	r2, r2, #2
 8003128:	9307      	strge	r3, [sp, #28]
 800312a:	9307      	strlt	r3, [sp, #28]
 800312c:	bfb8      	it	lt
 800312e:	9204      	strlt	r2, [sp, #16]
 8003130:	7823      	ldrb	r3, [r4, #0]
 8003132:	2b2e      	cmp	r3, #46	; 0x2e
 8003134:	d10c      	bne.n	8003150 <_svfiprintf_r+0x130>
 8003136:	7863      	ldrb	r3, [r4, #1]
 8003138:	2b2a      	cmp	r3, #42	; 0x2a
 800313a:	d134      	bne.n	80031a6 <_svfiprintf_r+0x186>
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	3402      	adds	r4, #2
 8003140:	1d1a      	adds	r2, r3, #4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	9203      	str	r2, [sp, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	bfb8      	it	lt
 800314a:	f04f 33ff 	movlt.w	r3, #4294967295
 800314e:	9305      	str	r3, [sp, #20]
 8003150:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800320c <_svfiprintf_r+0x1ec>
 8003154:	2203      	movs	r2, #3
 8003156:	4650      	mov	r0, sl
 8003158:	7821      	ldrb	r1, [r4, #0]
 800315a:	f000 fc13 	bl	8003984 <memchr>
 800315e:	b138      	cbz	r0, 8003170 <_svfiprintf_r+0x150>
 8003160:	2240      	movs	r2, #64	; 0x40
 8003162:	9b04      	ldr	r3, [sp, #16]
 8003164:	eba0 000a 	sub.w	r0, r0, sl
 8003168:	4082      	lsls	r2, r0
 800316a:	4313      	orrs	r3, r2
 800316c:	3401      	adds	r4, #1
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003174:	2206      	movs	r2, #6
 8003176:	4826      	ldr	r0, [pc, #152]	; (8003210 <_svfiprintf_r+0x1f0>)
 8003178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800317c:	f000 fc02 	bl	8003984 <memchr>
 8003180:	2800      	cmp	r0, #0
 8003182:	d038      	beq.n	80031f6 <_svfiprintf_r+0x1d6>
 8003184:	4b23      	ldr	r3, [pc, #140]	; (8003214 <_svfiprintf_r+0x1f4>)
 8003186:	bb1b      	cbnz	r3, 80031d0 <_svfiprintf_r+0x1b0>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	3307      	adds	r3, #7
 800318c:	f023 0307 	bic.w	r3, r3, #7
 8003190:	3308      	adds	r3, #8
 8003192:	9303      	str	r3, [sp, #12]
 8003194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003196:	4433      	add	r3, r6
 8003198:	9309      	str	r3, [sp, #36]	; 0x24
 800319a:	e768      	b.n	800306e <_svfiprintf_r+0x4e>
 800319c:	460c      	mov	r4, r1
 800319e:	2001      	movs	r0, #1
 80031a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80031a4:	e7a6      	b.n	80030f4 <_svfiprintf_r+0xd4>
 80031a6:	2300      	movs	r3, #0
 80031a8:	f04f 0c0a 	mov.w	ip, #10
 80031ac:	4619      	mov	r1, r3
 80031ae:	3401      	adds	r4, #1
 80031b0:	9305      	str	r3, [sp, #20]
 80031b2:	4620      	mov	r0, r4
 80031b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031b8:	3a30      	subs	r2, #48	; 0x30
 80031ba:	2a09      	cmp	r2, #9
 80031bc:	d903      	bls.n	80031c6 <_svfiprintf_r+0x1a6>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0c6      	beq.n	8003150 <_svfiprintf_r+0x130>
 80031c2:	9105      	str	r1, [sp, #20]
 80031c4:	e7c4      	b.n	8003150 <_svfiprintf_r+0x130>
 80031c6:	4604      	mov	r4, r0
 80031c8:	2301      	movs	r3, #1
 80031ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ce:	e7f0      	b.n	80031b2 <_svfiprintf_r+0x192>
 80031d0:	ab03      	add	r3, sp, #12
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	462a      	mov	r2, r5
 80031d6:	4638      	mov	r0, r7
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <_svfiprintf_r+0x1f8>)
 80031da:	a904      	add	r1, sp, #16
 80031dc:	f3af 8000 	nop.w
 80031e0:	1c42      	adds	r2, r0, #1
 80031e2:	4606      	mov	r6, r0
 80031e4:	d1d6      	bne.n	8003194 <_svfiprintf_r+0x174>
 80031e6:	89ab      	ldrh	r3, [r5, #12]
 80031e8:	065b      	lsls	r3, r3, #25
 80031ea:	f53f af2d 	bmi.w	8003048 <_svfiprintf_r+0x28>
 80031ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031f0:	b01d      	add	sp, #116	; 0x74
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	ab03      	add	r3, sp, #12
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	462a      	mov	r2, r5
 80031fc:	4638      	mov	r0, r7
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <_svfiprintf_r+0x1f8>)
 8003200:	a904      	add	r1, sp, #16
 8003202:	f000 f87d 	bl	8003300 <_printf_i>
 8003206:	e7eb      	b.n	80031e0 <_svfiprintf_r+0x1c0>
 8003208:	08003b72 	.word	0x08003b72
 800320c:	08003b78 	.word	0x08003b78
 8003210:	08003b7c 	.word	0x08003b7c
 8003214:	00000000 	.word	0x00000000
 8003218:	08002f6d 	.word	0x08002f6d

0800321c <_printf_common>:
 800321c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	4616      	mov	r6, r2
 8003222:	4699      	mov	r9, r3
 8003224:	688a      	ldr	r2, [r1, #8]
 8003226:	690b      	ldr	r3, [r1, #16]
 8003228:	4607      	mov	r7, r0
 800322a:	4293      	cmp	r3, r2
 800322c:	bfb8      	it	lt
 800322e:	4613      	movlt	r3, r2
 8003230:	6033      	str	r3, [r6, #0]
 8003232:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003236:	460c      	mov	r4, r1
 8003238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800323c:	b10a      	cbz	r2, 8003242 <_printf_common+0x26>
 800323e:	3301      	adds	r3, #1
 8003240:	6033      	str	r3, [r6, #0]
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	0699      	lsls	r1, r3, #26
 8003246:	bf42      	ittt	mi
 8003248:	6833      	ldrmi	r3, [r6, #0]
 800324a:	3302      	addmi	r3, #2
 800324c:	6033      	strmi	r3, [r6, #0]
 800324e:	6825      	ldr	r5, [r4, #0]
 8003250:	f015 0506 	ands.w	r5, r5, #6
 8003254:	d106      	bne.n	8003264 <_printf_common+0x48>
 8003256:	f104 0a19 	add.w	sl, r4, #25
 800325a:	68e3      	ldr	r3, [r4, #12]
 800325c:	6832      	ldr	r2, [r6, #0]
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	42ab      	cmp	r3, r5
 8003262:	dc2b      	bgt.n	80032bc <_printf_common+0xa0>
 8003264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003268:	1e13      	subs	r3, r2, #0
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	bf18      	it	ne
 800326e:	2301      	movne	r3, #1
 8003270:	0692      	lsls	r2, r2, #26
 8003272:	d430      	bmi.n	80032d6 <_printf_common+0xba>
 8003274:	4649      	mov	r1, r9
 8003276:	4638      	mov	r0, r7
 8003278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800327c:	47c0      	blx	r8
 800327e:	3001      	adds	r0, #1
 8003280:	d023      	beq.n	80032ca <_printf_common+0xae>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	6922      	ldr	r2, [r4, #16]
 8003286:	f003 0306 	and.w	r3, r3, #6
 800328a:	2b04      	cmp	r3, #4
 800328c:	bf14      	ite	ne
 800328e:	2500      	movne	r5, #0
 8003290:	6833      	ldreq	r3, [r6, #0]
 8003292:	f04f 0600 	mov.w	r6, #0
 8003296:	bf08      	it	eq
 8003298:	68e5      	ldreq	r5, [r4, #12]
 800329a:	f104 041a 	add.w	r4, r4, #26
 800329e:	bf08      	it	eq
 80032a0:	1aed      	subeq	r5, r5, r3
 80032a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032a6:	bf08      	it	eq
 80032a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032ac:	4293      	cmp	r3, r2
 80032ae:	bfc4      	itt	gt
 80032b0:	1a9b      	subgt	r3, r3, r2
 80032b2:	18ed      	addgt	r5, r5, r3
 80032b4:	42b5      	cmp	r5, r6
 80032b6:	d11a      	bne.n	80032ee <_printf_common+0xd2>
 80032b8:	2000      	movs	r0, #0
 80032ba:	e008      	b.n	80032ce <_printf_common+0xb2>
 80032bc:	2301      	movs	r3, #1
 80032be:	4652      	mov	r2, sl
 80032c0:	4649      	mov	r1, r9
 80032c2:	4638      	mov	r0, r7
 80032c4:	47c0      	blx	r8
 80032c6:	3001      	adds	r0, #1
 80032c8:	d103      	bne.n	80032d2 <_printf_common+0xb6>
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d2:	3501      	adds	r5, #1
 80032d4:	e7c1      	b.n	800325a <_printf_common+0x3e>
 80032d6:	2030      	movs	r0, #48	; 0x30
 80032d8:	18e1      	adds	r1, r4, r3
 80032da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032e4:	4422      	add	r2, r4
 80032e6:	3302      	adds	r3, #2
 80032e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032ec:	e7c2      	b.n	8003274 <_printf_common+0x58>
 80032ee:	2301      	movs	r3, #1
 80032f0:	4622      	mov	r2, r4
 80032f2:	4649      	mov	r1, r9
 80032f4:	4638      	mov	r0, r7
 80032f6:	47c0      	blx	r8
 80032f8:	3001      	adds	r0, #1
 80032fa:	d0e6      	beq.n	80032ca <_printf_common+0xae>
 80032fc:	3601      	adds	r6, #1
 80032fe:	e7d9      	b.n	80032b4 <_printf_common+0x98>

08003300 <_printf_i>:
 8003300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	7e0f      	ldrb	r7, [r1, #24]
 8003306:	4691      	mov	r9, r2
 8003308:	2f78      	cmp	r7, #120	; 0x78
 800330a:	4680      	mov	r8, r0
 800330c:	460c      	mov	r4, r1
 800330e:	469a      	mov	sl, r3
 8003310:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003316:	d807      	bhi.n	8003328 <_printf_i+0x28>
 8003318:	2f62      	cmp	r7, #98	; 0x62
 800331a:	d80a      	bhi.n	8003332 <_printf_i+0x32>
 800331c:	2f00      	cmp	r7, #0
 800331e:	f000 80d5 	beq.w	80034cc <_printf_i+0x1cc>
 8003322:	2f58      	cmp	r7, #88	; 0x58
 8003324:	f000 80c1 	beq.w	80034aa <_printf_i+0x1aa>
 8003328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800332c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003330:	e03a      	b.n	80033a8 <_printf_i+0xa8>
 8003332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003336:	2b15      	cmp	r3, #21
 8003338:	d8f6      	bhi.n	8003328 <_printf_i+0x28>
 800333a:	a101      	add	r1, pc, #4	; (adr r1, 8003340 <_printf_i+0x40>)
 800333c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003340:	08003399 	.word	0x08003399
 8003344:	080033ad 	.word	0x080033ad
 8003348:	08003329 	.word	0x08003329
 800334c:	08003329 	.word	0x08003329
 8003350:	08003329 	.word	0x08003329
 8003354:	08003329 	.word	0x08003329
 8003358:	080033ad 	.word	0x080033ad
 800335c:	08003329 	.word	0x08003329
 8003360:	08003329 	.word	0x08003329
 8003364:	08003329 	.word	0x08003329
 8003368:	08003329 	.word	0x08003329
 800336c:	080034b3 	.word	0x080034b3
 8003370:	080033d9 	.word	0x080033d9
 8003374:	0800346d 	.word	0x0800346d
 8003378:	08003329 	.word	0x08003329
 800337c:	08003329 	.word	0x08003329
 8003380:	080034d5 	.word	0x080034d5
 8003384:	08003329 	.word	0x08003329
 8003388:	080033d9 	.word	0x080033d9
 800338c:	08003329 	.word	0x08003329
 8003390:	08003329 	.word	0x08003329
 8003394:	08003475 	.word	0x08003475
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	602a      	str	r2, [r5, #0]
 80033a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0a0      	b.n	80034ee <_printf_i+0x1ee>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	0607      	lsls	r7, r0, #24
 80033b2:	f103 0104 	add.w	r1, r3, #4
 80033b6:	6029      	str	r1, [r5, #0]
 80033b8:	d501      	bpl.n	80033be <_printf_i+0xbe>
 80033ba:	681e      	ldr	r6, [r3, #0]
 80033bc:	e003      	b.n	80033c6 <_printf_i+0xc6>
 80033be:	0646      	lsls	r6, r0, #25
 80033c0:	d5fb      	bpl.n	80033ba <_printf_i+0xba>
 80033c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033c6:	2e00      	cmp	r6, #0
 80033c8:	da03      	bge.n	80033d2 <_printf_i+0xd2>
 80033ca:	232d      	movs	r3, #45	; 0x2d
 80033cc:	4276      	negs	r6, r6
 80033ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d2:	230a      	movs	r3, #10
 80033d4:	4859      	ldr	r0, [pc, #356]	; (800353c <_printf_i+0x23c>)
 80033d6:	e012      	b.n	80033fe <_printf_i+0xfe>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	6820      	ldr	r0, [r4, #0]
 80033dc:	1d19      	adds	r1, r3, #4
 80033de:	6029      	str	r1, [r5, #0]
 80033e0:	0605      	lsls	r5, r0, #24
 80033e2:	d501      	bpl.n	80033e8 <_printf_i+0xe8>
 80033e4:	681e      	ldr	r6, [r3, #0]
 80033e6:	e002      	b.n	80033ee <_printf_i+0xee>
 80033e8:	0641      	lsls	r1, r0, #25
 80033ea:	d5fb      	bpl.n	80033e4 <_printf_i+0xe4>
 80033ec:	881e      	ldrh	r6, [r3, #0]
 80033ee:	2f6f      	cmp	r7, #111	; 0x6f
 80033f0:	bf0c      	ite	eq
 80033f2:	2308      	moveq	r3, #8
 80033f4:	230a      	movne	r3, #10
 80033f6:	4851      	ldr	r0, [pc, #324]	; (800353c <_printf_i+0x23c>)
 80033f8:	2100      	movs	r1, #0
 80033fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033fe:	6865      	ldr	r5, [r4, #4]
 8003400:	2d00      	cmp	r5, #0
 8003402:	bfa8      	it	ge
 8003404:	6821      	ldrge	r1, [r4, #0]
 8003406:	60a5      	str	r5, [r4, #8]
 8003408:	bfa4      	itt	ge
 800340a:	f021 0104 	bicge.w	r1, r1, #4
 800340e:	6021      	strge	r1, [r4, #0]
 8003410:	b90e      	cbnz	r6, 8003416 <_printf_i+0x116>
 8003412:	2d00      	cmp	r5, #0
 8003414:	d04b      	beq.n	80034ae <_printf_i+0x1ae>
 8003416:	4615      	mov	r5, r2
 8003418:	fbb6 f1f3 	udiv	r1, r6, r3
 800341c:	fb03 6711 	mls	r7, r3, r1, r6
 8003420:	5dc7      	ldrb	r7, [r0, r7]
 8003422:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003426:	4637      	mov	r7, r6
 8003428:	42bb      	cmp	r3, r7
 800342a:	460e      	mov	r6, r1
 800342c:	d9f4      	bls.n	8003418 <_printf_i+0x118>
 800342e:	2b08      	cmp	r3, #8
 8003430:	d10b      	bne.n	800344a <_printf_i+0x14a>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	07de      	lsls	r6, r3, #31
 8003436:	d508      	bpl.n	800344a <_printf_i+0x14a>
 8003438:	6923      	ldr	r3, [r4, #16]
 800343a:	6861      	ldr	r1, [r4, #4]
 800343c:	4299      	cmp	r1, r3
 800343e:	bfde      	ittt	le
 8003440:	2330      	movle	r3, #48	; 0x30
 8003442:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003446:	f105 35ff 	addle.w	r5, r5, #4294967295
 800344a:	1b52      	subs	r2, r2, r5
 800344c:	6122      	str	r2, [r4, #16]
 800344e:	464b      	mov	r3, r9
 8003450:	4621      	mov	r1, r4
 8003452:	4640      	mov	r0, r8
 8003454:	f8cd a000 	str.w	sl, [sp]
 8003458:	aa03      	add	r2, sp, #12
 800345a:	f7ff fedf 	bl	800321c <_printf_common>
 800345e:	3001      	adds	r0, #1
 8003460:	d14a      	bne.n	80034f8 <_printf_i+0x1f8>
 8003462:	f04f 30ff 	mov.w	r0, #4294967295
 8003466:	b004      	add	sp, #16
 8003468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	f043 0320 	orr.w	r3, r3, #32
 8003472:	6023      	str	r3, [r4, #0]
 8003474:	2778      	movs	r7, #120	; 0x78
 8003476:	4832      	ldr	r0, [pc, #200]	; (8003540 <_printf_i+0x240>)
 8003478:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	6829      	ldr	r1, [r5, #0]
 8003480:	061f      	lsls	r7, r3, #24
 8003482:	f851 6b04 	ldr.w	r6, [r1], #4
 8003486:	d402      	bmi.n	800348e <_printf_i+0x18e>
 8003488:	065f      	lsls	r7, r3, #25
 800348a:	bf48      	it	mi
 800348c:	b2b6      	uxthmi	r6, r6
 800348e:	07df      	lsls	r7, r3, #31
 8003490:	bf48      	it	mi
 8003492:	f043 0320 	orrmi.w	r3, r3, #32
 8003496:	6029      	str	r1, [r5, #0]
 8003498:	bf48      	it	mi
 800349a:	6023      	strmi	r3, [r4, #0]
 800349c:	b91e      	cbnz	r6, 80034a6 <_printf_i+0x1a6>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	f023 0320 	bic.w	r3, r3, #32
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	2310      	movs	r3, #16
 80034a8:	e7a6      	b.n	80033f8 <_printf_i+0xf8>
 80034aa:	4824      	ldr	r0, [pc, #144]	; (800353c <_printf_i+0x23c>)
 80034ac:	e7e4      	b.n	8003478 <_printf_i+0x178>
 80034ae:	4615      	mov	r5, r2
 80034b0:	e7bd      	b.n	800342e <_printf_i+0x12e>
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	6826      	ldr	r6, [r4, #0]
 80034b6:	1d18      	adds	r0, r3, #4
 80034b8:	6961      	ldr	r1, [r4, #20]
 80034ba:	6028      	str	r0, [r5, #0]
 80034bc:	0635      	lsls	r5, r6, #24
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	d501      	bpl.n	80034c6 <_printf_i+0x1c6>
 80034c2:	6019      	str	r1, [r3, #0]
 80034c4:	e002      	b.n	80034cc <_printf_i+0x1cc>
 80034c6:	0670      	lsls	r0, r6, #25
 80034c8:	d5fb      	bpl.n	80034c2 <_printf_i+0x1c2>
 80034ca:	8019      	strh	r1, [r3, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	4615      	mov	r5, r2
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	e7bc      	b.n	800344e <_printf_i+0x14e>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	2100      	movs	r1, #0
 80034d8:	1d1a      	adds	r2, r3, #4
 80034da:	602a      	str	r2, [r5, #0]
 80034dc:	681d      	ldr	r5, [r3, #0]
 80034de:	6862      	ldr	r2, [r4, #4]
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 fa4f 	bl	8003984 <memchr>
 80034e6:	b108      	cbz	r0, 80034ec <_printf_i+0x1ec>
 80034e8:	1b40      	subs	r0, r0, r5
 80034ea:	6060      	str	r0, [r4, #4]
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	2300      	movs	r3, #0
 80034f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f6:	e7aa      	b.n	800344e <_printf_i+0x14e>
 80034f8:	462a      	mov	r2, r5
 80034fa:	4649      	mov	r1, r9
 80034fc:	4640      	mov	r0, r8
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	47d0      	blx	sl
 8003502:	3001      	adds	r0, #1
 8003504:	d0ad      	beq.n	8003462 <_printf_i+0x162>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	079b      	lsls	r3, r3, #30
 800350a:	d413      	bmi.n	8003534 <_printf_i+0x234>
 800350c:	68e0      	ldr	r0, [r4, #12]
 800350e:	9b03      	ldr	r3, [sp, #12]
 8003510:	4298      	cmp	r0, r3
 8003512:	bfb8      	it	lt
 8003514:	4618      	movlt	r0, r3
 8003516:	e7a6      	b.n	8003466 <_printf_i+0x166>
 8003518:	2301      	movs	r3, #1
 800351a:	4632      	mov	r2, r6
 800351c:	4649      	mov	r1, r9
 800351e:	4640      	mov	r0, r8
 8003520:	47d0      	blx	sl
 8003522:	3001      	adds	r0, #1
 8003524:	d09d      	beq.n	8003462 <_printf_i+0x162>
 8003526:	3501      	adds	r5, #1
 8003528:	68e3      	ldr	r3, [r4, #12]
 800352a:	9903      	ldr	r1, [sp, #12]
 800352c:	1a5b      	subs	r3, r3, r1
 800352e:	42ab      	cmp	r3, r5
 8003530:	dcf2      	bgt.n	8003518 <_printf_i+0x218>
 8003532:	e7eb      	b.n	800350c <_printf_i+0x20c>
 8003534:	2500      	movs	r5, #0
 8003536:	f104 0619 	add.w	r6, r4, #25
 800353a:	e7f5      	b.n	8003528 <_printf_i+0x228>
 800353c:	08003b83 	.word	0x08003b83
 8003540:	08003b94 	.word	0x08003b94

08003544 <__sflush_r>:
 8003544:	898a      	ldrh	r2, [r1, #12]
 8003546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003548:	4605      	mov	r5, r0
 800354a:	0710      	lsls	r0, r2, #28
 800354c:	460c      	mov	r4, r1
 800354e:	d457      	bmi.n	8003600 <__sflush_r+0xbc>
 8003550:	684b      	ldr	r3, [r1, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	dc04      	bgt.n	8003560 <__sflush_r+0x1c>
 8003556:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	dc01      	bgt.n	8003560 <__sflush_r+0x1c>
 800355c:	2000      	movs	r0, #0
 800355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003562:	2e00      	cmp	r6, #0
 8003564:	d0fa      	beq.n	800355c <__sflush_r+0x18>
 8003566:	2300      	movs	r3, #0
 8003568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800356c:	682f      	ldr	r7, [r5, #0]
 800356e:	6a21      	ldr	r1, [r4, #32]
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	d032      	beq.n	80035da <__sflush_r+0x96>
 8003574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	075a      	lsls	r2, r3, #29
 800357a:	d505      	bpl.n	8003588 <__sflush_r+0x44>
 800357c:	6863      	ldr	r3, [r4, #4]
 800357e:	1ac0      	subs	r0, r0, r3
 8003580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003582:	b10b      	cbz	r3, 8003588 <__sflush_r+0x44>
 8003584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003586:	1ac0      	subs	r0, r0, r3
 8003588:	2300      	movs	r3, #0
 800358a:	4602      	mov	r2, r0
 800358c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800358e:	4628      	mov	r0, r5
 8003590:	6a21      	ldr	r1, [r4, #32]
 8003592:	47b0      	blx	r6
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	d106      	bne.n	80035a8 <__sflush_r+0x64>
 800359a:	6829      	ldr	r1, [r5, #0]
 800359c:	291d      	cmp	r1, #29
 800359e:	d82b      	bhi.n	80035f8 <__sflush_r+0xb4>
 80035a0:	4a28      	ldr	r2, [pc, #160]	; (8003644 <__sflush_r+0x100>)
 80035a2:	410a      	asrs	r2, r1
 80035a4:	07d6      	lsls	r6, r2, #31
 80035a6:	d427      	bmi.n	80035f8 <__sflush_r+0xb4>
 80035a8:	2200      	movs	r2, #0
 80035aa:	6062      	str	r2, [r4, #4]
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	04d9      	lsls	r1, r3, #19
 80035b0:	6022      	str	r2, [r4, #0]
 80035b2:	d504      	bpl.n	80035be <__sflush_r+0x7a>
 80035b4:	1c42      	adds	r2, r0, #1
 80035b6:	d101      	bne.n	80035bc <__sflush_r+0x78>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b903      	cbnz	r3, 80035be <__sflush_r+0x7a>
 80035bc:	6560      	str	r0, [r4, #84]	; 0x54
 80035be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035c0:	602f      	str	r7, [r5, #0]
 80035c2:	2900      	cmp	r1, #0
 80035c4:	d0ca      	beq.n	800355c <__sflush_r+0x18>
 80035c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ca:	4299      	cmp	r1, r3
 80035cc:	d002      	beq.n	80035d4 <__sflush_r+0x90>
 80035ce:	4628      	mov	r0, r5
 80035d0:	f7ff fbd0 	bl	8002d74 <_free_r>
 80035d4:	2000      	movs	r0, #0
 80035d6:	6360      	str	r0, [r4, #52]	; 0x34
 80035d8:	e7c1      	b.n	800355e <__sflush_r+0x1a>
 80035da:	2301      	movs	r3, #1
 80035dc:	4628      	mov	r0, r5
 80035de:	47b0      	blx	r6
 80035e0:	1c41      	adds	r1, r0, #1
 80035e2:	d1c8      	bne.n	8003576 <__sflush_r+0x32>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0c5      	beq.n	8003576 <__sflush_r+0x32>
 80035ea:	2b1d      	cmp	r3, #29
 80035ec:	d001      	beq.n	80035f2 <__sflush_r+0xae>
 80035ee:	2b16      	cmp	r3, #22
 80035f0:	d101      	bne.n	80035f6 <__sflush_r+0xb2>
 80035f2:	602f      	str	r7, [r5, #0]
 80035f4:	e7b2      	b.n	800355c <__sflush_r+0x18>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	e7ae      	b.n	800355e <__sflush_r+0x1a>
 8003600:	690f      	ldr	r7, [r1, #16]
 8003602:	2f00      	cmp	r7, #0
 8003604:	d0aa      	beq.n	800355c <__sflush_r+0x18>
 8003606:	0793      	lsls	r3, r2, #30
 8003608:	bf18      	it	ne
 800360a:	2300      	movne	r3, #0
 800360c:	680e      	ldr	r6, [r1, #0]
 800360e:	bf08      	it	eq
 8003610:	694b      	ldreq	r3, [r1, #20]
 8003612:	1bf6      	subs	r6, r6, r7
 8003614:	600f      	str	r7, [r1, #0]
 8003616:	608b      	str	r3, [r1, #8]
 8003618:	2e00      	cmp	r6, #0
 800361a:	dd9f      	ble.n	800355c <__sflush_r+0x18>
 800361c:	4633      	mov	r3, r6
 800361e:	463a      	mov	r2, r7
 8003620:	4628      	mov	r0, r5
 8003622:	6a21      	ldr	r1, [r4, #32]
 8003624:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003628:	47e0      	blx	ip
 800362a:	2800      	cmp	r0, #0
 800362c:	dc06      	bgt.n	800363c <__sflush_r+0xf8>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	e790      	b.n	800355e <__sflush_r+0x1a>
 800363c:	4407      	add	r7, r0
 800363e:	1a36      	subs	r6, r6, r0
 8003640:	e7ea      	b.n	8003618 <__sflush_r+0xd4>
 8003642:	bf00      	nop
 8003644:	dfbffffe 	.word	0xdfbffffe

08003648 <_fflush_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	4605      	mov	r5, r0
 800364e:	460c      	mov	r4, r1
 8003650:	b913      	cbnz	r3, 8003658 <_fflush_r+0x10>
 8003652:	2500      	movs	r5, #0
 8003654:	4628      	mov	r0, r5
 8003656:	bd38      	pop	{r3, r4, r5, pc}
 8003658:	b118      	cbz	r0, 8003662 <_fflush_r+0x1a>
 800365a:	6a03      	ldr	r3, [r0, #32]
 800365c:	b90b      	cbnz	r3, 8003662 <_fflush_r+0x1a>
 800365e:	f7ff f9a7 	bl	80029b0 <__sinit>
 8003662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f3      	beq.n	8003652 <_fflush_r+0xa>
 800366a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800366c:	07d0      	lsls	r0, r2, #31
 800366e:	d404      	bmi.n	800367a <_fflush_r+0x32>
 8003670:	0599      	lsls	r1, r3, #22
 8003672:	d402      	bmi.n	800367a <_fflush_r+0x32>
 8003674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003676:	f7ff fb7a 	bl	8002d6e <__retarget_lock_acquire_recursive>
 800367a:	4628      	mov	r0, r5
 800367c:	4621      	mov	r1, r4
 800367e:	f7ff ff61 	bl	8003544 <__sflush_r>
 8003682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003684:	4605      	mov	r5, r0
 8003686:	07da      	lsls	r2, r3, #31
 8003688:	d4e4      	bmi.n	8003654 <_fflush_r+0xc>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	059b      	lsls	r3, r3, #22
 800368e:	d4e1      	bmi.n	8003654 <_fflush_r+0xc>
 8003690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003692:	f7ff fb6d 	bl	8002d70 <__retarget_lock_release_recursive>
 8003696:	e7dd      	b.n	8003654 <_fflush_r+0xc>

08003698 <__swhatbuf_r>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	4615      	mov	r5, r2
 80036a2:	2900      	cmp	r1, #0
 80036a4:	461e      	mov	r6, r3
 80036a6:	b096      	sub	sp, #88	; 0x58
 80036a8:	da0c      	bge.n	80036c4 <__swhatbuf_r+0x2c>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	2100      	movs	r1, #0
 80036ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036b2:	bf0c      	ite	eq
 80036b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036b8:	2340      	movne	r3, #64	; 0x40
 80036ba:	2000      	movs	r0, #0
 80036bc:	6031      	str	r1, [r6, #0]
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	b016      	add	sp, #88	; 0x58
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	466a      	mov	r2, sp
 80036c6:	f000 f92b 	bl	8003920 <_fstat_r>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	dbed      	blt.n	80036aa <__swhatbuf_r+0x12>
 80036ce:	9901      	ldr	r1, [sp, #4]
 80036d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80036d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80036d8:	4259      	negs	r1, r3
 80036da:	4159      	adcs	r1, r3
 80036dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e0:	e7eb      	b.n	80036ba <__swhatbuf_r+0x22>

080036e2 <__smakebuf_r>:
 80036e2:	898b      	ldrh	r3, [r1, #12]
 80036e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036e6:	079d      	lsls	r5, r3, #30
 80036e8:	4606      	mov	r6, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	d507      	bpl.n	80036fe <__smakebuf_r+0x1c>
 80036ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	6123      	str	r3, [r4, #16]
 80036f6:	2301      	movs	r3, #1
 80036f8:	6163      	str	r3, [r4, #20]
 80036fa:	b002      	add	sp, #8
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	466a      	mov	r2, sp
 8003700:	ab01      	add	r3, sp, #4
 8003702:	f7ff ffc9 	bl	8003698 <__swhatbuf_r>
 8003706:	9900      	ldr	r1, [sp, #0]
 8003708:	4605      	mov	r5, r0
 800370a:	4630      	mov	r0, r6
 800370c:	f7ff fba2 	bl	8002e54 <_malloc_r>
 8003710:	b948      	cbnz	r0, 8003726 <__smakebuf_r+0x44>
 8003712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003716:	059a      	lsls	r2, r3, #22
 8003718:	d4ef      	bmi.n	80036fa <__smakebuf_r+0x18>
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	e7e3      	b.n	80036ee <__smakebuf_r+0xc>
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	6020      	str	r0, [r4, #0]
 800372a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372e:	81a3      	strh	r3, [r4, #12]
 8003730:	9b00      	ldr	r3, [sp, #0]
 8003732:	6120      	str	r0, [r4, #16]
 8003734:	6163      	str	r3, [r4, #20]
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	b15b      	cbz	r3, 8003752 <__smakebuf_r+0x70>
 800373a:	4630      	mov	r0, r6
 800373c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003740:	f000 f900 	bl	8003944 <_isatty_r>
 8003744:	b128      	cbz	r0, 8003752 <__smakebuf_r+0x70>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f023 0303 	bic.w	r3, r3, #3
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	431d      	orrs	r5, r3
 8003756:	81a5      	strh	r5, [r4, #12]
 8003758:	e7cf      	b.n	80036fa <__smakebuf_r+0x18>

0800375a <_putc_r>:
 800375a:	b570      	push	{r4, r5, r6, lr}
 800375c:	460d      	mov	r5, r1
 800375e:	4614      	mov	r4, r2
 8003760:	4606      	mov	r6, r0
 8003762:	b118      	cbz	r0, 800376c <_putc_r+0x12>
 8003764:	6a03      	ldr	r3, [r0, #32]
 8003766:	b90b      	cbnz	r3, 800376c <_putc_r+0x12>
 8003768:	f7ff f922 	bl	80029b0 <__sinit>
 800376c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800376e:	07d8      	lsls	r0, r3, #31
 8003770:	d405      	bmi.n	800377e <_putc_r+0x24>
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	0599      	lsls	r1, r3, #22
 8003776:	d402      	bmi.n	800377e <_putc_r+0x24>
 8003778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800377a:	f7ff faf8 	bl	8002d6e <__retarget_lock_acquire_recursive>
 800377e:	68a3      	ldr	r3, [r4, #8]
 8003780:	3b01      	subs	r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	60a3      	str	r3, [r4, #8]
 8003786:	da05      	bge.n	8003794 <_putc_r+0x3a>
 8003788:	69a2      	ldr	r2, [r4, #24]
 800378a:	4293      	cmp	r3, r2
 800378c:	db12      	blt.n	80037b4 <_putc_r+0x5a>
 800378e:	b2eb      	uxtb	r3, r5
 8003790:	2b0a      	cmp	r3, #10
 8003792:	d00f      	beq.n	80037b4 <_putc_r+0x5a>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	6022      	str	r2, [r4, #0]
 800379a:	701d      	strb	r5, [r3, #0]
 800379c:	b2ed      	uxtb	r5, r5
 800379e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037a0:	07da      	lsls	r2, r3, #31
 80037a2:	d405      	bmi.n	80037b0 <_putc_r+0x56>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	059b      	lsls	r3, r3, #22
 80037a8:	d402      	bmi.n	80037b0 <_putc_r+0x56>
 80037aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ac:	f7ff fae0 	bl	8002d70 <__retarget_lock_release_recursive>
 80037b0:	4628      	mov	r0, r5
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	4629      	mov	r1, r5
 80037b6:	4622      	mov	r2, r4
 80037b8:	4630      	mov	r0, r6
 80037ba:	f000 f802 	bl	80037c2 <__swbuf_r>
 80037be:	4605      	mov	r5, r0
 80037c0:	e7ed      	b.n	800379e <_putc_r+0x44>

080037c2 <__swbuf_r>:
 80037c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c4:	460e      	mov	r6, r1
 80037c6:	4614      	mov	r4, r2
 80037c8:	4605      	mov	r5, r0
 80037ca:	b118      	cbz	r0, 80037d4 <__swbuf_r+0x12>
 80037cc:	6a03      	ldr	r3, [r0, #32]
 80037ce:	b90b      	cbnz	r3, 80037d4 <__swbuf_r+0x12>
 80037d0:	f7ff f8ee 	bl	80029b0 <__sinit>
 80037d4:	69a3      	ldr	r3, [r4, #24]
 80037d6:	60a3      	str	r3, [r4, #8]
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	071a      	lsls	r2, r3, #28
 80037dc:	d525      	bpl.n	800382a <__swbuf_r+0x68>
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	b31b      	cbz	r3, 800382a <__swbuf_r+0x68>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	6922      	ldr	r2, [r4, #16]
 80037e6:	b2f6      	uxtb	r6, r6
 80037e8:	1a98      	subs	r0, r3, r2
 80037ea:	6963      	ldr	r3, [r4, #20]
 80037ec:	4637      	mov	r7, r6
 80037ee:	4283      	cmp	r3, r0
 80037f0:	dc04      	bgt.n	80037fc <__swbuf_r+0x3a>
 80037f2:	4621      	mov	r1, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff ff27 	bl	8003648 <_fflush_r>
 80037fa:	b9e0      	cbnz	r0, 8003836 <__swbuf_r+0x74>
 80037fc:	68a3      	ldr	r3, [r4, #8]
 80037fe:	3b01      	subs	r3, #1
 8003800:	60a3      	str	r3, [r4, #8]
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	6022      	str	r2, [r4, #0]
 8003808:	701e      	strb	r6, [r3, #0]
 800380a:	6962      	ldr	r2, [r4, #20]
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	429a      	cmp	r2, r3
 8003810:	d004      	beq.n	800381c <__swbuf_r+0x5a>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	07db      	lsls	r3, r3, #31
 8003816:	d506      	bpl.n	8003826 <__swbuf_r+0x64>
 8003818:	2e0a      	cmp	r6, #10
 800381a:	d104      	bne.n	8003826 <__swbuf_r+0x64>
 800381c:	4621      	mov	r1, r4
 800381e:	4628      	mov	r0, r5
 8003820:	f7ff ff12 	bl	8003648 <_fflush_r>
 8003824:	b938      	cbnz	r0, 8003836 <__swbuf_r+0x74>
 8003826:	4638      	mov	r0, r7
 8003828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f805 	bl	800383c <__swsetup_r>
 8003832:	2800      	cmp	r0, #0
 8003834:	d0d5      	beq.n	80037e2 <__swbuf_r+0x20>
 8003836:	f04f 37ff 	mov.w	r7, #4294967295
 800383a:	e7f4      	b.n	8003826 <__swbuf_r+0x64>

0800383c <__swsetup_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <__swsetup_r+0xac>)
 8003840:	4605      	mov	r5, r0
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	460c      	mov	r4, r1
 8003846:	b118      	cbz	r0, 8003850 <__swsetup_r+0x14>
 8003848:	6a03      	ldr	r3, [r0, #32]
 800384a:	b90b      	cbnz	r3, 8003850 <__swsetup_r+0x14>
 800384c:	f7ff f8b0 	bl	80029b0 <__sinit>
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003856:	0718      	lsls	r0, r3, #28
 8003858:	d422      	bmi.n	80038a0 <__swsetup_r+0x64>
 800385a:	06d9      	lsls	r1, r3, #27
 800385c:	d407      	bmi.n	800386e <__swsetup_r+0x32>
 800385e:	2309      	movs	r3, #9
 8003860:	602b      	str	r3, [r5, #0]
 8003862:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	e034      	b.n	80038d8 <__swsetup_r+0x9c>
 800386e:	0758      	lsls	r0, r3, #29
 8003870:	d512      	bpl.n	8003898 <__swsetup_r+0x5c>
 8003872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003874:	b141      	cbz	r1, 8003888 <__swsetup_r+0x4c>
 8003876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800387a:	4299      	cmp	r1, r3
 800387c:	d002      	beq.n	8003884 <__swsetup_r+0x48>
 800387e:	4628      	mov	r0, r5
 8003880:	f7ff fa78 	bl	8002d74 <_free_r>
 8003884:	2300      	movs	r3, #0
 8003886:	6363      	str	r3, [r4, #52]	; 0x34
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	2300      	movs	r3, #0
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f043 0308 	orr.w	r3, r3, #8
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	b94b      	cbnz	r3, 80038b8 <__swsetup_r+0x7c>
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ae:	d003      	beq.n	80038b8 <__swsetup_r+0x7c>
 80038b0:	4621      	mov	r1, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	f7ff ff15 	bl	80036e2 <__smakebuf_r>
 80038b8:	89a0      	ldrh	r0, [r4, #12]
 80038ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038be:	f010 0301 	ands.w	r3, r0, #1
 80038c2:	d00a      	beq.n	80038da <__swsetup_r+0x9e>
 80038c4:	2300      	movs	r3, #0
 80038c6:	60a3      	str	r3, [r4, #8]
 80038c8:	6963      	ldr	r3, [r4, #20]
 80038ca:	425b      	negs	r3, r3
 80038cc:	61a3      	str	r3, [r4, #24]
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	b943      	cbnz	r3, 80038e4 <__swsetup_r+0xa8>
 80038d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d6:	d1c4      	bne.n	8003862 <__swsetup_r+0x26>
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
 80038da:	0781      	lsls	r1, r0, #30
 80038dc:	bf58      	it	pl
 80038de:	6963      	ldrpl	r3, [r4, #20]
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	e7f4      	b.n	80038ce <__swsetup_r+0x92>
 80038e4:	2000      	movs	r0, #0
 80038e6:	e7f7      	b.n	80038d8 <__swsetup_r+0x9c>
 80038e8:	20000064 	.word	0x20000064

080038ec <memmove>:
 80038ec:	4288      	cmp	r0, r1
 80038ee:	b510      	push	{r4, lr}
 80038f0:	eb01 0402 	add.w	r4, r1, r2
 80038f4:	d902      	bls.n	80038fc <memmove+0x10>
 80038f6:	4284      	cmp	r4, r0
 80038f8:	4623      	mov	r3, r4
 80038fa:	d807      	bhi.n	800390c <memmove+0x20>
 80038fc:	1e43      	subs	r3, r0, #1
 80038fe:	42a1      	cmp	r1, r4
 8003900:	d008      	beq.n	8003914 <memmove+0x28>
 8003902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800390a:	e7f8      	b.n	80038fe <memmove+0x12>
 800390c:	4601      	mov	r1, r0
 800390e:	4402      	add	r2, r0
 8003910:	428a      	cmp	r2, r1
 8003912:	d100      	bne.n	8003916 <memmove+0x2a>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800391a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800391e:	e7f7      	b.n	8003910 <memmove+0x24>

08003920 <_fstat_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	2300      	movs	r3, #0
 8003924:	4d06      	ldr	r5, [pc, #24]	; (8003940 <_fstat_r+0x20>)
 8003926:	4604      	mov	r4, r0
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	602b      	str	r3, [r5, #0]
 800392e:	f7fc ff32 	bl	8000796 <_fstat>
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	d102      	bne.n	800393c <_fstat_r+0x1c>
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	b103      	cbz	r3, 800393c <_fstat_r+0x1c>
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	bd38      	pop	{r3, r4, r5, pc}
 800393e:	bf00      	nop
 8003940:	20000a60 	.word	0x20000a60

08003944 <_isatty_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	2300      	movs	r3, #0
 8003948:	4d05      	ldr	r5, [pc, #20]	; (8003960 <_isatty_r+0x1c>)
 800394a:	4604      	mov	r4, r0
 800394c:	4608      	mov	r0, r1
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	f7fc ff30 	bl	80007b4 <_isatty>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_isatty_r+0x1a>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b103      	cbz	r3, 800395e <_isatty_r+0x1a>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	20000a60 	.word	0x20000a60

08003964 <_sbrk_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	2300      	movs	r3, #0
 8003968:	4d05      	ldr	r5, [pc, #20]	; (8003980 <_sbrk_r+0x1c>)
 800396a:	4604      	mov	r4, r0
 800396c:	4608      	mov	r0, r1
 800396e:	602b      	str	r3, [r5, #0]
 8003970:	f7fc ff36 	bl	80007e0 <_sbrk>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d102      	bne.n	800397e <_sbrk_r+0x1a>
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	b103      	cbz	r3, 800397e <_sbrk_r+0x1a>
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	20000a60 	.word	0x20000a60

08003984 <memchr>:
 8003984:	4603      	mov	r3, r0
 8003986:	b510      	push	{r4, lr}
 8003988:	b2c9      	uxtb	r1, r1
 800398a:	4402      	add	r2, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	4618      	mov	r0, r3
 8003990:	d101      	bne.n	8003996 <memchr+0x12>
 8003992:	2000      	movs	r0, #0
 8003994:	e003      	b.n	800399e <memchr+0x1a>
 8003996:	7804      	ldrb	r4, [r0, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	428c      	cmp	r4, r1
 800399c:	d1f6      	bne.n	800398c <memchr+0x8>
 800399e:	bd10      	pop	{r4, pc}

080039a0 <memcpy>:
 80039a0:	440a      	add	r2, r1
 80039a2:	4291      	cmp	r1, r2
 80039a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039a8:	d100      	bne.n	80039ac <memcpy+0xc>
 80039aa:	4770      	bx	lr
 80039ac:	b510      	push	{r4, lr}
 80039ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039b2:	4291      	cmp	r1, r2
 80039b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039b8:	d1f9      	bne.n	80039ae <memcpy+0xe>
 80039ba:	bd10      	pop	{r4, pc}

080039bc <_realloc_r>:
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	4680      	mov	r8, r0
 80039c2:	4614      	mov	r4, r2
 80039c4:	460e      	mov	r6, r1
 80039c6:	b921      	cbnz	r1, 80039d2 <_realloc_r+0x16>
 80039c8:	4611      	mov	r1, r2
 80039ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ce:	f7ff ba41 	b.w	8002e54 <_malloc_r>
 80039d2:	b92a      	cbnz	r2, 80039e0 <_realloc_r+0x24>
 80039d4:	f7ff f9ce 	bl	8002d74 <_free_r>
 80039d8:	4625      	mov	r5, r4
 80039da:	4628      	mov	r0, r5
 80039dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e0:	f000 f81b 	bl	8003a1a <_malloc_usable_size_r>
 80039e4:	4284      	cmp	r4, r0
 80039e6:	4607      	mov	r7, r0
 80039e8:	d802      	bhi.n	80039f0 <_realloc_r+0x34>
 80039ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039ee:	d812      	bhi.n	8003a16 <_realloc_r+0x5a>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4640      	mov	r0, r8
 80039f4:	f7ff fa2e 	bl	8002e54 <_malloc_r>
 80039f8:	4605      	mov	r5, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d0ed      	beq.n	80039da <_realloc_r+0x1e>
 80039fe:	42bc      	cmp	r4, r7
 8003a00:	4622      	mov	r2, r4
 8003a02:	4631      	mov	r1, r6
 8003a04:	bf28      	it	cs
 8003a06:	463a      	movcs	r2, r7
 8003a08:	f7ff ffca 	bl	80039a0 <memcpy>
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f7ff f9b0 	bl	8002d74 <_free_r>
 8003a14:	e7e1      	b.n	80039da <_realloc_r+0x1e>
 8003a16:	4635      	mov	r5, r6
 8003a18:	e7df      	b.n	80039da <_realloc_r+0x1e>

08003a1a <_malloc_usable_size_r>:
 8003a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a1e:	1f18      	subs	r0, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bfbc      	itt	lt
 8003a24:	580b      	ldrlt	r3, [r1, r0]
 8003a26:	18c0      	addlt	r0, r0, r3
 8003a28:	4770      	bx	lr
	...

08003a2c <_init>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr

08003a38 <_fini>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr
