
104TeamProject01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08009a60  08009a60  00019a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a168  0800a168  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a168  0800a168  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a168  0800a168  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a168  0800a168  0001a168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b24  200001d8  0800a348  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  0800a348  00020cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130a7  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f25  00000000  00000000  000332eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00036210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7f  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dfd  00000000  00000000  000380cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d9f  00000000  00000000  00051ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f75b  00000000  00000000  00067c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e70  00000000  00000000  000f73c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000fd238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a44 	.word	0x08009a44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009a44 	.word	0x08009a44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_f2uiz>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	d20e      	bcs.n	8000c76 <__aeabi_f2uiz+0x22>
 8000c58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c5c:	d30b      	bcc.n	8000c76 <__aeabi_f2uiz+0x22>
 8000c5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c66:	d409      	bmi.n	8000c7c <__aeabi_f2uiz+0x28>
 8000c68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c70:	fa23 f002 	lsr.w	r0, r3, r2
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c80:	d101      	bne.n	8000c86 <__aeabi_f2uiz+0x32>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d102      	bne.n	8000c8c <__aeabi_f2uiz+0x38>
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8a:	4770      	bx	lr
 8000c8c:	f04f 0000 	mov.w	r0, #0
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_d2lz>:
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	4605      	mov	r5, r0
 8000c98:	460c      	mov	r4, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	f7ff fe8b 	bl	80009bc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x20>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	4621      	mov	r1, r4
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc01 	bl	80004d8 <__aeabi_dmul>
 8000cd6:	f7ff fed7 	bl	8000a88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fb82 	bl	80003e4 <__aeabi_ui2d>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce4:	f7ff fbf8 	bl	80004d8 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fa3a 	bl	8000168 <__aeabi_dsub>
 8000cf4:	f7ff fec8 	bl	8000a88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b56      	ldr	r3, [pc, #344]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a55      	ldr	r2, [pc, #340]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d30:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a49      	ldr	r2, [pc, #292]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a43      	ldr	r2, [pc, #268]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <MX_GPIO_Init+0x170>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Sonar_Water_Tissue_Trig_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000d7e:	483e      	ldr	r0, [pc, #248]	; (8000e78 <MX_GPIO_Init+0x174>)
 8000d80:	f001 f91d 	bl	8001fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Green_Pin|LED_Yellow_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000d8a:	483c      	ldr	r0, [pc, #240]	; (8000e7c <MX_GPIO_Init+0x178>)
 8000d8c:	f001 f917 	bl	8001fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Sonar_Tissue_Trig_Pin|Sonar_Cover_Trig_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f640 0102 	movw	r1, #2050	; 0x802
 8000d96:	483a      	ldr	r0, [pc, #232]	; (8000e80 <MX_GPIO_Init+0x17c>)
 8000d98:	f001 f911 	bl	8001fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <MX_GPIO_Init+0x180>)
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	4832      	ldr	r0, [pc, #200]	; (8000e7c <MX_GPIO_Init+0x178>)
 8000db2:	f000 ff69 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Sonar_Water_Tissue_Trig_Pin;
 8000db6:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482a      	ldr	r0, [pc, #168]	; (8000e78 <MX_GPIO_Init+0x174>)
 8000dd0:	f000 ff5a 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Yellow_Pin|LED_RED_Pin;
 8000dd4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	4823      	ldr	r0, [pc, #140]	; (8000e7c <MX_GPIO_Init+0x178>)
 8000dee:	f000 ff4b 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Sonar_Tissue_Trig_Pin|Sonar_Cover_Trig_Pin;
 8000df2:	f640 0302 	movw	r3, #2050	; 0x802
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481d      	ldr	r0, [pc, #116]	; (8000e80 <MX_GPIO_Init+0x17c>)
 8000e0c:	f000 ff3c 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Sonar_Tissue_Echo_Pin|Sonar_Cover_Echo_Pin|Magnetic_Pin;
 8000e10:	f241 0314 	movw	r3, #4116	; 0x1014
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4816      	ldr	r0, [pc, #88]	; (8000e80 <MX_GPIO_Init+0x17c>)
 8000e26:	f000 ff2f 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sonar_Water_Tissue_Echo_Pin;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sonar_Water_Tissue_Echo_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_GPIO_Init+0x174>)
 8000e40:	f000 ff22 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tilt_Pin;
 8000e44:	2320      	movs	r3, #32
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Tilt_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <MX_GPIO_Init+0x17c>)
 8000e58:	f000 ff16 	bl	8001c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f000 fe28 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f000 fe41 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	10110000 	.word	0x10110000

08000e88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	; (8000edc <MX_I2C1_Init+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x58>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec6:	f001 f8b5 	bl	8002034 <HAL_I2C_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed0:	f000 f90b 	bl	80010ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200001f4 	.word	0x200001f4
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	000186a0 	.word	0x000186a0

08000ee4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_I2C_MspInit+0x90>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d132      	bne.n	8000f6a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IR_SCL_Pin|IR_SDA_Pin;
 8000f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f22:	2312      	movs	r3, #18
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_I2C_MspInit+0x98>)
 8000f32:	f000 fea9 	bl	8001c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_I2C_MspInit+0x9c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_I2C_MspInit+0x9c>)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40010000 	.word	0x40010000

08000f84 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int fd, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <_write+0x28>)
 8000f9c:	f002 fd54 	bl	8003a48 <HAL_UART_Transmit>
	return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000324 	.word	0x20000324

08000fb0 <_read>:

int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <_read+0x28>)
 8000fc8:	f002 fdc1 	bl	8003b4e <HAL_UART_Receive>
	return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000324 	.word	0x20000324

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0e8      	sub	sp, #416	; 0x1a0
 8000fe0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <main+0x88>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2202      	movs	r2, #2
 8000fec:	2100      	movs	r1, #0
 8000fee:	f004 ffdd 	bl	8005fac <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <main+0x88>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f004 ffd5 	bl	8005fac <setvbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001002:	f000 fbfb 	bl	80017fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001006:	f000 f835 	bl	8001074 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800100a:	f7ff fe7b 	bl	8000d04 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800100e:	f000 fb25 	bl	800165c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001012:	f000 f97d 	bl	8001310 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001016:	f000 f9cb 	bl	80013b0 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800101a:	f000 faf5 	bl	8001608 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800101e:	f7ff ff33 	bl	8000e88 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	TS stall;
	initStalls(&stall);
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fed5 	bl	8004dd4 <initStalls>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Init(&htim1);         // ?��?��?��?��?�� ?��?��
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <main+0x8c>)
 800102c:	f001 fd56 	bl	8002adc <HAL_TIM_Base_Init>
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // ?��?��?��?��?�� ?��?��
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <main+0x8c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim1);     // ?��?��?��?��?�� ?��?��
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <main+0x8c>)
 800103a:	f001 fd9f 	bl	8002b7c <HAL_TIM_Base_Start_IT>


	printf("start STM32F103Rb\r\n");
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <main+0x90>)
 8001040:	f004 ffac 	bl	8005f9c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  printf("Time: %lu, ", HAL_GetTick() / 1000);
	  checkMagnetic(&stall);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fda4 	bl	8004b94 <checkMagnetic>
	  checkTissueAmount(&stall);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fe2a 	bl	8004ca8 <checkTissueAmount>
//	  }
//	  else if(res_from_raspi == 2){
//		  // POHWA
////		  SendData(strlen((char *)"POHWA\r\n"), 0, 0, "POHWA\r\n");
//	  }
  	  HAL_Delay(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f000 fc32 	bl	80018c0 <HAL_Delay>

  	  printf("\r\n");
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <main+0x94>)
 800105e:	f004 ff9d 	bl	8005f9c <puts>
	  checkMagnetic(&stall);
 8001062:	e7ef      	b.n	8001044 <main+0x68>
 8001064:	20000068 	.word	0x20000068
 8001068:	2000024c 	.word	0x2000024c
 800106c:	08009a60 	.word	0x08009a60
 8001070:	08009a74 	.word	0x08009a74

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b090      	sub	sp, #64	; 0x40
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2228      	movs	r2, #40	; 0x28
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f005 f938 	bl	80062f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109a:	2301      	movs	r3, #1
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109e:	2310      	movs	r3, #16
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f906 	bl	80022bc <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010b6:	f000 f818 	bl	80010ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fb74 	bl	80027c0 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010de:	f000 f804 	bl	80010ea <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3740      	adds	r7, #64	; 0x40
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ee:	b672      	cpsid	i
}
 80010f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <Error_Handler+0x8>

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_MspInit+0x5c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_MspInit+0x5c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_MspInit+0x5c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_MspInit+0x5c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_MspInit+0x60>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_MspInit+0x60>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 fb73 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM1_UP_IRQHandler+0x10>)
 80011ae:	f001 fe31 	bl	8002e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000024c 	.word	0x2000024c

080011bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM1_CC_IRQHandler+0x10>)
 80011c2:	f001 fe27 	bl	8002e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000024c 	.word	0x2000024c

080011d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <USART1_IRQHandler+0x10>)
 80011d6:	f002 fd71 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002dc 	.word	0x200002dc

080011e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ec:	f000 ff00 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <_kill>:

int _kill(int pid, int sig)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800120c:	f005 f8ee 	bl	80063ec <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	2216      	movs	r2, #22
 8001214:	601a      	str	r2, [r3, #0]
  return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_exit>:

void _exit (int status)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800122a:	f04f 31ff 	mov.w	r1, #4294967295
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffe7 	bl	8001202 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001234:	e7fe      	b.n	8001234 <_exit+0x12>

08001236 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125c:	605a      	str	r2, [r3, #4]
  return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <_isatty>:

int _isatty(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127e:	b480      	push	{r7}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f005 f890 	bl	80063ec <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20005000 	.word	0x20005000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	20000248 	.word	0x20000248
 8001300:	20000d00 	.word	0x20000d00

08001304 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_TIM1_Init+0x98>)
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <MX_TIM1_Init+0x9c>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001334:	2207      	movs	r2, #7
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM1_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_TIM1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_TIM1_Init+0x98>)
 800135a:	f001 fbbf 	bl	8002adc <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001364:	f7ff fec1 	bl	80010ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001376:	f001 ff17 	bl	80031a8 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001380:	f7ff feb3 	bl	80010ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001392:	f002 fa99 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800139c:	f7ff fea5 	bl	80010ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000024c 	.word	0x2000024c
 80013ac:	40012c00 	.word	0x40012c00

080013b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <MX_TIM2_Init+0x114>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <MX_TIM2_Init+0x114>)
 80013ea:	220f      	movs	r2, #15
 80013ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <MX_TIM2_Init+0x114>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MX_TIM2_Init+0x114>)
 80013f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80013fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_TIM2_Init+0x114>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <MX_TIM2_Init+0x114>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001408:	482e      	ldr	r0, [pc, #184]	; (80014c4 <MX_TIM2_Init+0x114>)
 800140a:	f001 fb67 	bl	8002adc <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001414:	f7ff fe69 	bl	80010ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	4619      	mov	r1, r3
 8001424:	4827      	ldr	r0, [pc, #156]	; (80014c4 <MX_TIM2_Init+0x114>)
 8001426:	f001 febf 	bl	80031a8 <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001430:	f7ff fe5b 	bl	80010ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001434:	4823      	ldr	r0, [pc, #140]	; (80014c4 <MX_TIM2_Init+0x114>)
 8001436:	f001 fbf3 	bl	8002c20 <HAL_TIM_PWM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001440:	f7ff fe53 	bl	80010ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4619      	mov	r1, r3
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <MX_TIM2_Init+0x114>)
 8001454:	f002 fa38 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800145e:	f7ff fe44 	bl	80010ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2360      	movs	r3, #96	; 0x60
 8001464:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <MX_TIM2_Init+0x114>)
 800147a:	f001 fdd3 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001484:	f7ff fe31 	bl	80010ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2204      	movs	r2, #4
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM2_Init+0x114>)
 8001490:	f001 fdc8 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800149a:	f7ff fe26 	bl	80010ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2208      	movs	r2, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM2_Init+0x114>)
 80014a6:	f001 fdbd 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80014b0:	f7ff fe1b 	bl	80010ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM2_Init+0x114>)
 80014b6:	f000 f847 	bl	8001548 <HAL_TIM_MspPostInit>

}
 80014ba:	bf00      	nop
 80014bc:	3738      	adds	r7, #56	; 0x38
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000294 	.word	0x20000294

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <HAL_TIM_Base_MspInit+0x78>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d11c      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_TIM_Base_MspInit+0x7c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_TIM_Base_MspInit+0x7c>)
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_TIM_Base_MspInit+0x7c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2019      	movs	r0, #25
 80014f8:	f000 fadd 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014fc:	2019      	movs	r0, #25
 80014fe:	f000 faf6 	bl	8001aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	201b      	movs	r0, #27
 8001508:	f000 fad5 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800150c:	201b      	movs	r0, #27
 800150e:	f000 faee 	bl	8001aee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001512:	e010      	b.n	8001536 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x7c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_TIM_Base_MspInit+0x7c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_TIM_Base_MspInit+0x7c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40012c00 	.word	0x40012c00
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001566:	d142      	bne.n	80015ee <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_TIM_MspPostInit+0xb0>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_TIM_MspPostInit+0xb0>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_TIM_MspPostInit+0xb0>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_TIM_MspPostInit+0xb0>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_TIM_MspPostInit+0xb0>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_TIM_MspPostInit+0xb0>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Servo_Cover_Pin|Servo_Water_Tissue_Pin;
 8001598:	2303      	movs	r3, #3
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <HAL_TIM_MspPostInit+0xb4>)
 80015ac:	f000 fb6c 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Servo_Sonar_Cover_Pin;
 80015b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2302      	movs	r3, #2
 80015bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Servo_Sonar_Cover_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <HAL_TIM_MspPostInit+0xb8>)
 80015c6:	f000 fb5f 	bl	8001c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_TIM_MspPostInit+0xbc>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_TIM_MspPostInit+0xbc>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40010000 	.word	0x40010000

08001608 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f002 f9b2 	bl	80039a8 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f7ff fd4e 	bl	80010ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002dc 	.word	0x200002dc
 8001658:	40013800 	.word	0x40013800

0800165c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_USART2_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800166c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001694:	f002 f988 	bl	80039a8 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169e:	f7ff fd24 	bl	80010ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000324 	.word	0x20000324
 80016ac:	40004400 	.word	0x40004400

080016b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a35      	ldr	r2, [pc, #212]	; (80017a0 <HAL_UART_MspInit+0xf0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13a      	bne.n	8001746 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d0:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8001700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4619      	mov	r1, r3
 8001714:	4824      	ldr	r0, [pc, #144]	; (80017a8 <HAL_UART_MspInit+0xf8>)
 8001716:	f000 fab7 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 800171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4619      	mov	r1, r3
 800172e:	481e      	ldr	r0, [pc, #120]	; (80017a8 <HAL_UART_MspInit+0xf8>)
 8001730:	f000 faaa 	bl	8001c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2025      	movs	r0, #37	; 0x25
 800173a:	f000 f9bc 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800173e:	2025      	movs	r0, #37	; 0x25
 8001740:	f000 f9d5 	bl	8001aee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001744:	e028      	b.n	8001798 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_UART_MspInit+0xfc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d123      	bne.n	8001798 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_UART_MspInit+0xf4>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COM_TX_Pin|COM_RX_Pin;
 8001780:	230c      	movs	r3, #12
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2302      	movs	r3, #2
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_UART_MspInit+0xf8>)
 8001794:	f000 fa78 	bl	8001c88 <HAL_GPIO_Init>
}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40004400 	.word	0x40004400

080017b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff fda8 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017cc:	4c09      	ldr	r4, [pc, #36]	; (80017f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f004 fe0d 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017de:	f7ff fbfd 	bl	8000fdc <main>
  bx lr
 80017e2:	4770      	bx	lr
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017ec:	0800a170 	.word	0x0800a170
  ldr r2, =_sbss
 80017f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017f4:	20000cfc 	.word	0x20000cfc

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x28>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x28>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f947 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fc6c 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f95f 	bl	8001b0a <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f927 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000004 	.word	0x20000004
 8001880:	2000000c 	.word	0x2000000c
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x1c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x20>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_IncTick+0x20>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	2000036c 	.word	0x2000036c

080018ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_GetTick+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	2000036c 	.word	0x2000036c

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fff0 	bl	80018ac <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffe0 	bl	80018ac <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000000c 	.word	0x2000000c

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <__NVIC_EnableIRQ+0x34>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff2d 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff42 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff35 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d008      	beq.n	8001b4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e020      	b.n	8001b8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020e 	bic.w	r2, r2, #14
 8001b5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d005      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e051      	b.n	8001c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020e 	bic.w	r2, r2, #14
 8001bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_DMA_Abort_IT+0xd4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d029      	beq.n	8001c3a <HAL_DMA_Abort_IT+0xa2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_DMA_Abort_IT+0xd8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x9e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <HAL_DMA_Abort_IT+0xdc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01a      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x98>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_DMA_Abort_IT+0xe0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d012      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x92>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_DMA_Abort_IT+0xe4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00a      	beq.n	8001c24 <HAL_DMA_Abort_IT+0x8c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_DMA_Abort_IT+0xe8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <HAL_DMA_Abort_IT+0x86>
 8001c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c1c:	e00e      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c22:	e00b      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c28:	e008      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	e005      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c34:	e002      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c36:	2310      	movs	r3, #16
 8001c38:	e000      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_DMA_Abort_IT+0xec>)
 8001c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
    } 
  }
  return status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40020008 	.word	0x40020008
 8001c70:	4002001c 	.word	0x4002001c
 8001c74:	40020030 	.word	0x40020030
 8001c78:	40020044 	.word	0x40020044
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	4002006c 	.word	0x4002006c
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b08b      	sub	sp, #44	; 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e169      	b.n	8001f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8158 	bne.w	8001f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a9a      	ldr	r2, [pc, #616]	; (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05e      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a98      	ldr	r2, [pc, #608]	; (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d875      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cca:	4a98      	ldr	r2, [pc, #608]	; (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d058      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cd0:	4a96      	ldr	r2, [pc, #600]	; (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d86f      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a96      	ldr	r2, [pc, #600]	; (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d052      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cdc:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d869      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a94      	ldr	r2, [pc, #592]	; (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04c      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d863      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cee:	4a92      	ldr	r2, [pc, #584]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d046      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a90      	ldr	r2, [pc, #576]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d85d      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d82a      	bhi.n	8001d54 <HAL_GPIO_Init+0xcc>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d859      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <HAL_GPIO_Init+0x80>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d6f 	.word	0x08001d6f
 8001d14:	08001db1 	.word	0x08001db1
 8001d18:	08001db7 	.word	0x08001db7
 8001d1c:	08001db7 	.word	0x08001db7
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001db7 	.word	0x08001db7
 8001d28:	08001db7 	.word	0x08001db7
 8001d2c:	08001db7 	.word	0x08001db7
 8001d30:	08001db7 	.word	0x08001db7
 8001d34:	08001db7 	.word	0x08001db7
 8001d38:	08001db7 	.word	0x08001db7
 8001d3c:	08001db7 	.word	0x08001db7
 8001d40:	08001db7 	.word	0x08001db7
 8001d44:	08001db7 	.word	0x08001db7
 8001d48:	08001db7 	.word	0x08001db7
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	4a79      	ldr	r2, [pc, #484]	; (8001f3c <HAL_GPIO_Init+0x2b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d5a:	e02c      	b.n	8001db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e029      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e024      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	3308      	adds	r3, #8
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e01f      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e01a      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e013      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	611a      	str	r2, [r3, #16]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	615a      	str	r2, [r3, #20]
          break;
 8001dae:	e003      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          break;
 8001db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d801      	bhi.n	8001dc2 <HAL_GPIO_Init+0x13a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_Init+0x13e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2bff      	cmp	r3, #255	; 0xff
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_GPIO_Init+0x14c>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x152>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3b08      	subs	r3, #8
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	210f      	movs	r1, #15
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80b1 	beq.w	8001f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e20:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1ec>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1e8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3e      	ldr	r2, [pc, #248]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e0>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e74:	2300      	movs	r3, #0
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e86:	492f      	ldr	r1, [pc, #188]	; (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	492c      	ldr	r1, [pc, #176]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4928      	ldr	r1, [pc, #160]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	491e      	ldr	r1, [pc, #120]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4918      	ldr	r1, [pc, #96]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4914      	ldr	r1, [pc, #80]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d021      	beq.n	8001f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e021      	b.n	8001f6a <HAL_GPIO_Init+0x2e2>
 8001f26:	bf00      	nop
 8001f28:	10320000 	.word	0x10320000
 8001f2c:	10310000 	.word	0x10310000
 8001f30:	10220000 	.word	0x10220000
 8001f34:	10210000 	.word	0x10210000
 8001f38:	10120000 	.word	0x10120000
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4909      	ldr	r1, [pc, #36]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f ae8e 	bne.w	8001c9c <HAL_GPIO_Init+0x14>
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	372c      	adds	r7, #44	; 0x2c
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fce:	787b      	ldrb	r3, [r7, #1]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	611a      	str	r2, [r3, #16]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f806 	bl	8002020 <HAL_GPIO_EXTI_Callback>
  }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e12b      	b.n	800229e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ff42 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002098:	f000 fcda 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 800209c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a81      	ldr	r2, [pc, #516]	; (80022a8 <HAL_I2C_Init+0x274>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d807      	bhi.n	80020b8 <HAL_I2C_Init+0x84>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a80      	ldr	r2, [pc, #512]	; (80022ac <HAL_I2C_Init+0x278>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	bf94      	ite	ls
 80020b0:	2301      	movls	r3, #1
 80020b2:	2300      	movhi	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e006      	b.n	80020c6 <HAL_I2C_Init+0x92>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a7d      	ldr	r2, [pc, #500]	; (80022b0 <HAL_I2C_Init+0x27c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	bf94      	ite	ls
 80020c0:	2301      	movls	r3, #1
 80020c2:	2300      	movhi	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0e7      	b.n	800229e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a78      	ldr	r2, [pc, #480]	; (80022b4 <HAL_I2C_Init+0x280>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a6a      	ldr	r2, [pc, #424]	; (80022a8 <HAL_I2C_Init+0x274>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d802      	bhi.n	8002108 <HAL_I2C_Init+0xd4>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	e009      	b.n	800211c <HAL_I2C_Init+0xe8>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_I2C_Init+0x284>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	3301      	adds	r3, #1
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	430b      	orrs	r3, r1
 8002122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800212e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	495c      	ldr	r1, [pc, #368]	; (80022a8 <HAL_I2C_Init+0x274>)
 8002138:	428b      	cmp	r3, r1
 800213a:	d819      	bhi.n	8002170 <HAL_I2C_Init+0x13c>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e59      	subs	r1, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fbb1 f3f3 	udiv	r3, r1, r3
 800214a:	1c59      	adds	r1, r3, #1
 800214c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002150:	400b      	ands	r3, r1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_I2C_Init+0x138>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1e59      	subs	r1, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fbb1 f3f3 	udiv	r3, r1, r3
 8002164:	3301      	adds	r3, #1
 8002166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216a:	e051      	b.n	8002210 <HAL_I2C_Init+0x1dc>
 800216c:	2304      	movs	r3, #4
 800216e:	e04f      	b.n	8002210 <HAL_I2C_Init+0x1dc>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d111      	bne.n	800219c <HAL_I2C_Init+0x168>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e012      	b.n	80021c2 <HAL_I2C_Init+0x18e>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Init+0x196>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e022      	b.n	8002210 <HAL_I2C_Init+0x1dc>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10e      	bne.n	80021f0 <HAL_I2C_Init+0x1bc>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1e58      	subs	r0, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Init+0x1dc>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	0099      	lsls	r1, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6809      	ldr	r1, [r1, #0]
 8002214:	4313      	orrs	r3, r2
 8002216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800223e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6911      	ldr	r1, [r2, #16]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68d2      	ldr	r2, [r2, #12]
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	000186a0 	.word	0x000186a0
 80022ac:	001e847f 	.word	0x001e847f
 80022b0:	003d08ff 	.word	0x003d08ff
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e272      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d00c      	beq.n	8002302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e8:	4b8f      	ldr	r3, [pc, #572]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d112      	bne.n	800231a <HAL_RCC_OscConfig+0x5e>
 80022f4:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d10b      	bne.n	800231a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x12c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d168      	bne.n	80023e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e24c      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x76>
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a7f      	ldr	r2, [pc, #508]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7a      	ldr	r2, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b78      	ldr	r3, [pc, #480]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a77      	ldr	r2, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0xbc>
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a71      	ldr	r2, [pc, #452]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002378:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fa88 	bl	80018ac <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fa84 	bl	80018ac <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e200      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe4>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fa74 	bl	80018ac <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fa70 	bl	80018ac <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1ec      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x10c>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x18c>
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x176>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c0      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4939      	ldr	r1, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x270>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7ff fa29 	bl	80018ac <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245e:	f7ff fa25 	bl	80018ac <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a1      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4927      	ldr	r1, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_RCC_OscConfig+0x270>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fa08 	bl	80018ac <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff fa04 	bl	80018ac <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e180      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03a      	beq.n	8002540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d019      	beq.n	8002506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_RCC_OscConfig+0x274>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7ff f9e8 	bl	80018ac <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff f9e4 	bl	80018ac <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e160      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 face 	bl	8002aa0 <RCC_Delay>
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_OscConfig+0x274>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7ff f9ce 	bl	80018ac <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002512:	e00f      	b.n	8002534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff f9ca 	bl	80018ac <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d908      	bls.n	8002534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e146      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	42420000 	.word	0x42420000
 8002530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b92      	ldr	r3, [pc, #584]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e9      	bne.n	8002514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a6 	beq.w	800269a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a87      	ldr	r2, [pc, #540]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7e      	ldr	r2, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7ff f98b 	bl	80018ac <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7ff f987 	bl	80018ac <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e103      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x312>
 80025c0:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a6e      	ldr	r2, [pc, #440]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e02d      	b.n	800262a <HAL_RCC_OscConfig+0x36e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x334>
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a66      	ldr	r2, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	e01c      	b.n	800262a <HAL_RCC_OscConfig+0x36e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d10c      	bne.n	8002612 <HAL_RCC_OscConfig+0x356>
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a60      	ldr	r2, [pc, #384]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	e00b      	b.n	800262a <HAL_RCC_OscConfig+0x36e>
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a5a      	ldr	r2, [pc, #360]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	4b58      	ldr	r3, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a57      	ldr	r2, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d015      	beq.n	800265e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff f93b 	bl	80018ac <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7ff f937 	bl	80018ac <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0b1      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ee      	beq.n	800263a <HAL_RCC_OscConfig+0x37e>
 800265c:	e014      	b.n	8002688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7ff f925 	bl	80018ac <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff f921 	bl	80018ac <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e09b      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	4b40      	ldr	r3, [pc, #256]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ee      	bne.n	8002666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a3b      	ldr	r2, [pc, #236]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8087 	beq.w	80027b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d061      	beq.n	8002774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d146      	bne.n	8002746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff f8f5 	bl	80018ac <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7ff f8f1 	bl	80018ac <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e06d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4921      	ldr	r1, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a19      	ldr	r1, [r3, #32]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	430b      	orrs	r3, r1
 8002712:	491b      	ldr	r1, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff f8c5 	bl	80018ac <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff f8c1 	bl	80018ac <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x46a>
 8002744:	e035      	b.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x4cc>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff f8ae 	bl	80018ac <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7ff f8aa 	bl	80018ac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e026      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x498>
 8002772:	e01e      	b.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e019      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x500>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d0      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4965      	ldr	r1, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800283e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d040      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e073      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4936      	ldr	r1, [pc, #216]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7fe fffc 	bl	80018ac <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe fff8 	bl	80018ac <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e053      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d210      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe ff5a 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	08009d14 	.word	0x08009d14
 800298c:	20000004 	.word	0x20000004
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x30>
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x36>
 80029c2:	e027      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80029c6:	613b      	str	r3, [r7, #16]
      break;
 80029c8:	e027      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0c9b      	lsrs	r3, r3, #18
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d010      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	0c5b      	lsrs	r3, r3, #17
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80029f6:	fb03 f202 	mul.w	r2, r3, r2
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e004      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	613b      	str	r3, [r7, #16]
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a16:	613b      	str	r3, [r7, #16]
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	693b      	ldr	r3, [r7, #16]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	08009d2c 	.word	0x08009d2c
 8002a34:	08009d3c 	.word	0x08009d3c
 8002a38:	003d0900 	.word	0x003d0900

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	20000004 	.word	0x20000004

08002a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a54:	f7ff fff2 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4903      	ldr	r1, [pc, #12]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08009d24 	.word	0x08009d24

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a7c:	f7ff ffde 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	0adb      	lsrs	r3, r3, #11
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08009d24 	.word	0x08009d24

08002aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCC_Delay+0x34>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <RCC_Delay+0x38>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0a5b      	lsrs	r3, r3, #9
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002abc:	bf00      	nop
  }
  while (Delay --);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e5a      	subs	r2, r3, #1
 8002ac2:	60fa      	str	r2, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <RCC_Delay+0x1c>
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	10624dd3 	.word	0x10624dd3

08002adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e041      	b.n	8002b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fce0 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fc30 	bl	8003380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d001      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e03a      	b.n	8002c0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_TIM_Base_Start_IT+0x98>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x58>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d009      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x58>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x58>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d111      	bne.n	8002bf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d010      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	e007      	b.n	8002c08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800

08002c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e041      	b.n	8002cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f839 	bl	8002cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f000 fb8e 	bl	8003380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_TIM_PWM_Start+0x24>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e022      	b.n	8002d3a <HAL_TIM_PWM_Start+0x6a>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d109      	bne.n	8002d0e <HAL_TIM_PWM_Start+0x3e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e015      	b.n	8002d3a <HAL_TIM_PWM_Start+0x6a>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d109      	bne.n	8002d28 <HAL_TIM_PWM_Start+0x58>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e008      	b.n	8002d3a <HAL_TIM_PWM_Start+0x6a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e05e      	b.n	8002e00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x82>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	e013      	b.n	8002d7a <HAL_TIM_PWM_Start+0xaa>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x92>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	e00b      	b.n	8002d7a <HAL_TIM_PWM_Start+0xaa>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PWM_Start+0xa2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d70:	e003      	b.n	8002d7a <HAL_TIM_PWM_Start+0xaa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fd7c 	bl	8003880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_TIM_PWM_Start+0x138>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_TIM_PWM_Start+0x138>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_TIM_PWM_Start+0xfa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d009      	beq.n	8002dca <HAL_TIM_PWM_Start+0xfa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <HAL_TIM_PWM_Start+0x13c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_PWM_Start+0xfa>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_TIM_PWM_Start+0x140>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d010      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	e007      	b.n	8002dfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800

08002e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0202 	mvn.w	r2, #2
 8002e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa76 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa69 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fa78 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0204 	mvn.w	r2, #4
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa4c 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa3f 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fa4e 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0208 	mvn.w	r2, #8
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa22 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa15 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa24 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0210 	mvn.w	r2, #16
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2208      	movs	r2, #8
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9f8 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9eb 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9fa 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10e      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0201 	mvn.w	r2, #1
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 fd06 	bl	80049a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fce9 	bl	8003996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9be 	bl	800336c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b20      	cmp	r3, #32
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0220 	mvn.w	r2, #32
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fcb4 	bl	8003984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ae      	b.n	80031a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	f200 809f 	bhi.w	8003190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800308d 	.word	0x0800308d
 800305c:	08003191 	.word	0x08003191
 8003060:	08003191 	.word	0x08003191
 8003064:	08003191 	.word	0x08003191
 8003068:	080030cd 	.word	0x080030cd
 800306c:	08003191 	.word	0x08003191
 8003070:	08003191 	.word	0x08003191
 8003074:	08003191 	.word	0x08003191
 8003078:	0800310f 	.word	0x0800310f
 800307c:	08003191 	.word	0x08003191
 8003080:	08003191 	.word	0x08003191
 8003084:	08003191 	.word	0x08003191
 8003088:	0800314f 	.word	0x0800314f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f9d6 	bl	8003444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	619a      	str	r2, [r3, #24]
      break;
 80030ca:	e064      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa1c 	bl	8003510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	619a      	str	r2, [r3, #24]
      break;
 800310c:	e043      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa65 	bl	80035e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0204 	bic.w	r2, r2, #4
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
      break;
 800314c:	e023      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 faaf 	bl	80036b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	61da      	str	r2, [r3, #28]
      break;
 800318e:	e002      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_TIM_ConfigClockSource+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e0b4      	b.n	800332e <HAL_TIM_ConfigClockSource+0x186>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fc:	d03e      	beq.n	800327c <HAL_TIM_ConfigClockSource+0xd4>
 80031fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003202:	f200 8087 	bhi.w	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	f000 8086 	beq.w	800331a <HAL_TIM_ConfigClockSource+0x172>
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003212:	d87f      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d01a      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xa6>
 8003218:	2b70      	cmp	r3, #112	; 0x70
 800321a:	d87b      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b60      	cmp	r3, #96	; 0x60
 800321e:	d050      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003220:	2b60      	cmp	r3, #96	; 0x60
 8003222:	d877      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b50      	cmp	r3, #80	; 0x50
 8003226:	d03c      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003228:	2b50      	cmp	r3, #80	; 0x50
 800322a:	d873      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d058      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d86f      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b30      	cmp	r3, #48	; 0x30
 8003236:	d064      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x15a>
 8003238:	2b30      	cmp	r3, #48	; 0x30
 800323a:	d86b      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d060      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x15a>
 8003240:	2b20      	cmp	r3, #32
 8003242:	d867      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d05c      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x15a>
 8003248:	2b10      	cmp	r3, #16
 800324a:	d05a      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x15a>
 800324c:	e062      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800325e:	f000 faf0 	bl	8003842 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	609a      	str	r2, [r3, #8]
      break;
 800327a:	e04f      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800328c:	f000 fad9 	bl	8003842 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800329e:	609a      	str	r2, [r3, #8]
      break;
 80032a0:	e03c      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	461a      	mov	r2, r3
 80032b0:	f000 fa50 	bl	8003754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2150      	movs	r1, #80	; 0x50
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 faa7 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 80032c0:	e02c      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ce:	461a      	mov	r2, r3
 80032d0:	f000 fa6e 	bl	80037b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2160      	movs	r1, #96	; 0x60
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa97 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 80032e0:	e01c      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 fa30 	bl	8003754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2140      	movs	r1, #64	; 0x40
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa87 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 8003300:	e00c      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f000 fa7e 	bl	800380e <TIM_ITRx_SetConfig>
      break;
 8003312:	e003      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e000      	b.n	800331c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800331a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
	...

08003380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <TIM_Base_SetConfig+0xb8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x30>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x30>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a26      	ldr	r2, [pc, #152]	; (800343c <TIM_Base_SetConfig+0xbc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x30>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <TIM_Base_SetConfig+0xc0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <TIM_Base_SetConfig+0xb8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0x62>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0x62>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <TIM_Base_SetConfig+0xbc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <TIM_Base_SetConfig+0xc0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <TIM_Base_SetConfig+0xb8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	615a      	str	r2, [r3, #20]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800

08003444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f023 0201 	bic.w	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0302 	bic.w	r3, r3, #2
 800348c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <TIM_OC1_SetConfig+0xc8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10c      	bne.n	80034ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0308 	bic.w	r3, r3, #8
 80034a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a13      	ldr	r2, [pc, #76]	; (800350c <TIM_OC1_SetConfig+0xc8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00

08003510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 0210 	bic.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0320 	bic.w	r3, r3, #32
 800355a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <TIM_OC2_SetConfig+0xd0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d10d      	bne.n	800358c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <TIM_OC2_SetConfig+0xd0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d113      	bne.n	80035bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800359a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800362c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_OC3_SetConfig+0xd0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10d      	bne.n	800365e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <TIM_OC3_SetConfig+0xd0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d113      	bne.n	800368e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800366c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	031b      	lsls	r3, r3, #12
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <TIM_OC4_SetConfig+0x98>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d109      	bne.n	800372c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00

08003754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0201 	bic.w	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800377e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f023 030a 	bic.w	r3, r3, #10
 8003790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0210 	bic.w	r2, r3, #16
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	031b      	lsls	r3, r3, #12
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	f043 0307 	orr.w	r3, r3, #7
 8003830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003842:	b480      	push	{r7}
 8003844:	b087      	sub	sp, #28
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800385c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	021a      	lsls	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	431a      	orrs	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4313      	orrs	r3, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	609a      	str	r2, [r3, #8]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2201      	movs	r2, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1a      	ldr	r2, [r3, #32]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	401a      	ands	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038dc:	2302      	movs	r3, #2
 80038de:	e046      	b.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d009      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a10      	ldr	r2, [pc, #64]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10c      	bne.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800

08003984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e042      	b.n	8003a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fe6e 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fe57 	bl	80046a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d16d      	bne.n	8003b44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Transmit+0x2c>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e066      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	; 0x21
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a86:	f7fd ff11 	bl	80018ac <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003abc:	e02a      	b.n	8003b14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fba6 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3302      	adds	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cf      	bne.n	8003abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fb76 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b08a      	sub	sp, #40	; 0x28
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d17c      	bne.n	8003c68 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_UART_Receive+0x2c>
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e075      	b.n	8003c6a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2222      	movs	r2, #34	; 0x22
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b92:	f7fd fe8b 	bl	80018ac <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	d108      	bne.n	8003bc0 <HAL_UART_Receive+0x72>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e003      	b.n	8003bc8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bc8:	e043      	b.n	8003c52 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fb20 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e042      	b.n	8003c6a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	3302      	adds	r3, #2
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e01f      	b.n	8003c44 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d007      	beq.n	8003c1e <HAL_UART_Receive+0xd0>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_UART_Receive+0xde>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e008      	b.n	8003c3e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3301      	adds	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1b6      	bne.n	8003bca <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d112      	bne.n	8003cb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_UART_Receive_IT+0x26>
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e00b      	b.n	8003cb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fb24 	bl	80042f6 <UART_Start_Receive_IT>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	e000      	b.n	8003cb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0ba      	sub	sp, #232	; 0xe8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_UART_IRQHandler+0x66>
 8003d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fc01 	bl	8004522 <UART_Receive_IT>
      return;
 8003d20:	e25b      	b.n	80041da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80de 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x22c>
 8003d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80d1 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_UART_IRQHandler+0xae>
 8003d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_UART_IRQHandler+0xd2>
 8003d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f043 0202 	orr.w	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_UART_IRQHandler+0xf6>
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f043 0204 	orr.w	r2, r3, #4
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <HAL_UART_IRQHandler+0x126>
 8003dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f043 0208 	orr.w	r2, r3, #8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 81f2 	beq.w	80041d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_IRQHandler+0x14e>
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fb8c 	bl	8004522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_UART_IRQHandler+0x17a>
 8003e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04f      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa96 	bl	8004368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d041      	beq.n	8003ece <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1d9      	bne.n	8003e4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d013      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	4a7e      	ldr	r2, [pc, #504]	; (800409c <HAL_UART_IRQHandler+0x3e0>)
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fe74 	bl	8001b98 <HAL_DMA_Abort_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00e      	b.n	8003ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f993 	bl	80041f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00a      	b.n	8003ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f98f 	bl	80041f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e006      	b.n	8003ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f98b 	bl	80041f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ee2:	e175      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	bf00      	nop
    return;
 8003ee6:	e173      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 814f 	bne.w	8004190 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8148 	beq.w	8004190 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8141 	beq.w	8004190 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80b6 	beq.w	80040a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8145 	beq.w	80041d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f52:	429a      	cmp	r2, r3
 8003f54:	f080 813e 	bcs.w	80041d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	f000 8088 	beq.w	800407c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fa4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1d9      	bne.n	8003f6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3314      	adds	r3, #20
 8003fbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e1      	bne.n	8003fb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004018:	66fa      	str	r2, [r7, #108]	; 0x6c
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800401e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e3      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404c:	f023 0310 	bic.w	r3, r3, #16
 8004050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800405e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004060:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800406c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e3      	bne.n	800403a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fd53 	bl	8001b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800408a:	b29b      	uxth	r3, r3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	b29b      	uxth	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8b6 	bl	8004204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004098:	e09c      	b.n	80041d4 <HAL_UART_IRQHandler+0x518>
 800409a:	bf00      	nop
 800409c:	0800442d 	.word	0x0800442d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 808e 	beq.w	80041d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8089 	beq.w	80041d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040ea:	647a      	str	r2, [r7, #68]	; 0x44
 80040ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e3      	bne.n	80040c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3314      	adds	r3, #20
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	623b      	str	r3, [r7, #32]
   return(result);
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004122:	633a      	str	r2, [r7, #48]	; 0x30
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e3      	bne.n	80040fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	60fb      	str	r3, [r7, #12]
   return(result);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0310 	bic.w	r3, r3, #16
 800415a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004168:	61fa      	str	r2, [r7, #28]
 800416a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	617b      	str	r3, [r7, #20]
   return(result);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e3      	bne.n	8004144 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f83b 	bl	8004204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800418e:	e023      	b.n	80041d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_UART_IRQHandler+0x4f4>
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f953 	bl	8004454 <UART_Transmit_IT>
    return;
 80041ae:	e014      	b.n	80041da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <HAL_UART_IRQHandler+0x51e>
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f992 	bl	80044f2 <UART_EndTransmit_IT>
    return;
 80041ce:	e004      	b.n	80041da <HAL_UART_IRQHandler+0x51e>
    return;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_UART_IRQHandler+0x51e>
      return;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_UART_IRQHandler+0x51e>
      return;
 80041d8:	bf00      	nop
  }
}
 80041da:	37e8      	adds	r7, #232	; 0xe8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b090      	sub	sp, #64	; 0x40
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	e050      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d04c      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	f7fd fb37 	bl	80018ac <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004246:	429a      	cmp	r2, r3
 8004248:	d241      	bcs.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800426a:	637a      	str	r2, [r7, #52]	; 0x34
 800426c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e5      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	613b      	str	r3, [r7, #16]
   return(result);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800429e:	623a      	str	r2, [r7, #32]
 80042a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	69f9      	ldr	r1, [r7, #28]
 80042a4:	6a3a      	ldr	r2, [r7, #32]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d09f      	beq.n	800422c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3740      	adds	r7, #64	; 0x40
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2222      	movs	r2, #34	; 0x22
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800433a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0220 	orr.w	r2, r2, #32
 800435a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b095      	sub	sp, #84	; 0x54
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004390:	643a      	str	r2, [r7, #64]	; 0x40
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e5      	bne.n	8004370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e5      	bne.n	80043a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d119      	bne.n	8004414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	647b      	str	r3, [r7, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004400:	61ba      	str	r2, [r7, #24]
 8004402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6979      	ldr	r1, [r7, #20]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	613b      	str	r3, [r7, #16]
   return(result);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004422:	bf00      	nop
 8004424:	3754      	adds	r7, #84	; 0x54
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff fed3 	bl	80041f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b21      	cmp	r3, #33	; 0x21
 8004466:	d13e      	bne.n	80044e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d114      	bne.n	800449c <UART_Transmit_IT+0x48>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d110      	bne.n	800449c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]
 800449a:	e008      	b.n	80044ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6211      	str	r1, [r2, #32]
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4619      	mov	r1, r3
 80044bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fe64 	bl	80041e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08c      	sub	sp, #48	; 0x30
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b22      	cmp	r3, #34	; 0x22
 8004534:	f040 80ae 	bne.w	8004694 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d117      	bne.n	8004572 <UART_Receive_IT+0x50>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d113      	bne.n	8004572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004560:	b29a      	uxth	r2, r3
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
 8004570:	e026      	b.n	80045c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d007      	beq.n	8004596 <UART_Receive_IT+0x74>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <UART_Receive_IT+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e008      	b.n	80045b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d15d      	bne.n	8004690 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0220 	bic.w	r2, r2, #32
 80045e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	2b01      	cmp	r3, #1
 8004618:	d135      	bne.n	8004686 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	613b      	str	r3, [r7, #16]
   return(result);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	623a      	str	r2, [r7, #32]
 8004642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	69f9      	ldr	r1, [r7, #28]
 8004646:	6a3a      	ldr	r2, [r7, #32]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	61bb      	str	r3, [r7, #24]
   return(result);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b10      	cmp	r3, #16
 8004660:	d10a      	bne.n	8004678 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fdc0 	bl	8004204 <HAL_UARTEx_RxEventCallback>
 8004684:	e002      	b.n	800468c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f960 	bl	800494c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e002      	b.n	8004696 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3730      	adds	r7, #48	; 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046da:	f023 030c 	bic.w	r3, r3, #12
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <UART_SetConfig+0x114>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7fe f9b6 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	e002      	b.n	8004716 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe f99e 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <UART_SetConfig+0x118>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	0119      	lsls	r1, r3, #4
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009a      	lsls	r2, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	fbb2 f2f3 	udiv	r2, r2, r3
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <UART_SetConfig+0x118>)
 800474e:	fba3 0302 	umull	r0, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2064      	movs	r0, #100	; 0x64
 8004756:	fb00 f303 	mul.w	r3, r0, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	; 0x32
 8004760:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <UART_SetConfig+0x118>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476c:	4419      	add	r1, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	fbb2 f2f3 	udiv	r2, r2, r3
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <UART_SetConfig+0x118>)
 8004786:	fba3 0302 	umull	r0, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2064      	movs	r0, #100	; 0x64
 800478e:	fb00 f303 	mul.w	r3, r0, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	; 0x32
 8004798:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <UART_SetConfig+0x118>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	440a      	add	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40013800 	.word	0x40013800
 80047b8:	51eb851f 	.word	0x51eb851f

080047bc <WriteBuffer>:

uint8_t Rx_buffer[1024];
uint16_t Rx_Head = 0;
uint16_t Rx_Tail = 0;

void WriteBuffer(uint8_t buff){
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
	Rx_buffer[Rx_Head] = buff;
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <WriteBuffer+0x60>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4a14      	ldr	r2, [pc, #80]	; (8004820 <WriteBuffer+0x64>)
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	5453      	strb	r3, [r2, r1]
	Rx_Head = (Rx_Head + 1) % UART_RX_BUFFER_SIZE;
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <WriteBuffer+0x60>)
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	425a      	negs	r2, r3
 80047da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80047e2:	bf58      	it	pl
 80047e4:	4253      	negpl	r3, r2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <WriteBuffer+0x60>)
 80047ea:	801a      	strh	r2, [r3, #0]
	if(Rx_Head == Rx_Tail)
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <WriteBuffer+0x60>)
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <WriteBuffer+0x68>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d10c      	bne.n	8004812 <WriteBuffer+0x56>
		Rx_Tail = (Rx_Tail + 1) % UART_RX_BUFFER_SIZE;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <WriteBuffer+0x68>)
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	425a      	negs	r2, r3
 8004800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004804:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004808:	bf58      	it	pl
 800480a:	4253      	negpl	r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <WriteBuffer+0x68>)
 8004810:	801a      	strh	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	20000b74 	.word	0x20000b74
 8004820:	20000774 	.word	0x20000774
 8004824:	20000b76 	.word	0x20000b76

08004828 <AT_COMMAND>:
uint8_t Send_sign[] = "send fail\r\n";
uint8_t Success_sign[] = "success\r\n";
uint8_t Error_sign[] = "error\r\n";
uint8_t None_sign[] = "none\r\n";

uint8_t AT_COMMAND(uint8_t *cmd, uint8_t repeat, uint16_t timeout){
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
 8004834:	4613      	mov	r3, r2
 8004836:	803b      	strh	r3, [r7, #0]


	while(repeat > 0){
 8004838:	e018      	b.n	800486c <AT_COMMAND+0x44>
		memset(BBOX, 0, sizeof(BBOX));
 800483a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800483e:	2100      	movs	r1, #0
 8004840:	481f      	ldr	r0, [pc, #124]	; (80048c0 <AT_COMMAND+0x98>)
 8004842:	f001 fd59 	bl	80062f8 <memset>
		BBOX_count = 0;
 8004846:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <AT_COMMAND+0x9c>)
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Transmit(&huart1, cmd, strlen((char *)cmd), 100) == HAL_OK) {
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fb fc7f 	bl	8000150 <strlen>
 8004852:	4603      	mov	r3, r0
 8004854:	b29a      	uxth	r2, r3
 8004856:	2364      	movs	r3, #100	; 0x64
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	481b      	ldr	r0, [pc, #108]	; (80048c8 <AT_COMMAND+0xa0>)
 800485c:	f7ff f8f4 	bl	8003a48 <HAL_UART_Transmit>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <AT_COMMAND+0x4c>
			break;
		}
		repeat--;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	3b01      	subs	r3, #1
 800486a:	70fb      	strb	r3, [r7, #3]
	while(repeat > 0){
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e3      	bne.n	800483a <AT_COMMAND+0x12>
 8004872:	e000      	b.n	8004876 <AT_COMMAND+0x4e>
			break;
 8004874:	bf00      	nop
	}
	if(repeat == 0){
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d119      	bne.n	80048b0 <AT_COMMAND+0x88>
		//HAL_UART_Transmit(&huart2, Send_sign, strlen((char *)Send_sign), 100);
		//printf("send fail\r\n");
		return false;
 800487c:	2300      	movs	r3, #0
 800487e:	e01b      	b.n	80048b8 <AT_COMMAND+0x90>
	}
	while(timeout > 0){

		if (strstr((char *)BBOX, "OK") != 0){
 8004880:	4912      	ldr	r1, [pc, #72]	; (80048cc <AT_COMMAND+0xa4>)
 8004882:	480f      	ldr	r0, [pc, #60]	; (80048c0 <AT_COMMAND+0x98>)
 8004884:	f001 fd52 	bl	800632c <strstr>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <AT_COMMAND+0x6a>
			//HAL_UART_Transmit(&huart2, Success_sign, strlen((char *)Success_sign), 100);
			//printf("\r\nOK\r\n");
			return true;
 800488e:	2301      	movs	r3, #1
 8004890:	e012      	b.n	80048b8 <AT_COMMAND+0x90>
		}
		// ERROR -> FAIL
		else if (strstr((char *)BBOX, "FAIL") != 0){
 8004892:	490f      	ldr	r1, [pc, #60]	; (80048d0 <AT_COMMAND+0xa8>)
 8004894:	480a      	ldr	r0, [pc, #40]	; (80048c0 <AT_COMMAND+0x98>)
 8004896:	f001 fd49 	bl	800632c <strstr>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <AT_COMMAND+0x7c>
			//HAL_UART_Transmit(&huart2, Error_sign, strlen((char *)Error_sign), 100);
			//printf("\r\nError\r\n");
			return false;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e009      	b.n	80048b8 <AT_COMMAND+0x90>
		}

		timeout -= 10;
 80048a4:	883b      	ldrh	r3, [r7, #0]
 80048a6:	3b0a      	subs	r3, #10
 80048a8:	803b      	strh	r3, [r7, #0]
		HAL_Delay(10);
 80048aa:	200a      	movs	r0, #10
 80048ac:	f7fd f808 	bl	80018c0 <HAL_Delay>
	while(timeout > 0){
 80048b0:	883b      	ldrh	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e4      	bne.n	8004880 <AT_COMMAND+0x58>


	//HAL_UART_Transmit(&huart2, None_sign, strlen((char *)None_sign), 100);
	//HAL_UART_Transmit(&huart2, BBOX, strlen((char *)BBOX), 100);

	return false;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000370 	.word	0x20000370
 80048c4:	20000771 	.word	0x20000771
 80048c8:	200002dc 	.word	0x200002dc
 80048cc:	08009a78 	.word	0x08009a78
 80048d0:	08009a7c 	.word	0x08009a7c

080048d4 <SendDataToRasp>:
		return false;
	return true;
}


uint8_t SendDataToRasp(uint8_t size, uint8_t * data) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b0a4      	sub	sp, #144	; 0x90
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	6039      	str	r1, [r7, #0]
 80048de:	71fb      	strb	r3, [r7, #7]
	uint8_t str[128] = {0, };
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	f107 0310 	add.w	r3, r7, #16
 80048e8:	227c      	movs	r2, #124	; 0x7c
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 fd03 	bl	80062f8 <memset>

	sprintf((char *)str, "AT+CIPSEND=%u\r\n", size);
 80048f2:	79fa      	ldrb	r2, [r7, #7]
 80048f4:	f107 030c 	add.w	r3, r7, #12
 80048f8:	4913      	ldr	r1, [pc, #76]	; (8004948 <SendDataToRasp+0x74>)
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fc04 	bl	8006108 <siprintf>
	uint8_t res = AT_COMMAND(str, 10, 1000);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004908:	210a      	movs	r1, #10
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff8c 	bl	8004828 <AT_COMMAND>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t res1 = AT_COMMAND(data, 10, 1000);
 8004916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800491a:	210a      	movs	r1, #10
 800491c:	6838      	ldr	r0, [r7, #0]
 800491e:	f7ff ff83 	bl	8004828 <AT_COMMAND>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

	if(res || res1)
 8004928:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <SendDataToRasp+0x64>
 8004930:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <SendDataToRasp+0x68>
		return false;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <SendDataToRasp+0x6a>
	return true;
 800493c:	2301      	movs	r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	3790      	adds	r7, #144	; 0x90
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	08009b34 	.word	0x08009b34

0800494c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <HAL_UART_RxCpltCallback+0x48>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d115      	bne.n	800498a <HAL_UART_RxCpltCallback+0x3e>
		// !!!- DO not printf Here -!!!
		BBOX[BBOX_count++] = buff;
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <HAL_UART_RxCpltCallback+0x4c>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	b2d1      	uxtb	r1, r2
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_UART_RxCpltCallback+0x4c>)
 800496a:	7011      	strb	r1, [r2, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_UART_RxCpltCallback+0x50>)
 8004970:	7819      	ldrb	r1, [r3, #0]
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_UART_RxCpltCallback+0x54>)
 8004974:	5499      	strb	r1, [r3, r2]
		WriteBuffer(buff);
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_UART_RxCpltCallback+0x50>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff ff1e 	bl	80047bc <WriteBuffer>
		HAL_UART_Receive_IT(huart, &buff, 1);
 8004980:	2201      	movs	r2, #1
 8004982:	4906      	ldr	r1, [pc, #24]	; (800499c <HAL_UART_RxCpltCallback+0x50>)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff f974 	bl	8003c72 <HAL_UART_Receive_IT>
	}

}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40013800 	.word	0x40013800
 8004998:	20000771 	.word	0x20000771
 800499c:	20000770 	.word	0x20000770
 80049a0:	20000370 	.word	0x20000370

080049a4 <HAL_TIM_PeriodElapsedCallback>:
//extern void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
//extern uint32_t GetMicroSec(void);

uint32_t overflows = 0U;
extern TIM_HandleTypeDef htim1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // 제네레이트 없음
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a06      	ldr	r2, [pc, #24]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d104      	bne.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		overflows++;
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80049be:	6013      	str	r3, [r2, #0]
	}
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	20000b78 	.word	0x20000b78

080049d4 <GetMicroSec>:


uint32_t GetMicroSec(void){ // 제네레이트 없음
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
	uint32_t count = __HAL_TIM_GET_COUNTER(&htim1);
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <GetMicroSec+0x44>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	603b      	str	r3, [r7, #0]
	uint32_t overflow = overflows;
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <GetMicroSec+0x48>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	607b      	str	r3, [r7, #4]
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) && (count < 0x8000)) {
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <GetMicroSec+0x44>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d106      	bne.n	8004a04 <GetMicroSec+0x30>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fc:	d202      	bcs.n	8004a04 <GetMicroSec+0x30>
	        overflow++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3301      	adds	r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
	}

	return(overflow << 16) + count;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	041a      	lsls	r2, r3, #16
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4413      	add	r3, r2
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	2000024c 	.word	0x2000024c
 8004a1c:	20000b78 	.word	0x20000b78

08004a20 <sensing>:


uint8_t sensing(GI sensor) { // 마그네틱 같은거
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	463b      	mov	r3, r7
 8004a28:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t ret = HAL_GPIO_ReadPin(sensor.Port, sensor.PIN);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	88ba      	ldrh	r2, [r7, #4]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd faac 	bl	8001f90 <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
    return ret;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <turnLED>:

void turnLED(GI led, uint8_t is_ON) { // bool 을 uint8_t로 바꾸었습니다.
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	f107 0308 	add.w	r3, r7, #8
 8004a50:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a54:	4613      	mov	r3, r2
 8004a56:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(led.Port, led.PIN_out, is_ON);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	89f9      	ldrh	r1, [r7, #14]
 8004a5c:	79fa      	ldrb	r2, [r7, #7]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd faad 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <motor_start>:


void motor_start(TI motor) { // 우리는 모터가 두 개라서 두개를 스타트 해야합니다.
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	f107 0c08 	add.w	ip, r7, #8
 8004a76:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_TIM_PWM_Start(&(motor.htim), motor.channel);
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f107 0008 	add.w	r0, r7, #8
 8004a82:	f7fe f925 	bl	8002cd0 <HAL_TIM_PWM_Start>
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a8e:	b004      	add	sp, #16
 8004a90:	4770      	bx	lr
 8004a92:	0000      	movs	r0, r0
 8004a94:	0000      	movs	r0, r0
	...

08004a98 <getDistance>:

    // degree는 500이 0도 // 1000 이 90도
    // main문을 하면서 다시 검증해볼 필요 있음 (MG996R이랑 SG90이랑 Duty 같음)
}

float getDistance(GI Sensor) { // 초음파
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(Sensor.Port, Sensor.PIN_out, RESET);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	88f9      	ldrh	r1, [r7, #6]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fa87 	bl	8001fbe <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004ab0:	2005      	movs	r0, #5
 8004ab2:	f7fc ff05 	bl	80018c0 <HAL_Delay>
    HAL_GPIO_WritePin(Sensor.Port, Sensor.PIN_out, SET);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	88f9      	ldrh	r1, [r7, #6]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fd fa7e 	bl	8001fbe <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8004ac2:	2014      	movs	r0, #20
 8004ac4:	f7fc fefc 	bl	80018c0 <HAL_Delay>
    HAL_GPIO_WritePin(Sensor.Port, Sensor.PIN_out, RESET);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	88f9      	ldrh	r1, [r7, #6]
 8004acc:	2200      	movs	r2, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fa75 	bl	8001fbe <HAL_GPIO_WritePin>

    //printf("right after : %lu\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));

    uint32_t start_time = HAL_GetTick();
 8004ad4:	f7fc feea 	bl	80018ac <HAL_GetTick>
 8004ad8:	61f8      	str	r0, [r7, #28]
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_RESET){
 8004ada:	e009      	b.n	8004af0 <getDistance+0x58>
    	if(HAL_GetTick() - start_time > 1000){
 8004adc:	f7fc fee6 	bl	80018ac <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aea:	d901      	bls.n	8004af0 <getDistance+0x58>
    		return -1.0;
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <getDistance+0xf8>)
 8004aee:	e044      	b.n	8004b7a <getDistance+0xe2>
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_RESET){
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	88ba      	ldrh	r2, [r7, #4]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fd fa4a 	bl	8001f90 <HAL_GPIO_ReadPin>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0ec      	beq.n	8004adc <getDistance+0x44>
    	}
    }
    uint32_t st = GetMicroSec();
 8004b02:	f7ff ff67 	bl	80049d4 <GetMicroSec>
 8004b06:	61b8      	str	r0, [r7, #24]
    start_time = HAL_GetTick();
 8004b08:	f7fc fed0 	bl	80018ac <HAL_GetTick>
 8004b0c:	61f8      	str	r0, [r7, #28]
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_SET){
 8004b0e:	e009      	b.n	8004b24 <getDistance+0x8c>
    	if(HAL_GetTick() - start_time > 1000){
 8004b10:	f7fc fecc 	bl	80018ac <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b1e:	d901      	bls.n	8004b24 <getDistance+0x8c>
			return -1.0;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <getDistance+0xf8>)
 8004b22:	e02a      	b.n	8004b7a <getDistance+0xe2>
    while (HAL_GPIO_ReadPin(Sensor.Port, Sensor.PIN) == GPIO_PIN_SET){
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	88ba      	ldrh	r2, [r7, #4]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd fa30 	bl	8001f90 <HAL_GPIO_ReadPin>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d0ec      	beq.n	8004b10 <getDistance+0x78>
    	}
    }
    uint32_t ed = GetMicroSec();
 8004b36:	f7ff ff4d 	bl	80049d4 <GetMicroSec>
 8004b3a:	6178      	str	r0, [r7, #20]

    uint32_t diff = ed - st;
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	613b      	str	r3, [r7, #16]
    float ret = diff * 0.034 / 2;
 8004b44:	6938      	ldr	r0, [r7, #16]
 8004b46:	f7fb fc4d 	bl	80003e4 <__aeabi_ui2d>
 8004b4a:	a30f      	add	r3, pc, #60	; (adr r3, 8004b88 <getDistance+0xf0>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fcc2 	bl	80004d8 <__aeabi_dmul>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b64:	f7fb fde2 	bl	800072c <__aeabi_ddiv>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f7fb ffaa 	bl	8000ac8 <__aeabi_d2f>
 8004b74:	4603      	mov	r3, r0
 8004b76:	60fb      	str	r3, [r7, #12]

    return ret;
 8004b78:	68fb      	ldr	r3, [r7, #12]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	f3af 8000 	nop.w
 8004b88:	b020c49c 	.word	0xb020c49c
 8004b8c:	3fa16872 	.word	0x3fa16872
 8004b90:	bf800000 	.word	0xbf800000

08004b94 <checkMagnetic>:


extern I2C_HandleTypeDef hi2c1;

void checkMagnetic(TS* stall)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    uint8_t current = sensing(stall->magnetic_door);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3324      	adds	r3, #36	; 0x24
 8004ba0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ba4:	f7ff ff3c 	bl	8004a20 <sensing>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73fb      	strb	r3, [r7, #15]



    if (current == true) {
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d122      	bne.n	8004bf8 <checkMagnetic+0x64>
        if (stall->is_occupied == true) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	789b      	ldrb	r3, [r3, #2]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d055      	beq.n	8004c66 <checkMagnetic+0xd2>
            //nothing
        }
        else {
            OCCUPIED_STALL_CNT++;
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <checkMagnetic+0x100>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <checkMagnetic+0x100>)
 8004bc6:	701a      	strb	r2, [r3, #0]
            stall->is_occupied = true;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	709a      	strb	r2, [r3, #2]
            memset(MsgBox, 0, sizeof(MsgBox));
 8004bce:	2232      	movs	r2, #50	; 0x32
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4831      	ldr	r0, [pc, #196]	; (8004c98 <checkMagnetic+0x104>)
 8004bd4:	f001 fb90 	bl	80062f8 <memset>
            sprintf(MsgBox, "toiletOccupied,%u,\r\n", stall->toilet_key);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	492f      	ldr	r1, [pc, #188]	; (8004c9c <checkMagnetic+0x108>)
 8004be0:	482d      	ldr	r0, [pc, #180]	; (8004c98 <checkMagnetic+0x104>)
 8004be2:	f001 fa91 	bl	8006108 <siprintf>
            SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8004be6:	482c      	ldr	r0, [pc, #176]	; (8004c98 <checkMagnetic+0x104>)
 8004be8:	f7fb fab2 	bl	8000150 <strlen>
 8004bec:	4603      	mov	r3, r0
 8004bee:	492a      	ldr	r1, [pc, #168]	; (8004c98 <checkMagnetic+0x104>)
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fe6f 	bl	80048d4 <SendDataToRasp>
 8004bf6:	e036      	b.n	8004c66 <checkMagnetic+0xd2>
        }
    }
    else {
        if (stall->is_occupied == true) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	789b      	ldrb	r3, [r3, #2]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d132      	bne.n	8004c66 <checkMagnetic+0xd2>
            if (stall->last_open_time != 0) {
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d029      	beq.n	8004c5c <checkMagnetic+0xc8>
                if ( (HAL_GetTick() - stall->last_open_time) >= TERM_CHANGE_OCCUPIED) { // GetTick()/(1000*60)%60 ms -> min
 8004c08:	f7fc fe50 	bl	80018ac <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b63      	cmp	r3, #99	; 0x63
 8004c16:	d926      	bls.n	8004c66 <checkMagnetic+0xd2>
                	OCCUPIED_STALL_CNT--;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <checkMagnetic+0x100>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <checkMagnetic+0x100>)
 8004c24:	701a      	strb	r2, [r3, #0]
                	stall->is_occupied = false;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	709a      	strb	r2, [r3, #2]
                    stall->last_open_time = 0;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]
                    memset(MsgBox, 0, sizeof(MsgBox));
 8004c32:	2232      	movs	r2, #50	; 0x32
 8004c34:	2100      	movs	r1, #0
 8004c36:	4818      	ldr	r0, [pc, #96]	; (8004c98 <checkMagnetic+0x104>)
 8004c38:	f001 fb5e 	bl	80062f8 <memset>
                    sprintf(MsgBox, "toiletVacant,%u,\r\n", stall->toilet_key);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <checkMagnetic+0x10c>)
 8004c44:	4814      	ldr	r0, [pc, #80]	; (8004c98 <checkMagnetic+0x104>)
 8004c46:	f001 fa5f 	bl	8006108 <siprintf>
                    SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8004c4a:	4813      	ldr	r0, [pc, #76]	; (8004c98 <checkMagnetic+0x104>)
 8004c4c:	f7fb fa80 	bl	8000150 <strlen>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4911      	ldr	r1, [pc, #68]	; (8004c98 <checkMagnetic+0x104>)
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fe3d 	bl	80048d4 <SendDataToRasp>
 8004c5a:	e004      	b.n	8004c66 <checkMagnetic+0xd2>
                }
            }
            else {
                stall->last_open_time = HAL_GetTick();
 8004c5c:	f7fc fe26 	bl	80018ac <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	605a      	str	r2, [r3, #4]
        }
        else {
            //nothing
        }
    }
    turnLED(stall->led_usable, !current);
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3398      	adds	r3, #152	; 0x98
 8004c78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c7c:	f7ff fee3 	bl	8004a46 <turnLED>


#if DEBUG
    printf("magnetic: %u, ", current);
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	4619      	mov	r1, r3
 8004c84:	4807      	ldr	r0, [pc, #28]	; (8004ca4 <checkMagnetic+0x110>)
 8004c86:	f001 f923 	bl	8005ed0 <iprintf>
#endif


}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000b7c 	.word	0x20000b7c
 8004c9c:	08009b74 	.word	0x08009b74
 8004ca0:	08009b8c 	.word	0x08009b8c
 8004ca4:	08009ba0 	.word	0x08009ba0

08004ca8 <checkTissueAmount>:

void checkTissueAmount(TS* stall) {
 8004ca8:	b5b0      	push	{r4, r5, r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]
    float current_dist = getDistance(stall->sonar_tissue);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	332c      	adds	r3, #44	; 0x2c
 8004cb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cb8:	f7ff feee 	bl	8004a98 <getDistance>
 8004cbc:	6178      	str	r0, [r7, #20]
//    float tissue_percentage = (MIN_TISSUE_DISTANCE - current_dist) / MAX_TISSUE_RADIUS * 100;
    float tissue_percentage = ((MIN_TISSUE_DISTANCE - current_dist) / (MIN_TISSUE_DISTANCE - MAX_TISSUE_RADIUS)) * 100;
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7fb fbb2 	bl	8000428 <__aeabi_f2d>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	a139      	add	r1, pc, #228	; (adr r1, 8004db0 <checkTissueAmount+0x108>)
 8004cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cce:	f7fb fa4b 	bl	8000168 <__aeabi_dsub>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	a337      	add	r3, pc, #220	; (adr r3, 8004db8 <checkTissueAmount+0x110>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fd24 	bl	800072c <__aeabi_ddiv>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <checkTissueAmount+0x118>)
 8004cf2:	f7fb fbf1 	bl	80004d8 <__aeabi_dmul>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f7fb fee3 	bl	8000ac8 <__aeabi_d2f>
 8004d02:	4603      	mov	r3, r0
 8004d04:	613b      	str	r3, [r7, #16]
//    if(tissue_percentage <= 0.0) tissue_percentage = 0.0f;

    // float -> uint8_t
    uint8_t percentage = tissue_percentage;
 8004d06:	6938      	ldr	r0, [r7, #16]
 8004d08:	f7fb ffa4 	bl	8000c54 <__aeabi_f2uiz>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
    memset(MsgBox, 0, sizeof(MsgBox));
 8004d10:	2232      	movs	r2, #50	; 0x32
 8004d12:	2100      	movs	r1, #0
 8004d14:	482b      	ldr	r0, [pc, #172]	; (8004dc4 <checkTissueAmount+0x11c>)
 8004d16:	f001 faef 	bl	80062f8 <memset>
    sprintf(MsgBox, "tissueStatus,%u,%u,\r\n", percentage,stall->toilet_key);
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	4929      	ldr	r1, [pc, #164]	; (8004dc8 <checkTissueAmount+0x120>)
 8004d22:	4828      	ldr	r0, [pc, #160]	; (8004dc4 <checkTissueAmount+0x11c>)
 8004d24:	f001 f9f0 	bl	8006108 <siprintf>
    SendDataToRasp(strlen((char *)MsgBox), MsgBox);
 8004d28:	4826      	ldr	r0, [pc, #152]	; (8004dc4 <checkTissueAmount+0x11c>)
 8004d2a:	f7fb fa11 	bl	8000150 <strlen>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4924      	ldr	r1, [pc, #144]	; (8004dc4 <checkTissueAmount+0x11c>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fdce 	bl	80048d4 <SendDataToRasp>

    if (HAL_GetTick() - stall->last_tissue_time > PERIOD_CHECK_TISSUE) { // 1분 == 60만 Tick
 8004d38:	f7fc fdb8 	bl	80018ac <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d48:	d904      	bls.n	8004d54 <checkTissueAmount+0xac>
        stall->last_tissue_time = HAL_GetTick();
 8004d4a:	f7fc fdaf 	bl	80018ac <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	61da      	str	r2, [r3, #28]
    }
    if (tissue_percentage <= THRESHOLD_MIN_TISSUE_PERCENTAGE) {
 8004d54:	491d      	ldr	r1, [pc, #116]	; (8004dcc <checkTissueAmount+0x124>)
 8004d56:	6938      	ldr	r0, [r7, #16]
 8004d58:	f7fb ff5e 	bl	8000c18 <__aeabi_fcmple>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <checkTissueAmount+0xd0>
    		stall->before_tissue_empty = 1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	705a      	strb	r2, [r3, #1]

    	turnLED(stall->led_tissue, true);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	33a8      	adds	r3, #168	; 0xa8
 8004d6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d72:	f7ff fe68 	bl	8004a46 <turnLED>
 8004d76:	e006      	b.n	8004d86 <checkTissueAmount+0xde>
    }
    else {
        turnLED(stall->led_tissue, false);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	33a8      	adds	r3, #168	; 0xa8
 8004d7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d82:	f7ff fe60 	bl	8004a46 <turnLED>
    }
#if DEBUG
    printf("tissue dist: %.3f, percentage: %.3f %%, ", current_dist, tissue_percentage);
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7fb fb4e 	bl	8000428 <__aeabi_f2d>
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	460d      	mov	r5, r1
 8004d90:	6938      	ldr	r0, [r7, #16]
 8004d92:	f7fb fb49 	bl	8000428 <__aeabi_f2d>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	e9cd 2300 	strd	r2, r3, [sp]
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	480b      	ldr	r0, [pc, #44]	; (8004dd0 <checkTissueAmount+0x128>)
 8004da4:	f001 f894 	bl	8005ed0 <iprintf>
#endif
}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bdb0      	pop	{r4, r5, r7, pc}
 8004db0:	66666666 	.word	0x66666666
 8004db4:	40296666 	.word	0x40296666
 8004db8:	cccccccc 	.word	0xcccccccc
 8004dbc:	401ecccc 	.word	0x401ecccc
 8004dc0:	40590000 	.word	0x40590000
 8004dc4:	20000b7c 	.word	0x20000b7c
 8004dc8:	08009bb0 	.word	0x08009bb0
 8004dcc:	40a00000 	.word	0x40a00000
 8004dd0:	08009bc8 	.word	0x08009bc8

08004dd4 <initStalls>:
#if DEBUG
		printf("Congestion: %u, is_saturation: %u", debugging, is_saturation);
#endif

}
void initStalls(TS * stall) {
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	b0f1      	sub	sp, #452	; 0x1c4
 8004dd8:	af10      	add	r7, sp, #64	; 0x40
 8004dda:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004dde:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004de2:	6018      	str	r0, [r3, #0]
	//
	stall->toilet_key = 1;
 8004de4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004de8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2201      	movs	r2, #1
 8004df0:	701a      	strb	r2, [r3, #0]
	stall->before_tissue_empty = 0;
 8004df2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004df6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	705a      	strb	r2, [r3, #1]


	stall->is_occupied = false;
 8004e00:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	709a      	strb	r2, [r3, #2]
	stall->last_open_time = 0;
 8004e0e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e12:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
	stall->tissue_amount = 100;
 8004e1c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e20:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a88      	ldr	r2, [pc, #544]	; (8005048 <initStalls+0x274>)
 8004e28:	609a      	str	r2, [r3, #8]
	stall->is_cover_down = false;
 8004e2a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	731a      	strb	r2, [r3, #12]
	stall->last_ir_time = 0;
 8004e38:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
	stall->last_flush_time = 0;
 8004e46:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e4a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	615a      	str	r2, [r3, #20]
	stall->is_checked_broken = false;
 8004e54:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	761a      	strb	r2, [r3, #24]
	stall->last_tissue_time = 0;
 8004e62:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	61da      	str	r2, [r3, #28]


	stall->magnetic_door = (GI){ GPIOB,GPIO_PIN_4, 0 };
 8004e70:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e74:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a74      	ldr	r2, [pc, #464]	; (800504c <initStalls+0x278>)
 8004e7c:	3324      	adds	r3, #36	; 0x24
 8004e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e82:	e883 0003 	stmia.w	r3, {r0, r1}

	stall->sonar_water_tissue = (GI){ GPIOA, GPIO_PIN_12, GPIO_PIN_11 };
 8004e86:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004e8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6f      	ldr	r2, [pc, #444]	; (8005050 <initStalls+0x27c>)
 8004e92:	3334      	adds	r3, #52	; 0x34
 8004e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e98:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->servo_water_tissue = (TI){ htim2, TIM_CHANNEL_2 };
 8004e9c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004ea0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6b      	ldr	r2, [pc, #428]	; (8005054 <initStalls+0x280>)
 8004ea8:	33b0      	adds	r3, #176	; 0xb0
 8004eaa:	4611      	mov	r1, r2
 8004eac:	2248      	movs	r2, #72	; 0x48
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fad7 	bl	8006462 <memcpy>
 8004eb4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004eb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	stall->sonar_tissue = (GI){ GPIOB, GPIO_PIN_2, GPIO_PIN_1 };
 8004ec4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004ec8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a62      	ldr	r2, [pc, #392]	; (8005058 <initStalls+0x284>)
 8004ed0:	332c      	adds	r3, #44	; 0x2c
 8004ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed6:	e883 0003 	stmia.w	r3, {r0, r1}

	stall->ir_untact = (II){ hi2c1 };
 8004eda:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004ede:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	; (800505c <initStalls+0x288>)
 8004ee6:	3344      	adds	r3, #68	; 0x44
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2254      	movs	r2, #84	; 0x54
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fab8 	bl	8006462 <memcpy>
	stall->servo_toilet_cover = (TI){  htim2, TIM_CHANNEL_1 };
 8004ef2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004ef6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a55      	ldr	r2, [pc, #340]	; (8005054 <initStalls+0x280>)
 8004efe:	33fc      	adds	r3, #252	; 0xfc
 8004f00:	4611      	mov	r1, r2
 8004f02:	2248      	movs	r2, #72	; 0x48
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 faac 	bl	8006462 <memcpy>
 8004f0a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f0e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144


	stall->tilt_toilet_cover = (GI){ GPIOB, GPIO_PIN_5, 0 };
 8004f1a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a4e      	ldr	r2, [pc, #312]	; (8005060 <initStalls+0x28c>)
 8004f26:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f2e:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->servo_sonar_cover = (TI){ htim2, TIM_CHANNEL_3 };
 8004f32:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f36:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a45      	ldr	r2, [pc, #276]	; (8005054 <initStalls+0x280>)
 8004f3e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004f42:	4611      	mov	r1, r2
 8004f44:	2248      	movs	r2, #72	; 0x48
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 fa8b 	bl	8006462 <memcpy>
 8004f4c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f50:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2208      	movs	r2, #8
 8004f58:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	stall->sonar_toilet_broken = (GI){ GPIOB, GPIO_PIN_12, GPIO_PIN_11 };
 8004f5c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f60:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3f      	ldr	r2, [pc, #252]	; (8005064 <initStalls+0x290>)
 8004f68:	333c      	adds	r3, #60	; 0x3c
 8004f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f6e:	e883 0003 	stmia.w	r3, {r0, r1}

	stall->led_usable = (GI){ GPIOC, 0, GPIO_PIN_5 };
 8004f72:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <initStalls+0x294>)
 8004f7e:	3398      	adds	r3, #152	; 0x98
 8004f80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f84:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->led_broken = (GI){ GPIOC, 0, GPIO_PIN_8 };
 8004f88:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004f8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a36      	ldr	r2, [pc, #216]	; (800506c <initStalls+0x298>)
 8004f94:	33a0      	adds	r3, #160	; 0xa0
 8004f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	stall->led_tissue = (GI){ GPIOC, 0, GPIO_PIN_6 };
 8004f9e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004fa2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a31      	ldr	r2, [pc, #196]	; (8005070 <initStalls+0x29c>)
 8004faa:	33a8      	adds	r3, #168	; 0xa8
 8004fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fb0:	e883 0003 	stmia.w	r3, {r0, r1}

	motor_start(stall->servo_water_tissue);
 8004fb4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004fb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fbc:	681e      	ldr	r6, [r3, #0]
 8004fbe:	466d      	mov	r5, sp
 8004fc0:	f106 04c0 	add.w	r4, r6, #192	; 0xc0
 8004fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fd0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004fd4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004fd8:	f106 03b0 	add.w	r3, r6, #176	; 0xb0
 8004fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fde:	f7ff fd45 	bl	8004a6c <motor_start>
	motor_start(stall->servo_sonar_cover);
 8004fe2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004fe6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fea:	681e      	ldr	r6, [r3, #0]
 8004fec:	466d      	mov	r5, sp
 8004fee:	f506 74ac 	add.w	r4, r6, #344	; 0x158
 8004ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005002:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005006:	f506 73a4 	add.w	r3, r6, #328	; 0x148
 800500a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800500c:	f7ff fd2e 	bl	8004a6c <motor_start>
	motor_start(stall->servo_toilet_cover);
 8005010:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005014:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005018:	681e      	ldr	r6, [r3, #0]
 800501a:	466d      	mov	r5, sp
 800501c:	f506 7486 	add.w	r4, r6, #268	; 0x10c
 8005020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800502a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800502c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005030:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005034:	f106 03fc 	add.w	r3, r6, #252	; 0xfc
 8005038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800503a:	f7ff fd17 	bl	8004a6c <motor_start>

}
 800503e:	bf00      	nop
 8005040:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8005044:	46bd      	mov	sp, r7
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005048:	42c80000 	.word	0x42c80000
 800504c:	08009cd4 	.word	0x08009cd4
 8005050:	08009cdc 	.word	0x08009cdc
 8005054:	20000294 	.word	0x20000294
 8005058:	08009ce4 	.word	0x08009ce4
 800505c:	200001f4 	.word	0x200001f4
 8005060:	08009cec 	.word	0x08009cec
 8005064:	08009cf4 	.word	0x08009cf4
 8005068:	08009cfc 	.word	0x08009cfc
 800506c:	08009d04 	.word	0x08009d04
 8005070:	08009d0c 	.word	0x08009d0c

08005074 <__cvt>:
 8005074:	2b00      	cmp	r3, #0
 8005076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800507a:	461f      	mov	r7, r3
 800507c:	bfbb      	ittet	lt
 800507e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005082:	461f      	movlt	r7, r3
 8005084:	2300      	movge	r3, #0
 8005086:	232d      	movlt	r3, #45	; 0x2d
 8005088:	b088      	sub	sp, #32
 800508a:	4614      	mov	r4, r2
 800508c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800508e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005090:	7013      	strb	r3, [r2, #0]
 8005092:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005094:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005098:	f023 0820 	bic.w	r8, r3, #32
 800509c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050a0:	d005      	beq.n	80050ae <__cvt+0x3a>
 80050a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050a6:	d100      	bne.n	80050aa <__cvt+0x36>
 80050a8:	3501      	adds	r5, #1
 80050aa:	2302      	movs	r3, #2
 80050ac:	e000      	b.n	80050b0 <__cvt+0x3c>
 80050ae:	2303      	movs	r3, #3
 80050b0:	aa07      	add	r2, sp, #28
 80050b2:	9204      	str	r2, [sp, #16]
 80050b4:	aa06      	add	r2, sp, #24
 80050b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050ba:	e9cd 3500 	strd	r3, r5, [sp]
 80050be:	4622      	mov	r2, r4
 80050c0:	463b      	mov	r3, r7
 80050c2:	f001 fa6d 	bl	80065a0 <_dtoa_r>
 80050c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050ca:	4606      	mov	r6, r0
 80050cc:	d102      	bne.n	80050d4 <__cvt+0x60>
 80050ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050d0:	07db      	lsls	r3, r3, #31
 80050d2:	d522      	bpl.n	800511a <__cvt+0xa6>
 80050d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050d8:	eb06 0905 	add.w	r9, r6, r5
 80050dc:	d110      	bne.n	8005100 <__cvt+0x8c>
 80050de:	7833      	ldrb	r3, [r6, #0]
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d10a      	bne.n	80050fa <__cvt+0x86>
 80050e4:	2200      	movs	r2, #0
 80050e6:	2300      	movs	r3, #0
 80050e8:	4620      	mov	r0, r4
 80050ea:	4639      	mov	r1, r7
 80050ec:	f7fb fc5c 	bl	80009a8 <__aeabi_dcmpeq>
 80050f0:	b918      	cbnz	r0, 80050fa <__cvt+0x86>
 80050f2:	f1c5 0501 	rsb	r5, r5, #1
 80050f6:	f8ca 5000 	str.w	r5, [sl]
 80050fa:	f8da 3000 	ldr.w	r3, [sl]
 80050fe:	4499      	add	r9, r3
 8005100:	2200      	movs	r2, #0
 8005102:	2300      	movs	r3, #0
 8005104:	4620      	mov	r0, r4
 8005106:	4639      	mov	r1, r7
 8005108:	f7fb fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800510c:	b108      	cbz	r0, 8005112 <__cvt+0x9e>
 800510e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005112:	2230      	movs	r2, #48	; 0x30
 8005114:	9b07      	ldr	r3, [sp, #28]
 8005116:	454b      	cmp	r3, r9
 8005118:	d307      	bcc.n	800512a <__cvt+0xb6>
 800511a:	4630      	mov	r0, r6
 800511c:	9b07      	ldr	r3, [sp, #28]
 800511e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005120:	1b9b      	subs	r3, r3, r6
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	b008      	add	sp, #32
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512a:	1c59      	adds	r1, r3, #1
 800512c:	9107      	str	r1, [sp, #28]
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e7f0      	b.n	8005114 <__cvt+0xa0>

08005132 <__exponent>:
 8005132:	4603      	mov	r3, r0
 8005134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005136:	2900      	cmp	r1, #0
 8005138:	f803 2b02 	strb.w	r2, [r3], #2
 800513c:	bfb6      	itet	lt
 800513e:	222d      	movlt	r2, #45	; 0x2d
 8005140:	222b      	movge	r2, #43	; 0x2b
 8005142:	4249      	neglt	r1, r1
 8005144:	2909      	cmp	r1, #9
 8005146:	7042      	strb	r2, [r0, #1]
 8005148:	dd2a      	ble.n	80051a0 <__exponent+0x6e>
 800514a:	f10d 0207 	add.w	r2, sp, #7
 800514e:	4617      	mov	r7, r2
 8005150:	260a      	movs	r6, #10
 8005152:	fb91 f5f6 	sdiv	r5, r1, r6
 8005156:	4694      	mov	ip, r2
 8005158:	fb06 1415 	mls	r4, r6, r5, r1
 800515c:	3430      	adds	r4, #48	; 0x30
 800515e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005162:	460c      	mov	r4, r1
 8005164:	2c63      	cmp	r4, #99	; 0x63
 8005166:	4629      	mov	r1, r5
 8005168:	f102 32ff 	add.w	r2, r2, #4294967295
 800516c:	dcf1      	bgt.n	8005152 <__exponent+0x20>
 800516e:	3130      	adds	r1, #48	; 0x30
 8005170:	f1ac 0402 	sub.w	r4, ip, #2
 8005174:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005178:	4622      	mov	r2, r4
 800517a:	1c41      	adds	r1, r0, #1
 800517c:	42ba      	cmp	r2, r7
 800517e:	d30a      	bcc.n	8005196 <__exponent+0x64>
 8005180:	f10d 0209 	add.w	r2, sp, #9
 8005184:	eba2 020c 	sub.w	r2, r2, ip
 8005188:	42bc      	cmp	r4, r7
 800518a:	bf88      	it	hi
 800518c:	2200      	movhi	r2, #0
 800518e:	4413      	add	r3, r2
 8005190:	1a18      	subs	r0, r3, r0
 8005192:	b003      	add	sp, #12
 8005194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005196:	f812 5b01 	ldrb.w	r5, [r2], #1
 800519a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800519e:	e7ed      	b.n	800517c <__exponent+0x4a>
 80051a0:	2330      	movs	r3, #48	; 0x30
 80051a2:	3130      	adds	r1, #48	; 0x30
 80051a4:	7083      	strb	r3, [r0, #2]
 80051a6:	70c1      	strb	r1, [r0, #3]
 80051a8:	1d03      	adds	r3, r0, #4
 80051aa:	e7f1      	b.n	8005190 <__exponent+0x5e>

080051ac <_printf_float>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	b091      	sub	sp, #68	; 0x44
 80051b2:	460c      	mov	r4, r1
 80051b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051b8:	4616      	mov	r6, r2
 80051ba:	461f      	mov	r7, r3
 80051bc:	4605      	mov	r5, r0
 80051be:	f001 f8cb 	bl	8006358 <_localeconv_r>
 80051c2:	6803      	ldr	r3, [r0, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	9309      	str	r3, [sp, #36]	; 0x24
 80051c8:	f7fa ffc2 	bl	8000150 <strlen>
 80051cc:	2300      	movs	r3, #0
 80051ce:	930e      	str	r3, [sp, #56]	; 0x38
 80051d0:	f8d8 3000 	ldr.w	r3, [r8]
 80051d4:	900a      	str	r0, [sp, #40]	; 0x28
 80051d6:	3307      	adds	r3, #7
 80051d8:	f023 0307 	bic.w	r3, r3, #7
 80051dc:	f103 0208 	add.w	r2, r3, #8
 80051e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051e4:	f8d4 b000 	ldr.w	fp, [r4]
 80051e8:	f8c8 2000 	str.w	r2, [r8]
 80051ec:	e9d3 a800 	ldrd	sl, r8, [r3]
 80051f0:	4652      	mov	r2, sl
 80051f2:	4643      	mov	r3, r8
 80051f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051f8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80051fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	4650      	mov	r0, sl
 8005204:	4b9c      	ldr	r3, [pc, #624]	; (8005478 <_printf_float+0x2cc>)
 8005206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005208:	f7fb fc00 	bl	8000a0c <__aeabi_dcmpun>
 800520c:	bb70      	cbnz	r0, 800526c <_printf_float+0xc0>
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	4650      	mov	r0, sl
 8005214:	4b98      	ldr	r3, [pc, #608]	; (8005478 <_printf_float+0x2cc>)
 8005216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005218:	f7fb fbda 	bl	80009d0 <__aeabi_dcmple>
 800521c:	bb30      	cbnz	r0, 800526c <_printf_float+0xc0>
 800521e:	2200      	movs	r2, #0
 8005220:	2300      	movs	r3, #0
 8005222:	4650      	mov	r0, sl
 8005224:	4641      	mov	r1, r8
 8005226:	f7fb fbc9 	bl	80009bc <__aeabi_dcmplt>
 800522a:	b110      	cbz	r0, 8005232 <_printf_float+0x86>
 800522c:	232d      	movs	r3, #45	; 0x2d
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005232:	4a92      	ldr	r2, [pc, #584]	; (800547c <_printf_float+0x2d0>)
 8005234:	4b92      	ldr	r3, [pc, #584]	; (8005480 <_printf_float+0x2d4>)
 8005236:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800523a:	bf94      	ite	ls
 800523c:	4690      	movls	r8, r2
 800523e:	4698      	movhi	r8, r3
 8005240:	2303      	movs	r3, #3
 8005242:	f04f 0a00 	mov.w	sl, #0
 8005246:	6123      	str	r3, [r4, #16]
 8005248:	f02b 0304 	bic.w	r3, fp, #4
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	4633      	mov	r3, r6
 8005250:	4621      	mov	r1, r4
 8005252:	4628      	mov	r0, r5
 8005254:	9700      	str	r7, [sp, #0]
 8005256:	aa0f      	add	r2, sp, #60	; 0x3c
 8005258:	f000 f9d6 	bl	8005608 <_printf_common>
 800525c:	3001      	adds	r0, #1
 800525e:	f040 8090 	bne.w	8005382 <_printf_float+0x1d6>
 8005262:	f04f 30ff 	mov.w	r0, #4294967295
 8005266:	b011      	add	sp, #68	; 0x44
 8005268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526c:	4652      	mov	r2, sl
 800526e:	4643      	mov	r3, r8
 8005270:	4650      	mov	r0, sl
 8005272:	4641      	mov	r1, r8
 8005274:	f7fb fbca 	bl	8000a0c <__aeabi_dcmpun>
 8005278:	b148      	cbz	r0, 800528e <_printf_float+0xe2>
 800527a:	f1b8 0f00 	cmp.w	r8, #0
 800527e:	bfb8      	it	lt
 8005280:	232d      	movlt	r3, #45	; 0x2d
 8005282:	4a80      	ldr	r2, [pc, #512]	; (8005484 <_printf_float+0x2d8>)
 8005284:	bfb8      	it	lt
 8005286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800528a:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <_printf_float+0x2dc>)
 800528c:	e7d3      	b.n	8005236 <_printf_float+0x8a>
 800528e:	6863      	ldr	r3, [r4, #4]
 8005290:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	d142      	bne.n	800531e <_printf_float+0x172>
 8005298:	2306      	movs	r3, #6
 800529a:	6063      	str	r3, [r4, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	9206      	str	r2, [sp, #24]
 80052a0:	aa0e      	add	r2, sp, #56	; 0x38
 80052a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052a6:	aa0d      	add	r2, sp, #52	; 0x34
 80052a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052ac:	9203      	str	r2, [sp, #12]
 80052ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	6863      	ldr	r3, [r4, #4]
 80052ba:	4652      	mov	r2, sl
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4628      	mov	r0, r5
 80052c0:	4643      	mov	r3, r8
 80052c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052c4:	f7ff fed6 	bl	8005074 <__cvt>
 80052c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ca:	4680      	mov	r8, r0
 80052cc:	2947      	cmp	r1, #71	; 0x47
 80052ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052d0:	d108      	bne.n	80052e4 <_printf_float+0x138>
 80052d2:	1cc8      	adds	r0, r1, #3
 80052d4:	db02      	blt.n	80052dc <_printf_float+0x130>
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	4299      	cmp	r1, r3
 80052da:	dd40      	ble.n	800535e <_printf_float+0x1b2>
 80052dc:	f1a9 0902 	sub.w	r9, r9, #2
 80052e0:	fa5f f989 	uxtb.w	r9, r9
 80052e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052e8:	d81f      	bhi.n	800532a <_printf_float+0x17e>
 80052ea:	464a      	mov	r2, r9
 80052ec:	3901      	subs	r1, #1
 80052ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052f2:	910d      	str	r1, [sp, #52]	; 0x34
 80052f4:	f7ff ff1d 	bl	8005132 <__exponent>
 80052f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052fa:	4682      	mov	sl, r0
 80052fc:	1813      	adds	r3, r2, r0
 80052fe:	2a01      	cmp	r2, #1
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	dc02      	bgt.n	800530a <_printf_float+0x15e>
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	07d2      	lsls	r2, r2, #31
 8005308:	d501      	bpl.n	800530e <_printf_float+0x162>
 800530a:	3301      	adds	r3, #1
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005312:	2b00      	cmp	r3, #0
 8005314:	d09b      	beq.n	800524e <_printf_float+0xa2>
 8005316:	232d      	movs	r3, #45	; 0x2d
 8005318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531c:	e797      	b.n	800524e <_printf_float+0xa2>
 800531e:	2947      	cmp	r1, #71	; 0x47
 8005320:	d1bc      	bne.n	800529c <_printf_float+0xf0>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ba      	bne.n	800529c <_printf_float+0xf0>
 8005326:	2301      	movs	r3, #1
 8005328:	e7b7      	b.n	800529a <_printf_float+0xee>
 800532a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800532e:	d118      	bne.n	8005362 <_printf_float+0x1b6>
 8005330:	2900      	cmp	r1, #0
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	dd0b      	ble.n	800534e <_printf_float+0x1a2>
 8005336:	6121      	str	r1, [r4, #16]
 8005338:	b913      	cbnz	r3, 8005340 <_printf_float+0x194>
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	07d0      	lsls	r0, r2, #31
 800533e:	d502      	bpl.n	8005346 <_printf_float+0x19a>
 8005340:	3301      	adds	r3, #1
 8005342:	440b      	add	r3, r1
 8005344:	6123      	str	r3, [r4, #16]
 8005346:	f04f 0a00 	mov.w	sl, #0
 800534a:	65a1      	str	r1, [r4, #88]	; 0x58
 800534c:	e7df      	b.n	800530e <_printf_float+0x162>
 800534e:	b913      	cbnz	r3, 8005356 <_printf_float+0x1aa>
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	07d2      	lsls	r2, r2, #31
 8005354:	d501      	bpl.n	800535a <_printf_float+0x1ae>
 8005356:	3302      	adds	r3, #2
 8005358:	e7f4      	b.n	8005344 <_printf_float+0x198>
 800535a:	2301      	movs	r3, #1
 800535c:	e7f2      	b.n	8005344 <_printf_float+0x198>
 800535e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005364:	4299      	cmp	r1, r3
 8005366:	db05      	blt.n	8005374 <_printf_float+0x1c8>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	6121      	str	r1, [r4, #16]
 800536c:	07d8      	lsls	r0, r3, #31
 800536e:	d5ea      	bpl.n	8005346 <_printf_float+0x19a>
 8005370:	1c4b      	adds	r3, r1, #1
 8005372:	e7e7      	b.n	8005344 <_printf_float+0x198>
 8005374:	2900      	cmp	r1, #0
 8005376:	bfcc      	ite	gt
 8005378:	2201      	movgt	r2, #1
 800537a:	f1c1 0202 	rsble	r2, r1, #2
 800537e:	4413      	add	r3, r2
 8005380:	e7e0      	b.n	8005344 <_printf_float+0x198>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	055a      	lsls	r2, r3, #21
 8005386:	d407      	bmi.n	8005398 <_printf_float+0x1ec>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	4642      	mov	r2, r8
 800538c:	4631      	mov	r1, r6
 800538e:	4628      	mov	r0, r5
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	d12b      	bne.n	80053ee <_printf_float+0x242>
 8005396:	e764      	b.n	8005262 <_printf_float+0xb6>
 8005398:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800539c:	f240 80dd 	bls.w	800555a <_printf_float+0x3ae>
 80053a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053a4:	2200      	movs	r2, #0
 80053a6:	2300      	movs	r3, #0
 80053a8:	f7fb fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d033      	beq.n	8005418 <_printf_float+0x26c>
 80053b0:	2301      	movs	r3, #1
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	4a35      	ldr	r2, [pc, #212]	; (800548c <_printf_float+0x2e0>)
 80053b8:	47b8      	blx	r7
 80053ba:	3001      	adds	r0, #1
 80053bc:	f43f af51 	beq.w	8005262 <_printf_float+0xb6>
 80053c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053c4:	429a      	cmp	r2, r3
 80053c6:	db02      	blt.n	80053ce <_printf_float+0x222>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	07d8      	lsls	r0, r3, #31
 80053cc:	d50f      	bpl.n	80053ee <_printf_float+0x242>
 80053ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f af42 	beq.w	8005262 <_printf_float+0xb6>
 80053de:	f04f 0800 	mov.w	r8, #0
 80053e2:	f104 091a 	add.w	r9, r4, #26
 80053e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053e8:	3b01      	subs	r3, #1
 80053ea:	4543      	cmp	r3, r8
 80053ec:	dc09      	bgt.n	8005402 <_printf_float+0x256>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	079b      	lsls	r3, r3, #30
 80053f2:	f100 8104 	bmi.w	80055fe <_printf_float+0x452>
 80053f6:	68e0      	ldr	r0, [r4, #12]
 80053f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053fa:	4298      	cmp	r0, r3
 80053fc:	bfb8      	it	lt
 80053fe:	4618      	movlt	r0, r3
 8005400:	e731      	b.n	8005266 <_printf_float+0xba>
 8005402:	2301      	movs	r3, #1
 8005404:	464a      	mov	r2, r9
 8005406:	4631      	mov	r1, r6
 8005408:	4628      	mov	r0, r5
 800540a:	47b8      	blx	r7
 800540c:	3001      	adds	r0, #1
 800540e:	f43f af28 	beq.w	8005262 <_printf_float+0xb6>
 8005412:	f108 0801 	add.w	r8, r8, #1
 8005416:	e7e6      	b.n	80053e6 <_printf_float+0x23a>
 8005418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800541a:	2b00      	cmp	r3, #0
 800541c:	dc38      	bgt.n	8005490 <_printf_float+0x2e4>
 800541e:	2301      	movs	r3, #1
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <_printf_float+0x2e0>)
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	f43f af1a 	beq.w	8005262 <_printf_float+0xb6>
 800542e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005432:	4313      	orrs	r3, r2
 8005434:	d102      	bne.n	800543c <_printf_float+0x290>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	07d9      	lsls	r1, r3, #31
 800543a:	d5d8      	bpl.n	80053ee <_printf_float+0x242>
 800543c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005440:	4631      	mov	r1, r6
 8005442:	4628      	mov	r0, r5
 8005444:	47b8      	blx	r7
 8005446:	3001      	adds	r0, #1
 8005448:	f43f af0b 	beq.w	8005262 <_printf_float+0xb6>
 800544c:	f04f 0900 	mov.w	r9, #0
 8005450:	f104 0a1a 	add.w	sl, r4, #26
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	425b      	negs	r3, r3
 8005458:	454b      	cmp	r3, r9
 800545a:	dc01      	bgt.n	8005460 <_printf_float+0x2b4>
 800545c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800545e:	e794      	b.n	800538a <_printf_float+0x1de>
 8005460:	2301      	movs	r3, #1
 8005462:	4652      	mov	r2, sl
 8005464:	4631      	mov	r1, r6
 8005466:	4628      	mov	r0, r5
 8005468:	47b8      	blx	r7
 800546a:	3001      	adds	r0, #1
 800546c:	f43f aef9 	beq.w	8005262 <_printf_float+0xb6>
 8005470:	f109 0901 	add.w	r9, r9, #1
 8005474:	e7ee      	b.n	8005454 <_printf_float+0x2a8>
 8005476:	bf00      	nop
 8005478:	7fefffff 	.word	0x7fefffff
 800547c:	08009d3e 	.word	0x08009d3e
 8005480:	08009d42 	.word	0x08009d42
 8005484:	08009d46 	.word	0x08009d46
 8005488:	08009d4a 	.word	0x08009d4a
 800548c:	08009d4e 	.word	0x08009d4e
 8005490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005494:	429a      	cmp	r2, r3
 8005496:	bfa8      	it	ge
 8005498:	461a      	movge	r2, r3
 800549a:	2a00      	cmp	r2, #0
 800549c:	4691      	mov	r9, r2
 800549e:	dc37      	bgt.n	8005510 <_printf_float+0x364>
 80054a0:	f04f 0b00 	mov.w	fp, #0
 80054a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054a8:	f104 021a 	add.w	r2, r4, #26
 80054ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054b0:	ebaa 0309 	sub.w	r3, sl, r9
 80054b4:	455b      	cmp	r3, fp
 80054b6:	dc33      	bgt.n	8005520 <_printf_float+0x374>
 80054b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054bc:	429a      	cmp	r2, r3
 80054be:	db3b      	blt.n	8005538 <_printf_float+0x38c>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	07da      	lsls	r2, r3, #31
 80054c4:	d438      	bmi.n	8005538 <_printf_float+0x38c>
 80054c6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054ca:	eba2 0903 	sub.w	r9, r2, r3
 80054ce:	eba2 020a 	sub.w	r2, r2, sl
 80054d2:	4591      	cmp	r9, r2
 80054d4:	bfa8      	it	ge
 80054d6:	4691      	movge	r9, r2
 80054d8:	f1b9 0f00 	cmp.w	r9, #0
 80054dc:	dc34      	bgt.n	8005548 <_printf_float+0x39c>
 80054de:	f04f 0800 	mov.w	r8, #0
 80054e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054e6:	f104 0a1a 	add.w	sl, r4, #26
 80054ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	eba3 0309 	sub.w	r3, r3, r9
 80054f4:	4543      	cmp	r3, r8
 80054f6:	f77f af7a 	ble.w	80053ee <_printf_float+0x242>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4652      	mov	r2, sl
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	f43f aeac 	beq.w	8005262 <_printf_float+0xb6>
 800550a:	f108 0801 	add.w	r8, r8, #1
 800550e:	e7ec      	b.n	80054ea <_printf_float+0x33e>
 8005510:	4613      	mov	r3, r2
 8005512:	4631      	mov	r1, r6
 8005514:	4642      	mov	r2, r8
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	d1c0      	bne.n	80054a0 <_printf_float+0x2f4>
 800551e:	e6a0      	b.n	8005262 <_printf_float+0xb6>
 8005520:	2301      	movs	r3, #1
 8005522:	4631      	mov	r1, r6
 8005524:	4628      	mov	r0, r5
 8005526:	920b      	str	r2, [sp, #44]	; 0x2c
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f ae99 	beq.w	8005262 <_printf_float+0xb6>
 8005530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005532:	f10b 0b01 	add.w	fp, fp, #1
 8005536:	e7b9      	b.n	80054ac <_printf_float+0x300>
 8005538:	4631      	mov	r1, r6
 800553a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	d1bf      	bne.n	80054c6 <_printf_float+0x31a>
 8005546:	e68c      	b.n	8005262 <_printf_float+0xb6>
 8005548:	464b      	mov	r3, r9
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	eb08 020a 	add.w	r2, r8, sl
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	d1c2      	bne.n	80054de <_printf_float+0x332>
 8005558:	e683      	b.n	8005262 <_printf_float+0xb6>
 800555a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800555c:	2a01      	cmp	r2, #1
 800555e:	dc01      	bgt.n	8005564 <_printf_float+0x3b8>
 8005560:	07db      	lsls	r3, r3, #31
 8005562:	d539      	bpl.n	80055d8 <_printf_float+0x42c>
 8005564:	2301      	movs	r3, #1
 8005566:	4642      	mov	r2, r8
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f ae77 	beq.w	8005262 <_printf_float+0xb6>
 8005574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f ae6f 	beq.w	8005262 <_printf_float+0xb6>
 8005584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005588:	2200      	movs	r2, #0
 800558a:	2300      	movs	r3, #0
 800558c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005590:	f7fb fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005594:	b9d8      	cbnz	r0, 80055ce <_printf_float+0x422>
 8005596:	f109 33ff 	add.w	r3, r9, #4294967295
 800559a:	f108 0201 	add.w	r2, r8, #1
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	d10e      	bne.n	80055c6 <_printf_float+0x41a>
 80055a8:	e65b      	b.n	8005262 <_printf_float+0xb6>
 80055aa:	2301      	movs	r3, #1
 80055ac:	464a      	mov	r2, r9
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	f43f ae54 	beq.w	8005262 <_printf_float+0xb6>
 80055ba:	f108 0801 	add.w	r8, r8, #1
 80055be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c0:	3b01      	subs	r3, #1
 80055c2:	4543      	cmp	r3, r8
 80055c4:	dcf1      	bgt.n	80055aa <_printf_float+0x3fe>
 80055c6:	4653      	mov	r3, sl
 80055c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055cc:	e6de      	b.n	800538c <_printf_float+0x1e0>
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	f104 091a 	add.w	r9, r4, #26
 80055d6:	e7f2      	b.n	80055be <_printf_float+0x412>
 80055d8:	2301      	movs	r3, #1
 80055da:	4642      	mov	r2, r8
 80055dc:	e7df      	b.n	800559e <_printf_float+0x3f2>
 80055de:	2301      	movs	r3, #1
 80055e0:	464a      	mov	r2, r9
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f ae3a 	beq.w	8005262 <_printf_float+0xb6>
 80055ee:	f108 0801 	add.w	r8, r8, #1
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055f6:	1a5b      	subs	r3, r3, r1
 80055f8:	4543      	cmp	r3, r8
 80055fa:	dcf0      	bgt.n	80055de <_printf_float+0x432>
 80055fc:	e6fb      	b.n	80053f6 <_printf_float+0x24a>
 80055fe:	f04f 0800 	mov.w	r8, #0
 8005602:	f104 0919 	add.w	r9, r4, #25
 8005606:	e7f4      	b.n	80055f2 <_printf_float+0x446>

08005608 <_printf_common>:
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	4616      	mov	r6, r2
 800560e:	4699      	mov	r9, r3
 8005610:	688a      	ldr	r2, [r1, #8]
 8005612:	690b      	ldr	r3, [r1, #16]
 8005614:	4607      	mov	r7, r0
 8005616:	4293      	cmp	r3, r2
 8005618:	bfb8      	it	lt
 800561a:	4613      	movlt	r3, r2
 800561c:	6033      	str	r3, [r6, #0]
 800561e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005622:	460c      	mov	r4, r1
 8005624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005628:	b10a      	cbz	r2, 800562e <_printf_common+0x26>
 800562a:	3301      	adds	r3, #1
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	0699      	lsls	r1, r3, #26
 8005632:	bf42      	ittt	mi
 8005634:	6833      	ldrmi	r3, [r6, #0]
 8005636:	3302      	addmi	r3, #2
 8005638:	6033      	strmi	r3, [r6, #0]
 800563a:	6825      	ldr	r5, [r4, #0]
 800563c:	f015 0506 	ands.w	r5, r5, #6
 8005640:	d106      	bne.n	8005650 <_printf_common+0x48>
 8005642:	f104 0a19 	add.w	sl, r4, #25
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	6832      	ldr	r2, [r6, #0]
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	42ab      	cmp	r3, r5
 800564e:	dc2b      	bgt.n	80056a8 <_printf_common+0xa0>
 8005650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005654:	1e13      	subs	r3, r2, #0
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	2301      	movne	r3, #1
 800565c:	0692      	lsls	r2, r2, #26
 800565e:	d430      	bmi.n	80056c2 <_printf_common+0xba>
 8005660:	4649      	mov	r1, r9
 8005662:	4638      	mov	r0, r7
 8005664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d023      	beq.n	80056b6 <_printf_common+0xae>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	6922      	ldr	r2, [r4, #16]
 8005672:	f003 0306 	and.w	r3, r3, #6
 8005676:	2b04      	cmp	r3, #4
 8005678:	bf14      	ite	ne
 800567a:	2500      	movne	r5, #0
 800567c:	6833      	ldreq	r3, [r6, #0]
 800567e:	f04f 0600 	mov.w	r6, #0
 8005682:	bf08      	it	eq
 8005684:	68e5      	ldreq	r5, [r4, #12]
 8005686:	f104 041a 	add.w	r4, r4, #26
 800568a:	bf08      	it	eq
 800568c:	1aed      	subeq	r5, r5, r3
 800568e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005692:	bf08      	it	eq
 8005694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005698:	4293      	cmp	r3, r2
 800569a:	bfc4      	itt	gt
 800569c:	1a9b      	subgt	r3, r3, r2
 800569e:	18ed      	addgt	r5, r5, r3
 80056a0:	42b5      	cmp	r5, r6
 80056a2:	d11a      	bne.n	80056da <_printf_common+0xd2>
 80056a4:	2000      	movs	r0, #0
 80056a6:	e008      	b.n	80056ba <_printf_common+0xb2>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4652      	mov	r2, sl
 80056ac:	4649      	mov	r1, r9
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c0      	blx	r8
 80056b2:	3001      	adds	r0, #1
 80056b4:	d103      	bne.n	80056be <_printf_common+0xb6>
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	3501      	adds	r5, #1
 80056c0:	e7c1      	b.n	8005646 <_printf_common+0x3e>
 80056c2:	2030      	movs	r0, #48	; 0x30
 80056c4:	18e1      	adds	r1, r4, r3
 80056c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056d0:	4422      	add	r2, r4
 80056d2:	3302      	adds	r3, #2
 80056d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056d8:	e7c2      	b.n	8005660 <_printf_common+0x58>
 80056da:	2301      	movs	r3, #1
 80056dc:	4622      	mov	r2, r4
 80056de:	4649      	mov	r1, r9
 80056e0:	4638      	mov	r0, r7
 80056e2:	47c0      	blx	r8
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0e6      	beq.n	80056b6 <_printf_common+0xae>
 80056e8:	3601      	adds	r6, #1
 80056ea:	e7d9      	b.n	80056a0 <_printf_common+0x98>

080056ec <_printf_i>:
 80056ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	7e0f      	ldrb	r7, [r1, #24]
 80056f2:	4691      	mov	r9, r2
 80056f4:	2f78      	cmp	r7, #120	; 0x78
 80056f6:	4680      	mov	r8, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	469a      	mov	sl, r3
 80056fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005702:	d807      	bhi.n	8005714 <_printf_i+0x28>
 8005704:	2f62      	cmp	r7, #98	; 0x62
 8005706:	d80a      	bhi.n	800571e <_printf_i+0x32>
 8005708:	2f00      	cmp	r7, #0
 800570a:	f000 80d5 	beq.w	80058b8 <_printf_i+0x1cc>
 800570e:	2f58      	cmp	r7, #88	; 0x58
 8005710:	f000 80c1 	beq.w	8005896 <_printf_i+0x1aa>
 8005714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800571c:	e03a      	b.n	8005794 <_printf_i+0xa8>
 800571e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005722:	2b15      	cmp	r3, #21
 8005724:	d8f6      	bhi.n	8005714 <_printf_i+0x28>
 8005726:	a101      	add	r1, pc, #4	; (adr r1, 800572c <_printf_i+0x40>)
 8005728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800572c:	08005785 	.word	0x08005785
 8005730:	08005799 	.word	0x08005799
 8005734:	08005715 	.word	0x08005715
 8005738:	08005715 	.word	0x08005715
 800573c:	08005715 	.word	0x08005715
 8005740:	08005715 	.word	0x08005715
 8005744:	08005799 	.word	0x08005799
 8005748:	08005715 	.word	0x08005715
 800574c:	08005715 	.word	0x08005715
 8005750:	08005715 	.word	0x08005715
 8005754:	08005715 	.word	0x08005715
 8005758:	0800589f 	.word	0x0800589f
 800575c:	080057c5 	.word	0x080057c5
 8005760:	08005859 	.word	0x08005859
 8005764:	08005715 	.word	0x08005715
 8005768:	08005715 	.word	0x08005715
 800576c:	080058c1 	.word	0x080058c1
 8005770:	08005715 	.word	0x08005715
 8005774:	080057c5 	.word	0x080057c5
 8005778:	08005715 	.word	0x08005715
 800577c:	08005715 	.word	0x08005715
 8005780:	08005861 	.word	0x08005861
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	602a      	str	r2, [r5, #0]
 800578c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005794:	2301      	movs	r3, #1
 8005796:	e0a0      	b.n	80058da <_printf_i+0x1ee>
 8005798:	6820      	ldr	r0, [r4, #0]
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	0607      	lsls	r7, r0, #24
 800579e:	f103 0104 	add.w	r1, r3, #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	d501      	bpl.n	80057aa <_printf_i+0xbe>
 80057a6:	681e      	ldr	r6, [r3, #0]
 80057a8:	e003      	b.n	80057b2 <_printf_i+0xc6>
 80057aa:	0646      	lsls	r6, r0, #25
 80057ac:	d5fb      	bpl.n	80057a6 <_printf_i+0xba>
 80057ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	da03      	bge.n	80057be <_printf_i+0xd2>
 80057b6:	232d      	movs	r3, #45	; 0x2d
 80057b8:	4276      	negs	r6, r6
 80057ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057be:	230a      	movs	r3, #10
 80057c0:	4859      	ldr	r0, [pc, #356]	; (8005928 <_printf_i+0x23c>)
 80057c2:	e012      	b.n	80057ea <_printf_i+0xfe>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	1d19      	adds	r1, r3, #4
 80057ca:	6029      	str	r1, [r5, #0]
 80057cc:	0605      	lsls	r5, r0, #24
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0xe8>
 80057d0:	681e      	ldr	r6, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0xee>
 80057d4:	0641      	lsls	r1, r0, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0xe4>
 80057d8:	881e      	ldrh	r6, [r3, #0]
 80057da:	2f6f      	cmp	r7, #111	; 0x6f
 80057dc:	bf0c      	ite	eq
 80057de:	2308      	moveq	r3, #8
 80057e0:	230a      	movne	r3, #10
 80057e2:	4851      	ldr	r0, [pc, #324]	; (8005928 <_printf_i+0x23c>)
 80057e4:	2100      	movs	r1, #0
 80057e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ea:	6865      	ldr	r5, [r4, #4]
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	bfa8      	it	ge
 80057f0:	6821      	ldrge	r1, [r4, #0]
 80057f2:	60a5      	str	r5, [r4, #8]
 80057f4:	bfa4      	itt	ge
 80057f6:	f021 0104 	bicge.w	r1, r1, #4
 80057fa:	6021      	strge	r1, [r4, #0]
 80057fc:	b90e      	cbnz	r6, 8005802 <_printf_i+0x116>
 80057fe:	2d00      	cmp	r5, #0
 8005800:	d04b      	beq.n	800589a <_printf_i+0x1ae>
 8005802:	4615      	mov	r5, r2
 8005804:	fbb6 f1f3 	udiv	r1, r6, r3
 8005808:	fb03 6711 	mls	r7, r3, r1, r6
 800580c:	5dc7      	ldrb	r7, [r0, r7]
 800580e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005812:	4637      	mov	r7, r6
 8005814:	42bb      	cmp	r3, r7
 8005816:	460e      	mov	r6, r1
 8005818:	d9f4      	bls.n	8005804 <_printf_i+0x118>
 800581a:	2b08      	cmp	r3, #8
 800581c:	d10b      	bne.n	8005836 <_printf_i+0x14a>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	07de      	lsls	r6, r3, #31
 8005822:	d508      	bpl.n	8005836 <_printf_i+0x14a>
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	6861      	ldr	r1, [r4, #4]
 8005828:	4299      	cmp	r1, r3
 800582a:	bfde      	ittt	le
 800582c:	2330      	movle	r3, #48	; 0x30
 800582e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005832:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005836:	1b52      	subs	r2, r2, r5
 8005838:	6122      	str	r2, [r4, #16]
 800583a:	464b      	mov	r3, r9
 800583c:	4621      	mov	r1, r4
 800583e:	4640      	mov	r0, r8
 8005840:	f8cd a000 	str.w	sl, [sp]
 8005844:	aa03      	add	r2, sp, #12
 8005846:	f7ff fedf 	bl	8005608 <_printf_common>
 800584a:	3001      	adds	r0, #1
 800584c:	d14a      	bne.n	80058e4 <_printf_i+0x1f8>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	b004      	add	sp, #16
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f043 0320 	orr.w	r3, r3, #32
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	2778      	movs	r7, #120	; 0x78
 8005862:	4832      	ldr	r0, [pc, #200]	; (800592c <_printf_i+0x240>)
 8005864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	6829      	ldr	r1, [r5, #0]
 800586c:	061f      	lsls	r7, r3, #24
 800586e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005872:	d402      	bmi.n	800587a <_printf_i+0x18e>
 8005874:	065f      	lsls	r7, r3, #25
 8005876:	bf48      	it	mi
 8005878:	b2b6      	uxthmi	r6, r6
 800587a:	07df      	lsls	r7, r3, #31
 800587c:	bf48      	it	mi
 800587e:	f043 0320 	orrmi.w	r3, r3, #32
 8005882:	6029      	str	r1, [r5, #0]
 8005884:	bf48      	it	mi
 8005886:	6023      	strmi	r3, [r4, #0]
 8005888:	b91e      	cbnz	r6, 8005892 <_printf_i+0x1a6>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f023 0320 	bic.w	r3, r3, #32
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	2310      	movs	r3, #16
 8005894:	e7a6      	b.n	80057e4 <_printf_i+0xf8>
 8005896:	4824      	ldr	r0, [pc, #144]	; (8005928 <_printf_i+0x23c>)
 8005898:	e7e4      	b.n	8005864 <_printf_i+0x178>
 800589a:	4615      	mov	r5, r2
 800589c:	e7bd      	b.n	800581a <_printf_i+0x12e>
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	6826      	ldr	r6, [r4, #0]
 80058a2:	1d18      	adds	r0, r3, #4
 80058a4:	6961      	ldr	r1, [r4, #20]
 80058a6:	6028      	str	r0, [r5, #0]
 80058a8:	0635      	lsls	r5, r6, #24
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	d501      	bpl.n	80058b2 <_printf_i+0x1c6>
 80058ae:	6019      	str	r1, [r3, #0]
 80058b0:	e002      	b.n	80058b8 <_printf_i+0x1cc>
 80058b2:	0670      	lsls	r0, r6, #25
 80058b4:	d5fb      	bpl.n	80058ae <_printf_i+0x1c2>
 80058b6:	8019      	strh	r1, [r3, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	4615      	mov	r5, r2
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	e7bc      	b.n	800583a <_printf_i+0x14e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	2100      	movs	r1, #0
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	602a      	str	r2, [r5, #0]
 80058c8:	681d      	ldr	r5, [r3, #0]
 80058ca:	6862      	ldr	r2, [r4, #4]
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 fdba 	bl	8006446 <memchr>
 80058d2:	b108      	cbz	r0, 80058d8 <_printf_i+0x1ec>
 80058d4:	1b40      	subs	r0, r0, r5
 80058d6:	6060      	str	r0, [r4, #4]
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2300      	movs	r3, #0
 80058de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e2:	e7aa      	b.n	800583a <_printf_i+0x14e>
 80058e4:	462a      	mov	r2, r5
 80058e6:	4649      	mov	r1, r9
 80058e8:	4640      	mov	r0, r8
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	47d0      	blx	sl
 80058ee:	3001      	adds	r0, #1
 80058f0:	d0ad      	beq.n	800584e <_printf_i+0x162>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	079b      	lsls	r3, r3, #30
 80058f6:	d413      	bmi.n	8005920 <_printf_i+0x234>
 80058f8:	68e0      	ldr	r0, [r4, #12]
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	4298      	cmp	r0, r3
 80058fe:	bfb8      	it	lt
 8005900:	4618      	movlt	r0, r3
 8005902:	e7a6      	b.n	8005852 <_printf_i+0x166>
 8005904:	2301      	movs	r3, #1
 8005906:	4632      	mov	r2, r6
 8005908:	4649      	mov	r1, r9
 800590a:	4640      	mov	r0, r8
 800590c:	47d0      	blx	sl
 800590e:	3001      	adds	r0, #1
 8005910:	d09d      	beq.n	800584e <_printf_i+0x162>
 8005912:	3501      	adds	r5, #1
 8005914:	68e3      	ldr	r3, [r4, #12]
 8005916:	9903      	ldr	r1, [sp, #12]
 8005918:	1a5b      	subs	r3, r3, r1
 800591a:	42ab      	cmp	r3, r5
 800591c:	dcf2      	bgt.n	8005904 <_printf_i+0x218>
 800591e:	e7eb      	b.n	80058f8 <_printf_i+0x20c>
 8005920:	2500      	movs	r5, #0
 8005922:	f104 0619 	add.w	r6, r4, #25
 8005926:	e7f5      	b.n	8005914 <_printf_i+0x228>
 8005928:	08009d50 	.word	0x08009d50
 800592c:	08009d61 	.word	0x08009d61

08005930 <_scanf_float>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	b087      	sub	sp, #28
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	688b      	ldr	r3, [r1, #8]
 800593a:	4617      	mov	r7, r2
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005942:	bf85      	ittet	hi
 8005944:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005948:	195b      	addhi	r3, r3, r5
 800594a:	2300      	movls	r3, #0
 800594c:	9302      	strhi	r3, [sp, #8]
 800594e:	bf88      	it	hi
 8005950:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005954:	468b      	mov	fp, r1
 8005956:	f04f 0500 	mov.w	r5, #0
 800595a:	bf8c      	ite	hi
 800595c:	608b      	strhi	r3, [r1, #8]
 800595e:	9302      	strls	r3, [sp, #8]
 8005960:	680b      	ldr	r3, [r1, #0]
 8005962:	4680      	mov	r8, r0
 8005964:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005968:	f84b 3b1c 	str.w	r3, [fp], #28
 800596c:	460c      	mov	r4, r1
 800596e:	465e      	mov	r6, fp
 8005970:	46aa      	mov	sl, r5
 8005972:	46a9      	mov	r9, r5
 8005974:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005978:	9501      	str	r5, [sp, #4]
 800597a:	68a2      	ldr	r2, [r4, #8]
 800597c:	b152      	cbz	r2, 8005994 <_scanf_float+0x64>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b4e      	cmp	r3, #78	; 0x4e
 8005984:	d864      	bhi.n	8005a50 <_scanf_float+0x120>
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d83c      	bhi.n	8005a04 <_scanf_float+0xd4>
 800598a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800598e:	b2c8      	uxtb	r0, r1
 8005990:	280e      	cmp	r0, #14
 8005992:	d93a      	bls.n	8005a0a <_scanf_float+0xda>
 8005994:	f1b9 0f00 	cmp.w	r9, #0
 8005998:	d003      	beq.n	80059a2 <_scanf_float+0x72>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059a6:	f1ba 0f01 	cmp.w	sl, #1
 80059aa:	f200 8113 	bhi.w	8005bd4 <_scanf_float+0x2a4>
 80059ae:	455e      	cmp	r6, fp
 80059b0:	f200 8105 	bhi.w	8005bbe <_scanf_float+0x28e>
 80059b4:	2501      	movs	r5, #1
 80059b6:	4628      	mov	r0, r5
 80059b8:	b007      	add	sp, #28
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059c2:	2a0d      	cmp	r2, #13
 80059c4:	d8e6      	bhi.n	8005994 <_scanf_float+0x64>
 80059c6:	a101      	add	r1, pc, #4	; (adr r1, 80059cc <_scanf_float+0x9c>)
 80059c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059cc:	08005b0b 	.word	0x08005b0b
 80059d0:	08005995 	.word	0x08005995
 80059d4:	08005995 	.word	0x08005995
 80059d8:	08005995 	.word	0x08005995
 80059dc:	08005b6b 	.word	0x08005b6b
 80059e0:	08005b43 	.word	0x08005b43
 80059e4:	08005995 	.word	0x08005995
 80059e8:	08005995 	.word	0x08005995
 80059ec:	08005b19 	.word	0x08005b19
 80059f0:	08005995 	.word	0x08005995
 80059f4:	08005995 	.word	0x08005995
 80059f8:	08005995 	.word	0x08005995
 80059fc:	08005995 	.word	0x08005995
 8005a00:	08005ad1 	.word	0x08005ad1
 8005a04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a08:	e7db      	b.n	80059c2 <_scanf_float+0x92>
 8005a0a:	290e      	cmp	r1, #14
 8005a0c:	d8c2      	bhi.n	8005994 <_scanf_float+0x64>
 8005a0e:	a001      	add	r0, pc, #4	; (adr r0, 8005a14 <_scanf_float+0xe4>)
 8005a10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a14:	08005ac3 	.word	0x08005ac3
 8005a18:	08005995 	.word	0x08005995
 8005a1c:	08005ac3 	.word	0x08005ac3
 8005a20:	08005b57 	.word	0x08005b57
 8005a24:	08005995 	.word	0x08005995
 8005a28:	08005a71 	.word	0x08005a71
 8005a2c:	08005aad 	.word	0x08005aad
 8005a30:	08005aad 	.word	0x08005aad
 8005a34:	08005aad 	.word	0x08005aad
 8005a38:	08005aad 	.word	0x08005aad
 8005a3c:	08005aad 	.word	0x08005aad
 8005a40:	08005aad 	.word	0x08005aad
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005aad 	.word	0x08005aad
 8005a4c:	08005aad 	.word	0x08005aad
 8005a50:	2b6e      	cmp	r3, #110	; 0x6e
 8005a52:	d809      	bhi.n	8005a68 <_scanf_float+0x138>
 8005a54:	2b60      	cmp	r3, #96	; 0x60
 8005a56:	d8b2      	bhi.n	80059be <_scanf_float+0x8e>
 8005a58:	2b54      	cmp	r3, #84	; 0x54
 8005a5a:	d077      	beq.n	8005b4c <_scanf_float+0x21c>
 8005a5c:	2b59      	cmp	r3, #89	; 0x59
 8005a5e:	d199      	bne.n	8005994 <_scanf_float+0x64>
 8005a60:	2d07      	cmp	r5, #7
 8005a62:	d197      	bne.n	8005994 <_scanf_float+0x64>
 8005a64:	2508      	movs	r5, #8
 8005a66:	e029      	b.n	8005abc <_scanf_float+0x18c>
 8005a68:	2b74      	cmp	r3, #116	; 0x74
 8005a6a:	d06f      	beq.n	8005b4c <_scanf_float+0x21c>
 8005a6c:	2b79      	cmp	r3, #121	; 0x79
 8005a6e:	e7f6      	b.n	8005a5e <_scanf_float+0x12e>
 8005a70:	6821      	ldr	r1, [r4, #0]
 8005a72:	05c8      	lsls	r0, r1, #23
 8005a74:	d51a      	bpl.n	8005aac <_scanf_float+0x17c>
 8005a76:	9b02      	ldr	r3, [sp, #8]
 8005a78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a7c:	6021      	str	r1, [r4, #0]
 8005a7e:	f109 0901 	add.w	r9, r9, #1
 8005a82:	b11b      	cbz	r3, 8005a8c <_scanf_float+0x15c>
 8005a84:	3b01      	subs	r3, #1
 8005a86:	3201      	adds	r2, #1
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	60a2      	str	r2, [r4, #8]
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	3301      	adds	r3, #1
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	f340 8084 	ble.w	8005bac <_scanf_float+0x27c>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	e766      	b.n	800597a <_scanf_float+0x4a>
 8005aac:	eb1a 0f05 	cmn.w	sl, r5
 8005ab0:	f47f af70 	bne.w	8005994 <_scanf_float+0x64>
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005aba:	6022      	str	r2, [r4, #0]
 8005abc:	f806 3b01 	strb.w	r3, [r6], #1
 8005ac0:	e7e4      	b.n	8005a8c <_scanf_float+0x15c>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	0610      	lsls	r0, r2, #24
 8005ac6:	f57f af65 	bpl.w	8005994 <_scanf_float+0x64>
 8005aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ace:	e7f4      	b.n	8005aba <_scanf_float+0x18a>
 8005ad0:	f1ba 0f00 	cmp.w	sl, #0
 8005ad4:	d10e      	bne.n	8005af4 <_scanf_float+0x1c4>
 8005ad6:	f1b9 0f00 	cmp.w	r9, #0
 8005ada:	d10e      	bne.n	8005afa <_scanf_float+0x1ca>
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ae2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ae6:	d108      	bne.n	8005afa <_scanf_float+0x1ca>
 8005ae8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005aec:	f04f 0a01 	mov.w	sl, #1
 8005af0:	6022      	str	r2, [r4, #0]
 8005af2:	e7e3      	b.n	8005abc <_scanf_float+0x18c>
 8005af4:	f1ba 0f02 	cmp.w	sl, #2
 8005af8:	d055      	beq.n	8005ba6 <_scanf_float+0x276>
 8005afa:	2d01      	cmp	r5, #1
 8005afc:	d002      	beq.n	8005b04 <_scanf_float+0x1d4>
 8005afe:	2d04      	cmp	r5, #4
 8005b00:	f47f af48 	bne.w	8005994 <_scanf_float+0x64>
 8005b04:	3501      	adds	r5, #1
 8005b06:	b2ed      	uxtb	r5, r5
 8005b08:	e7d8      	b.n	8005abc <_scanf_float+0x18c>
 8005b0a:	f1ba 0f01 	cmp.w	sl, #1
 8005b0e:	f47f af41 	bne.w	8005994 <_scanf_float+0x64>
 8005b12:	f04f 0a02 	mov.w	sl, #2
 8005b16:	e7d1      	b.n	8005abc <_scanf_float+0x18c>
 8005b18:	b97d      	cbnz	r5, 8005b3a <_scanf_float+0x20a>
 8005b1a:	f1b9 0f00 	cmp.w	r9, #0
 8005b1e:	f47f af3c 	bne.w	800599a <_scanf_float+0x6a>
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b2c:	f47f af39 	bne.w	80059a2 <_scanf_float+0x72>
 8005b30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b34:	2501      	movs	r5, #1
 8005b36:	6022      	str	r2, [r4, #0]
 8005b38:	e7c0      	b.n	8005abc <_scanf_float+0x18c>
 8005b3a:	2d03      	cmp	r5, #3
 8005b3c:	d0e2      	beq.n	8005b04 <_scanf_float+0x1d4>
 8005b3e:	2d05      	cmp	r5, #5
 8005b40:	e7de      	b.n	8005b00 <_scanf_float+0x1d0>
 8005b42:	2d02      	cmp	r5, #2
 8005b44:	f47f af26 	bne.w	8005994 <_scanf_float+0x64>
 8005b48:	2503      	movs	r5, #3
 8005b4a:	e7b7      	b.n	8005abc <_scanf_float+0x18c>
 8005b4c:	2d06      	cmp	r5, #6
 8005b4e:	f47f af21 	bne.w	8005994 <_scanf_float+0x64>
 8005b52:	2507      	movs	r5, #7
 8005b54:	e7b2      	b.n	8005abc <_scanf_float+0x18c>
 8005b56:	6822      	ldr	r2, [r4, #0]
 8005b58:	0591      	lsls	r1, r2, #22
 8005b5a:	f57f af1b 	bpl.w	8005994 <_scanf_float+0x64>
 8005b5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b68:	e7a8      	b.n	8005abc <_scanf_float+0x18c>
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b74:	d006      	beq.n	8005b84 <_scanf_float+0x254>
 8005b76:	0550      	lsls	r0, r2, #21
 8005b78:	f57f af0c 	bpl.w	8005994 <_scanf_float+0x64>
 8005b7c:	f1b9 0f00 	cmp.w	r9, #0
 8005b80:	f43f af0f 	beq.w	80059a2 <_scanf_float+0x72>
 8005b84:	0591      	lsls	r1, r2, #22
 8005b86:	bf58      	it	pl
 8005b88:	9901      	ldrpl	r1, [sp, #4]
 8005b8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b8e:	bf58      	it	pl
 8005b90:	eba9 0101 	subpl.w	r1, r9, r1
 8005b94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b98:	f04f 0900 	mov.w	r9, #0
 8005b9c:	bf58      	it	pl
 8005b9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ba2:	6022      	str	r2, [r4, #0]
 8005ba4:	e78a      	b.n	8005abc <_scanf_float+0x18c>
 8005ba6:	f04f 0a03 	mov.w	sl, #3
 8005baa:	e787      	b.n	8005abc <_scanf_float+0x18c>
 8005bac:	4639      	mov	r1, r7
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bb4:	4798      	blx	r3
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	f43f aedf 	beq.w	800597a <_scanf_float+0x4a>
 8005bbc:	e6ea      	b.n	8005994 <_scanf_float+0x64>
 8005bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bc2:	463a      	mov	r2, r7
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bca:	4798      	blx	r3
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	e6ec      	b.n	80059ae <_scanf_float+0x7e>
 8005bd4:	1e6b      	subs	r3, r5, #1
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d825      	bhi.n	8005c26 <_scanf_float+0x2f6>
 8005bda:	2d02      	cmp	r5, #2
 8005bdc:	d836      	bhi.n	8005c4c <_scanf_float+0x31c>
 8005bde:	455e      	cmp	r6, fp
 8005be0:	f67f aee8 	bls.w	80059b4 <_scanf_float+0x84>
 8005be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005be8:	463a      	mov	r2, r7
 8005bea:	4640      	mov	r0, r8
 8005bec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bf0:	4798      	blx	r3
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	e7f1      	b.n	8005bde <_scanf_float+0x2ae>
 8005bfa:	9802      	ldr	r0, [sp, #8]
 8005bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c04:	463a      	mov	r2, r7
 8005c06:	9002      	str	r0, [sp, #8]
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4798      	blx	r3
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c16:	fa5f fa8a 	uxtb.w	sl, sl
 8005c1a:	f1ba 0f02 	cmp.w	sl, #2
 8005c1e:	d1ec      	bne.n	8005bfa <_scanf_float+0x2ca>
 8005c20:	3d03      	subs	r5, #3
 8005c22:	b2ed      	uxtb	r5, r5
 8005c24:	1b76      	subs	r6, r6, r5
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	05da      	lsls	r2, r3, #23
 8005c2a:	d52f      	bpl.n	8005c8c <_scanf_float+0x35c>
 8005c2c:	055b      	lsls	r3, r3, #21
 8005c2e:	d510      	bpl.n	8005c52 <_scanf_float+0x322>
 8005c30:	455e      	cmp	r6, fp
 8005c32:	f67f aebf 	bls.w	80059b4 <_scanf_float+0x84>
 8005c36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c3a:	463a      	mov	r2, r7
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c42:	4798      	blx	r3
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	e7f1      	b.n	8005c30 <_scanf_float+0x300>
 8005c4c:	46aa      	mov	sl, r5
 8005c4e:	9602      	str	r6, [sp, #8]
 8005c50:	e7df      	b.n	8005c12 <_scanf_float+0x2e2>
 8005c52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	2965      	cmp	r1, #101	; 0x65
 8005c5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c62:	6123      	str	r3, [r4, #16]
 8005c64:	d00c      	beq.n	8005c80 <_scanf_float+0x350>
 8005c66:	2945      	cmp	r1, #69	; 0x45
 8005c68:	d00a      	beq.n	8005c80 <_scanf_float+0x350>
 8005c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c6e:	463a      	mov	r2, r7
 8005c70:	4640      	mov	r0, r8
 8005c72:	4798      	blx	r3
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	1eb5      	subs	r5, r6, #2
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	463a      	mov	r2, r7
 8005c82:	4640      	mov	r0, r8
 8005c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c88:	4798      	blx	r3
 8005c8a:	462e      	mov	r6, r5
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	f015 0510 	ands.w	r5, r5, #16
 8005c92:	d155      	bne.n	8005d40 <_scanf_float+0x410>
 8005c94:	7035      	strb	r5, [r6, #0]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca0:	d11d      	bne.n	8005cde <_scanf_float+0x3ae>
 8005ca2:	9b01      	ldr	r3, [sp, #4]
 8005ca4:	454b      	cmp	r3, r9
 8005ca6:	eba3 0209 	sub.w	r2, r3, r9
 8005caa:	d125      	bne.n	8005cf8 <_scanf_float+0x3c8>
 8005cac:	2200      	movs	r2, #0
 8005cae:	4659      	mov	r1, fp
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	f002 fe09 	bl	80088c8 <_strtod_r>
 8005cb6:	9b03      	ldr	r3, [sp, #12]
 8005cb8:	f8d4 c000 	ldr.w	ip, [r4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f01c 0f02 	tst.w	ip, #2
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460f      	mov	r7, r1
 8005cc6:	f103 0204 	add.w	r2, r3, #4
 8005cca:	d020      	beq.n	8005d0e <_scanf_float+0x3de>
 8005ccc:	9903      	ldr	r1, [sp, #12]
 8005cce:	600a      	str	r2, [r1, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	e9c3 6700 	strd	r6, r7, [r3]
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60e3      	str	r3, [r4, #12]
 8005cdc:	e66b      	b.n	80059b6 <_scanf_float+0x86>
 8005cde:	9b04      	ldr	r3, [sp, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0e3      	beq.n	8005cac <_scanf_float+0x37c>
 8005ce4:	9905      	ldr	r1, [sp, #20]
 8005ce6:	230a      	movs	r3, #10
 8005ce8:	462a      	mov	r2, r5
 8005cea:	4640      	mov	r0, r8
 8005cec:	3101      	adds	r1, #1
 8005cee:	f002 fe6f 	bl	80089d0 <_strtol_r>
 8005cf2:	9b04      	ldr	r3, [sp, #16]
 8005cf4:	9e05      	ldr	r6, [sp, #20]
 8005cf6:	1ac2      	subs	r2, r0, r3
 8005cf8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005cfc:	429e      	cmp	r6, r3
 8005cfe:	bf28      	it	cs
 8005d00:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d04:	4630      	mov	r0, r6
 8005d06:	490f      	ldr	r1, [pc, #60]	; (8005d44 <_scanf_float+0x414>)
 8005d08:	f000 f9fe 	bl	8006108 <siprintf>
 8005d0c:	e7ce      	b.n	8005cac <_scanf_float+0x37c>
 8005d0e:	f01c 0f04 	tst.w	ip, #4
 8005d12:	d1db      	bne.n	8005ccc <_scanf_float+0x39c>
 8005d14:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005d18:	f8cc 2000 	str.w	r2, [ip]
 8005d1c:	f8d3 8000 	ldr.w	r8, [r3]
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	f7fa fe72 	bl	8000a0c <__aeabi_dcmpun>
 8005d28:	b128      	cbz	r0, 8005d36 <_scanf_float+0x406>
 8005d2a:	4807      	ldr	r0, [pc, #28]	; (8005d48 <_scanf_float+0x418>)
 8005d2c:	f000 fba8 	bl	8006480 <nanf>
 8005d30:	f8c8 0000 	str.w	r0, [r8]
 8005d34:	e7cf      	b.n	8005cd6 <_scanf_float+0x3a6>
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa fec5 	bl	8000ac8 <__aeabi_d2f>
 8005d3e:	e7f7      	b.n	8005d30 <_scanf_float+0x400>
 8005d40:	2500      	movs	r5, #0
 8005d42:	e638      	b.n	80059b6 <_scanf_float+0x86>
 8005d44:	08009d72 	.word	0x08009d72
 8005d48:	0800a105 	.word	0x0800a105

08005d4c <std>:
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	4604      	mov	r4, r0
 8005d52:	e9c0 3300 	strd	r3, r3, [r0]
 8005d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d5a:	6083      	str	r3, [r0, #8]
 8005d5c:	8181      	strh	r1, [r0, #12]
 8005d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d60:	81c2      	strh	r2, [r0, #14]
 8005d62:	6183      	str	r3, [r0, #24]
 8005d64:	4619      	mov	r1, r3
 8005d66:	2208      	movs	r2, #8
 8005d68:	305c      	adds	r0, #92	; 0x5c
 8005d6a:	f000 fac5 	bl	80062f8 <memset>
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <std+0x58>)
 8005d70:	6224      	str	r4, [r4, #32]
 8005d72:	6263      	str	r3, [r4, #36]	; 0x24
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <std+0x5c>)
 8005d76:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <std+0x60>)
 8005d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <std+0x64>)
 8005d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <std+0x68>)
 8005d82:	429c      	cmp	r4, r3
 8005d84:	d006      	beq.n	8005d94 <std+0x48>
 8005d86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d8a:	4294      	cmp	r4, r2
 8005d8c:	d002      	beq.n	8005d94 <std+0x48>
 8005d8e:	33d0      	adds	r3, #208	; 0xd0
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d105      	bne.n	8005da0 <std+0x54>
 8005d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d9c:	f000 bb50 	b.w	8006440 <__retarget_lock_init_recursive>
 8005da0:	bd10      	pop	{r4, pc}
 8005da2:	bf00      	nop
 8005da4:	08006149 	.word	0x08006149
 8005da8:	0800616b 	.word	0x0800616b
 8005dac:	080061a3 	.word	0x080061a3
 8005db0:	080061c7 	.word	0x080061c7
 8005db4:	20000bb0 	.word	0x20000bb0

08005db8 <stdio_exit_handler>:
 8005db8:	4a02      	ldr	r2, [pc, #8]	; (8005dc4 <stdio_exit_handler+0xc>)
 8005dba:	4903      	ldr	r1, [pc, #12]	; (8005dc8 <stdio_exit_handler+0x10>)
 8005dbc:	4803      	ldr	r0, [pc, #12]	; (8005dcc <stdio_exit_handler+0x14>)
 8005dbe:	f000 b869 	b.w	8005e94 <_fwalk_sglue>
 8005dc2:	bf00      	nop
 8005dc4:	20000010 	.word	0x20000010
 8005dc8:	0800900d 	.word	0x0800900d
 8005dcc:	2000001c 	.word	0x2000001c

08005dd0 <cleanup_stdio>:
 8005dd0:	6841      	ldr	r1, [r0, #4]
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <cleanup_stdio+0x34>)
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	4604      	mov	r4, r0
 8005dda:	d001      	beq.n	8005de0 <cleanup_stdio+0x10>
 8005ddc:	f003 f916 	bl	800900c <_fflush_r>
 8005de0:	68a1      	ldr	r1, [r4, #8]
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <cleanup_stdio+0x38>)
 8005de4:	4299      	cmp	r1, r3
 8005de6:	d002      	beq.n	8005dee <cleanup_stdio+0x1e>
 8005de8:	4620      	mov	r0, r4
 8005dea:	f003 f90f 	bl	800900c <_fflush_r>
 8005dee:	68e1      	ldr	r1, [r4, #12]
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <cleanup_stdio+0x3c>)
 8005df2:	4299      	cmp	r1, r3
 8005df4:	d004      	beq.n	8005e00 <cleanup_stdio+0x30>
 8005df6:	4620      	mov	r0, r4
 8005df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfc:	f003 b906 	b.w	800900c <_fflush_r>
 8005e00:	bd10      	pop	{r4, pc}
 8005e02:	bf00      	nop
 8005e04:	20000bb0 	.word	0x20000bb0
 8005e08:	20000c18 	.word	0x20000c18
 8005e0c:	20000c80 	.word	0x20000c80

08005e10 <global_stdio_init.part.0>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <global_stdio_init.part.0+0x30>)
 8005e14:	4c0b      	ldr	r4, [pc, #44]	; (8005e44 <global_stdio_init.part.0+0x34>)
 8005e16:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <global_stdio_init.part.0+0x38>)
 8005e18:	4620      	mov	r0, r4
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	2104      	movs	r1, #4
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f7ff ff94 	bl	8005d4c <std>
 8005e24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e28:	2201      	movs	r2, #1
 8005e2a:	2109      	movs	r1, #9
 8005e2c:	f7ff ff8e 	bl	8005d4c <std>
 8005e30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e34:	2202      	movs	r2, #2
 8005e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e3a:	2112      	movs	r1, #18
 8005e3c:	f7ff bf86 	b.w	8005d4c <std>
 8005e40:	20000ce8 	.word	0x20000ce8
 8005e44:	20000bb0 	.word	0x20000bb0
 8005e48:	08005db9 	.word	0x08005db9

08005e4c <__sfp_lock_acquire>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	; (8005e54 <__sfp_lock_acquire+0x8>)
 8005e4e:	f000 baf8 	b.w	8006442 <__retarget_lock_acquire_recursive>
 8005e52:	bf00      	nop
 8005e54:	20000cf1 	.word	0x20000cf1

08005e58 <__sfp_lock_release>:
 8005e58:	4801      	ldr	r0, [pc, #4]	; (8005e60 <__sfp_lock_release+0x8>)
 8005e5a:	f000 baf3 	b.w	8006444 <__retarget_lock_release_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20000cf1 	.word	0x20000cf1

08005e64 <__sinit>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4604      	mov	r4, r0
 8005e68:	f7ff fff0 	bl	8005e4c <__sfp_lock_acquire>
 8005e6c:	6a23      	ldr	r3, [r4, #32]
 8005e6e:	b11b      	cbz	r3, 8005e78 <__sinit+0x14>
 8005e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e74:	f7ff bff0 	b.w	8005e58 <__sfp_lock_release>
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <__sinit+0x28>)
 8005e7a:	6223      	str	r3, [r4, #32]
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <__sinit+0x2c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f5      	bne.n	8005e70 <__sinit+0xc>
 8005e84:	f7ff ffc4 	bl	8005e10 <global_stdio_init.part.0>
 8005e88:	e7f2      	b.n	8005e70 <__sinit+0xc>
 8005e8a:	bf00      	nop
 8005e8c:	08005dd1 	.word	0x08005dd1
 8005e90:	20000ce8 	.word	0x20000ce8

08005e94 <_fwalk_sglue>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	4607      	mov	r7, r0
 8005e9a:	4688      	mov	r8, r1
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ea8:	d505      	bpl.n	8005eb6 <_fwalk_sglue+0x22>
 8005eaa:	6824      	ldr	r4, [r4, #0]
 8005eac:	2c00      	cmp	r4, #0
 8005eae:	d1f7      	bne.n	8005ea0 <_fwalk_sglue+0xc>
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d907      	bls.n	8005ecc <_fwalk_sglue+0x38>
 8005ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	d003      	beq.n	8005ecc <_fwalk_sglue+0x38>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	4306      	orrs	r6, r0
 8005ecc:	3568      	adds	r5, #104	; 0x68
 8005ece:	e7e9      	b.n	8005ea4 <_fwalk_sglue+0x10>

08005ed0 <iprintf>:
 8005ed0:	b40f      	push	{r0, r1, r2, r3}
 8005ed2:	b507      	push	{r0, r1, r2, lr}
 8005ed4:	4906      	ldr	r1, [pc, #24]	; (8005ef0 <iprintf+0x20>)
 8005ed6:	ab04      	add	r3, sp, #16
 8005ed8:	6808      	ldr	r0, [r1, #0]
 8005eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ede:	6881      	ldr	r1, [r0, #8]
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	f002 fef7 	bl	8008cd4 <_vfiprintf_r>
 8005ee6:	b003      	add	sp, #12
 8005ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eec:	b004      	add	sp, #16
 8005eee:	4770      	bx	lr
 8005ef0:	20000068 	.word	0x20000068

08005ef4 <_puts_r>:
 8005ef4:	6a03      	ldr	r3, [r0, #32]
 8005ef6:	b570      	push	{r4, r5, r6, lr}
 8005ef8:	4605      	mov	r5, r0
 8005efa:	460e      	mov	r6, r1
 8005efc:	6884      	ldr	r4, [r0, #8]
 8005efe:	b90b      	cbnz	r3, 8005f04 <_puts_r+0x10>
 8005f00:	f7ff ffb0 	bl	8005e64 <__sinit>
 8005f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f06:	07db      	lsls	r3, r3, #31
 8005f08:	d405      	bmi.n	8005f16 <_puts_r+0x22>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	0598      	lsls	r0, r3, #22
 8005f0e:	d402      	bmi.n	8005f16 <_puts_r+0x22>
 8005f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f12:	f000 fa96 	bl	8006442 <__retarget_lock_acquire_recursive>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	0719      	lsls	r1, r3, #28
 8005f1a:	d513      	bpl.n	8005f44 <_puts_r+0x50>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	b18b      	cbz	r3, 8005f44 <_puts_r+0x50>
 8005f20:	3e01      	subs	r6, #1
 8005f22:	68a3      	ldr	r3, [r4, #8]
 8005f24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	60a3      	str	r3, [r4, #8]
 8005f2c:	b9e9      	cbnz	r1, 8005f6a <_puts_r+0x76>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da2e      	bge.n	8005f90 <_puts_r+0x9c>
 8005f32:	4622      	mov	r2, r4
 8005f34:	210a      	movs	r1, #10
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f949 	bl	80061ce <__swbuf_r>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d007      	beq.n	8005f50 <_puts_r+0x5c>
 8005f40:	250a      	movs	r5, #10
 8005f42:	e007      	b.n	8005f54 <_puts_r+0x60>
 8005f44:	4621      	mov	r1, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f97e 	bl	8006248 <__swsetup_r>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d0e7      	beq.n	8005f20 <_puts_r+0x2c>
 8005f50:	f04f 35ff 	mov.w	r5, #4294967295
 8005f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f56:	07da      	lsls	r2, r3, #31
 8005f58:	d405      	bmi.n	8005f66 <_puts_r+0x72>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	059b      	lsls	r3, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_puts_r+0x72>
 8005f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f62:	f000 fa6f 	bl	8006444 <__retarget_lock_release_recursive>
 8005f66:	4628      	mov	r0, r5
 8005f68:	bd70      	pop	{r4, r5, r6, pc}
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da04      	bge.n	8005f78 <_puts_r+0x84>
 8005f6e:	69a2      	ldr	r2, [r4, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	dc06      	bgt.n	8005f82 <_puts_r+0x8e>
 8005f74:	290a      	cmp	r1, #10
 8005f76:	d004      	beq.n	8005f82 <_puts_r+0x8e>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	6022      	str	r2, [r4, #0]
 8005f7e:	7019      	strb	r1, [r3, #0]
 8005f80:	e7cf      	b.n	8005f22 <_puts_r+0x2e>
 8005f82:	4622      	mov	r2, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 f922 	bl	80061ce <__swbuf_r>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d1c9      	bne.n	8005f22 <_puts_r+0x2e>
 8005f8e:	e7df      	b.n	8005f50 <_puts_r+0x5c>
 8005f90:	250a      	movs	r5, #10
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	6022      	str	r2, [r4, #0]
 8005f98:	701d      	strb	r5, [r3, #0]
 8005f9a:	e7db      	b.n	8005f54 <_puts_r+0x60>

08005f9c <puts>:
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <puts+0xc>)
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	f7ff bfa7 	b.w	8005ef4 <_puts_r>
 8005fa6:	bf00      	nop
 8005fa8:	20000068 	.word	0x20000068

08005fac <setvbuf>:
 8005fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	4b54      	ldr	r3, [pc, #336]	; (8006104 <setvbuf+0x158>)
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	681f      	ldr	r7, [r3, #0]
 8005fb8:	460e      	mov	r6, r1
 8005fba:	4690      	mov	r8, r2
 8005fbc:	b127      	cbz	r7, 8005fc8 <setvbuf+0x1c>
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	b913      	cbnz	r3, 8005fc8 <setvbuf+0x1c>
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	f7ff ff4e 	bl	8005e64 <__sinit>
 8005fc8:	f1b8 0f02 	cmp.w	r8, #2
 8005fcc:	d006      	beq.n	8005fdc <setvbuf+0x30>
 8005fce:	f1b8 0f01 	cmp.w	r8, #1
 8005fd2:	f200 8094 	bhi.w	80060fe <setvbuf+0x152>
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	f2c0 8091 	blt.w	80060fe <setvbuf+0x152>
 8005fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fde:	07da      	lsls	r2, r3, #31
 8005fe0:	d405      	bmi.n	8005fee <setvbuf+0x42>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	059b      	lsls	r3, r3, #22
 8005fe6:	d402      	bmi.n	8005fee <setvbuf+0x42>
 8005fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fea:	f000 fa2a 	bl	8006442 <__retarget_lock_acquire_recursive>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f003 f80b 	bl	800900c <_fflush_r>
 8005ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff8:	b141      	cbz	r1, 800600c <setvbuf+0x60>
 8005ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ffe:	4299      	cmp	r1, r3
 8006000:	d002      	beq.n	8006008 <setvbuf+0x5c>
 8006002:	4638      	mov	r0, r7
 8006004:	f001 f8b0 	bl	8007168 <_free_r>
 8006008:	2300      	movs	r3, #0
 800600a:	6363      	str	r3, [r4, #52]	; 0x34
 800600c:	2300      	movs	r3, #0
 800600e:	61a3      	str	r3, [r4, #24]
 8006010:	6063      	str	r3, [r4, #4]
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	0618      	lsls	r0, r3, #24
 8006016:	d503      	bpl.n	8006020 <setvbuf+0x74>
 8006018:	4638      	mov	r0, r7
 800601a:	6921      	ldr	r1, [r4, #16]
 800601c:	f001 f8a4 	bl	8007168 <_free_r>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f1b8 0f02 	cmp.w	r8, #2
 8006026:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	d05f      	beq.n	80060f2 <setvbuf+0x146>
 8006032:	ab01      	add	r3, sp, #4
 8006034:	466a      	mov	r2, sp
 8006036:	4621      	mov	r1, r4
 8006038:	4638      	mov	r0, r7
 800603a:	f003 f80f 	bl	800905c <__swhatbuf_r>
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	4318      	orrs	r0, r3
 8006042:	81a0      	strh	r0, [r4, #12]
 8006044:	bb2d      	cbnz	r5, 8006092 <setvbuf+0xe6>
 8006046:	9d00      	ldr	r5, [sp, #0]
 8006048:	4628      	mov	r0, r5
 800604a:	f001 f8d5 	bl	80071f8 <malloc>
 800604e:	4606      	mov	r6, r0
 8006050:	2800      	cmp	r0, #0
 8006052:	d150      	bne.n	80060f6 <setvbuf+0x14a>
 8006054:	f8dd 9000 	ldr.w	r9, [sp]
 8006058:	45a9      	cmp	r9, r5
 800605a:	d13e      	bne.n	80060da <setvbuf+0x12e>
 800605c:	f04f 35ff 	mov.w	r5, #4294967295
 8006060:	2200      	movs	r2, #0
 8006062:	60a2      	str	r2, [r4, #8]
 8006064:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006068:	6022      	str	r2, [r4, #0]
 800606a:	6122      	str	r2, [r4, #16]
 800606c:	2201      	movs	r2, #1
 800606e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006072:	6162      	str	r2, [r4, #20]
 8006074:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006076:	f043 0302 	orr.w	r3, r3, #2
 800607a:	07d1      	lsls	r1, r2, #31
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	d404      	bmi.n	800608a <setvbuf+0xde>
 8006080:	059b      	lsls	r3, r3, #22
 8006082:	d402      	bmi.n	800608a <setvbuf+0xde>
 8006084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006086:	f000 f9dd 	bl	8006444 <__retarget_lock_release_recursive>
 800608a:	4628      	mov	r0, r5
 800608c:	b003      	add	sp, #12
 800608e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006092:	2e00      	cmp	r6, #0
 8006094:	d0d8      	beq.n	8006048 <setvbuf+0x9c>
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	b913      	cbnz	r3, 80060a0 <setvbuf+0xf4>
 800609a:	4638      	mov	r0, r7
 800609c:	f7ff fee2 	bl	8005e64 <__sinit>
 80060a0:	f1b8 0f01 	cmp.w	r8, #1
 80060a4:	bf08      	it	eq
 80060a6:	89a3      	ldrheq	r3, [r4, #12]
 80060a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80060ac:	bf04      	itt	eq
 80060ae:	f043 0301 	orreq.w	r3, r3, #1
 80060b2:	81a3      	strheq	r3, [r4, #12]
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	6026      	str	r6, [r4, #0]
 80060b8:	f013 0208 	ands.w	r2, r3, #8
 80060bc:	d01d      	beq.n	80060fa <setvbuf+0x14e>
 80060be:	07da      	lsls	r2, r3, #31
 80060c0:	bf41      	itttt	mi
 80060c2:	2200      	movmi	r2, #0
 80060c4:	426d      	negmi	r5, r5
 80060c6:	60a2      	strmi	r2, [r4, #8]
 80060c8:	61a5      	strmi	r5, [r4, #24]
 80060ca:	bf58      	it	pl
 80060cc:	60a5      	strpl	r5, [r4, #8]
 80060ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80060d0:	f015 0501 	ands.w	r5, r5, #1
 80060d4:	d0d4      	beq.n	8006080 <setvbuf+0xd4>
 80060d6:	2500      	movs	r5, #0
 80060d8:	e7d7      	b.n	800608a <setvbuf+0xde>
 80060da:	4648      	mov	r0, r9
 80060dc:	f001 f88c 	bl	80071f8 <malloc>
 80060e0:	4606      	mov	r6, r0
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d0ba      	beq.n	800605c <setvbuf+0xb0>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	464d      	mov	r5, r9
 80060ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	e7d1      	b.n	8006096 <setvbuf+0xea>
 80060f2:	2500      	movs	r5, #0
 80060f4:	e7b4      	b.n	8006060 <setvbuf+0xb4>
 80060f6:	46a9      	mov	r9, r5
 80060f8:	e7f5      	b.n	80060e6 <setvbuf+0x13a>
 80060fa:	60a2      	str	r2, [r4, #8]
 80060fc:	e7e7      	b.n	80060ce <setvbuf+0x122>
 80060fe:	f04f 35ff 	mov.w	r5, #4294967295
 8006102:	e7c2      	b.n	800608a <setvbuf+0xde>
 8006104:	20000068 	.word	0x20000068

08006108 <siprintf>:
 8006108:	b40e      	push	{r1, r2, r3}
 800610a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800610e:	b500      	push	{lr}
 8006110:	b09c      	sub	sp, #112	; 0x70
 8006112:	ab1d      	add	r3, sp, #116	; 0x74
 8006114:	9002      	str	r0, [sp, #8]
 8006116:	9006      	str	r0, [sp, #24]
 8006118:	9107      	str	r1, [sp, #28]
 800611a:	9104      	str	r1, [sp, #16]
 800611c:	4808      	ldr	r0, [pc, #32]	; (8006140 <siprintf+0x38>)
 800611e:	4909      	ldr	r1, [pc, #36]	; (8006144 <siprintf+0x3c>)
 8006120:	f853 2b04 	ldr.w	r2, [r3], #4
 8006124:	9105      	str	r1, [sp, #20]
 8006126:	6800      	ldr	r0, [r0, #0]
 8006128:	a902      	add	r1, sp, #8
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	f002 fcac 	bl	8008a88 <_svfiprintf_r>
 8006130:	2200      	movs	r2, #0
 8006132:	9b02      	ldr	r3, [sp, #8]
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	b01c      	add	sp, #112	; 0x70
 8006138:	f85d eb04 	ldr.w	lr, [sp], #4
 800613c:	b003      	add	sp, #12
 800613e:	4770      	bx	lr
 8006140:	20000068 	.word	0x20000068
 8006144:	ffff0208 	.word	0xffff0208

08006148 <__sread>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	f000 f928 	bl	80063a4 <_read_r>
 8006154:	2800      	cmp	r0, #0
 8006156:	bfab      	itete	ge
 8006158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800615a:	89a3      	ldrhlt	r3, [r4, #12]
 800615c:	181b      	addge	r3, r3, r0
 800615e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006162:	bfac      	ite	ge
 8006164:	6563      	strge	r3, [r4, #84]	; 0x54
 8006166:	81a3      	strhlt	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__swrite>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	461f      	mov	r7, r3
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	4605      	mov	r5, r0
 8006174:	05db      	lsls	r3, r3, #23
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d505      	bpl.n	8006188 <__swrite+0x1e>
 800617c:	2302      	movs	r3, #2
 800617e:	2200      	movs	r2, #0
 8006180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006184:	f000 f8fc 	bl	8006380 <_lseek_r>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	4632      	mov	r2, r6
 800618c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	4628      	mov	r0, r5
 8006194:	463b      	mov	r3, r7
 8006196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f000 b913 	b.w	80063c8 <_write_r>

080061a2 <__sseek>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 f8e9 	bl	8006380 <_lseek_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	bf15      	itete	ne
 80061b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061be:	81a3      	strheq	r3, [r4, #12]
 80061c0:	bf18      	it	ne
 80061c2:	81a3      	strhne	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__sclose>:
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 b8c9 	b.w	8006360 <_close_r>

080061ce <__swbuf_r>:
 80061ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d0:	460e      	mov	r6, r1
 80061d2:	4614      	mov	r4, r2
 80061d4:	4605      	mov	r5, r0
 80061d6:	b118      	cbz	r0, 80061e0 <__swbuf_r+0x12>
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b90b      	cbnz	r3, 80061e0 <__swbuf_r+0x12>
 80061dc:	f7ff fe42 	bl	8005e64 <__sinit>
 80061e0:	69a3      	ldr	r3, [r4, #24]
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	071a      	lsls	r2, r3, #28
 80061e8:	d525      	bpl.n	8006236 <__swbuf_r+0x68>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	b31b      	cbz	r3, 8006236 <__swbuf_r+0x68>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	6922      	ldr	r2, [r4, #16]
 80061f2:	b2f6      	uxtb	r6, r6
 80061f4:	1a98      	subs	r0, r3, r2
 80061f6:	6963      	ldr	r3, [r4, #20]
 80061f8:	4637      	mov	r7, r6
 80061fa:	4283      	cmp	r3, r0
 80061fc:	dc04      	bgt.n	8006208 <__swbuf_r+0x3a>
 80061fe:	4621      	mov	r1, r4
 8006200:	4628      	mov	r0, r5
 8006202:	f002 ff03 	bl	800900c <_fflush_r>
 8006206:	b9e0      	cbnz	r0, 8006242 <__swbuf_r+0x74>
 8006208:	68a3      	ldr	r3, [r4, #8]
 800620a:	3b01      	subs	r3, #1
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	701e      	strb	r6, [r3, #0]
 8006216:	6962      	ldr	r2, [r4, #20]
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	429a      	cmp	r2, r3
 800621c:	d004      	beq.n	8006228 <__swbuf_r+0x5a>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	07db      	lsls	r3, r3, #31
 8006222:	d506      	bpl.n	8006232 <__swbuf_r+0x64>
 8006224:	2e0a      	cmp	r6, #10
 8006226:	d104      	bne.n	8006232 <__swbuf_r+0x64>
 8006228:	4621      	mov	r1, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f002 feee 	bl	800900c <_fflush_r>
 8006230:	b938      	cbnz	r0, 8006242 <__swbuf_r+0x74>
 8006232:	4638      	mov	r0, r7
 8006234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f805 	bl	8006248 <__swsetup_r>
 800623e:	2800      	cmp	r0, #0
 8006240:	d0d5      	beq.n	80061ee <__swbuf_r+0x20>
 8006242:	f04f 37ff 	mov.w	r7, #4294967295
 8006246:	e7f4      	b.n	8006232 <__swbuf_r+0x64>

08006248 <__swsetup_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <__swsetup_r+0xac>)
 800624c:	4605      	mov	r5, r0
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	460c      	mov	r4, r1
 8006252:	b118      	cbz	r0, 800625c <__swsetup_r+0x14>
 8006254:	6a03      	ldr	r3, [r0, #32]
 8006256:	b90b      	cbnz	r3, 800625c <__swsetup_r+0x14>
 8006258:	f7ff fe04 	bl	8005e64 <__sinit>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006262:	0718      	lsls	r0, r3, #28
 8006264:	d422      	bmi.n	80062ac <__swsetup_r+0x64>
 8006266:	06d9      	lsls	r1, r3, #27
 8006268:	d407      	bmi.n	800627a <__swsetup_r+0x32>
 800626a:	2309      	movs	r3, #9
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	e034      	b.n	80062e4 <__swsetup_r+0x9c>
 800627a:	0758      	lsls	r0, r3, #29
 800627c:	d512      	bpl.n	80062a4 <__swsetup_r+0x5c>
 800627e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006280:	b141      	cbz	r1, 8006294 <__swsetup_r+0x4c>
 8006282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006286:	4299      	cmp	r1, r3
 8006288:	d002      	beq.n	8006290 <__swsetup_r+0x48>
 800628a:	4628      	mov	r0, r5
 800628c:	f000 ff6c 	bl	8007168 <_free_r>
 8006290:	2300      	movs	r3, #0
 8006292:	6363      	str	r3, [r4, #52]	; 0x34
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	2300      	movs	r3, #0
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f043 0308 	orr.w	r3, r3, #8
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	b94b      	cbnz	r3, 80062c4 <__swsetup_r+0x7c>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ba:	d003      	beq.n	80062c4 <__swsetup_r+0x7c>
 80062bc:	4621      	mov	r1, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	f002 fef1 	bl	80090a6 <__smakebuf_r>
 80062c4:	89a0      	ldrh	r0, [r4, #12]
 80062c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062ca:	f010 0301 	ands.w	r3, r0, #1
 80062ce:	d00a      	beq.n	80062e6 <__swsetup_r+0x9e>
 80062d0:	2300      	movs	r3, #0
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	6963      	ldr	r3, [r4, #20]
 80062d6:	425b      	negs	r3, r3
 80062d8:	61a3      	str	r3, [r4, #24]
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	b943      	cbnz	r3, 80062f0 <__swsetup_r+0xa8>
 80062de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062e2:	d1c4      	bne.n	800626e <__swsetup_r+0x26>
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	0781      	lsls	r1, r0, #30
 80062e8:	bf58      	it	pl
 80062ea:	6963      	ldrpl	r3, [r4, #20]
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	e7f4      	b.n	80062da <__swsetup_r+0x92>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7f7      	b.n	80062e4 <__swsetup_r+0x9c>
 80062f4:	20000068 	.word	0x20000068

080062f8 <memset>:
 80062f8:	4603      	mov	r3, r0
 80062fa:	4402      	add	r2, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <strncmp>:
 8006308:	b510      	push	{r4, lr}
 800630a:	b16a      	cbz	r2, 8006328 <strncmp+0x20>
 800630c:	3901      	subs	r1, #1
 800630e:	1884      	adds	r4, r0, r2
 8006310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006314:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006318:	429a      	cmp	r2, r3
 800631a:	d103      	bne.n	8006324 <strncmp+0x1c>
 800631c:	42a0      	cmp	r0, r4
 800631e:	d001      	beq.n	8006324 <strncmp+0x1c>
 8006320:	2a00      	cmp	r2, #0
 8006322:	d1f5      	bne.n	8006310 <strncmp+0x8>
 8006324:	1ad0      	subs	r0, r2, r3
 8006326:	bd10      	pop	{r4, pc}
 8006328:	4610      	mov	r0, r2
 800632a:	e7fc      	b.n	8006326 <strncmp+0x1e>

0800632c <strstr>:
 800632c:	780a      	ldrb	r2, [r1, #0]
 800632e:	b570      	push	{r4, r5, r6, lr}
 8006330:	b96a      	cbnz	r2, 800634e <strstr+0x22>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	429a      	cmp	r2, r3
 8006336:	d109      	bne.n	800634c <strstr+0x20>
 8006338:	460c      	mov	r4, r1
 800633a:	4605      	mov	r5, r0
 800633c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f6      	beq.n	8006332 <strstr+0x6>
 8006344:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006348:	429e      	cmp	r6, r3
 800634a:	d0f7      	beq.n	800633c <strstr+0x10>
 800634c:	3001      	adds	r0, #1
 800634e:	7803      	ldrb	r3, [r0, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ef      	bne.n	8006334 <strstr+0x8>
 8006354:	4618      	mov	r0, r3
 8006356:	e7ec      	b.n	8006332 <strstr+0x6>

08006358 <_localeconv_r>:
 8006358:	4800      	ldr	r0, [pc, #0]	; (800635c <_localeconv_r+0x4>)
 800635a:	4770      	bx	lr
 800635c:	2000015c 	.word	0x2000015c

08006360 <_close_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	2300      	movs	r3, #0
 8006364:	4d05      	ldr	r5, [pc, #20]	; (800637c <_close_r+0x1c>)
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fa ff63 	bl	8001236 <_close>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_close_r+0x1a>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_close_r+0x1a>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20000cec 	.word	0x20000cec

08006380 <_lseek_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	2200      	movs	r2, #0
 800638a:	4d05      	ldr	r5, [pc, #20]	; (80063a0 <_lseek_r+0x20>)
 800638c:	602a      	str	r2, [r5, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f7fa ff75 	bl	800127e <_lseek>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_lseek_r+0x1e>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_lseek_r+0x1e>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000cec 	.word	0x20000cec

080063a4 <_read_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	2200      	movs	r2, #0
 80063ae:	4d05      	ldr	r5, [pc, #20]	; (80063c4 <_read_r+0x20>)
 80063b0:	602a      	str	r2, [r5, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7fa fdfc 	bl	8000fb0 <_read>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_read_r+0x1e>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_read_r+0x1e>
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	20000cec 	.word	0x20000cec

080063c8 <_write_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	2200      	movs	r2, #0
 80063d2:	4d05      	ldr	r5, [pc, #20]	; (80063e8 <_write_r+0x20>)
 80063d4:	602a      	str	r2, [r5, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f7fa fdd4 	bl	8000f84 <_write>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_write_r+0x1e>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_write_r+0x1e>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	20000cec 	.word	0x20000cec

080063ec <__errno>:
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <__errno+0x8>)
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000068 	.word	0x20000068

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	2600      	movs	r6, #0
 80063fc:	4d0c      	ldr	r5, [pc, #48]	; (8006430 <__libc_init_array+0x38>)
 80063fe:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	42a6      	cmp	r6, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	f003 fb1c 	bl	8009a44 <_init>
 800640c:	2600      	movs	r6, #0
 800640e:	4d0a      	ldr	r5, [pc, #40]	; (8006438 <__libc_init_array+0x40>)
 8006410:	4c0a      	ldr	r4, [pc, #40]	; (800643c <__libc_init_array+0x44>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	42a6      	cmp	r6, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006420:	4798      	blx	r3
 8006422:	3601      	adds	r6, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f855 3b04 	ldr.w	r3, [r5], #4
 800642a:	4798      	blx	r3
 800642c:	3601      	adds	r6, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	0800a168 	.word	0x0800a168
 8006434:	0800a168 	.word	0x0800a168
 8006438:	0800a168 	.word	0x0800a168
 800643c:	0800a16c 	.word	0x0800a16c

08006440 <__retarget_lock_init_recursive>:
 8006440:	4770      	bx	lr

08006442 <__retarget_lock_acquire_recursive>:
 8006442:	4770      	bx	lr

08006444 <__retarget_lock_release_recursive>:
 8006444:	4770      	bx	lr

08006446 <memchr>:
 8006446:	4603      	mov	r3, r0
 8006448:	b510      	push	{r4, lr}
 800644a:	b2c9      	uxtb	r1, r1
 800644c:	4402      	add	r2, r0
 800644e:	4293      	cmp	r3, r2
 8006450:	4618      	mov	r0, r3
 8006452:	d101      	bne.n	8006458 <memchr+0x12>
 8006454:	2000      	movs	r0, #0
 8006456:	e003      	b.n	8006460 <memchr+0x1a>
 8006458:	7804      	ldrb	r4, [r0, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	428c      	cmp	r4, r1
 800645e:	d1f6      	bne.n	800644e <memchr+0x8>
 8006460:	bd10      	pop	{r4, pc}

08006462 <memcpy>:
 8006462:	440a      	add	r2, r1
 8006464:	4291      	cmp	r1, r2
 8006466:	f100 33ff 	add.w	r3, r0, #4294967295
 800646a:	d100      	bne.n	800646e <memcpy+0xc>
 800646c:	4770      	bx	lr
 800646e:	b510      	push	{r4, lr}
 8006470:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006474:	4291      	cmp	r1, r2
 8006476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647a:	d1f9      	bne.n	8006470 <memcpy+0xe>
 800647c:	bd10      	pop	{r4, pc}
	...

08006480 <nanf>:
 8006480:	4800      	ldr	r0, [pc, #0]	; (8006484 <nanf+0x4>)
 8006482:	4770      	bx	lr
 8006484:	7fc00000 	.word	0x7fc00000

08006488 <quorem>:
 8006488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	6903      	ldr	r3, [r0, #16]
 800648e:	690c      	ldr	r4, [r1, #16]
 8006490:	4607      	mov	r7, r0
 8006492:	42a3      	cmp	r3, r4
 8006494:	db7f      	blt.n	8006596 <quorem+0x10e>
 8006496:	3c01      	subs	r4, #1
 8006498:	f100 0514 	add.w	r5, r0, #20
 800649c:	f101 0814 	add.w	r8, r1, #20
 80064a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ae:	3301      	adds	r3, #1
 80064b0:	429a      	cmp	r2, r3
 80064b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064be:	d331      	bcc.n	8006524 <quorem+0x9c>
 80064c0:	f04f 0e00 	mov.w	lr, #0
 80064c4:	4640      	mov	r0, r8
 80064c6:	46ac      	mov	ip, r5
 80064c8:	46f2      	mov	sl, lr
 80064ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80064ce:	b293      	uxth	r3, r2
 80064d0:	fb06 e303 	mla	r3, r6, r3, lr
 80064d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064d8:	0c1a      	lsrs	r2, r3, #16
 80064da:	b29b      	uxth	r3, r3
 80064dc:	fb06 220e 	mla	r2, r6, lr, r2
 80064e0:	ebaa 0303 	sub.w	r3, sl, r3
 80064e4:	f8dc a000 	ldr.w	sl, [ip]
 80064e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ec:	fa1f fa8a 	uxth.w	sl, sl
 80064f0:	4453      	add	r3, sl
 80064f2:	f8dc a000 	ldr.w	sl, [ip]
 80064f6:	b292      	uxth	r2, r2
 80064f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006506:	4581      	cmp	r9, r0
 8006508:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800650c:	f84c 3b04 	str.w	r3, [ip], #4
 8006510:	d2db      	bcs.n	80064ca <quorem+0x42>
 8006512:	f855 300b 	ldr.w	r3, [r5, fp]
 8006516:	b92b      	cbnz	r3, 8006524 <quorem+0x9c>
 8006518:	9b01      	ldr	r3, [sp, #4]
 800651a:	3b04      	subs	r3, #4
 800651c:	429d      	cmp	r5, r3
 800651e:	461a      	mov	r2, r3
 8006520:	d32d      	bcc.n	800657e <quorem+0xf6>
 8006522:	613c      	str	r4, [r7, #16]
 8006524:	4638      	mov	r0, r7
 8006526:	f001 f9df 	bl	80078e8 <__mcmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	db23      	blt.n	8006576 <quorem+0xee>
 800652e:	4629      	mov	r1, r5
 8006530:	2000      	movs	r0, #0
 8006532:	3601      	adds	r6, #1
 8006534:	f858 2b04 	ldr.w	r2, [r8], #4
 8006538:	f8d1 c000 	ldr.w	ip, [r1]
 800653c:	b293      	uxth	r3, r2
 800653e:	1ac3      	subs	r3, r0, r3
 8006540:	0c12      	lsrs	r2, r2, #16
 8006542:	fa1f f08c 	uxth.w	r0, ip
 8006546:	4403      	add	r3, r0
 8006548:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800654c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006550:	b29b      	uxth	r3, r3
 8006552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006556:	45c1      	cmp	r9, r8
 8006558:	ea4f 4022 	mov.w	r0, r2, asr #16
 800655c:	f841 3b04 	str.w	r3, [r1], #4
 8006560:	d2e8      	bcs.n	8006534 <quorem+0xac>
 8006562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800656a:	b922      	cbnz	r2, 8006576 <quorem+0xee>
 800656c:	3b04      	subs	r3, #4
 800656e:	429d      	cmp	r5, r3
 8006570:	461a      	mov	r2, r3
 8006572:	d30a      	bcc.n	800658a <quorem+0x102>
 8006574:	613c      	str	r4, [r7, #16]
 8006576:	4630      	mov	r0, r6
 8006578:	b003      	add	sp, #12
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1cd      	bne.n	8006522 <quorem+0x9a>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7c8      	b.n	800651c <quorem+0x94>
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	3b04      	subs	r3, #4
 800658e:	2a00      	cmp	r2, #0
 8006590:	d1f0      	bne.n	8006574 <quorem+0xec>
 8006592:	3c01      	subs	r4, #1
 8006594:	e7eb      	b.n	800656e <quorem+0xe6>
 8006596:	2000      	movs	r0, #0
 8006598:	e7ee      	b.n	8006578 <quorem+0xf0>
 800659a:	0000      	movs	r0, r0
 800659c:	0000      	movs	r0, r0
	...

080065a0 <_dtoa_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4616      	mov	r6, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	69c4      	ldr	r4, [r0, #28]
 80065aa:	b099      	sub	sp, #100	; 0x64
 80065ac:	4605      	mov	r5, r0
 80065ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065b6:	b974      	cbnz	r4, 80065d6 <_dtoa_r+0x36>
 80065b8:	2010      	movs	r0, #16
 80065ba:	f000 fe1d 	bl	80071f8 <malloc>
 80065be:	4602      	mov	r2, r0
 80065c0:	61e8      	str	r0, [r5, #28]
 80065c2:	b920      	cbnz	r0, 80065ce <_dtoa_r+0x2e>
 80065c4:	21ef      	movs	r1, #239	; 0xef
 80065c6:	4bac      	ldr	r3, [pc, #688]	; (8006878 <_dtoa_r+0x2d8>)
 80065c8:	48ac      	ldr	r0, [pc, #688]	; (800687c <_dtoa_r+0x2dc>)
 80065ca:	f002 fdfb 	bl	80091c4 <__assert_func>
 80065ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065d2:	6004      	str	r4, [r0, #0]
 80065d4:	60c4      	str	r4, [r0, #12]
 80065d6:	69eb      	ldr	r3, [r5, #28]
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	b151      	cbz	r1, 80065f2 <_dtoa_r+0x52>
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	2301      	movs	r3, #1
 80065e0:	4093      	lsls	r3, r2
 80065e2:	604a      	str	r2, [r1, #4]
 80065e4:	608b      	str	r3, [r1, #8]
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 fefa 	bl	80073e0 <_Bfree>
 80065ec:	2200      	movs	r2, #0
 80065ee:	69eb      	ldr	r3, [r5, #28]
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	1e3b      	subs	r3, r7, #0
 80065f4:	bfaf      	iteee	ge
 80065f6:	2300      	movge	r3, #0
 80065f8:	2201      	movlt	r2, #1
 80065fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065fe:	9305      	strlt	r3, [sp, #20]
 8006600:	bfa8      	it	ge
 8006602:	f8c8 3000 	strge.w	r3, [r8]
 8006606:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800660a:	4b9d      	ldr	r3, [pc, #628]	; (8006880 <_dtoa_r+0x2e0>)
 800660c:	bfb8      	it	lt
 800660e:	f8c8 2000 	strlt.w	r2, [r8]
 8006612:	ea33 0309 	bics.w	r3, r3, r9
 8006616:	d119      	bne.n	800664c <_dtoa_r+0xac>
 8006618:	f242 730f 	movw	r3, #9999	; 0x270f
 800661c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006624:	4333      	orrs	r3, r6
 8006626:	f000 8589 	beq.w	800713c <_dtoa_r+0xb9c>
 800662a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800662c:	b953      	cbnz	r3, 8006644 <_dtoa_r+0xa4>
 800662e:	4b95      	ldr	r3, [pc, #596]	; (8006884 <_dtoa_r+0x2e4>)
 8006630:	e023      	b.n	800667a <_dtoa_r+0xda>
 8006632:	4b95      	ldr	r3, [pc, #596]	; (8006888 <_dtoa_r+0x2e8>)
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	3308      	adds	r3, #8
 8006638:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	9803      	ldr	r0, [sp, #12]
 800663e:	b019      	add	sp, #100	; 0x64
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4b8f      	ldr	r3, [pc, #572]	; (8006884 <_dtoa_r+0x2e4>)
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	3303      	adds	r3, #3
 800664a:	e7f5      	b.n	8006638 <_dtoa_r+0x98>
 800664c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006650:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	f7fa f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8006660:	4680      	mov	r8, r0
 8006662:	b160      	cbz	r0, 800667e <_dtoa_r+0xde>
 8006664:	2301      	movs	r3, #1
 8006666:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8562 	beq.w	8007136 <_dtoa_r+0xb96>
 8006672:	4b86      	ldr	r3, [pc, #536]	; (800688c <_dtoa_r+0x2ec>)
 8006674:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	3b01      	subs	r3, #1
 800667a:	9303      	str	r3, [sp, #12]
 800667c:	e7de      	b.n	800663c <_dtoa_r+0x9c>
 800667e:	ab16      	add	r3, sp, #88	; 0x58
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	ab17      	add	r3, sp, #92	; 0x5c
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4628      	mov	r0, r5
 8006688:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800668c:	f001 fa3c 	bl	8007b08 <__d2b>
 8006690:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006694:	4682      	mov	sl, r0
 8006696:	2c00      	cmp	r4, #0
 8006698:	d07e      	beq.n	8006798 <_dtoa_r+0x1f8>
 800669a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800669e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80066a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066b4:	4619      	mov	r1, r3
 80066b6:	2200      	movs	r2, #0
 80066b8:	4b75      	ldr	r3, [pc, #468]	; (8006890 <_dtoa_r+0x2f0>)
 80066ba:	f7f9 fd55 	bl	8000168 <__aeabi_dsub>
 80066be:	a368      	add	r3, pc, #416	; (adr r3, 8006860 <_dtoa_r+0x2c0>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 ff08 	bl	80004d8 <__aeabi_dmul>
 80066c8:	a367      	add	r3, pc, #412	; (adr r3, 8006868 <_dtoa_r+0x2c8>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 fd4d 	bl	800016c <__adddf3>
 80066d2:	4606      	mov	r6, r0
 80066d4:	4620      	mov	r0, r4
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7f9 fe94 	bl	8000404 <__aeabi_i2d>
 80066dc:	a364      	add	r3, pc, #400	; (adr r3, 8006870 <_dtoa_r+0x2d0>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fef9 	bl	80004d8 <__aeabi_dmul>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4630      	mov	r0, r6
 80066ec:	4639      	mov	r1, r7
 80066ee:	f7f9 fd3d 	bl	800016c <__adddf3>
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	f7fa f99f 	bl	8000a38 <__aeabi_d2iz>
 80066fa:	2200      	movs	r2, #0
 80066fc:	4683      	mov	fp, r0
 80066fe:	2300      	movs	r3, #0
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7fa f95a 	bl	80009bc <__aeabi_dcmplt>
 8006708:	b148      	cbz	r0, 800671e <_dtoa_r+0x17e>
 800670a:	4658      	mov	r0, fp
 800670c:	f7f9 fe7a 	bl	8000404 <__aeabi_i2d>
 8006710:	4632      	mov	r2, r6
 8006712:	463b      	mov	r3, r7
 8006714:	f7fa f948 	bl	80009a8 <__aeabi_dcmpeq>
 8006718:	b908      	cbnz	r0, 800671e <_dtoa_r+0x17e>
 800671a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800671e:	f1bb 0f16 	cmp.w	fp, #22
 8006722:	d857      	bhi.n	80067d4 <_dtoa_r+0x234>
 8006724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006728:	4b5a      	ldr	r3, [pc, #360]	; (8006894 <_dtoa_r+0x2f4>)
 800672a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f7fa f943 	bl	80009bc <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	d04e      	beq.n	80067d8 <_dtoa_r+0x238>
 800673a:	2300      	movs	r3, #0
 800673c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006740:	930f      	str	r3, [sp, #60]	; 0x3c
 8006742:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006744:	1b1b      	subs	r3, r3, r4
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	bf46      	itte	mi
 800674a:	f1c3 0901 	rsbmi	r9, r3, #1
 800674e:	2300      	movmi	r3, #0
 8006750:	f04f 0900 	movpl.w	r9, #0
 8006754:	9209      	str	r2, [sp, #36]	; 0x24
 8006756:	bf48      	it	mi
 8006758:	9309      	strmi	r3, [sp, #36]	; 0x24
 800675a:	f1bb 0f00 	cmp.w	fp, #0
 800675e:	db3d      	blt.n	80067dc <_dtoa_r+0x23c>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006766:	445b      	add	r3, fp
 8006768:	9309      	str	r3, [sp, #36]	; 0x24
 800676a:	2300      	movs	r3, #0
 800676c:	930a      	str	r3, [sp, #40]	; 0x28
 800676e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006770:	2b09      	cmp	r3, #9
 8006772:	d867      	bhi.n	8006844 <_dtoa_r+0x2a4>
 8006774:	2b05      	cmp	r3, #5
 8006776:	bfc4      	itt	gt
 8006778:	3b04      	subgt	r3, #4
 800677a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800677c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800677e:	bfc8      	it	gt
 8006780:	2400      	movgt	r4, #0
 8006782:	f1a3 0302 	sub.w	r3, r3, #2
 8006786:	bfd8      	it	le
 8006788:	2401      	movle	r4, #1
 800678a:	2b03      	cmp	r3, #3
 800678c:	f200 8086 	bhi.w	800689c <_dtoa_r+0x2fc>
 8006790:	e8df f003 	tbb	[pc, r3]
 8006794:	5637392c 	.word	0x5637392c
 8006798:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800679c:	441c      	add	r4, r3
 800679e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	bfc1      	itttt	gt
 80067a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80067ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80067b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80067b6:	bfd6      	itet	le
 80067b8:	f1c3 0320 	rsble	r3, r3, #32
 80067bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80067c0:	fa06 f003 	lslle.w	r0, r6, r3
 80067c4:	f7f9 fe0e 	bl	80003e4 <__aeabi_ui2d>
 80067c8:	2201      	movs	r2, #1
 80067ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067ce:	3c01      	subs	r4, #1
 80067d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80067d2:	e76f      	b.n	80066b4 <_dtoa_r+0x114>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e7b3      	b.n	8006740 <_dtoa_r+0x1a0>
 80067d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80067da:	e7b2      	b.n	8006742 <_dtoa_r+0x1a2>
 80067dc:	f1cb 0300 	rsb	r3, fp, #0
 80067e0:	930a      	str	r3, [sp, #40]	; 0x28
 80067e2:	2300      	movs	r3, #0
 80067e4:	eba9 090b 	sub.w	r9, r9, fp
 80067e8:	930e      	str	r3, [sp, #56]	; 0x38
 80067ea:	e7c0      	b.n	800676e <_dtoa_r+0x1ce>
 80067ec:	2300      	movs	r3, #0
 80067ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dc55      	bgt.n	80068a2 <_dtoa_r+0x302>
 80067f6:	2301      	movs	r3, #1
 80067f8:	461a      	mov	r2, r3
 80067fa:	9306      	str	r3, [sp, #24]
 80067fc:	9308      	str	r3, [sp, #32]
 80067fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8006800:	e00b      	b.n	800681a <_dtoa_r+0x27a>
 8006802:	2301      	movs	r3, #1
 8006804:	e7f3      	b.n	80067ee <_dtoa_r+0x24e>
 8006806:	2300      	movs	r3, #0
 8006808:	930b      	str	r3, [sp, #44]	; 0x2c
 800680a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800680c:	445b      	add	r3, fp
 800680e:	9306      	str	r3, [sp, #24]
 8006810:	3301      	adds	r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	9308      	str	r3, [sp, #32]
 8006816:	bfb8      	it	lt
 8006818:	2301      	movlt	r3, #1
 800681a:	2100      	movs	r1, #0
 800681c:	2204      	movs	r2, #4
 800681e:	69e8      	ldr	r0, [r5, #28]
 8006820:	f102 0614 	add.w	r6, r2, #20
 8006824:	429e      	cmp	r6, r3
 8006826:	d940      	bls.n	80068aa <_dtoa_r+0x30a>
 8006828:	6041      	str	r1, [r0, #4]
 800682a:	4628      	mov	r0, r5
 800682c:	f000 fd98 	bl	8007360 <_Balloc>
 8006830:	9003      	str	r0, [sp, #12]
 8006832:	2800      	cmp	r0, #0
 8006834:	d13c      	bne.n	80068b0 <_dtoa_r+0x310>
 8006836:	4602      	mov	r2, r0
 8006838:	f240 11af 	movw	r1, #431	; 0x1af
 800683c:	4b16      	ldr	r3, [pc, #88]	; (8006898 <_dtoa_r+0x2f8>)
 800683e:	e6c3      	b.n	80065c8 <_dtoa_r+0x28>
 8006840:	2301      	movs	r3, #1
 8006842:	e7e1      	b.n	8006808 <_dtoa_r+0x268>
 8006844:	2401      	movs	r4, #1
 8006846:	2300      	movs	r3, #0
 8006848:	940b      	str	r4, [sp, #44]	; 0x2c
 800684a:	9322      	str	r3, [sp, #136]	; 0x88
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	2200      	movs	r2, #0
 8006852:	9306      	str	r3, [sp, #24]
 8006854:	9308      	str	r3, [sp, #32]
 8006856:	2312      	movs	r3, #18
 8006858:	e7d1      	b.n	80067fe <_dtoa_r+0x25e>
 800685a:	bf00      	nop
 800685c:	f3af 8000 	nop.w
 8006860:	636f4361 	.word	0x636f4361
 8006864:	3fd287a7 	.word	0x3fd287a7
 8006868:	8b60c8b3 	.word	0x8b60c8b3
 800686c:	3fc68a28 	.word	0x3fc68a28
 8006870:	509f79fb 	.word	0x509f79fb
 8006874:	3fd34413 	.word	0x3fd34413
 8006878:	08009d84 	.word	0x08009d84
 800687c:	08009d9b 	.word	0x08009d9b
 8006880:	7ff00000 	.word	0x7ff00000
 8006884:	08009d80 	.word	0x08009d80
 8006888:	08009d77 	.word	0x08009d77
 800688c:	08009d4f 	.word	0x08009d4f
 8006890:	3ff80000 	.word	0x3ff80000
 8006894:	08009e88 	.word	0x08009e88
 8006898:	08009df3 	.word	0x08009df3
 800689c:	2301      	movs	r3, #1
 800689e:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a0:	e7d4      	b.n	800684c <_dtoa_r+0x2ac>
 80068a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068a4:	9306      	str	r3, [sp, #24]
 80068a6:	9308      	str	r3, [sp, #32]
 80068a8:	e7b7      	b.n	800681a <_dtoa_r+0x27a>
 80068aa:	3101      	adds	r1, #1
 80068ac:	0052      	lsls	r2, r2, #1
 80068ae:	e7b7      	b.n	8006820 <_dtoa_r+0x280>
 80068b0:	69eb      	ldr	r3, [r5, #28]
 80068b2:	9a03      	ldr	r2, [sp, #12]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	2b0e      	cmp	r3, #14
 80068ba:	f200 80a8 	bhi.w	8006a0e <_dtoa_r+0x46e>
 80068be:	2c00      	cmp	r4, #0
 80068c0:	f000 80a5 	beq.w	8006a0e <_dtoa_r+0x46e>
 80068c4:	f1bb 0f00 	cmp.w	fp, #0
 80068c8:	dd34      	ble.n	8006934 <_dtoa_r+0x394>
 80068ca:	4b9a      	ldr	r3, [pc, #616]	; (8006b34 <_dtoa_r+0x594>)
 80068cc:	f00b 020f 	and.w	r2, fp, #15
 80068d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80068e4:	d016      	beq.n	8006914 <_dtoa_r+0x374>
 80068e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068ea:	4b93      	ldr	r3, [pc, #588]	; (8006b38 <_dtoa_r+0x598>)
 80068ec:	2703      	movs	r7, #3
 80068ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068f2:	f7f9 ff1b 	bl	800072c <__aeabi_ddiv>
 80068f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068fa:	f004 040f 	and.w	r4, r4, #15
 80068fe:	4e8e      	ldr	r6, [pc, #568]	; (8006b38 <_dtoa_r+0x598>)
 8006900:	b954      	cbnz	r4, 8006918 <_dtoa_r+0x378>
 8006902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800690a:	f7f9 ff0f 	bl	800072c <__aeabi_ddiv>
 800690e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006912:	e029      	b.n	8006968 <_dtoa_r+0x3c8>
 8006914:	2702      	movs	r7, #2
 8006916:	e7f2      	b.n	80068fe <_dtoa_r+0x35e>
 8006918:	07e1      	lsls	r1, r4, #31
 800691a:	d508      	bpl.n	800692e <_dtoa_r+0x38e>
 800691c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006920:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006924:	f7f9 fdd8 	bl	80004d8 <__aeabi_dmul>
 8006928:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800692c:	3701      	adds	r7, #1
 800692e:	1064      	asrs	r4, r4, #1
 8006930:	3608      	adds	r6, #8
 8006932:	e7e5      	b.n	8006900 <_dtoa_r+0x360>
 8006934:	f000 80a5 	beq.w	8006a82 <_dtoa_r+0x4e2>
 8006938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800693c:	f1cb 0400 	rsb	r4, fp, #0
 8006940:	4b7c      	ldr	r3, [pc, #496]	; (8006b34 <_dtoa_r+0x594>)
 8006942:	f004 020f 	and.w	r2, r4, #15
 8006946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f7f9 fdc3 	bl	80004d8 <__aeabi_dmul>
 8006952:	2702      	movs	r7, #2
 8006954:	2300      	movs	r3, #0
 8006956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800695a:	4e77      	ldr	r6, [pc, #476]	; (8006b38 <_dtoa_r+0x598>)
 800695c:	1124      	asrs	r4, r4, #4
 800695e:	2c00      	cmp	r4, #0
 8006960:	f040 8084 	bne.w	8006a6c <_dtoa_r+0x4cc>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1d2      	bne.n	800690e <_dtoa_r+0x36e>
 8006968:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800696c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8087 	beq.w	8006a86 <_dtoa_r+0x4e6>
 8006978:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800697c:	2200      	movs	r2, #0
 800697e:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <_dtoa_r+0x59c>)
 8006980:	f7fa f81c 	bl	80009bc <__aeabi_dcmplt>
 8006984:	2800      	cmp	r0, #0
 8006986:	d07e      	beq.n	8006a86 <_dtoa_r+0x4e6>
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d07b      	beq.n	8006a86 <_dtoa_r+0x4e6>
 800698e:	9b06      	ldr	r3, [sp, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dd38      	ble.n	8006a06 <_dtoa_r+0x466>
 8006994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006998:	2200      	movs	r2, #0
 800699a:	4b69      	ldr	r3, [pc, #420]	; (8006b40 <_dtoa_r+0x5a0>)
 800699c:	f7f9 fd9c 	bl	80004d8 <__aeabi_dmul>
 80069a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a4:	9c06      	ldr	r4, [sp, #24]
 80069a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80069aa:	3701      	adds	r7, #1
 80069ac:	4638      	mov	r0, r7
 80069ae:	f7f9 fd29 	bl	8000404 <__aeabi_i2d>
 80069b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b6:	f7f9 fd8f 	bl	80004d8 <__aeabi_dmul>
 80069ba:	2200      	movs	r2, #0
 80069bc:	4b61      	ldr	r3, [pc, #388]	; (8006b44 <_dtoa_r+0x5a4>)
 80069be:	f7f9 fbd5 	bl	800016c <__adddf3>
 80069c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069ca:	9611      	str	r6, [sp, #68]	; 0x44
 80069cc:	2c00      	cmp	r4, #0
 80069ce:	d15d      	bne.n	8006a8c <_dtoa_r+0x4ec>
 80069d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d4:	2200      	movs	r2, #0
 80069d6:	4b5c      	ldr	r3, [pc, #368]	; (8006b48 <_dtoa_r+0x5a8>)
 80069d8:	f7f9 fbc6 	bl	8000168 <__aeabi_dsub>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e4:	4633      	mov	r3, r6
 80069e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069e8:	f7fa f806 	bl	80009f8 <__aeabi_dcmpgt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 8295 	bne.w	8006f1c <_dtoa_r+0x97c>
 80069f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069fc:	f7f9 ffde 	bl	80009bc <__aeabi_dcmplt>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f040 8289 	bne.w	8006f18 <_dtoa_r+0x978>
 8006a06:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f2c0 8151 	blt.w	8006cb8 <_dtoa_r+0x718>
 8006a16:	f1bb 0f0e 	cmp.w	fp, #14
 8006a1a:	f300 814d 	bgt.w	8006cb8 <_dtoa_r+0x718>
 8006a1e:	4b45      	ldr	r3, [pc, #276]	; (8006b34 <_dtoa_r+0x594>)
 8006a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f280 80da 	bge.w	8006be8 <_dtoa_r+0x648>
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f300 80d6 	bgt.w	8006be8 <_dtoa_r+0x648>
 8006a3c:	f040 826b 	bne.w	8006f16 <_dtoa_r+0x976>
 8006a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a44:	2200      	movs	r2, #0
 8006a46:	4b40      	ldr	r3, [pc, #256]	; (8006b48 <_dtoa_r+0x5a8>)
 8006a48:	f7f9 fd46 	bl	80004d8 <__aeabi_dmul>
 8006a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a50:	f7f9 ffc8 	bl	80009e4 <__aeabi_dcmpge>
 8006a54:	9c08      	ldr	r4, [sp, #32]
 8006a56:	4626      	mov	r6, r4
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f040 8241 	bne.w	8006ee0 <_dtoa_r+0x940>
 8006a5e:	2331      	movs	r3, #49	; 0x31
 8006a60:	9f03      	ldr	r7, [sp, #12]
 8006a62:	f10b 0b01 	add.w	fp, fp, #1
 8006a66:	f807 3b01 	strb.w	r3, [r7], #1
 8006a6a:	e23d      	b.n	8006ee8 <_dtoa_r+0x948>
 8006a6c:	07e2      	lsls	r2, r4, #31
 8006a6e:	d505      	bpl.n	8006a7c <_dtoa_r+0x4dc>
 8006a70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a74:	f7f9 fd30 	bl	80004d8 <__aeabi_dmul>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	3701      	adds	r7, #1
 8006a7c:	1064      	asrs	r4, r4, #1
 8006a7e:	3608      	adds	r6, #8
 8006a80:	e76d      	b.n	800695e <_dtoa_r+0x3be>
 8006a82:	2702      	movs	r7, #2
 8006a84:	e770      	b.n	8006968 <_dtoa_r+0x3c8>
 8006a86:	46d8      	mov	r8, fp
 8006a88:	9c08      	ldr	r4, [sp, #32]
 8006a8a:	e78f      	b.n	80069ac <_dtoa_r+0x40c>
 8006a8c:	9903      	ldr	r1, [sp, #12]
 8006a8e:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <_dtoa_r+0x594>)
 8006a90:	4421      	add	r1, r4
 8006a92:	9112      	str	r1, [sp, #72]	; 0x48
 8006a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa2:	2900      	cmp	r1, #0
 8006aa4:	d054      	beq.n	8006b50 <_dtoa_r+0x5b0>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	4928      	ldr	r1, [pc, #160]	; (8006b4c <_dtoa_r+0x5ac>)
 8006aaa:	f7f9 fe3f 	bl	800072c <__aeabi_ddiv>
 8006aae:	463b      	mov	r3, r7
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	f7f9 fb59 	bl	8000168 <__aeabi_dsub>
 8006ab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006aba:	9f03      	ldr	r7, [sp, #12]
 8006abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac0:	f7f9 ffba 	bl	8000a38 <__aeabi_d2iz>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	f7f9 fc9d 	bl	8000404 <__aeabi_i2d>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ad2:	f7f9 fb49 	bl	8000168 <__aeabi_dsub>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	3430      	adds	r4, #48	; 0x30
 8006adc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae4:	f807 4b01 	strb.w	r4, [r7], #1
 8006ae8:	f7f9 ff68 	bl	80009bc <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d173      	bne.n	8006bd8 <_dtoa_r+0x638>
 8006af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af4:	2000      	movs	r0, #0
 8006af6:	4911      	ldr	r1, [pc, #68]	; (8006b3c <_dtoa_r+0x59c>)
 8006af8:	f7f9 fb36 	bl	8000168 <__aeabi_dsub>
 8006afc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b00:	f7f9 ff5c 	bl	80009bc <__aeabi_dcmplt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 80b6 	bne.w	8006c76 <_dtoa_r+0x6d6>
 8006b0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b0c:	429f      	cmp	r7, r3
 8006b0e:	f43f af7a 	beq.w	8006a06 <_dtoa_r+0x466>
 8006b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b16:	2200      	movs	r2, #0
 8006b18:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <_dtoa_r+0x5a0>)
 8006b1a:	f7f9 fcdd 	bl	80004d8 <__aeabi_dmul>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b28:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <_dtoa_r+0x5a0>)
 8006b2a:	f7f9 fcd5 	bl	80004d8 <__aeabi_dmul>
 8006b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b32:	e7c3      	b.n	8006abc <_dtoa_r+0x51c>
 8006b34:	08009e88 	.word	0x08009e88
 8006b38:	08009e60 	.word	0x08009e60
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	401c0000 	.word	0x401c0000
 8006b48:	40140000 	.word	0x40140000
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fcc0 	bl	80004d8 <__aeabi_dmul>
 8006b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b5e:	9c03      	ldr	r4, [sp, #12]
 8006b60:	9314      	str	r3, [sp, #80]	; 0x50
 8006b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b66:	f7f9 ff67 	bl	8000a38 <__aeabi_d2iz>
 8006b6a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b6c:	f7f9 fc4a 	bl	8000404 <__aeabi_i2d>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b78:	f7f9 faf6 	bl	8000168 <__aeabi_dsub>
 8006b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b7e:	4606      	mov	r6, r0
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	f804 3b01 	strb.w	r3, [r4], #1
 8006b86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b88:	460f      	mov	r7, r1
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	d124      	bne.n	8006bdc <_dtoa_r+0x63c>
 8006b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b96:	4baf      	ldr	r3, [pc, #700]	; (8006e54 <_dtoa_r+0x8b4>)
 8006b98:	f7f9 fae8 	bl	800016c <__adddf3>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ff28 	bl	80009f8 <__aeabi_dcmpgt>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d163      	bne.n	8006c74 <_dtoa_r+0x6d4>
 8006bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	49a8      	ldr	r1, [pc, #672]	; (8006e54 <_dtoa_r+0x8b4>)
 8006bb4:	f7f9 fad8 	bl	8000168 <__aeabi_dsub>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 fefc 	bl	80009bc <__aeabi_dcmplt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f43f af1e 	beq.w	8006a06 <_dtoa_r+0x466>
 8006bca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bcc:	1e7b      	subs	r3, r7, #1
 8006bce:	9314      	str	r3, [sp, #80]	; 0x50
 8006bd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006bd4:	2b30      	cmp	r3, #48	; 0x30
 8006bd6:	d0f8      	beq.n	8006bca <_dtoa_r+0x62a>
 8006bd8:	46c3      	mov	fp, r8
 8006bda:	e03b      	b.n	8006c54 <_dtoa_r+0x6b4>
 8006bdc:	4b9e      	ldr	r3, [pc, #632]	; (8006e58 <_dtoa_r+0x8b8>)
 8006bde:	f7f9 fc7b 	bl	80004d8 <__aeabi_dmul>
 8006be2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be6:	e7bc      	b.n	8006b62 <_dtoa_r+0x5c2>
 8006be8:	9f03      	ldr	r7, [sp, #12]
 8006bea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fd99 	bl	800072c <__aeabi_ddiv>
 8006bfa:	f7f9 ff1d 	bl	8000a38 <__aeabi_d2iz>
 8006bfe:	4604      	mov	r4, r0
 8006c00:	f7f9 fc00 	bl	8000404 <__aeabi_i2d>
 8006c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 faa8 	bl	8000168 <__aeabi_dsub>
 8006c18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c1c:	f807 6b01 	strb.w	r6, [r7], #1
 8006c20:	9e03      	ldr	r6, [sp, #12]
 8006c22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c26:	1bbe      	subs	r6, r7, r6
 8006c28:	45b4      	cmp	ip, r6
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	d136      	bne.n	8006c9e <_dtoa_r+0x6fe>
 8006c30:	f7f9 fa9c 	bl	800016c <__adddf3>
 8006c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f7f9 fedc 	bl	80009f8 <__aeabi_dcmpgt>
 8006c40:	bb58      	cbnz	r0, 8006c9a <_dtoa_r+0x6fa>
 8006c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8006c4e:	b108      	cbz	r0, 8006c54 <_dtoa_r+0x6b4>
 8006c50:	07e3      	lsls	r3, r4, #31
 8006c52:	d422      	bmi.n	8006c9a <_dtoa_r+0x6fa>
 8006c54:	4651      	mov	r1, sl
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 fbc2 	bl	80073e0 <_Bfree>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c60:	703b      	strb	r3, [r7, #0]
 8006c62:	f10b 0301 	add.w	r3, fp, #1
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f43f ace6 	beq.w	800663c <_dtoa_r+0x9c>
 8006c70:	601f      	str	r7, [r3, #0]
 8006c72:	e4e3      	b.n	800663c <_dtoa_r+0x9c>
 8006c74:	4627      	mov	r7, r4
 8006c76:	463b      	mov	r3, r7
 8006c78:	461f      	mov	r7, r3
 8006c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d107      	bne.n	8006c92 <_dtoa_r+0x6f2>
 8006c82:	9a03      	ldr	r2, [sp, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1f7      	bne.n	8006c78 <_dtoa_r+0x6d8>
 8006c88:	2230      	movs	r2, #48	; 0x30
 8006c8a:	9903      	ldr	r1, [sp, #12]
 8006c8c:	f108 0801 	add.w	r8, r8, #1
 8006c90:	700a      	strb	r2, [r1, #0]
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	3201      	adds	r2, #1
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e79e      	b.n	8006bd8 <_dtoa_r+0x638>
 8006c9a:	46d8      	mov	r8, fp
 8006c9c:	e7eb      	b.n	8006c76 <_dtoa_r+0x6d6>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4b6d      	ldr	r3, [pc, #436]	; (8006e58 <_dtoa_r+0x8b8>)
 8006ca2:	f7f9 fc19 	bl	80004d8 <__aeabi_dmul>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4680      	mov	r8, r0
 8006cac:	4689      	mov	r9, r1
 8006cae:	f7f9 fe7b 	bl	80009a8 <__aeabi_dcmpeq>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d09b      	beq.n	8006bee <_dtoa_r+0x64e>
 8006cb6:	e7cd      	b.n	8006c54 <_dtoa_r+0x6b4>
 8006cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	f000 80c4 	beq.w	8006e48 <_dtoa_r+0x8a8>
 8006cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cc2:	2a01      	cmp	r2, #1
 8006cc4:	f300 80a8 	bgt.w	8006e18 <_dtoa_r+0x878>
 8006cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f000 80a0 	beq.w	8006e10 <_dtoa_r+0x870>
 8006cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cd4:	464f      	mov	r7, r9
 8006cd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cda:	2101      	movs	r1, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	4628      	mov	r0, r5
 8006ce0:	4499      	add	r9, r3
 8006ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce4:	f000 fc7c 	bl	80075e0 <__i2b>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	b15f      	cbz	r7, 8006d04 <_dtoa_r+0x764>
 8006cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dd08      	ble.n	8006d04 <_dtoa_r+0x764>
 8006cf2:	42bb      	cmp	r3, r7
 8006cf4:	bfa8      	it	ge
 8006cf6:	463b      	movge	r3, r7
 8006cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cfa:	eba9 0903 	sub.w	r9, r9, r3
 8006cfe:	1aff      	subs	r7, r7, r3
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	9309      	str	r3, [sp, #36]	; 0x24
 8006d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d06:	b1f3      	cbz	r3, 8006d46 <_dtoa_r+0x7a6>
 8006d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80a0 	beq.w	8006e50 <_dtoa_r+0x8b0>
 8006d10:	2c00      	cmp	r4, #0
 8006d12:	dd10      	ble.n	8006d36 <_dtoa_r+0x796>
 8006d14:	4631      	mov	r1, r6
 8006d16:	4622      	mov	r2, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fd1f 	bl	800775c <__pow5mult>
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4601      	mov	r1, r0
 8006d22:	4606      	mov	r6, r0
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 fc71 	bl	800760c <__multiply>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	4651      	mov	r1, sl
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 fb56 	bl	80073e0 <_Bfree>
 8006d34:	46c2      	mov	sl, r8
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	1b1a      	subs	r2, r3, r4
 8006d3a:	d004      	beq.n	8006d46 <_dtoa_r+0x7a6>
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 fd0c 	bl	800775c <__pow5mult>
 8006d44:	4682      	mov	sl, r0
 8006d46:	2101      	movs	r1, #1
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 fc49 	bl	80075e0 <__i2b>
 8006d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d50:	4604      	mov	r4, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f340 8082 	ble.w	8006e5c <_dtoa_r+0x8bc>
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fcfd 	bl	800775c <__pow5mult>
 8006d62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d64:	4604      	mov	r4, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	dd7b      	ble.n	8006e62 <_dtoa_r+0x8c2>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d74:	6918      	ldr	r0, [r3, #16]
 8006d76:	f000 fbe5 	bl	8007544 <__hi0bits>
 8006d7a:	f1c0 0020 	rsb	r0, r0, #32
 8006d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d80:	4418      	add	r0, r3
 8006d82:	f010 001f 	ands.w	r0, r0, #31
 8006d86:	f000 8092 	beq.w	8006eae <_dtoa_r+0x90e>
 8006d8a:	f1c0 0320 	rsb	r3, r0, #32
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	f340 8085 	ble.w	8006e9e <_dtoa_r+0x8fe>
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	f1c0 001c 	rsb	r0, r0, #28
 8006d9a:	4403      	add	r3, r0
 8006d9c:	4481      	add	r9, r0
 8006d9e:	4407      	add	r7, r0
 8006da0:	9309      	str	r3, [sp, #36]	; 0x24
 8006da2:	f1b9 0f00 	cmp.w	r9, #0
 8006da6:	dd05      	ble.n	8006db4 <_dtoa_r+0x814>
 8006da8:	4651      	mov	r1, sl
 8006daa:	464a      	mov	r2, r9
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 fd2f 	bl	8007810 <__lshift>
 8006db2:	4682      	mov	sl, r0
 8006db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd05      	ble.n	8006dc6 <_dtoa_r+0x826>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fd26 	bl	8007810 <__lshift>
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d072      	beq.n	8006eb2 <_dtoa_r+0x912>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4650      	mov	r0, sl
 8006dd0:	f000 fd8a 	bl	80078e8 <__mcmp>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	da6c      	bge.n	8006eb2 <_dtoa_r+0x912>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4651      	mov	r1, sl
 8006ddc:	220a      	movs	r2, #10
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 fb20 	bl	8007424 <__multadd>
 8006de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de6:	4682      	mov	sl, r0
 8006de8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 81ac 	beq.w	800714a <_dtoa_r+0xbaa>
 8006df2:	2300      	movs	r3, #0
 8006df4:	4631      	mov	r1, r6
 8006df6:	220a      	movs	r2, #10
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 fb13 	bl	8007424 <__multadd>
 8006dfe:	9b06      	ldr	r3, [sp, #24]
 8006e00:	4606      	mov	r6, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f300 8093 	bgt.w	8006f2e <_dtoa_r+0x98e>
 8006e08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	dc59      	bgt.n	8006ec2 <_dtoa_r+0x922>
 8006e0e:	e08e      	b.n	8006f2e <_dtoa_r+0x98e>
 8006e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e16:	e75d      	b.n	8006cd4 <_dtoa_r+0x734>
 8006e18:	9b08      	ldr	r3, [sp, #32]
 8006e1a:	1e5c      	subs	r4, r3, #1
 8006e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	bfbf      	itttt	lt
 8006e22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006e26:	1ae3      	sublt	r3, r4, r3
 8006e28:	18d2      	addlt	r2, r2, r3
 8006e2a:	bfa8      	it	ge
 8006e2c:	1b1c      	subge	r4, r3, r4
 8006e2e:	9b08      	ldr	r3, [sp, #32]
 8006e30:	bfbe      	ittt	lt
 8006e32:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e34:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006e36:	2400      	movlt	r4, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfb5      	itete	lt
 8006e3c:	eba9 0703 	sublt.w	r7, r9, r3
 8006e40:	464f      	movge	r7, r9
 8006e42:	2300      	movlt	r3, #0
 8006e44:	9b08      	ldrge	r3, [sp, #32]
 8006e46:	e747      	b.n	8006cd8 <_dtoa_r+0x738>
 8006e48:	464f      	mov	r7, r9
 8006e4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e4e:	e74c      	b.n	8006cea <_dtoa_r+0x74a>
 8006e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e52:	e773      	b.n	8006d3c <_dtoa_r+0x79c>
 8006e54:	3fe00000 	.word	0x3fe00000
 8006e58:	40240000 	.word	0x40240000
 8006e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	dc18      	bgt.n	8006e94 <_dtoa_r+0x8f4>
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	b9b3      	cbnz	r3, 8006e94 <_dtoa_r+0x8f4>
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e6c:	b993      	cbnz	r3, 8006e94 <_dtoa_r+0x8f4>
 8006e6e:	9b05      	ldr	r3, [sp, #20]
 8006e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e74:	0d1b      	lsrs	r3, r3, #20
 8006e76:	051b      	lsls	r3, r3, #20
 8006e78:	b17b      	cbz	r3, 8006e9a <_dtoa_r+0x8fa>
 8006e7a:	f04f 0801 	mov.w	r8, #1
 8006e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e80:	f109 0901 	add.w	r9, r9, #1
 8006e84:	3301      	adds	r3, #1
 8006e86:	9309      	str	r3, [sp, #36]	; 0x24
 8006e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f47f af6f 	bne.w	8006d6e <_dtoa_r+0x7ce>
 8006e90:	2001      	movs	r0, #1
 8006e92:	e774      	b.n	8006d7e <_dtoa_r+0x7de>
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	e7f6      	b.n	8006e88 <_dtoa_r+0x8e8>
 8006e9a:	4698      	mov	r8, r3
 8006e9c:	e7f4      	b.n	8006e88 <_dtoa_r+0x8e8>
 8006e9e:	d080      	beq.n	8006da2 <_dtoa_r+0x802>
 8006ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	441a      	add	r2, r3
 8006ea6:	4499      	add	r9, r3
 8006ea8:	441f      	add	r7, r3
 8006eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8006eac:	e779      	b.n	8006da2 <_dtoa_r+0x802>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	e7f6      	b.n	8006ea0 <_dtoa_r+0x900>
 8006eb2:	9b08      	ldr	r3, [sp, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dc34      	bgt.n	8006f22 <_dtoa_r+0x982>
 8006eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	dd31      	ble.n	8006f22 <_dtoa_r+0x982>
 8006ebe:	9b08      	ldr	r3, [sp, #32]
 8006ec0:	9306      	str	r3, [sp, #24]
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	b963      	cbnz	r3, 8006ee0 <_dtoa_r+0x940>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	2205      	movs	r2, #5
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 faaa 	bl	8007424 <__multadd>
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	f000 fd07 	bl	80078e8 <__mcmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f73f adbf 	bgt.w	8006a5e <_dtoa_r+0x4be>
 8006ee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ee2:	9f03      	ldr	r7, [sp, #12]
 8006ee4:	ea6f 0b03 	mvn.w	fp, r3
 8006ee8:	f04f 0800 	mov.w	r8, #0
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 fa76 	bl	80073e0 <_Bfree>
 8006ef4:	2e00      	cmp	r6, #0
 8006ef6:	f43f aead 	beq.w	8006c54 <_dtoa_r+0x6b4>
 8006efa:	f1b8 0f00 	cmp.w	r8, #0
 8006efe:	d005      	beq.n	8006f0c <_dtoa_r+0x96c>
 8006f00:	45b0      	cmp	r8, r6
 8006f02:	d003      	beq.n	8006f0c <_dtoa_r+0x96c>
 8006f04:	4641      	mov	r1, r8
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fa6a 	bl	80073e0 <_Bfree>
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 fa66 	bl	80073e0 <_Bfree>
 8006f14:	e69e      	b.n	8006c54 <_dtoa_r+0x6b4>
 8006f16:	2400      	movs	r4, #0
 8006f18:	4626      	mov	r6, r4
 8006f1a:	e7e1      	b.n	8006ee0 <_dtoa_r+0x940>
 8006f1c:	46c3      	mov	fp, r8
 8006f1e:	4626      	mov	r6, r4
 8006f20:	e59d      	b.n	8006a5e <_dtoa_r+0x4be>
 8006f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80c8 	beq.w	80070ba <_dtoa_r+0xb1a>
 8006f2a:	9b08      	ldr	r3, [sp, #32]
 8006f2c:	9306      	str	r3, [sp, #24]
 8006f2e:	2f00      	cmp	r7, #0
 8006f30:	dd05      	ble.n	8006f3e <_dtoa_r+0x99e>
 8006f32:	4631      	mov	r1, r6
 8006f34:	463a      	mov	r2, r7
 8006f36:	4628      	mov	r0, r5
 8006f38:	f000 fc6a 	bl	8007810 <__lshift>
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	f1b8 0f00 	cmp.w	r8, #0
 8006f42:	d05b      	beq.n	8006ffc <_dtoa_r+0xa5c>
 8006f44:	4628      	mov	r0, r5
 8006f46:	6871      	ldr	r1, [r6, #4]
 8006f48:	f000 fa0a 	bl	8007360 <_Balloc>
 8006f4c:	4607      	mov	r7, r0
 8006f4e:	b928      	cbnz	r0, 8006f5c <_dtoa_r+0x9bc>
 8006f50:	4602      	mov	r2, r0
 8006f52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f56:	4b81      	ldr	r3, [pc, #516]	; (800715c <_dtoa_r+0xbbc>)
 8006f58:	f7ff bb36 	b.w	80065c8 <_dtoa_r+0x28>
 8006f5c:	6932      	ldr	r2, [r6, #16]
 8006f5e:	f106 010c 	add.w	r1, r6, #12
 8006f62:	3202      	adds	r2, #2
 8006f64:	0092      	lsls	r2, r2, #2
 8006f66:	300c      	adds	r0, #12
 8006f68:	f7ff fa7b 	bl	8006462 <memcpy>
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	4639      	mov	r1, r7
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 fc4d 	bl	8007810 <__lshift>
 8006f76:	46b0      	mov	r8, r6
 8006f78:	4606      	mov	r6, r0
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	9a03      	ldr	r2, [sp, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	4413      	add	r3, r2
 8006f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f88:	9b04      	ldr	r3, [sp, #16]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	4621      	mov	r1, r4
 8006f94:	3b01      	subs	r3, #1
 8006f96:	4650      	mov	r0, sl
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	f7ff fa75 	bl	8006488 <quorem>
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	9006      	str	r0, [sp, #24]
 8006fa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	f000 fc9e 	bl	80078e8 <__mcmp>
 8006fac:	4632      	mov	r2, r6
 8006fae:	9009      	str	r0, [sp, #36]	; 0x24
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 fcb4 	bl	8007920 <__mdiff>
 8006fb8:	68c2      	ldr	r2, [r0, #12]
 8006fba:	4607      	mov	r7, r0
 8006fbc:	bb02      	cbnz	r2, 8007000 <_dtoa_r+0xa60>
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	f000 fc91 	bl	80078e8 <__mcmp>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4628      	mov	r0, r5
 8006fcc:	920c      	str	r2, [sp, #48]	; 0x30
 8006fce:	f000 fa07 	bl	80073e0 <_Bfree>
 8006fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fd6:	9f08      	ldr	r7, [sp, #32]
 8006fd8:	ea43 0102 	orr.w	r1, r3, r2
 8006fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fde:	4319      	orrs	r1, r3
 8006fe0:	d110      	bne.n	8007004 <_dtoa_r+0xa64>
 8006fe2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fe6:	d029      	beq.n	800703c <_dtoa_r+0xa9c>
 8006fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dd02      	ble.n	8006ff4 <_dtoa_r+0xa54>
 8006fee:	9b06      	ldr	r3, [sp, #24]
 8006ff0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ff4:	9b04      	ldr	r3, [sp, #16]
 8006ff6:	f883 9000 	strb.w	r9, [r3]
 8006ffa:	e777      	b.n	8006eec <_dtoa_r+0x94c>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	e7ba      	b.n	8006f76 <_dtoa_r+0x9d6>
 8007000:	2201      	movs	r2, #1
 8007002:	e7e1      	b.n	8006fc8 <_dtoa_r+0xa28>
 8007004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	db04      	blt.n	8007014 <_dtoa_r+0xa74>
 800700a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800700c:	430b      	orrs	r3, r1
 800700e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007010:	430b      	orrs	r3, r1
 8007012:	d120      	bne.n	8007056 <_dtoa_r+0xab6>
 8007014:	2a00      	cmp	r2, #0
 8007016:	dded      	ble.n	8006ff4 <_dtoa_r+0xa54>
 8007018:	4651      	mov	r1, sl
 800701a:	2201      	movs	r2, #1
 800701c:	4628      	mov	r0, r5
 800701e:	f000 fbf7 	bl	8007810 <__lshift>
 8007022:	4621      	mov	r1, r4
 8007024:	4682      	mov	sl, r0
 8007026:	f000 fc5f 	bl	80078e8 <__mcmp>
 800702a:	2800      	cmp	r0, #0
 800702c:	dc03      	bgt.n	8007036 <_dtoa_r+0xa96>
 800702e:	d1e1      	bne.n	8006ff4 <_dtoa_r+0xa54>
 8007030:	f019 0f01 	tst.w	r9, #1
 8007034:	d0de      	beq.n	8006ff4 <_dtoa_r+0xa54>
 8007036:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800703a:	d1d8      	bne.n	8006fee <_dtoa_r+0xa4e>
 800703c:	2339      	movs	r3, #57	; 0x39
 800703e:	9a04      	ldr	r2, [sp, #16]
 8007040:	7013      	strb	r3, [r2, #0]
 8007042:	463b      	mov	r3, r7
 8007044:	461f      	mov	r7, r3
 8007046:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800704a:	3b01      	subs	r3, #1
 800704c:	2a39      	cmp	r2, #57	; 0x39
 800704e:	d06b      	beq.n	8007128 <_dtoa_r+0xb88>
 8007050:	3201      	adds	r2, #1
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e74a      	b.n	8006eec <_dtoa_r+0x94c>
 8007056:	2a00      	cmp	r2, #0
 8007058:	dd07      	ble.n	800706a <_dtoa_r+0xaca>
 800705a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800705e:	d0ed      	beq.n	800703c <_dtoa_r+0xa9c>
 8007060:	9a04      	ldr	r2, [sp, #16]
 8007062:	f109 0301 	add.w	r3, r9, #1
 8007066:	7013      	strb	r3, [r2, #0]
 8007068:	e740      	b.n	8006eec <_dtoa_r+0x94c>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800706e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007072:	4293      	cmp	r3, r2
 8007074:	d042      	beq.n	80070fc <_dtoa_r+0xb5c>
 8007076:	4651      	mov	r1, sl
 8007078:	2300      	movs	r3, #0
 800707a:	220a      	movs	r2, #10
 800707c:	4628      	mov	r0, r5
 800707e:	f000 f9d1 	bl	8007424 <__multadd>
 8007082:	45b0      	cmp	r8, r6
 8007084:	4682      	mov	sl, r0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	f04f 020a 	mov.w	r2, #10
 800708e:	4641      	mov	r1, r8
 8007090:	4628      	mov	r0, r5
 8007092:	d107      	bne.n	80070a4 <_dtoa_r+0xb04>
 8007094:	f000 f9c6 	bl	8007424 <__multadd>
 8007098:	4680      	mov	r8, r0
 800709a:	4606      	mov	r6, r0
 800709c:	9b08      	ldr	r3, [sp, #32]
 800709e:	3301      	adds	r3, #1
 80070a0:	9308      	str	r3, [sp, #32]
 80070a2:	e775      	b.n	8006f90 <_dtoa_r+0x9f0>
 80070a4:	f000 f9be 	bl	8007424 <__multadd>
 80070a8:	4631      	mov	r1, r6
 80070aa:	4680      	mov	r8, r0
 80070ac:	2300      	movs	r3, #0
 80070ae:	220a      	movs	r2, #10
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 f9b7 	bl	8007424 <__multadd>
 80070b6:	4606      	mov	r6, r0
 80070b8:	e7f0      	b.n	800709c <_dtoa_r+0xafc>
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	9306      	str	r3, [sp, #24]
 80070be:	9f03      	ldr	r7, [sp, #12]
 80070c0:	4621      	mov	r1, r4
 80070c2:	4650      	mov	r0, sl
 80070c4:	f7ff f9e0 	bl	8006488 <quorem>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070ce:	f807 9b01 	strb.w	r9, [r7], #1
 80070d2:	1afa      	subs	r2, r7, r3
 80070d4:	9b06      	ldr	r3, [sp, #24]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	dd07      	ble.n	80070ea <_dtoa_r+0xb4a>
 80070da:	4651      	mov	r1, sl
 80070dc:	2300      	movs	r3, #0
 80070de:	220a      	movs	r2, #10
 80070e0:	4628      	mov	r0, r5
 80070e2:	f000 f99f 	bl	8007424 <__multadd>
 80070e6:	4682      	mov	sl, r0
 80070e8:	e7ea      	b.n	80070c0 <_dtoa_r+0xb20>
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	f04f 0800 	mov.w	r8, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfcc      	ite	gt
 80070f4:	461f      	movgt	r7, r3
 80070f6:	2701      	movle	r7, #1
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	441f      	add	r7, r3
 80070fc:	4651      	mov	r1, sl
 80070fe:	2201      	movs	r2, #1
 8007100:	4628      	mov	r0, r5
 8007102:	f000 fb85 	bl	8007810 <__lshift>
 8007106:	4621      	mov	r1, r4
 8007108:	4682      	mov	sl, r0
 800710a:	f000 fbed 	bl	80078e8 <__mcmp>
 800710e:	2800      	cmp	r0, #0
 8007110:	dc97      	bgt.n	8007042 <_dtoa_r+0xaa2>
 8007112:	d102      	bne.n	800711a <_dtoa_r+0xb7a>
 8007114:	f019 0f01 	tst.w	r9, #1
 8007118:	d193      	bne.n	8007042 <_dtoa_r+0xaa2>
 800711a:	463b      	mov	r3, r7
 800711c:	461f      	mov	r7, r3
 800711e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007122:	2a30      	cmp	r2, #48	; 0x30
 8007124:	d0fa      	beq.n	800711c <_dtoa_r+0xb7c>
 8007126:	e6e1      	b.n	8006eec <_dtoa_r+0x94c>
 8007128:	9a03      	ldr	r2, [sp, #12]
 800712a:	429a      	cmp	r2, r3
 800712c:	d18a      	bne.n	8007044 <_dtoa_r+0xaa4>
 800712e:	2331      	movs	r3, #49	; 0x31
 8007130:	f10b 0b01 	add.w	fp, fp, #1
 8007134:	e797      	b.n	8007066 <_dtoa_r+0xac6>
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <_dtoa_r+0xbc0>)
 8007138:	f7ff ba9f 	b.w	800667a <_dtoa_r+0xda>
 800713c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800713e:	2b00      	cmp	r3, #0
 8007140:	f47f aa77 	bne.w	8006632 <_dtoa_r+0x92>
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <_dtoa_r+0xbc4>)
 8007146:	f7ff ba98 	b.w	800667a <_dtoa_r+0xda>
 800714a:	9b06      	ldr	r3, [sp, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	dcb6      	bgt.n	80070be <_dtoa_r+0xb1e>
 8007150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007152:	2b02      	cmp	r3, #2
 8007154:	f73f aeb5 	bgt.w	8006ec2 <_dtoa_r+0x922>
 8007158:	e7b1      	b.n	80070be <_dtoa_r+0xb1e>
 800715a:	bf00      	nop
 800715c:	08009df3 	.word	0x08009df3
 8007160:	08009d4e 	.word	0x08009d4e
 8007164:	08009d77 	.word	0x08009d77

08007168 <_free_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4605      	mov	r5, r0
 800716c:	2900      	cmp	r1, #0
 800716e:	d040      	beq.n	80071f2 <_free_r+0x8a>
 8007170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007174:	1f0c      	subs	r4, r1, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb8      	it	lt
 800717a:	18e4      	addlt	r4, r4, r3
 800717c:	f000 f8e4 	bl	8007348 <__malloc_lock>
 8007180:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <_free_r+0x8c>)
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	b933      	cbnz	r3, 8007194 <_free_r+0x2c>
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	6014      	str	r4, [r2, #0]
 800718a:	4628      	mov	r0, r5
 800718c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007190:	f000 b8e0 	b.w	8007354 <__malloc_unlock>
 8007194:	42a3      	cmp	r3, r4
 8007196:	d908      	bls.n	80071aa <_free_r+0x42>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	1821      	adds	r1, r4, r0
 800719c:	428b      	cmp	r3, r1
 800719e:	bf01      	itttt	eq
 80071a0:	6819      	ldreq	r1, [r3, #0]
 80071a2:	685b      	ldreq	r3, [r3, #4]
 80071a4:	1809      	addeq	r1, r1, r0
 80071a6:	6021      	streq	r1, [r4, #0]
 80071a8:	e7ed      	b.n	8007186 <_free_r+0x1e>
 80071aa:	461a      	mov	r2, r3
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b10b      	cbz	r3, 80071b4 <_free_r+0x4c>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d9fa      	bls.n	80071aa <_free_r+0x42>
 80071b4:	6811      	ldr	r1, [r2, #0]
 80071b6:	1850      	adds	r0, r2, r1
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d10b      	bne.n	80071d4 <_free_r+0x6c>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	4401      	add	r1, r0
 80071c0:	1850      	adds	r0, r2, r1
 80071c2:	4283      	cmp	r3, r0
 80071c4:	6011      	str	r1, [r2, #0]
 80071c6:	d1e0      	bne.n	800718a <_free_r+0x22>
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4408      	add	r0, r1
 80071ce:	6010      	str	r0, [r2, #0]
 80071d0:	6053      	str	r3, [r2, #4]
 80071d2:	e7da      	b.n	800718a <_free_r+0x22>
 80071d4:	d902      	bls.n	80071dc <_free_r+0x74>
 80071d6:	230c      	movs	r3, #12
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	e7d6      	b.n	800718a <_free_r+0x22>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	1821      	adds	r1, r4, r0
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf01      	itttt	eq
 80071e4:	6819      	ldreq	r1, [r3, #0]
 80071e6:	685b      	ldreq	r3, [r3, #4]
 80071e8:	1809      	addeq	r1, r1, r0
 80071ea:	6021      	streq	r1, [r4, #0]
 80071ec:	6063      	str	r3, [r4, #4]
 80071ee:	6054      	str	r4, [r2, #4]
 80071f0:	e7cb      	b.n	800718a <_free_r+0x22>
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20000cf4 	.word	0x20000cf4

080071f8 <malloc>:
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <malloc+0xc>)
 80071fa:	4601      	mov	r1, r0
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	f000 b823 	b.w	8007248 <_malloc_r>
 8007202:	bf00      	nop
 8007204:	20000068 	.word	0x20000068

08007208 <sbrk_aligned>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4e0e      	ldr	r6, [pc, #56]	; (8007244 <sbrk_aligned+0x3c>)
 800720c:	460c      	mov	r4, r1
 800720e:	6831      	ldr	r1, [r6, #0]
 8007210:	4605      	mov	r5, r0
 8007212:	b911      	cbnz	r1, 800721a <sbrk_aligned+0x12>
 8007214:	f001 ffc0 	bl	8009198 <_sbrk_r>
 8007218:	6030      	str	r0, [r6, #0]
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f001 ffbb 	bl	8009198 <_sbrk_r>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d00a      	beq.n	800723c <sbrk_aligned+0x34>
 8007226:	1cc4      	adds	r4, r0, #3
 8007228:	f024 0403 	bic.w	r4, r4, #3
 800722c:	42a0      	cmp	r0, r4
 800722e:	d007      	beq.n	8007240 <sbrk_aligned+0x38>
 8007230:	1a21      	subs	r1, r4, r0
 8007232:	4628      	mov	r0, r5
 8007234:	f001 ffb0 	bl	8009198 <_sbrk_r>
 8007238:	3001      	adds	r0, #1
 800723a:	d101      	bne.n	8007240 <sbrk_aligned+0x38>
 800723c:	f04f 34ff 	mov.w	r4, #4294967295
 8007240:	4620      	mov	r0, r4
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	20000cf8 	.word	0x20000cf8

08007248 <_malloc_r>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	1ccd      	adds	r5, r1, #3
 800724e:	f025 0503 	bic.w	r5, r5, #3
 8007252:	3508      	adds	r5, #8
 8007254:	2d0c      	cmp	r5, #12
 8007256:	bf38      	it	cc
 8007258:	250c      	movcc	r5, #12
 800725a:	2d00      	cmp	r5, #0
 800725c:	4607      	mov	r7, r0
 800725e:	db01      	blt.n	8007264 <_malloc_r+0x1c>
 8007260:	42a9      	cmp	r1, r5
 8007262:	d905      	bls.n	8007270 <_malloc_r+0x28>
 8007264:	230c      	movs	r3, #12
 8007266:	2600      	movs	r6, #0
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	4630      	mov	r0, r6
 800726c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007270:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007344 <_malloc_r+0xfc>
 8007274:	f000 f868 	bl	8007348 <__malloc_lock>
 8007278:	f8d8 3000 	ldr.w	r3, [r8]
 800727c:	461c      	mov	r4, r3
 800727e:	bb5c      	cbnz	r4, 80072d8 <_malloc_r+0x90>
 8007280:	4629      	mov	r1, r5
 8007282:	4638      	mov	r0, r7
 8007284:	f7ff ffc0 	bl	8007208 <sbrk_aligned>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	4604      	mov	r4, r0
 800728c:	d155      	bne.n	800733a <_malloc_r+0xf2>
 800728e:	f8d8 4000 	ldr.w	r4, [r8]
 8007292:	4626      	mov	r6, r4
 8007294:	2e00      	cmp	r6, #0
 8007296:	d145      	bne.n	8007324 <_malloc_r+0xdc>
 8007298:	2c00      	cmp	r4, #0
 800729a:	d048      	beq.n	800732e <_malloc_r+0xe6>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	4631      	mov	r1, r6
 80072a0:	4638      	mov	r0, r7
 80072a2:	eb04 0903 	add.w	r9, r4, r3
 80072a6:	f001 ff77 	bl	8009198 <_sbrk_r>
 80072aa:	4581      	cmp	r9, r0
 80072ac:	d13f      	bne.n	800732e <_malloc_r+0xe6>
 80072ae:	6821      	ldr	r1, [r4, #0]
 80072b0:	4638      	mov	r0, r7
 80072b2:	1a6d      	subs	r5, r5, r1
 80072b4:	4629      	mov	r1, r5
 80072b6:	f7ff ffa7 	bl	8007208 <sbrk_aligned>
 80072ba:	3001      	adds	r0, #1
 80072bc:	d037      	beq.n	800732e <_malloc_r+0xe6>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	442b      	add	r3, r5
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	f8d8 3000 	ldr.w	r3, [r8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d038      	beq.n	800733e <_malloc_r+0xf6>
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	42a2      	cmp	r2, r4
 80072d0:	d12b      	bne.n	800732a <_malloc_r+0xe2>
 80072d2:	2200      	movs	r2, #0
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	e00f      	b.n	80072f8 <_malloc_r+0xb0>
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	1b52      	subs	r2, r2, r5
 80072dc:	d41f      	bmi.n	800731e <_malloc_r+0xd6>
 80072de:	2a0b      	cmp	r2, #11
 80072e0:	d917      	bls.n	8007312 <_malloc_r+0xca>
 80072e2:	1961      	adds	r1, r4, r5
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	6025      	str	r5, [r4, #0]
 80072e8:	bf18      	it	ne
 80072ea:	6059      	strne	r1, [r3, #4]
 80072ec:	6863      	ldr	r3, [r4, #4]
 80072ee:	bf08      	it	eq
 80072f0:	f8c8 1000 	streq.w	r1, [r8]
 80072f4:	5162      	str	r2, [r4, r5]
 80072f6:	604b      	str	r3, [r1, #4]
 80072f8:	4638      	mov	r0, r7
 80072fa:	f104 060b 	add.w	r6, r4, #11
 80072fe:	f000 f829 	bl	8007354 <__malloc_unlock>
 8007302:	f026 0607 	bic.w	r6, r6, #7
 8007306:	1d23      	adds	r3, r4, #4
 8007308:	1af2      	subs	r2, r6, r3
 800730a:	d0ae      	beq.n	800726a <_malloc_r+0x22>
 800730c:	1b9b      	subs	r3, r3, r6
 800730e:	50a3      	str	r3, [r4, r2]
 8007310:	e7ab      	b.n	800726a <_malloc_r+0x22>
 8007312:	42a3      	cmp	r3, r4
 8007314:	6862      	ldr	r2, [r4, #4]
 8007316:	d1dd      	bne.n	80072d4 <_malloc_r+0x8c>
 8007318:	f8c8 2000 	str.w	r2, [r8]
 800731c:	e7ec      	b.n	80072f8 <_malloc_r+0xb0>
 800731e:	4623      	mov	r3, r4
 8007320:	6864      	ldr	r4, [r4, #4]
 8007322:	e7ac      	b.n	800727e <_malloc_r+0x36>
 8007324:	4634      	mov	r4, r6
 8007326:	6876      	ldr	r6, [r6, #4]
 8007328:	e7b4      	b.n	8007294 <_malloc_r+0x4c>
 800732a:	4613      	mov	r3, r2
 800732c:	e7cc      	b.n	80072c8 <_malloc_r+0x80>
 800732e:	230c      	movs	r3, #12
 8007330:	4638      	mov	r0, r7
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	f000 f80e 	bl	8007354 <__malloc_unlock>
 8007338:	e797      	b.n	800726a <_malloc_r+0x22>
 800733a:	6025      	str	r5, [r4, #0]
 800733c:	e7dc      	b.n	80072f8 <_malloc_r+0xb0>
 800733e:	605b      	str	r3, [r3, #4]
 8007340:	deff      	udf	#255	; 0xff
 8007342:	bf00      	nop
 8007344:	20000cf4 	.word	0x20000cf4

08007348 <__malloc_lock>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__malloc_lock+0x8>)
 800734a:	f7ff b87a 	b.w	8006442 <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20000cf0 	.word	0x20000cf0

08007354 <__malloc_unlock>:
 8007354:	4801      	ldr	r0, [pc, #4]	; (800735c <__malloc_unlock+0x8>)
 8007356:	f7ff b875 	b.w	8006444 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20000cf0 	.word	0x20000cf0

08007360 <_Balloc>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	69c6      	ldr	r6, [r0, #28]
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	b976      	cbnz	r6, 8007388 <_Balloc+0x28>
 800736a:	2010      	movs	r0, #16
 800736c:	f7ff ff44 	bl	80071f8 <malloc>
 8007370:	4602      	mov	r2, r0
 8007372:	61e0      	str	r0, [r4, #28]
 8007374:	b920      	cbnz	r0, 8007380 <_Balloc+0x20>
 8007376:	216b      	movs	r1, #107	; 0x6b
 8007378:	4b17      	ldr	r3, [pc, #92]	; (80073d8 <_Balloc+0x78>)
 800737a:	4818      	ldr	r0, [pc, #96]	; (80073dc <_Balloc+0x7c>)
 800737c:	f001 ff22 	bl	80091c4 <__assert_func>
 8007380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007384:	6006      	str	r6, [r0, #0]
 8007386:	60c6      	str	r6, [r0, #12]
 8007388:	69e6      	ldr	r6, [r4, #28]
 800738a:	68f3      	ldr	r3, [r6, #12]
 800738c:	b183      	cbz	r3, 80073b0 <_Balloc+0x50>
 800738e:	69e3      	ldr	r3, [r4, #28]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007396:	b9b8      	cbnz	r0, 80073c8 <_Balloc+0x68>
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f605 	lsl.w	r6, r1, r5
 800739e:	1d72      	adds	r2, r6, #5
 80073a0:	4620      	mov	r0, r4
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	f001 ff2c 	bl	8009200 <_calloc_r>
 80073a8:	b160      	cbz	r0, 80073c4 <_Balloc+0x64>
 80073aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ae:	e00e      	b.n	80073ce <_Balloc+0x6e>
 80073b0:	2221      	movs	r2, #33	; 0x21
 80073b2:	2104      	movs	r1, #4
 80073b4:	4620      	mov	r0, r4
 80073b6:	f001 ff23 	bl	8009200 <_calloc_r>
 80073ba:	69e3      	ldr	r3, [r4, #28]
 80073bc:	60f0      	str	r0, [r6, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e4      	bne.n	800738e <_Balloc+0x2e>
 80073c4:	2000      	movs	r0, #0
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	6802      	ldr	r2, [r0, #0]
 80073ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ce:	2300      	movs	r3, #0
 80073d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073d4:	e7f7      	b.n	80073c6 <_Balloc+0x66>
 80073d6:	bf00      	nop
 80073d8:	08009d84 	.word	0x08009d84
 80073dc:	08009e04 	.word	0x08009e04

080073e0 <_Bfree>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	69c6      	ldr	r6, [r0, #28]
 80073e4:	4605      	mov	r5, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	b976      	cbnz	r6, 8007408 <_Bfree+0x28>
 80073ea:	2010      	movs	r0, #16
 80073ec:	f7ff ff04 	bl	80071f8 <malloc>
 80073f0:	4602      	mov	r2, r0
 80073f2:	61e8      	str	r0, [r5, #28]
 80073f4:	b920      	cbnz	r0, 8007400 <_Bfree+0x20>
 80073f6:	218f      	movs	r1, #143	; 0x8f
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <_Bfree+0x3c>)
 80073fa:	4809      	ldr	r0, [pc, #36]	; (8007420 <_Bfree+0x40>)
 80073fc:	f001 fee2 	bl	80091c4 <__assert_func>
 8007400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007404:	6006      	str	r6, [r0, #0]
 8007406:	60c6      	str	r6, [r0, #12]
 8007408:	b13c      	cbz	r4, 800741a <_Bfree+0x3a>
 800740a:	69eb      	ldr	r3, [r5, #28]
 800740c:	6862      	ldr	r2, [r4, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007414:	6021      	str	r1, [r4, #0]
 8007416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	08009d84 	.word	0x08009d84
 8007420:	08009e04 	.word	0x08009e04

08007424 <__multadd>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	4607      	mov	r7, r0
 800742a:	460c      	mov	r4, r1
 800742c:	461e      	mov	r6, r3
 800742e:	2000      	movs	r0, #0
 8007430:	690d      	ldr	r5, [r1, #16]
 8007432:	f101 0c14 	add.w	ip, r1, #20
 8007436:	f8dc 3000 	ldr.w	r3, [ip]
 800743a:	3001      	adds	r0, #1
 800743c:	b299      	uxth	r1, r3
 800743e:	fb02 6101 	mla	r1, r2, r1, r6
 8007442:	0c1e      	lsrs	r6, r3, #16
 8007444:	0c0b      	lsrs	r3, r1, #16
 8007446:	fb02 3306 	mla	r3, r2, r6, r3
 800744a:	b289      	uxth	r1, r1
 800744c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007450:	4285      	cmp	r5, r0
 8007452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007456:	f84c 1b04 	str.w	r1, [ip], #4
 800745a:	dcec      	bgt.n	8007436 <__multadd+0x12>
 800745c:	b30e      	cbz	r6, 80074a2 <__multadd+0x7e>
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	42ab      	cmp	r3, r5
 8007462:	dc19      	bgt.n	8007498 <__multadd+0x74>
 8007464:	6861      	ldr	r1, [r4, #4]
 8007466:	4638      	mov	r0, r7
 8007468:	3101      	adds	r1, #1
 800746a:	f7ff ff79 	bl	8007360 <_Balloc>
 800746e:	4680      	mov	r8, r0
 8007470:	b928      	cbnz	r0, 800747e <__multadd+0x5a>
 8007472:	4602      	mov	r2, r0
 8007474:	21ba      	movs	r1, #186	; 0xba
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <__multadd+0x84>)
 8007478:	480c      	ldr	r0, [pc, #48]	; (80074ac <__multadd+0x88>)
 800747a:	f001 fea3 	bl	80091c4 <__assert_func>
 800747e:	6922      	ldr	r2, [r4, #16]
 8007480:	f104 010c 	add.w	r1, r4, #12
 8007484:	3202      	adds	r2, #2
 8007486:	0092      	lsls	r2, r2, #2
 8007488:	300c      	adds	r0, #12
 800748a:	f7fe ffea 	bl	8006462 <memcpy>
 800748e:	4621      	mov	r1, r4
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff ffa5 	bl	80073e0 <_Bfree>
 8007496:	4644      	mov	r4, r8
 8007498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800749c:	3501      	adds	r5, #1
 800749e:	615e      	str	r6, [r3, #20]
 80074a0:	6125      	str	r5, [r4, #16]
 80074a2:	4620      	mov	r0, r4
 80074a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a8:	08009df3 	.word	0x08009df3
 80074ac:	08009e04 	.word	0x08009e04

080074b0 <__s2b>:
 80074b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	4615      	mov	r5, r2
 80074b6:	2209      	movs	r2, #9
 80074b8:	461f      	mov	r7, r3
 80074ba:	3308      	adds	r3, #8
 80074bc:	460c      	mov	r4, r1
 80074be:	fb93 f3f2 	sdiv	r3, r3, r2
 80074c2:	4606      	mov	r6, r0
 80074c4:	2201      	movs	r2, #1
 80074c6:	2100      	movs	r1, #0
 80074c8:	429a      	cmp	r2, r3
 80074ca:	db09      	blt.n	80074e0 <__s2b+0x30>
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ff47 	bl	8007360 <_Balloc>
 80074d2:	b940      	cbnz	r0, 80074e6 <__s2b+0x36>
 80074d4:	4602      	mov	r2, r0
 80074d6:	21d3      	movs	r1, #211	; 0xd3
 80074d8:	4b18      	ldr	r3, [pc, #96]	; (800753c <__s2b+0x8c>)
 80074da:	4819      	ldr	r0, [pc, #100]	; (8007540 <__s2b+0x90>)
 80074dc:	f001 fe72 	bl	80091c4 <__assert_func>
 80074e0:	0052      	lsls	r2, r2, #1
 80074e2:	3101      	adds	r1, #1
 80074e4:	e7f0      	b.n	80074c8 <__s2b+0x18>
 80074e6:	9b08      	ldr	r3, [sp, #32]
 80074e8:	2d09      	cmp	r5, #9
 80074ea:	6143      	str	r3, [r0, #20]
 80074ec:	f04f 0301 	mov.w	r3, #1
 80074f0:	6103      	str	r3, [r0, #16]
 80074f2:	dd16      	ble.n	8007522 <__s2b+0x72>
 80074f4:	f104 0909 	add.w	r9, r4, #9
 80074f8:	46c8      	mov	r8, r9
 80074fa:	442c      	add	r4, r5
 80074fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007500:	4601      	mov	r1, r0
 8007502:	220a      	movs	r2, #10
 8007504:	4630      	mov	r0, r6
 8007506:	3b30      	subs	r3, #48	; 0x30
 8007508:	f7ff ff8c 	bl	8007424 <__multadd>
 800750c:	45a0      	cmp	r8, r4
 800750e:	d1f5      	bne.n	80074fc <__s2b+0x4c>
 8007510:	f1a5 0408 	sub.w	r4, r5, #8
 8007514:	444c      	add	r4, r9
 8007516:	1b2d      	subs	r5, r5, r4
 8007518:	1963      	adds	r3, r4, r5
 800751a:	42bb      	cmp	r3, r7
 800751c:	db04      	blt.n	8007528 <__s2b+0x78>
 800751e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007522:	2509      	movs	r5, #9
 8007524:	340a      	adds	r4, #10
 8007526:	e7f6      	b.n	8007516 <__s2b+0x66>
 8007528:	f814 3b01 	ldrb.w	r3, [r4], #1
 800752c:	4601      	mov	r1, r0
 800752e:	220a      	movs	r2, #10
 8007530:	4630      	mov	r0, r6
 8007532:	3b30      	subs	r3, #48	; 0x30
 8007534:	f7ff ff76 	bl	8007424 <__multadd>
 8007538:	e7ee      	b.n	8007518 <__s2b+0x68>
 800753a:	bf00      	nop
 800753c:	08009df3 	.word	0x08009df3
 8007540:	08009e04 	.word	0x08009e04

08007544 <__hi0bits>:
 8007544:	0c02      	lsrs	r2, r0, #16
 8007546:	0412      	lsls	r2, r2, #16
 8007548:	4603      	mov	r3, r0
 800754a:	b9ca      	cbnz	r2, 8007580 <__hi0bits+0x3c>
 800754c:	0403      	lsls	r3, r0, #16
 800754e:	2010      	movs	r0, #16
 8007550:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007554:	bf04      	itt	eq
 8007556:	021b      	lsleq	r3, r3, #8
 8007558:	3008      	addeq	r0, #8
 800755a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800755e:	bf04      	itt	eq
 8007560:	011b      	lsleq	r3, r3, #4
 8007562:	3004      	addeq	r0, #4
 8007564:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007568:	bf04      	itt	eq
 800756a:	009b      	lsleq	r3, r3, #2
 800756c:	3002      	addeq	r0, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	db05      	blt.n	800757e <__hi0bits+0x3a>
 8007572:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007576:	f100 0001 	add.w	r0, r0, #1
 800757a:	bf08      	it	eq
 800757c:	2020      	moveq	r0, #32
 800757e:	4770      	bx	lr
 8007580:	2000      	movs	r0, #0
 8007582:	e7e5      	b.n	8007550 <__hi0bits+0xc>

08007584 <__lo0bits>:
 8007584:	6803      	ldr	r3, [r0, #0]
 8007586:	4602      	mov	r2, r0
 8007588:	f013 0007 	ands.w	r0, r3, #7
 800758c:	d00b      	beq.n	80075a6 <__lo0bits+0x22>
 800758e:	07d9      	lsls	r1, r3, #31
 8007590:	d421      	bmi.n	80075d6 <__lo0bits+0x52>
 8007592:	0798      	lsls	r0, r3, #30
 8007594:	bf49      	itett	mi
 8007596:	085b      	lsrmi	r3, r3, #1
 8007598:	089b      	lsrpl	r3, r3, #2
 800759a:	2001      	movmi	r0, #1
 800759c:	6013      	strmi	r3, [r2, #0]
 800759e:	bf5c      	itt	pl
 80075a0:	2002      	movpl	r0, #2
 80075a2:	6013      	strpl	r3, [r2, #0]
 80075a4:	4770      	bx	lr
 80075a6:	b299      	uxth	r1, r3
 80075a8:	b909      	cbnz	r1, 80075ae <__lo0bits+0x2a>
 80075aa:	2010      	movs	r0, #16
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	b2d9      	uxtb	r1, r3
 80075b0:	b909      	cbnz	r1, 80075b6 <__lo0bits+0x32>
 80075b2:	3008      	adds	r0, #8
 80075b4:	0a1b      	lsrs	r3, r3, #8
 80075b6:	0719      	lsls	r1, r3, #28
 80075b8:	bf04      	itt	eq
 80075ba:	091b      	lsreq	r3, r3, #4
 80075bc:	3004      	addeq	r0, #4
 80075be:	0799      	lsls	r1, r3, #30
 80075c0:	bf04      	itt	eq
 80075c2:	089b      	lsreq	r3, r3, #2
 80075c4:	3002      	addeq	r0, #2
 80075c6:	07d9      	lsls	r1, r3, #31
 80075c8:	d403      	bmi.n	80075d2 <__lo0bits+0x4e>
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	f100 0001 	add.w	r0, r0, #1
 80075d0:	d003      	beq.n	80075da <__lo0bits+0x56>
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	4770      	bx	lr
 80075d6:	2000      	movs	r0, #0
 80075d8:	4770      	bx	lr
 80075da:	2020      	movs	r0, #32
 80075dc:	4770      	bx	lr
	...

080075e0 <__i2b>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	460c      	mov	r4, r1
 80075e4:	2101      	movs	r1, #1
 80075e6:	f7ff febb 	bl	8007360 <_Balloc>
 80075ea:	4602      	mov	r2, r0
 80075ec:	b928      	cbnz	r0, 80075fa <__i2b+0x1a>
 80075ee:	f240 1145 	movw	r1, #325	; 0x145
 80075f2:	4b04      	ldr	r3, [pc, #16]	; (8007604 <__i2b+0x24>)
 80075f4:	4804      	ldr	r0, [pc, #16]	; (8007608 <__i2b+0x28>)
 80075f6:	f001 fde5 	bl	80091c4 <__assert_func>
 80075fa:	2301      	movs	r3, #1
 80075fc:	6144      	str	r4, [r0, #20]
 80075fe:	6103      	str	r3, [r0, #16]
 8007600:	bd10      	pop	{r4, pc}
 8007602:	bf00      	nop
 8007604:	08009df3 	.word	0x08009df3
 8007608:	08009e04 	.word	0x08009e04

0800760c <__multiply>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	4691      	mov	r9, r2
 8007612:	690a      	ldr	r2, [r1, #16]
 8007614:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007618:	460c      	mov	r4, r1
 800761a:	429a      	cmp	r2, r3
 800761c:	bfbe      	ittt	lt
 800761e:	460b      	movlt	r3, r1
 8007620:	464c      	movlt	r4, r9
 8007622:	4699      	movlt	r9, r3
 8007624:	6927      	ldr	r7, [r4, #16]
 8007626:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	6861      	ldr	r1, [r4, #4]
 800762e:	eb07 060a 	add.w	r6, r7, sl
 8007632:	42b3      	cmp	r3, r6
 8007634:	b085      	sub	sp, #20
 8007636:	bfb8      	it	lt
 8007638:	3101      	addlt	r1, #1
 800763a:	f7ff fe91 	bl	8007360 <_Balloc>
 800763e:	b930      	cbnz	r0, 800764e <__multiply+0x42>
 8007640:	4602      	mov	r2, r0
 8007642:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007646:	4b43      	ldr	r3, [pc, #268]	; (8007754 <__multiply+0x148>)
 8007648:	4843      	ldr	r0, [pc, #268]	; (8007758 <__multiply+0x14c>)
 800764a:	f001 fdbb 	bl	80091c4 <__assert_func>
 800764e:	f100 0514 	add.w	r5, r0, #20
 8007652:	462b      	mov	r3, r5
 8007654:	2200      	movs	r2, #0
 8007656:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800765a:	4543      	cmp	r3, r8
 800765c:	d321      	bcc.n	80076a2 <__multiply+0x96>
 800765e:	f104 0314 	add.w	r3, r4, #20
 8007662:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007666:	f109 0314 	add.w	r3, r9, #20
 800766a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800766e:	9202      	str	r2, [sp, #8]
 8007670:	1b3a      	subs	r2, r7, r4
 8007672:	3a15      	subs	r2, #21
 8007674:	f022 0203 	bic.w	r2, r2, #3
 8007678:	3204      	adds	r2, #4
 800767a:	f104 0115 	add.w	r1, r4, #21
 800767e:	428f      	cmp	r7, r1
 8007680:	bf38      	it	cc
 8007682:	2204      	movcc	r2, #4
 8007684:	9201      	str	r2, [sp, #4]
 8007686:	9a02      	ldr	r2, [sp, #8]
 8007688:	9303      	str	r3, [sp, #12]
 800768a:	429a      	cmp	r2, r3
 800768c:	d80c      	bhi.n	80076a8 <__multiply+0x9c>
 800768e:	2e00      	cmp	r6, #0
 8007690:	dd03      	ble.n	800769a <__multiply+0x8e>
 8007692:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007696:	2b00      	cmp	r3, #0
 8007698:	d05a      	beq.n	8007750 <__multiply+0x144>
 800769a:	6106      	str	r6, [r0, #16]
 800769c:	b005      	add	sp, #20
 800769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a2:	f843 2b04 	str.w	r2, [r3], #4
 80076a6:	e7d8      	b.n	800765a <__multiply+0x4e>
 80076a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80076ac:	f1ba 0f00 	cmp.w	sl, #0
 80076b0:	d023      	beq.n	80076fa <__multiply+0xee>
 80076b2:	46a9      	mov	r9, r5
 80076b4:	f04f 0c00 	mov.w	ip, #0
 80076b8:	f104 0e14 	add.w	lr, r4, #20
 80076bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076c0:	f8d9 1000 	ldr.w	r1, [r9]
 80076c4:	fa1f fb82 	uxth.w	fp, r2
 80076c8:	b289      	uxth	r1, r1
 80076ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80076ce:	4461      	add	r1, ip
 80076d0:	f8d9 c000 	ldr.w	ip, [r9]
 80076d4:	0c12      	lsrs	r2, r2, #16
 80076d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80076da:	fb0a c202 	mla	r2, sl, r2, ip
 80076de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076e2:	b289      	uxth	r1, r1
 80076e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076e8:	4577      	cmp	r7, lr
 80076ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076ee:	f849 1b04 	str.w	r1, [r9], #4
 80076f2:	d8e3      	bhi.n	80076bc <__multiply+0xb0>
 80076f4:	9a01      	ldr	r2, [sp, #4]
 80076f6:	f845 c002 	str.w	ip, [r5, r2]
 80076fa:	9a03      	ldr	r2, [sp, #12]
 80076fc:	3304      	adds	r3, #4
 80076fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007702:	f1b9 0f00 	cmp.w	r9, #0
 8007706:	d021      	beq.n	800774c <__multiply+0x140>
 8007708:	46ae      	mov	lr, r5
 800770a:	f04f 0a00 	mov.w	sl, #0
 800770e:	6829      	ldr	r1, [r5, #0]
 8007710:	f104 0c14 	add.w	ip, r4, #20
 8007714:	f8bc b000 	ldrh.w	fp, [ip]
 8007718:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800771c:	b289      	uxth	r1, r1
 800771e:	fb09 220b 	mla	r2, r9, fp, r2
 8007722:	4452      	add	r2, sl
 8007724:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007728:	f84e 1b04 	str.w	r1, [lr], #4
 800772c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007730:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007734:	f8be 1000 	ldrh.w	r1, [lr]
 8007738:	4567      	cmp	r7, ip
 800773a:	fb09 110a 	mla	r1, r9, sl, r1
 800773e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007742:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007746:	d8e5      	bhi.n	8007714 <__multiply+0x108>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	50a9      	str	r1, [r5, r2]
 800774c:	3504      	adds	r5, #4
 800774e:	e79a      	b.n	8007686 <__multiply+0x7a>
 8007750:	3e01      	subs	r6, #1
 8007752:	e79c      	b.n	800768e <__multiply+0x82>
 8007754:	08009df3 	.word	0x08009df3
 8007758:	08009e04 	.word	0x08009e04

0800775c <__pow5mult>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4615      	mov	r5, r2
 8007762:	f012 0203 	ands.w	r2, r2, #3
 8007766:	4606      	mov	r6, r0
 8007768:	460f      	mov	r7, r1
 800776a:	d007      	beq.n	800777c <__pow5mult+0x20>
 800776c:	4c25      	ldr	r4, [pc, #148]	; (8007804 <__pow5mult+0xa8>)
 800776e:	3a01      	subs	r2, #1
 8007770:	2300      	movs	r3, #0
 8007772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007776:	f7ff fe55 	bl	8007424 <__multadd>
 800777a:	4607      	mov	r7, r0
 800777c:	10ad      	asrs	r5, r5, #2
 800777e:	d03d      	beq.n	80077fc <__pow5mult+0xa0>
 8007780:	69f4      	ldr	r4, [r6, #28]
 8007782:	b97c      	cbnz	r4, 80077a4 <__pow5mult+0x48>
 8007784:	2010      	movs	r0, #16
 8007786:	f7ff fd37 	bl	80071f8 <malloc>
 800778a:	4602      	mov	r2, r0
 800778c:	61f0      	str	r0, [r6, #28]
 800778e:	b928      	cbnz	r0, 800779c <__pow5mult+0x40>
 8007790:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007794:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <__pow5mult+0xac>)
 8007796:	481d      	ldr	r0, [pc, #116]	; (800780c <__pow5mult+0xb0>)
 8007798:	f001 fd14 	bl	80091c4 <__assert_func>
 800779c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077a0:	6004      	str	r4, [r0, #0]
 80077a2:	60c4      	str	r4, [r0, #12]
 80077a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077ac:	b94c      	cbnz	r4, 80077c2 <__pow5mult+0x66>
 80077ae:	f240 2171 	movw	r1, #625	; 0x271
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ff14 	bl	80075e0 <__i2b>
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80077c0:	6003      	str	r3, [r0, #0]
 80077c2:	f04f 0900 	mov.w	r9, #0
 80077c6:	07eb      	lsls	r3, r5, #31
 80077c8:	d50a      	bpl.n	80077e0 <__pow5mult+0x84>
 80077ca:	4639      	mov	r1, r7
 80077cc:	4622      	mov	r2, r4
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7ff ff1c 	bl	800760c <__multiply>
 80077d4:	4680      	mov	r8, r0
 80077d6:	4639      	mov	r1, r7
 80077d8:	4630      	mov	r0, r6
 80077da:	f7ff fe01 	bl	80073e0 <_Bfree>
 80077de:	4647      	mov	r7, r8
 80077e0:	106d      	asrs	r5, r5, #1
 80077e2:	d00b      	beq.n	80077fc <__pow5mult+0xa0>
 80077e4:	6820      	ldr	r0, [r4, #0]
 80077e6:	b938      	cbnz	r0, 80077f8 <__pow5mult+0x9c>
 80077e8:	4622      	mov	r2, r4
 80077ea:	4621      	mov	r1, r4
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff ff0d 	bl	800760c <__multiply>
 80077f2:	6020      	str	r0, [r4, #0]
 80077f4:	f8c0 9000 	str.w	r9, [r0]
 80077f8:	4604      	mov	r4, r0
 80077fa:	e7e4      	b.n	80077c6 <__pow5mult+0x6a>
 80077fc:	4638      	mov	r0, r7
 80077fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007802:	bf00      	nop
 8007804:	08009f50 	.word	0x08009f50
 8007808:	08009d84 	.word	0x08009d84
 800780c:	08009e04 	.word	0x08009e04

08007810 <__lshift>:
 8007810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	4607      	mov	r7, r0
 8007818:	4691      	mov	r9, r2
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	6849      	ldr	r1, [r1, #4]
 800781e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007822:	68a3      	ldr	r3, [r4, #8]
 8007824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007828:	f108 0601 	add.w	r6, r8, #1
 800782c:	42b3      	cmp	r3, r6
 800782e:	db0b      	blt.n	8007848 <__lshift+0x38>
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff fd95 	bl	8007360 <_Balloc>
 8007836:	4605      	mov	r5, r0
 8007838:	b948      	cbnz	r0, 800784e <__lshift+0x3e>
 800783a:	4602      	mov	r2, r0
 800783c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007840:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <__lshift+0xd0>)
 8007842:	4828      	ldr	r0, [pc, #160]	; (80078e4 <__lshift+0xd4>)
 8007844:	f001 fcbe 	bl	80091c4 <__assert_func>
 8007848:	3101      	adds	r1, #1
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	e7ee      	b.n	800782c <__lshift+0x1c>
 800784e:	2300      	movs	r3, #0
 8007850:	f100 0114 	add.w	r1, r0, #20
 8007854:	f100 0210 	add.w	r2, r0, #16
 8007858:	4618      	mov	r0, r3
 800785a:	4553      	cmp	r3, sl
 800785c:	db33      	blt.n	80078c6 <__lshift+0xb6>
 800785e:	6920      	ldr	r0, [r4, #16]
 8007860:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007864:	f104 0314 	add.w	r3, r4, #20
 8007868:	f019 091f 	ands.w	r9, r9, #31
 800786c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007870:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007874:	d02b      	beq.n	80078ce <__lshift+0xbe>
 8007876:	468a      	mov	sl, r1
 8007878:	2200      	movs	r2, #0
 800787a:	f1c9 0e20 	rsb	lr, r9, #32
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	fa00 f009 	lsl.w	r0, r0, r9
 8007884:	4310      	orrs	r0, r2
 8007886:	f84a 0b04 	str.w	r0, [sl], #4
 800788a:	f853 2b04 	ldr.w	r2, [r3], #4
 800788e:	459c      	cmp	ip, r3
 8007890:	fa22 f20e 	lsr.w	r2, r2, lr
 8007894:	d8f3      	bhi.n	800787e <__lshift+0x6e>
 8007896:	ebac 0304 	sub.w	r3, ip, r4
 800789a:	3b15      	subs	r3, #21
 800789c:	f023 0303 	bic.w	r3, r3, #3
 80078a0:	3304      	adds	r3, #4
 80078a2:	f104 0015 	add.w	r0, r4, #21
 80078a6:	4584      	cmp	ip, r0
 80078a8:	bf38      	it	cc
 80078aa:	2304      	movcc	r3, #4
 80078ac:	50ca      	str	r2, [r1, r3]
 80078ae:	b10a      	cbz	r2, 80078b4 <__lshift+0xa4>
 80078b0:	f108 0602 	add.w	r6, r8, #2
 80078b4:	3e01      	subs	r6, #1
 80078b6:	4638      	mov	r0, r7
 80078b8:	4621      	mov	r1, r4
 80078ba:	612e      	str	r6, [r5, #16]
 80078bc:	f7ff fd90 	bl	80073e0 <_Bfree>
 80078c0:	4628      	mov	r0, r5
 80078c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ca:	3301      	adds	r3, #1
 80078cc:	e7c5      	b.n	800785a <__lshift+0x4a>
 80078ce:	3904      	subs	r1, #4
 80078d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d4:	459c      	cmp	ip, r3
 80078d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80078da:	d8f9      	bhi.n	80078d0 <__lshift+0xc0>
 80078dc:	e7ea      	b.n	80078b4 <__lshift+0xa4>
 80078de:	bf00      	nop
 80078e0:	08009df3 	.word	0x08009df3
 80078e4:	08009e04 	.word	0x08009e04

080078e8 <__mcmp>:
 80078e8:	4603      	mov	r3, r0
 80078ea:	690a      	ldr	r2, [r1, #16]
 80078ec:	6900      	ldr	r0, [r0, #16]
 80078ee:	b530      	push	{r4, r5, lr}
 80078f0:	1a80      	subs	r0, r0, r2
 80078f2:	d10d      	bne.n	8007910 <__mcmp+0x28>
 80078f4:	3314      	adds	r3, #20
 80078f6:	3114      	adds	r1, #20
 80078f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007900:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007904:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007908:	4295      	cmp	r5, r2
 800790a:	d002      	beq.n	8007912 <__mcmp+0x2a>
 800790c:	d304      	bcc.n	8007918 <__mcmp+0x30>
 800790e:	2001      	movs	r0, #1
 8007910:	bd30      	pop	{r4, r5, pc}
 8007912:	42a3      	cmp	r3, r4
 8007914:	d3f4      	bcc.n	8007900 <__mcmp+0x18>
 8007916:	e7fb      	b.n	8007910 <__mcmp+0x28>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e7f8      	b.n	8007910 <__mcmp+0x28>
	...

08007920 <__mdiff>:
 8007920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	460d      	mov	r5, r1
 8007926:	4607      	mov	r7, r0
 8007928:	4611      	mov	r1, r2
 800792a:	4628      	mov	r0, r5
 800792c:	4614      	mov	r4, r2
 800792e:	f7ff ffdb 	bl	80078e8 <__mcmp>
 8007932:	1e06      	subs	r6, r0, #0
 8007934:	d111      	bne.n	800795a <__mdiff+0x3a>
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fd11 	bl	8007360 <_Balloc>
 800793e:	4602      	mov	r2, r0
 8007940:	b928      	cbnz	r0, 800794e <__mdiff+0x2e>
 8007942:	f240 2137 	movw	r1, #567	; 0x237
 8007946:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <__mdiff+0x110>)
 8007948:	483a      	ldr	r0, [pc, #232]	; (8007a34 <__mdiff+0x114>)
 800794a:	f001 fc3b 	bl	80091c4 <__assert_func>
 800794e:	2301      	movs	r3, #1
 8007950:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007954:	4610      	mov	r0, r2
 8007956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795a:	bfa4      	itt	ge
 800795c:	4623      	movge	r3, r4
 800795e:	462c      	movge	r4, r5
 8007960:	4638      	mov	r0, r7
 8007962:	6861      	ldr	r1, [r4, #4]
 8007964:	bfa6      	itte	ge
 8007966:	461d      	movge	r5, r3
 8007968:	2600      	movge	r6, #0
 800796a:	2601      	movlt	r6, #1
 800796c:	f7ff fcf8 	bl	8007360 <_Balloc>
 8007970:	4602      	mov	r2, r0
 8007972:	b918      	cbnz	r0, 800797c <__mdiff+0x5c>
 8007974:	f240 2145 	movw	r1, #581	; 0x245
 8007978:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <__mdiff+0x110>)
 800797a:	e7e5      	b.n	8007948 <__mdiff+0x28>
 800797c:	f102 0814 	add.w	r8, r2, #20
 8007980:	46c2      	mov	sl, r8
 8007982:	f04f 0c00 	mov.w	ip, #0
 8007986:	6927      	ldr	r7, [r4, #16]
 8007988:	60c6      	str	r6, [r0, #12]
 800798a:	692e      	ldr	r6, [r5, #16]
 800798c:	f104 0014 	add.w	r0, r4, #20
 8007990:	f105 0914 	add.w	r9, r5, #20
 8007994:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007998:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800799c:	3410      	adds	r4, #16
 800799e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80079a6:	fa1f f18b 	uxth.w	r1, fp
 80079aa:	4461      	add	r1, ip
 80079ac:	fa1f fc83 	uxth.w	ip, r3
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	eba1 010c 	sub.w	r1, r1, ip
 80079b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079be:	b289      	uxth	r1, r1
 80079c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80079c4:	454e      	cmp	r6, r9
 80079c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079ca:	f84a 1b04 	str.w	r1, [sl], #4
 80079ce:	d8e6      	bhi.n	800799e <__mdiff+0x7e>
 80079d0:	1b73      	subs	r3, r6, r5
 80079d2:	3b15      	subs	r3, #21
 80079d4:	f023 0303 	bic.w	r3, r3, #3
 80079d8:	3515      	adds	r5, #21
 80079da:	3304      	adds	r3, #4
 80079dc:	42ae      	cmp	r6, r5
 80079de:	bf38      	it	cc
 80079e0:	2304      	movcc	r3, #4
 80079e2:	4418      	add	r0, r3
 80079e4:	4443      	add	r3, r8
 80079e6:	461e      	mov	r6, r3
 80079e8:	4605      	mov	r5, r0
 80079ea:	4575      	cmp	r5, lr
 80079ec:	d30e      	bcc.n	8007a0c <__mdiff+0xec>
 80079ee:	f10e 0103 	add.w	r1, lr, #3
 80079f2:	1a09      	subs	r1, r1, r0
 80079f4:	f021 0103 	bic.w	r1, r1, #3
 80079f8:	3803      	subs	r0, #3
 80079fa:	4586      	cmp	lr, r0
 80079fc:	bf38      	it	cc
 80079fe:	2100      	movcc	r1, #0
 8007a00:	440b      	add	r3, r1
 8007a02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a06:	b189      	cbz	r1, 8007a2c <__mdiff+0x10c>
 8007a08:	6117      	str	r7, [r2, #16]
 8007a0a:	e7a3      	b.n	8007954 <__mdiff+0x34>
 8007a0c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a10:	fa1f f188 	uxth.w	r1, r8
 8007a14:	4461      	add	r1, ip
 8007a16:	140c      	asrs	r4, r1, #16
 8007a18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a1c:	b289      	uxth	r1, r1
 8007a1e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a22:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a26:	f846 1b04 	str.w	r1, [r6], #4
 8007a2a:	e7de      	b.n	80079ea <__mdiff+0xca>
 8007a2c:	3f01      	subs	r7, #1
 8007a2e:	e7e8      	b.n	8007a02 <__mdiff+0xe2>
 8007a30:	08009df3 	.word	0x08009df3
 8007a34:	08009e04 	.word	0x08009e04

08007a38 <__ulp>:
 8007a38:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <__ulp+0x3c>)
 8007a3a:	400b      	ands	r3, r1
 8007a3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dc08      	bgt.n	8007a56 <__ulp+0x1e>
 8007a44:	425b      	negs	r3, r3
 8007a46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a4e:	da04      	bge.n	8007a5a <__ulp+0x22>
 8007a50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a54:	4113      	asrs	r3, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	e008      	b.n	8007a6c <__ulp+0x34>
 8007a5a:	f1a2 0314 	sub.w	r3, r2, #20
 8007a5e:	2b1e      	cmp	r3, #30
 8007a60:	bfd6      	itet	le
 8007a62:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a66:	2201      	movgt	r2, #1
 8007a68:	40da      	lsrle	r2, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	7ff00000 	.word	0x7ff00000

08007a78 <__b2d>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	6905      	ldr	r5, [r0, #16]
 8007a7c:	f100 0714 	add.w	r7, r0, #20
 8007a80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007a84:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007a88:	1f2e      	subs	r6, r5, #4
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7ff fd5a 	bl	8007544 <__hi0bits>
 8007a90:	f1c0 0220 	rsb	r2, r0, #32
 8007a94:	280a      	cmp	r0, #10
 8007a96:	4603      	mov	r3, r0
 8007a98:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007b04 <__b2d+0x8c>
 8007a9c:	600a      	str	r2, [r1, #0]
 8007a9e:	dc12      	bgt.n	8007ac6 <__b2d+0x4e>
 8007aa0:	f1c0 0e0b 	rsb	lr, r0, #11
 8007aa4:	fa24 f20e 	lsr.w	r2, r4, lr
 8007aa8:	42b7      	cmp	r7, r6
 8007aaa:	ea42 010c 	orr.w	r1, r2, ip
 8007aae:	bf2c      	ite	cs
 8007ab0:	2200      	movcs	r2, #0
 8007ab2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007ab6:	3315      	adds	r3, #21
 8007ab8:	fa04 f303 	lsl.w	r3, r4, r3
 8007abc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac6:	42b7      	cmp	r7, r6
 8007ac8:	bf2e      	itee	cs
 8007aca:	2200      	movcs	r2, #0
 8007acc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007ad0:	f1a5 0608 	subcc.w	r6, r5, #8
 8007ad4:	3b0b      	subs	r3, #11
 8007ad6:	d012      	beq.n	8007afe <__b2d+0x86>
 8007ad8:	f1c3 0520 	rsb	r5, r3, #32
 8007adc:	fa22 f105 	lsr.w	r1, r2, r5
 8007ae0:	409c      	lsls	r4, r3
 8007ae2:	430c      	orrs	r4, r1
 8007ae4:	42be      	cmp	r6, r7
 8007ae6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007aea:	bf94      	ite	ls
 8007aec:	2400      	movls	r4, #0
 8007aee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007af2:	409a      	lsls	r2, r3
 8007af4:	40ec      	lsrs	r4, r5
 8007af6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007afa:	4322      	orrs	r2, r4
 8007afc:	e7e1      	b.n	8007ac2 <__b2d+0x4a>
 8007afe:	ea44 010c 	orr.w	r1, r4, ip
 8007b02:	e7de      	b.n	8007ac2 <__b2d+0x4a>
 8007b04:	3ff00000 	.word	0x3ff00000

08007b08 <__d2b>:
 8007b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	4617      	mov	r7, r2
 8007b0e:	461c      	mov	r4, r3
 8007b10:	9e08      	ldr	r6, [sp, #32]
 8007b12:	f7ff fc25 	bl	8007360 <_Balloc>
 8007b16:	4605      	mov	r5, r0
 8007b18:	b930      	cbnz	r0, 8007b28 <__d2b+0x20>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	f240 310f 	movw	r1, #783	; 0x30f
 8007b20:	4b22      	ldr	r3, [pc, #136]	; (8007bac <__d2b+0xa4>)
 8007b22:	4823      	ldr	r0, [pc, #140]	; (8007bb0 <__d2b+0xa8>)
 8007b24:	f001 fb4e 	bl	80091c4 <__assert_func>
 8007b28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007b2c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b30:	bb24      	cbnz	r4, 8007b7c <__d2b+0x74>
 8007b32:	2f00      	cmp	r7, #0
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	d026      	beq.n	8007b86 <__d2b+0x7e>
 8007b38:	4668      	mov	r0, sp
 8007b3a:	9700      	str	r7, [sp, #0]
 8007b3c:	f7ff fd22 	bl	8007584 <__lo0bits>
 8007b40:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b44:	b1e8      	cbz	r0, 8007b82 <__d2b+0x7a>
 8007b46:	f1c0 0320 	rsb	r3, r0, #32
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	40c2      	lsrs	r2, r0
 8007b52:	616b      	str	r3, [r5, #20]
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bf14      	ite	ne
 8007b5c:	2102      	movne	r1, #2
 8007b5e:	2101      	moveq	r1, #1
 8007b60:	61ab      	str	r3, [r5, #24]
 8007b62:	6129      	str	r1, [r5, #16]
 8007b64:	b1bc      	cbz	r4, 8007b96 <__d2b+0x8e>
 8007b66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b6a:	4404      	add	r4, r0
 8007b6c:	6034      	str	r4, [r6, #0]
 8007b6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b74:	6018      	str	r0, [r3, #0]
 8007b76:	4628      	mov	r0, r5
 8007b78:	b003      	add	sp, #12
 8007b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b80:	e7d7      	b.n	8007b32 <__d2b+0x2a>
 8007b82:	6169      	str	r1, [r5, #20]
 8007b84:	e7e7      	b.n	8007b56 <__d2b+0x4e>
 8007b86:	a801      	add	r0, sp, #4
 8007b88:	f7ff fcfc 	bl	8007584 <__lo0bits>
 8007b8c:	9b01      	ldr	r3, [sp, #4]
 8007b8e:	2101      	movs	r1, #1
 8007b90:	616b      	str	r3, [r5, #20]
 8007b92:	3020      	adds	r0, #32
 8007b94:	e7e5      	b.n	8007b62 <__d2b+0x5a>
 8007b96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b9a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007b9e:	6030      	str	r0, [r6, #0]
 8007ba0:	6918      	ldr	r0, [r3, #16]
 8007ba2:	f7ff fccf 	bl	8007544 <__hi0bits>
 8007ba6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007baa:	e7e2      	b.n	8007b72 <__d2b+0x6a>
 8007bac:	08009df3 	.word	0x08009df3
 8007bb0:	08009e04 	.word	0x08009e04

08007bb4 <__ratio>:
 8007bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	4688      	mov	r8, r1
 8007bba:	4669      	mov	r1, sp
 8007bbc:	4681      	mov	r9, r0
 8007bbe:	f7ff ff5b 	bl	8007a78 <__b2d>
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	4640      	mov	r0, r8
 8007bca:	a901      	add	r1, sp, #4
 8007bcc:	f7ff ff54 	bl	8007a78 <__b2d>
 8007bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bd4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007bd8:	468b      	mov	fp, r1
 8007bda:	eba3 0c02 	sub.w	ip, r3, r2
 8007bde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bfd5      	itete	le
 8007bec:	460a      	movle	r2, r1
 8007bee:	462a      	movgt	r2, r5
 8007bf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bf4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007bf8:	bfd8      	it	le
 8007bfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007bfe:	465b      	mov	r3, fp
 8007c00:	4602      	mov	r2, r0
 8007c02:	4639      	mov	r1, r7
 8007c04:	4620      	mov	r0, r4
 8007c06:	f7f8 fd91 	bl	800072c <__aeabi_ddiv>
 8007c0a:	b003      	add	sp, #12
 8007c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c10 <__copybits>:
 8007c10:	3901      	subs	r1, #1
 8007c12:	b570      	push	{r4, r5, r6, lr}
 8007c14:	1149      	asrs	r1, r1, #5
 8007c16:	6914      	ldr	r4, [r2, #16]
 8007c18:	3101      	adds	r1, #1
 8007c1a:	f102 0314 	add.w	r3, r2, #20
 8007c1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c26:	1f05      	subs	r5, r0, #4
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d30c      	bcc.n	8007c46 <__copybits+0x36>
 8007c2c:	1aa3      	subs	r3, r4, r2
 8007c2e:	3b11      	subs	r3, #17
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	3211      	adds	r2, #17
 8007c36:	42a2      	cmp	r2, r4
 8007c38:	bf88      	it	hi
 8007c3a:	2300      	movhi	r3, #0
 8007c3c:	4418      	add	r0, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4288      	cmp	r0, r1
 8007c42:	d305      	bcc.n	8007c50 <__copybits+0x40>
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c4e:	e7eb      	b.n	8007c28 <__copybits+0x18>
 8007c50:	f840 3b04 	str.w	r3, [r0], #4
 8007c54:	e7f4      	b.n	8007c40 <__copybits+0x30>

08007c56 <__any_on>:
 8007c56:	f100 0214 	add.w	r2, r0, #20
 8007c5a:	6900      	ldr	r0, [r0, #16]
 8007c5c:	114b      	asrs	r3, r1, #5
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	b510      	push	{r4, lr}
 8007c62:	db11      	blt.n	8007c88 <__any_on+0x32>
 8007c64:	dd0a      	ble.n	8007c7c <__any_on+0x26>
 8007c66:	f011 011f 	ands.w	r1, r1, #31
 8007c6a:	d007      	beq.n	8007c7c <__any_on+0x26>
 8007c6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c70:	fa24 f001 	lsr.w	r0, r4, r1
 8007c74:	fa00 f101 	lsl.w	r1, r0, r1
 8007c78:	428c      	cmp	r4, r1
 8007c7a:	d10b      	bne.n	8007c94 <__any_on+0x3e>
 8007c7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d803      	bhi.n	8007c8c <__any_on+0x36>
 8007c84:	2000      	movs	r0, #0
 8007c86:	bd10      	pop	{r4, pc}
 8007c88:	4603      	mov	r3, r0
 8007c8a:	e7f7      	b.n	8007c7c <__any_on+0x26>
 8007c8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d0f5      	beq.n	8007c80 <__any_on+0x2a>
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7f6      	b.n	8007c86 <__any_on+0x30>

08007c98 <sulp>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	4690      	mov	r8, r2
 8007ca0:	f7ff feca 	bl	8007a38 <__ulp>
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	f1b8 0f00 	cmp.w	r8, #0
 8007cac:	d011      	beq.n	8007cd2 <sulp+0x3a>
 8007cae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007cb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd0b      	ble.n	8007cd2 <sulp+0x3a>
 8007cba:	2400      	movs	r4, #0
 8007cbc:	051b      	lsls	r3, r3, #20
 8007cbe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fc05 	bl	80004d8 <__aeabi_dmul>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cda:	0000      	movs	r0, r0
 8007cdc:	0000      	movs	r0, r0
	...

08007ce0 <_strtod_l>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	b09f      	sub	sp, #124	; 0x7c
 8007ce6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4604      	mov	r4, r0
 8007cec:	921a      	str	r2, [sp, #104]	; 0x68
 8007cee:	460d      	mov	r5, r1
 8007cf0:	f04f 0800 	mov.w	r8, #0
 8007cf4:	f04f 0900 	mov.w	r9, #0
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	9219      	str	r2, [sp, #100]	; 0x64
 8007cfc:	7811      	ldrb	r1, [r2, #0]
 8007cfe:	292b      	cmp	r1, #43	; 0x2b
 8007d00:	d04a      	beq.n	8007d98 <_strtod_l+0xb8>
 8007d02:	d838      	bhi.n	8007d76 <_strtod_l+0x96>
 8007d04:	290d      	cmp	r1, #13
 8007d06:	d832      	bhi.n	8007d6e <_strtod_l+0x8e>
 8007d08:	2908      	cmp	r1, #8
 8007d0a:	d832      	bhi.n	8007d72 <_strtod_l+0x92>
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d03b      	beq.n	8007d88 <_strtod_l+0xa8>
 8007d10:	2200      	movs	r2, #0
 8007d12:	920e      	str	r2, [sp, #56]	; 0x38
 8007d14:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007d16:	7832      	ldrb	r2, [r6, #0]
 8007d18:	2a30      	cmp	r2, #48	; 0x30
 8007d1a:	f040 80b2 	bne.w	8007e82 <_strtod_l+0x1a2>
 8007d1e:	7872      	ldrb	r2, [r6, #1]
 8007d20:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d24:	2a58      	cmp	r2, #88	; 0x58
 8007d26:	d16e      	bne.n	8007e06 <_strtod_l+0x126>
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	ab1a      	add	r3, sp, #104	; 0x68
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4a8c      	ldr	r2, [pc, #560]	; (8007f68 <_strtod_l+0x288>)
 8007d36:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d38:	a919      	add	r1, sp, #100	; 0x64
 8007d3a:	f001 fadd 	bl	80092f8 <__gethex>
 8007d3e:	f010 070f 	ands.w	r7, r0, #15
 8007d42:	4605      	mov	r5, r0
 8007d44:	d005      	beq.n	8007d52 <_strtod_l+0x72>
 8007d46:	2f06      	cmp	r7, #6
 8007d48:	d128      	bne.n	8007d9c <_strtod_l+0xbc>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	3601      	adds	r6, #1
 8007d4e:	9619      	str	r6, [sp, #100]	; 0x64
 8007d50:	930e      	str	r3, [sp, #56]	; 0x38
 8007d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 85a0 	bne.w	800889a <_strtod_l+0xbba>
 8007d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d5c:	b1cb      	cbz	r3, 8007d92 <_strtod_l+0xb2>
 8007d5e:	4642      	mov	r2, r8
 8007d60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	b01f      	add	sp, #124	; 0x7c
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	2920      	cmp	r1, #32
 8007d70:	d1ce      	bne.n	8007d10 <_strtod_l+0x30>
 8007d72:	3201      	adds	r2, #1
 8007d74:	e7c1      	b.n	8007cfa <_strtod_l+0x1a>
 8007d76:	292d      	cmp	r1, #45	; 0x2d
 8007d78:	d1ca      	bne.n	8007d10 <_strtod_l+0x30>
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	910e      	str	r1, [sp, #56]	; 0x38
 8007d7e:	1c51      	adds	r1, r2, #1
 8007d80:	9119      	str	r1, [sp, #100]	; 0x64
 8007d82:	7852      	ldrb	r2, [r2, #1]
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	d1c5      	bne.n	8007d14 <_strtod_l+0x34>
 8007d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d8a:	9519      	str	r5, [sp, #100]	; 0x64
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 8582 	bne.w	8008896 <_strtod_l+0xbb6>
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
 8007d96:	e7e5      	b.n	8007d64 <_strtod_l+0x84>
 8007d98:	2100      	movs	r1, #0
 8007d9a:	e7ef      	b.n	8007d7c <_strtod_l+0x9c>
 8007d9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d9e:	b13a      	cbz	r2, 8007db0 <_strtod_l+0xd0>
 8007da0:	2135      	movs	r1, #53	; 0x35
 8007da2:	a81c      	add	r0, sp, #112	; 0x70
 8007da4:	f7ff ff34 	bl	8007c10 <__copybits>
 8007da8:	4620      	mov	r0, r4
 8007daa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007dac:	f7ff fb18 	bl	80073e0 <_Bfree>
 8007db0:	3f01      	subs	r7, #1
 8007db2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007db4:	2f04      	cmp	r7, #4
 8007db6:	d806      	bhi.n	8007dc6 <_strtod_l+0xe6>
 8007db8:	e8df f007 	tbb	[pc, r7]
 8007dbc:	201d0314 	.word	0x201d0314
 8007dc0:	14          	.byte	0x14
 8007dc1:	00          	.byte	0x00
 8007dc2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007dc6:	05e9      	lsls	r1, r5, #23
 8007dc8:	bf48      	it	mi
 8007dca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007dce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dd2:	0d1b      	lsrs	r3, r3, #20
 8007dd4:	051b      	lsls	r3, r3, #20
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1bb      	bne.n	8007d52 <_strtod_l+0x72>
 8007dda:	f7fe fb07 	bl	80063ec <__errno>
 8007dde:	2322      	movs	r3, #34	; 0x22
 8007de0:	6003      	str	r3, [r0, #0]
 8007de2:	e7b6      	b.n	8007d52 <_strtod_l+0x72>
 8007de4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007de8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007dec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007df0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007df4:	e7e7      	b.n	8007dc6 <_strtod_l+0xe6>
 8007df6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007f6c <_strtod_l+0x28c>
 8007dfa:	e7e4      	b.n	8007dc6 <_strtod_l+0xe6>
 8007dfc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007e00:	f04f 38ff 	mov.w	r8, #4294967295
 8007e04:	e7df      	b.n	8007dc6 <_strtod_l+0xe6>
 8007e06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	9219      	str	r2, [sp, #100]	; 0x64
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b30      	cmp	r3, #48	; 0x30
 8007e10:	d0f9      	beq.n	8007e06 <_strtod_l+0x126>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d09d      	beq.n	8007d52 <_strtod_l+0x72>
 8007e16:	2301      	movs	r3, #1
 8007e18:	f04f 0a00 	mov.w	sl, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	46d3      	mov	fp, sl
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e24:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007e2c:	7806      	ldrb	r6, [r0, #0]
 8007e2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e32:	b2d9      	uxtb	r1, r3
 8007e34:	2909      	cmp	r1, #9
 8007e36:	d926      	bls.n	8007e86 <_strtod_l+0x1a6>
 8007e38:	2201      	movs	r2, #1
 8007e3a:	494d      	ldr	r1, [pc, #308]	; (8007f70 <_strtod_l+0x290>)
 8007e3c:	f7fe fa64 	bl	8006308 <strncmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d030      	beq.n	8007ea6 <_strtod_l+0x1c6>
 8007e44:	2000      	movs	r0, #0
 8007e46:	4632      	mov	r2, r6
 8007e48:	4603      	mov	r3, r0
 8007e4a:	465e      	mov	r6, fp
 8007e4c:	9008      	str	r0, [sp, #32]
 8007e4e:	2a65      	cmp	r2, #101	; 0x65
 8007e50:	d001      	beq.n	8007e56 <_strtod_l+0x176>
 8007e52:	2a45      	cmp	r2, #69	; 0x45
 8007e54:	d113      	bne.n	8007e7e <_strtod_l+0x19e>
 8007e56:	b91e      	cbnz	r6, 8007e60 <_strtod_l+0x180>
 8007e58:	9a05      	ldr	r2, [sp, #20]
 8007e5a:	4302      	orrs	r2, r0
 8007e5c:	d094      	beq.n	8007d88 <_strtod_l+0xa8>
 8007e5e:	2600      	movs	r6, #0
 8007e60:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007e62:	1c6a      	adds	r2, r5, #1
 8007e64:	9219      	str	r2, [sp, #100]	; 0x64
 8007e66:	786a      	ldrb	r2, [r5, #1]
 8007e68:	2a2b      	cmp	r2, #43	; 0x2b
 8007e6a:	d074      	beq.n	8007f56 <_strtod_l+0x276>
 8007e6c:	2a2d      	cmp	r2, #45	; 0x2d
 8007e6e:	d078      	beq.n	8007f62 <_strtod_l+0x282>
 8007e70:	f04f 0c00 	mov.w	ip, #0
 8007e74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e78:	2909      	cmp	r1, #9
 8007e7a:	d97f      	bls.n	8007f7c <_strtod_l+0x29c>
 8007e7c:	9519      	str	r5, [sp, #100]	; 0x64
 8007e7e:	2700      	movs	r7, #0
 8007e80:	e09e      	b.n	8007fc0 <_strtod_l+0x2e0>
 8007e82:	2300      	movs	r3, #0
 8007e84:	e7c8      	b.n	8007e18 <_strtod_l+0x138>
 8007e86:	f1bb 0f08 	cmp.w	fp, #8
 8007e8a:	bfd8      	it	le
 8007e8c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007e8e:	f100 0001 	add.w	r0, r0, #1
 8007e92:	bfd6      	itet	le
 8007e94:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e98:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007e9c:	930a      	strle	r3, [sp, #40]	; 0x28
 8007e9e:	f10b 0b01 	add.w	fp, fp, #1
 8007ea2:	9019      	str	r0, [sp, #100]	; 0x64
 8007ea4:	e7c1      	b.n	8007e2a <_strtod_l+0x14a>
 8007ea6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	9219      	str	r2, [sp, #100]	; 0x64
 8007eac:	785a      	ldrb	r2, [r3, #1]
 8007eae:	f1bb 0f00 	cmp.w	fp, #0
 8007eb2:	d037      	beq.n	8007f24 <_strtod_l+0x244>
 8007eb4:	465e      	mov	r6, fp
 8007eb6:	9008      	str	r0, [sp, #32]
 8007eb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ebc:	2b09      	cmp	r3, #9
 8007ebe:	d912      	bls.n	8007ee6 <_strtod_l+0x206>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e7c4      	b.n	8007e4e <_strtod_l+0x16e>
 8007ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	9219      	str	r2, [sp, #100]	; 0x64
 8007ecc:	785a      	ldrb	r2, [r3, #1]
 8007ece:	2a30      	cmp	r2, #48	; 0x30
 8007ed0:	d0f8      	beq.n	8007ec4 <_strtod_l+0x1e4>
 8007ed2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	f200 84e4 	bhi.w	80088a4 <_strtod_l+0xbc4>
 8007edc:	9008      	str	r0, [sp, #32]
 8007ede:	2000      	movs	r0, #0
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ee6:	3a30      	subs	r2, #48	; 0x30
 8007ee8:	f100 0301 	add.w	r3, r0, #1
 8007eec:	d014      	beq.n	8007f18 <_strtod_l+0x238>
 8007eee:	9908      	ldr	r1, [sp, #32]
 8007ef0:	eb00 0c06 	add.w	ip, r0, r6
 8007ef4:	4419      	add	r1, r3
 8007ef6:	9108      	str	r1, [sp, #32]
 8007ef8:	4633      	mov	r3, r6
 8007efa:	210a      	movs	r1, #10
 8007efc:	4563      	cmp	r3, ip
 8007efe:	d113      	bne.n	8007f28 <_strtod_l+0x248>
 8007f00:	1833      	adds	r3, r6, r0
 8007f02:	2b08      	cmp	r3, #8
 8007f04:	f106 0601 	add.w	r6, r6, #1
 8007f08:	4406      	add	r6, r0
 8007f0a:	dc1a      	bgt.n	8007f42 <_strtod_l+0x262>
 8007f0c:	230a      	movs	r3, #10
 8007f0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f10:	fb03 2301 	mla	r3, r3, r1, r2
 8007f14:	930a      	str	r3, [sp, #40]	; 0x28
 8007f16:	2300      	movs	r3, #0
 8007f18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	1c51      	adds	r1, r2, #1
 8007f1e:	9119      	str	r1, [sp, #100]	; 0x64
 8007f20:	7852      	ldrb	r2, [r2, #1]
 8007f22:	e7c9      	b.n	8007eb8 <_strtod_l+0x1d8>
 8007f24:	4658      	mov	r0, fp
 8007f26:	e7d2      	b.n	8007ece <_strtod_l+0x1ee>
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	f103 0301 	add.w	r3, r3, #1
 8007f2e:	dc03      	bgt.n	8007f38 <_strtod_l+0x258>
 8007f30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007f32:	434f      	muls	r7, r1
 8007f34:	970a      	str	r7, [sp, #40]	; 0x28
 8007f36:	e7e1      	b.n	8007efc <_strtod_l+0x21c>
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	bfd8      	it	le
 8007f3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007f40:	e7dc      	b.n	8007efc <_strtod_l+0x21c>
 8007f42:	2e10      	cmp	r6, #16
 8007f44:	bfdc      	itt	le
 8007f46:	230a      	movle	r3, #10
 8007f48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007f4c:	e7e3      	b.n	8007f16 <_strtod_l+0x236>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9308      	str	r3, [sp, #32]
 8007f52:	2301      	movs	r3, #1
 8007f54:	e780      	b.n	8007e58 <_strtod_l+0x178>
 8007f56:	f04f 0c00 	mov.w	ip, #0
 8007f5a:	1caa      	adds	r2, r5, #2
 8007f5c:	9219      	str	r2, [sp, #100]	; 0x64
 8007f5e:	78aa      	ldrb	r2, [r5, #2]
 8007f60:	e788      	b.n	8007e74 <_strtod_l+0x194>
 8007f62:	f04f 0c01 	mov.w	ip, #1
 8007f66:	e7f8      	b.n	8007f5a <_strtod_l+0x27a>
 8007f68:	08009f60 	.word	0x08009f60
 8007f6c:	7ff00000 	.word	0x7ff00000
 8007f70:	08009f5c 	.word	0x08009f5c
 8007f74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f76:	1c51      	adds	r1, r2, #1
 8007f78:	9119      	str	r1, [sp, #100]	; 0x64
 8007f7a:	7852      	ldrb	r2, [r2, #1]
 8007f7c:	2a30      	cmp	r2, #48	; 0x30
 8007f7e:	d0f9      	beq.n	8007f74 <_strtod_l+0x294>
 8007f80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f84:	2908      	cmp	r1, #8
 8007f86:	f63f af7a 	bhi.w	8007e7e <_strtod_l+0x19e>
 8007f8a:	3a30      	subs	r2, #48	; 0x30
 8007f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f90:	920c      	str	r2, [sp, #48]	; 0x30
 8007f92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f94:	1c57      	adds	r7, r2, #1
 8007f96:	9719      	str	r7, [sp, #100]	; 0x64
 8007f98:	7852      	ldrb	r2, [r2, #1]
 8007f9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007f9e:	f1be 0f09 	cmp.w	lr, #9
 8007fa2:	d938      	bls.n	8008016 <_strtod_l+0x336>
 8007fa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fa6:	1a7f      	subs	r7, r7, r1
 8007fa8:	2f08      	cmp	r7, #8
 8007faa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007fae:	dc03      	bgt.n	8007fb8 <_strtod_l+0x2d8>
 8007fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fb2:	428f      	cmp	r7, r1
 8007fb4:	bfa8      	it	ge
 8007fb6:	460f      	movge	r7, r1
 8007fb8:	f1bc 0f00 	cmp.w	ip, #0
 8007fbc:	d000      	beq.n	8007fc0 <_strtod_l+0x2e0>
 8007fbe:	427f      	negs	r7, r7
 8007fc0:	2e00      	cmp	r6, #0
 8007fc2:	d14f      	bne.n	8008064 <_strtod_l+0x384>
 8007fc4:	9905      	ldr	r1, [sp, #20]
 8007fc6:	4301      	orrs	r1, r0
 8007fc8:	f47f aec3 	bne.w	8007d52 <_strtod_l+0x72>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f47f aedb 	bne.w	8007d88 <_strtod_l+0xa8>
 8007fd2:	2a69      	cmp	r2, #105	; 0x69
 8007fd4:	d029      	beq.n	800802a <_strtod_l+0x34a>
 8007fd6:	dc26      	bgt.n	8008026 <_strtod_l+0x346>
 8007fd8:	2a49      	cmp	r2, #73	; 0x49
 8007fda:	d026      	beq.n	800802a <_strtod_l+0x34a>
 8007fdc:	2a4e      	cmp	r2, #78	; 0x4e
 8007fde:	f47f aed3 	bne.w	8007d88 <_strtod_l+0xa8>
 8007fe2:	499a      	ldr	r1, [pc, #616]	; (800824c <_strtod_l+0x56c>)
 8007fe4:	a819      	add	r0, sp, #100	; 0x64
 8007fe6:	f001 fbc9 	bl	800977c <__match>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f43f aecc 	beq.w	8007d88 <_strtod_l+0xa8>
 8007ff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b28      	cmp	r3, #40	; 0x28
 8007ff6:	d12f      	bne.n	8008058 <_strtod_l+0x378>
 8007ff8:	4995      	ldr	r1, [pc, #596]	; (8008250 <_strtod_l+0x570>)
 8007ffa:	aa1c      	add	r2, sp, #112	; 0x70
 8007ffc:	a819      	add	r0, sp, #100	; 0x64
 8007ffe:	f001 fbd1 	bl	80097a4 <__hexnan>
 8008002:	2805      	cmp	r0, #5
 8008004:	d128      	bne.n	8008058 <_strtod_l+0x378>
 8008006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008008:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800800c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008010:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008014:	e69d      	b.n	8007d52 <_strtod_l+0x72>
 8008016:	210a      	movs	r1, #10
 8008018:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800801a:	fb01 2107 	mla	r1, r1, r7, r2
 800801e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008022:	9209      	str	r2, [sp, #36]	; 0x24
 8008024:	e7b5      	b.n	8007f92 <_strtod_l+0x2b2>
 8008026:	2a6e      	cmp	r2, #110	; 0x6e
 8008028:	e7d9      	b.n	8007fde <_strtod_l+0x2fe>
 800802a:	498a      	ldr	r1, [pc, #552]	; (8008254 <_strtod_l+0x574>)
 800802c:	a819      	add	r0, sp, #100	; 0x64
 800802e:	f001 fba5 	bl	800977c <__match>
 8008032:	2800      	cmp	r0, #0
 8008034:	f43f aea8 	beq.w	8007d88 <_strtod_l+0xa8>
 8008038:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800803a:	4987      	ldr	r1, [pc, #540]	; (8008258 <_strtod_l+0x578>)
 800803c:	3b01      	subs	r3, #1
 800803e:	a819      	add	r0, sp, #100	; 0x64
 8008040:	9319      	str	r3, [sp, #100]	; 0x64
 8008042:	f001 fb9b 	bl	800977c <__match>
 8008046:	b910      	cbnz	r0, 800804e <_strtod_l+0x36e>
 8008048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800804a:	3301      	adds	r3, #1
 800804c:	9319      	str	r3, [sp, #100]	; 0x64
 800804e:	f04f 0800 	mov.w	r8, #0
 8008052:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800825c <_strtod_l+0x57c>
 8008056:	e67c      	b.n	8007d52 <_strtod_l+0x72>
 8008058:	4881      	ldr	r0, [pc, #516]	; (8008260 <_strtod_l+0x580>)
 800805a:	f001 f8ad 	bl	80091b8 <nan>
 800805e:	4680      	mov	r8, r0
 8008060:	4689      	mov	r9, r1
 8008062:	e676      	b.n	8007d52 <_strtod_l+0x72>
 8008064:	9b08      	ldr	r3, [sp, #32]
 8008066:	f1bb 0f00 	cmp.w	fp, #0
 800806a:	bf08      	it	eq
 800806c:	46b3      	moveq	fp, r6
 800806e:	1afb      	subs	r3, r7, r3
 8008070:	2e10      	cmp	r6, #16
 8008072:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008074:	4635      	mov	r5, r6
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	bfa8      	it	ge
 800807a:	2510      	movge	r5, #16
 800807c:	f7f8 f9b2 	bl	80003e4 <__aeabi_ui2d>
 8008080:	2e09      	cmp	r6, #9
 8008082:	4680      	mov	r8, r0
 8008084:	4689      	mov	r9, r1
 8008086:	dd13      	ble.n	80080b0 <_strtod_l+0x3d0>
 8008088:	4b76      	ldr	r3, [pc, #472]	; (8008264 <_strtod_l+0x584>)
 800808a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800808e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008092:	f7f8 fa21 	bl	80004d8 <__aeabi_dmul>
 8008096:	4680      	mov	r8, r0
 8008098:	4650      	mov	r0, sl
 800809a:	4689      	mov	r9, r1
 800809c:	f7f8 f9a2 	bl	80003e4 <__aeabi_ui2d>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 f860 	bl	800016c <__adddf3>
 80080ac:	4680      	mov	r8, r0
 80080ae:	4689      	mov	r9, r1
 80080b0:	2e0f      	cmp	r6, #15
 80080b2:	dc36      	bgt.n	8008122 <_strtod_l+0x442>
 80080b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f43f ae4b 	beq.w	8007d52 <_strtod_l+0x72>
 80080bc:	dd22      	ble.n	8008104 <_strtod_l+0x424>
 80080be:	2b16      	cmp	r3, #22
 80080c0:	dc09      	bgt.n	80080d6 <_strtod_l+0x3f6>
 80080c2:	4968      	ldr	r1, [pc, #416]	; (8008264 <_strtod_l+0x584>)
 80080c4:	4642      	mov	r2, r8
 80080c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080ca:	464b      	mov	r3, r9
 80080cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d0:	f7f8 fa02 	bl	80004d8 <__aeabi_dmul>
 80080d4:	e7c3      	b.n	800805e <_strtod_l+0x37e>
 80080d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80080dc:	4293      	cmp	r3, r2
 80080de:	db20      	blt.n	8008122 <_strtod_l+0x442>
 80080e0:	4c60      	ldr	r4, [pc, #384]	; (8008264 <_strtod_l+0x584>)
 80080e2:	f1c6 060f 	rsb	r6, r6, #15
 80080e6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80080ea:	4642      	mov	r2, r8
 80080ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f0:	464b      	mov	r3, r9
 80080f2:	f7f8 f9f1 	bl	80004d8 <__aeabi_dmul>
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	1b9e      	subs	r6, r3, r6
 80080fa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80080fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008102:	e7e5      	b.n	80080d0 <_strtod_l+0x3f0>
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	3316      	adds	r3, #22
 8008108:	db0b      	blt.n	8008122 <_strtod_l+0x442>
 800810a:	9b08      	ldr	r3, [sp, #32]
 800810c:	4640      	mov	r0, r8
 800810e:	1bdf      	subs	r7, r3, r7
 8008110:	4b54      	ldr	r3, [pc, #336]	; (8008264 <_strtod_l+0x584>)
 8008112:	4649      	mov	r1, r9
 8008114:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800811c:	f7f8 fb06 	bl	800072c <__aeabi_ddiv>
 8008120:	e79d      	b.n	800805e <_strtod_l+0x37e>
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008124:	1b75      	subs	r5, r6, r5
 8008126:	441d      	add	r5, r3
 8008128:	2d00      	cmp	r5, #0
 800812a:	dd70      	ble.n	800820e <_strtod_l+0x52e>
 800812c:	f015 030f 	ands.w	r3, r5, #15
 8008130:	d00a      	beq.n	8008148 <_strtod_l+0x468>
 8008132:	494c      	ldr	r1, [pc, #304]	; (8008264 <_strtod_l+0x584>)
 8008134:	4642      	mov	r2, r8
 8008136:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800813a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813e:	464b      	mov	r3, r9
 8008140:	f7f8 f9ca 	bl	80004d8 <__aeabi_dmul>
 8008144:	4680      	mov	r8, r0
 8008146:	4689      	mov	r9, r1
 8008148:	f035 050f 	bics.w	r5, r5, #15
 800814c:	d04d      	beq.n	80081ea <_strtod_l+0x50a>
 800814e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008152:	dd22      	ble.n	800819a <_strtod_l+0x4ba>
 8008154:	2600      	movs	r6, #0
 8008156:	46b3      	mov	fp, r6
 8008158:	960b      	str	r6, [sp, #44]	; 0x2c
 800815a:	9608      	str	r6, [sp, #32]
 800815c:	2322      	movs	r3, #34	; 0x22
 800815e:	f04f 0800 	mov.w	r8, #0
 8008162:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800825c <_strtod_l+0x57c>
 8008166:	6023      	str	r3, [r4, #0]
 8008168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816a:	2b00      	cmp	r3, #0
 800816c:	f43f adf1 	beq.w	8007d52 <_strtod_l+0x72>
 8008170:	4620      	mov	r0, r4
 8008172:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008174:	f7ff f934 	bl	80073e0 <_Bfree>
 8008178:	4620      	mov	r0, r4
 800817a:	9908      	ldr	r1, [sp, #32]
 800817c:	f7ff f930 	bl	80073e0 <_Bfree>
 8008180:	4659      	mov	r1, fp
 8008182:	4620      	mov	r0, r4
 8008184:	f7ff f92c 	bl	80073e0 <_Bfree>
 8008188:	4620      	mov	r0, r4
 800818a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800818c:	f7ff f928 	bl	80073e0 <_Bfree>
 8008190:	4631      	mov	r1, r6
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff f924 	bl	80073e0 <_Bfree>
 8008198:	e5db      	b.n	8007d52 <_strtod_l+0x72>
 800819a:	4b33      	ldr	r3, [pc, #204]	; (8008268 <_strtod_l+0x588>)
 800819c:	4640      	mov	r0, r8
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	2300      	movs	r3, #0
 80081a2:	4649      	mov	r1, r9
 80081a4:	469a      	mov	sl, r3
 80081a6:	112d      	asrs	r5, r5, #4
 80081a8:	2d01      	cmp	r5, #1
 80081aa:	dc21      	bgt.n	80081f0 <_strtod_l+0x510>
 80081ac:	b10b      	cbz	r3, 80081b2 <_strtod_l+0x4d2>
 80081ae:	4680      	mov	r8, r0
 80081b0:	4689      	mov	r9, r1
 80081b2:	492d      	ldr	r1, [pc, #180]	; (8008268 <_strtod_l+0x588>)
 80081b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80081b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80081bc:	4642      	mov	r2, r8
 80081be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c2:	464b      	mov	r3, r9
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	4b24      	ldr	r3, [pc, #144]	; (800825c <_strtod_l+0x57c>)
 80081ca:	460a      	mov	r2, r1
 80081cc:	400b      	ands	r3, r1
 80081ce:	4927      	ldr	r1, [pc, #156]	; (800826c <_strtod_l+0x58c>)
 80081d0:	4680      	mov	r8, r0
 80081d2:	428b      	cmp	r3, r1
 80081d4:	d8be      	bhi.n	8008154 <_strtod_l+0x474>
 80081d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081da:	428b      	cmp	r3, r1
 80081dc:	bf86      	itte	hi
 80081de:	f04f 38ff 	movhi.w	r8, #4294967295
 80081e2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008270 <_strtod_l+0x590>
 80081e6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80081ea:	2300      	movs	r3, #0
 80081ec:	9305      	str	r3, [sp, #20]
 80081ee:	e07b      	b.n	80082e8 <_strtod_l+0x608>
 80081f0:	07ea      	lsls	r2, r5, #31
 80081f2:	d505      	bpl.n	8008200 <_strtod_l+0x520>
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f7f8 f96d 	bl	80004d8 <__aeabi_dmul>
 80081fe:	2301      	movs	r3, #1
 8008200:	9a05      	ldr	r2, [sp, #20]
 8008202:	f10a 0a01 	add.w	sl, sl, #1
 8008206:	3208      	adds	r2, #8
 8008208:	106d      	asrs	r5, r5, #1
 800820a:	9205      	str	r2, [sp, #20]
 800820c:	e7cc      	b.n	80081a8 <_strtod_l+0x4c8>
 800820e:	d0ec      	beq.n	80081ea <_strtod_l+0x50a>
 8008210:	426d      	negs	r5, r5
 8008212:	f015 020f 	ands.w	r2, r5, #15
 8008216:	d00a      	beq.n	800822e <_strtod_l+0x54e>
 8008218:	4b12      	ldr	r3, [pc, #72]	; (8008264 <_strtod_l+0x584>)
 800821a:	4640      	mov	r0, r8
 800821c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008220:	4649      	mov	r1, r9
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 fa81 	bl	800072c <__aeabi_ddiv>
 800822a:	4680      	mov	r8, r0
 800822c:	4689      	mov	r9, r1
 800822e:	112d      	asrs	r5, r5, #4
 8008230:	d0db      	beq.n	80081ea <_strtod_l+0x50a>
 8008232:	2d1f      	cmp	r5, #31
 8008234:	dd1e      	ble.n	8008274 <_strtod_l+0x594>
 8008236:	2600      	movs	r6, #0
 8008238:	46b3      	mov	fp, r6
 800823a:	960b      	str	r6, [sp, #44]	; 0x2c
 800823c:	9608      	str	r6, [sp, #32]
 800823e:	2322      	movs	r3, #34	; 0x22
 8008240:	f04f 0800 	mov.w	r8, #0
 8008244:	f04f 0900 	mov.w	r9, #0
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	e78d      	b.n	8008168 <_strtod_l+0x488>
 800824c:	08009d4b 	.word	0x08009d4b
 8008250:	08009f74 	.word	0x08009f74
 8008254:	08009d43 	.word	0x08009d43
 8008258:	08009d7a 	.word	0x08009d7a
 800825c:	7ff00000 	.word	0x7ff00000
 8008260:	0800a105 	.word	0x0800a105
 8008264:	08009e88 	.word	0x08009e88
 8008268:	08009e60 	.word	0x08009e60
 800826c:	7ca00000 	.word	0x7ca00000
 8008270:	7fefffff 	.word	0x7fefffff
 8008274:	f015 0310 	ands.w	r3, r5, #16
 8008278:	bf18      	it	ne
 800827a:	236a      	movne	r3, #106	; 0x6a
 800827c:	4640      	mov	r0, r8
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	4649      	mov	r1, r9
 8008282:	2300      	movs	r3, #0
 8008284:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008550 <_strtod_l+0x870>
 8008288:	07ea      	lsls	r2, r5, #31
 800828a:	d504      	bpl.n	8008296 <_strtod_l+0x5b6>
 800828c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008290:	f7f8 f922 	bl	80004d8 <__aeabi_dmul>
 8008294:	2301      	movs	r3, #1
 8008296:	106d      	asrs	r5, r5, #1
 8008298:	f10a 0a08 	add.w	sl, sl, #8
 800829c:	d1f4      	bne.n	8008288 <_strtod_l+0x5a8>
 800829e:	b10b      	cbz	r3, 80082a4 <_strtod_l+0x5c4>
 80082a0:	4680      	mov	r8, r0
 80082a2:	4689      	mov	r9, r1
 80082a4:	9b05      	ldr	r3, [sp, #20]
 80082a6:	b1bb      	cbz	r3, 80082d8 <_strtod_l+0x5f8>
 80082a8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80082ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	4649      	mov	r1, r9
 80082b4:	dd10      	ble.n	80082d8 <_strtod_l+0x5f8>
 80082b6:	2b1f      	cmp	r3, #31
 80082b8:	f340 8128 	ble.w	800850c <_strtod_l+0x82c>
 80082bc:	2b34      	cmp	r3, #52	; 0x34
 80082be:	bfd8      	it	le
 80082c0:	f04f 33ff 	movle.w	r3, #4294967295
 80082c4:	f04f 0800 	mov.w	r8, #0
 80082c8:	bfcf      	iteee	gt
 80082ca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80082ce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082d2:	4093      	lslle	r3, r2
 80082d4:	ea03 0901 	andle.w	r9, r3, r1
 80082d8:	2200      	movs	r2, #0
 80082da:	2300      	movs	r3, #0
 80082dc:	4640      	mov	r0, r8
 80082de:	4649      	mov	r1, r9
 80082e0:	f7f8 fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1a6      	bne.n	8008236 <_strtod_l+0x556>
 80082e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ea:	465a      	mov	r2, fp
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4620      	mov	r0, r4
 80082f0:	4633      	mov	r3, r6
 80082f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082f4:	f7ff f8dc 	bl	80074b0 <__s2b>
 80082f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f af2a 	beq.w	8008154 <_strtod_l+0x474>
 8008300:	2600      	movs	r6, #0
 8008302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008304:	9b08      	ldr	r3, [sp, #32]
 8008306:	2a00      	cmp	r2, #0
 8008308:	eba3 0307 	sub.w	r3, r3, r7
 800830c:	bfa8      	it	ge
 800830e:	2300      	movge	r3, #0
 8008310:	46b3      	mov	fp, r6
 8008312:	9312      	str	r3, [sp, #72]	; 0x48
 8008314:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008318:	9316      	str	r3, [sp, #88]	; 0x58
 800831a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800831c:	4620      	mov	r0, r4
 800831e:	6859      	ldr	r1, [r3, #4]
 8008320:	f7ff f81e 	bl	8007360 <_Balloc>
 8008324:	9008      	str	r0, [sp, #32]
 8008326:	2800      	cmp	r0, #0
 8008328:	f43f af18 	beq.w	800815c <_strtod_l+0x47c>
 800832c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800832e:	300c      	adds	r0, #12
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	f103 010c 	add.w	r1, r3, #12
 8008336:	3202      	adds	r2, #2
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	f7fe f892 	bl	8006462 <memcpy>
 800833e:	ab1c      	add	r3, sp, #112	; 0x70
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	ab1b      	add	r3, sp, #108	; 0x6c
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	4620      	mov	r0, r4
 800834c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008350:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008354:	f7ff fbd8 	bl	8007b08 <__d2b>
 8008358:	901a      	str	r0, [sp, #104]	; 0x68
 800835a:	2800      	cmp	r0, #0
 800835c:	f43f aefe 	beq.w	800815c <_strtod_l+0x47c>
 8008360:	2101      	movs	r1, #1
 8008362:	4620      	mov	r0, r4
 8008364:	f7ff f93c 	bl	80075e0 <__i2b>
 8008368:	4683      	mov	fp, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	f43f aef6 	beq.w	800815c <_strtod_l+0x47c>
 8008370:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008374:	2f00      	cmp	r7, #0
 8008376:	bfab      	itete	ge
 8008378:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800837a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800837c:	eb07 0a03 	addge.w	sl, r7, r3
 8008380:	1bdd      	sublt	r5, r3, r7
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	bfa8      	it	ge
 8008386:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008388:	eba7 0703 	sub.w	r7, r7, r3
 800838c:	4417      	add	r7, r2
 800838e:	4b71      	ldr	r3, [pc, #452]	; (8008554 <_strtod_l+0x874>)
 8008390:	f107 37ff 	add.w	r7, r7, #4294967295
 8008394:	bfb8      	it	lt
 8008396:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800839a:	429f      	cmp	r7, r3
 800839c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083a0:	f280 80c7 	bge.w	8008532 <_strtod_l+0x852>
 80083a4:	1bdb      	subs	r3, r3, r7
 80083a6:	2b1f      	cmp	r3, #31
 80083a8:	f04f 0101 	mov.w	r1, #1
 80083ac:	eba2 0203 	sub.w	r2, r2, r3
 80083b0:	f300 80b3 	bgt.w	800851a <_strtod_l+0x83a>
 80083b4:	fa01 f303 	lsl.w	r3, r1, r3
 80083b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ba:	2300      	movs	r3, #0
 80083bc:	9310      	str	r3, [sp, #64]	; 0x40
 80083be:	eb0a 0702 	add.w	r7, sl, r2
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	45ba      	cmp	sl, r7
 80083c6:	4415      	add	r5, r2
 80083c8:	441d      	add	r5, r3
 80083ca:	4653      	mov	r3, sl
 80083cc:	bfa8      	it	ge
 80083ce:	463b      	movge	r3, r7
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	bfa8      	it	ge
 80083d4:	462b      	movge	r3, r5
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfc2      	ittt	gt
 80083da:	1aff      	subgt	r7, r7, r3
 80083dc:	1aed      	subgt	r5, r5, r3
 80083de:	ebaa 0a03 	subgt.w	sl, sl, r3
 80083e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd17      	ble.n	8008418 <_strtod_l+0x738>
 80083e8:	4659      	mov	r1, fp
 80083ea:	461a      	mov	r2, r3
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7ff f9b5 	bl	800775c <__pow5mult>
 80083f2:	4683      	mov	fp, r0
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f aeb1 	beq.w	800815c <_strtod_l+0x47c>
 80083fa:	4601      	mov	r1, r0
 80083fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff f904 	bl	800760c <__multiply>
 8008404:	900a      	str	r0, [sp, #40]	; 0x28
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f aea8 	beq.w	800815c <_strtod_l+0x47c>
 800840c:	4620      	mov	r0, r4
 800840e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008410:	f7fe ffe6 	bl	80073e0 <_Bfree>
 8008414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008416:	931a      	str	r3, [sp, #104]	; 0x68
 8008418:	2f00      	cmp	r7, #0
 800841a:	f300 808f 	bgt.w	800853c <_strtod_l+0x85c>
 800841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	dd08      	ble.n	8008436 <_strtod_l+0x756>
 8008424:	4620      	mov	r0, r4
 8008426:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008428:	9908      	ldr	r1, [sp, #32]
 800842a:	f7ff f997 	bl	800775c <__pow5mult>
 800842e:	9008      	str	r0, [sp, #32]
 8008430:	2800      	cmp	r0, #0
 8008432:	f43f ae93 	beq.w	800815c <_strtod_l+0x47c>
 8008436:	2d00      	cmp	r5, #0
 8008438:	dd08      	ble.n	800844c <_strtod_l+0x76c>
 800843a:	462a      	mov	r2, r5
 800843c:	4620      	mov	r0, r4
 800843e:	9908      	ldr	r1, [sp, #32]
 8008440:	f7ff f9e6 	bl	8007810 <__lshift>
 8008444:	9008      	str	r0, [sp, #32]
 8008446:	2800      	cmp	r0, #0
 8008448:	f43f ae88 	beq.w	800815c <_strtod_l+0x47c>
 800844c:	f1ba 0f00 	cmp.w	sl, #0
 8008450:	dd08      	ble.n	8008464 <_strtod_l+0x784>
 8008452:	4659      	mov	r1, fp
 8008454:	4652      	mov	r2, sl
 8008456:	4620      	mov	r0, r4
 8008458:	f7ff f9da 	bl	8007810 <__lshift>
 800845c:	4683      	mov	fp, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f ae7c 	beq.w	800815c <_strtod_l+0x47c>
 8008464:	4620      	mov	r0, r4
 8008466:	9a08      	ldr	r2, [sp, #32]
 8008468:	991a      	ldr	r1, [sp, #104]	; 0x68
 800846a:	f7ff fa59 	bl	8007920 <__mdiff>
 800846e:	4606      	mov	r6, r0
 8008470:	2800      	cmp	r0, #0
 8008472:	f43f ae73 	beq.w	800815c <_strtod_l+0x47c>
 8008476:	2500      	movs	r5, #0
 8008478:	68c3      	ldr	r3, [r0, #12]
 800847a:	4659      	mov	r1, fp
 800847c:	60c5      	str	r5, [r0, #12]
 800847e:	930a      	str	r3, [sp, #40]	; 0x28
 8008480:	f7ff fa32 	bl	80078e8 <__mcmp>
 8008484:	42a8      	cmp	r0, r5
 8008486:	da6b      	bge.n	8008560 <_strtod_l+0x880>
 8008488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848a:	ea53 0308 	orrs.w	r3, r3, r8
 800848e:	f040 808f 	bne.w	80085b0 <_strtod_l+0x8d0>
 8008492:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 808a 	bne.w	80085b0 <_strtod_l+0x8d0>
 800849c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084a0:	0d1b      	lsrs	r3, r3, #20
 80084a2:	051b      	lsls	r3, r3, #20
 80084a4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084a8:	f240 8082 	bls.w	80085b0 <_strtod_l+0x8d0>
 80084ac:	6973      	ldr	r3, [r6, #20]
 80084ae:	b913      	cbnz	r3, 80084b6 <_strtod_l+0x7d6>
 80084b0:	6933      	ldr	r3, [r6, #16]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	dd7c      	ble.n	80085b0 <_strtod_l+0x8d0>
 80084b6:	4631      	mov	r1, r6
 80084b8:	2201      	movs	r2, #1
 80084ba:	4620      	mov	r0, r4
 80084bc:	f7ff f9a8 	bl	8007810 <__lshift>
 80084c0:	4659      	mov	r1, fp
 80084c2:	4606      	mov	r6, r0
 80084c4:	f7ff fa10 	bl	80078e8 <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	dd71      	ble.n	80085b0 <_strtod_l+0x8d0>
 80084cc:	9905      	ldr	r1, [sp, #20]
 80084ce:	464b      	mov	r3, r9
 80084d0:	4a21      	ldr	r2, [pc, #132]	; (8008558 <_strtod_l+0x878>)
 80084d2:	2900      	cmp	r1, #0
 80084d4:	f000 808d 	beq.w	80085f2 <_strtod_l+0x912>
 80084d8:	ea02 0109 	and.w	r1, r2, r9
 80084dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084e0:	f300 8087 	bgt.w	80085f2 <_strtod_l+0x912>
 80084e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084e8:	f77f aea9 	ble.w	800823e <_strtod_l+0x55e>
 80084ec:	4640      	mov	r0, r8
 80084ee:	4649      	mov	r1, r9
 80084f0:	4b1a      	ldr	r3, [pc, #104]	; (800855c <_strtod_l+0x87c>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f7 fff0 	bl	80004d8 <__aeabi_dmul>
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <_strtod_l+0x878>)
 80084fa:	4680      	mov	r8, r0
 80084fc:	400b      	ands	r3, r1
 80084fe:	4689      	mov	r9, r1
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f ae35 	bne.w	8008170 <_strtod_l+0x490>
 8008506:	2322      	movs	r3, #34	; 0x22
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	e631      	b.n	8008170 <_strtod_l+0x490>
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	ea03 0808 	and.w	r8, r3, r8
 8008518:	e6de      	b.n	80082d8 <_strtod_l+0x5f8>
 800851a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800851e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008522:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008526:	37e2      	adds	r7, #226	; 0xe2
 8008528:	fa01 f307 	lsl.w	r3, r1, r7
 800852c:	9310      	str	r3, [sp, #64]	; 0x40
 800852e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008530:	e745      	b.n	80083be <_strtod_l+0x6de>
 8008532:	2300      	movs	r3, #0
 8008534:	9310      	str	r3, [sp, #64]	; 0x40
 8008536:	2301      	movs	r3, #1
 8008538:	9313      	str	r3, [sp, #76]	; 0x4c
 800853a:	e740      	b.n	80083be <_strtod_l+0x6de>
 800853c:	463a      	mov	r2, r7
 800853e:	4620      	mov	r0, r4
 8008540:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008542:	f7ff f965 	bl	8007810 <__lshift>
 8008546:	901a      	str	r0, [sp, #104]	; 0x68
 8008548:	2800      	cmp	r0, #0
 800854a:	f47f af68 	bne.w	800841e <_strtod_l+0x73e>
 800854e:	e605      	b.n	800815c <_strtod_l+0x47c>
 8008550:	08009f88 	.word	0x08009f88
 8008554:	fffffc02 	.word	0xfffffc02
 8008558:	7ff00000 	.word	0x7ff00000
 800855c:	39500000 	.word	0x39500000
 8008560:	46ca      	mov	sl, r9
 8008562:	d165      	bne.n	8008630 <_strtod_l+0x950>
 8008564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800856a:	b352      	cbz	r2, 80085c2 <_strtod_l+0x8e2>
 800856c:	4a9e      	ldr	r2, [pc, #632]	; (80087e8 <_strtod_l+0xb08>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d12a      	bne.n	80085c8 <_strtod_l+0x8e8>
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	4641      	mov	r1, r8
 8008576:	b1fb      	cbz	r3, 80085b8 <_strtod_l+0x8d8>
 8008578:	4b9c      	ldr	r3, [pc, #624]	; (80087ec <_strtod_l+0xb0c>)
 800857a:	f04f 32ff 	mov.w	r2, #4294967295
 800857e:	ea09 0303 	and.w	r3, r9, r3
 8008582:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008586:	d81a      	bhi.n	80085be <_strtod_l+0x8de>
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	4299      	cmp	r1, r3
 8008594:	d118      	bne.n	80085c8 <_strtod_l+0x8e8>
 8008596:	4b96      	ldr	r3, [pc, #600]	; (80087f0 <_strtod_l+0xb10>)
 8008598:	459a      	cmp	sl, r3
 800859a:	d102      	bne.n	80085a2 <_strtod_l+0x8c2>
 800859c:	3101      	adds	r1, #1
 800859e:	f43f addd 	beq.w	800815c <_strtod_l+0x47c>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	4b91      	ldr	r3, [pc, #580]	; (80087ec <_strtod_l+0xb0c>)
 80085a8:	ea0a 0303 	and.w	r3, sl, r3
 80085ac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80085b0:	9b05      	ldr	r3, [sp, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d19a      	bne.n	80084ec <_strtod_l+0x80c>
 80085b6:	e5db      	b.n	8008170 <_strtod_l+0x490>
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295
 80085bc:	e7e9      	b.n	8008592 <_strtod_l+0x8b2>
 80085be:	4613      	mov	r3, r2
 80085c0:	e7e7      	b.n	8008592 <_strtod_l+0x8b2>
 80085c2:	ea53 0308 	orrs.w	r3, r3, r8
 80085c6:	d081      	beq.n	80084cc <_strtod_l+0x7ec>
 80085c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ca:	b1e3      	cbz	r3, 8008606 <_strtod_l+0x926>
 80085cc:	ea13 0f0a 	tst.w	r3, sl
 80085d0:	d0ee      	beq.n	80085b0 <_strtod_l+0x8d0>
 80085d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d4:	4640      	mov	r0, r8
 80085d6:	4649      	mov	r1, r9
 80085d8:	9a05      	ldr	r2, [sp, #20]
 80085da:	b1c3      	cbz	r3, 800860e <_strtod_l+0x92e>
 80085dc:	f7ff fb5c 	bl	8007c98 <sulp>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085e8:	f7f7 fdc0 	bl	800016c <__adddf3>
 80085ec:	4680      	mov	r8, r0
 80085ee:	4689      	mov	r9, r1
 80085f0:	e7de      	b.n	80085b0 <_strtod_l+0x8d0>
 80085f2:	4013      	ands	r3, r2
 80085f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80085fc:	f04f 38ff 	mov.w	r8, #4294967295
 8008600:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008604:	e7d4      	b.n	80085b0 <_strtod_l+0x8d0>
 8008606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008608:	ea13 0f08 	tst.w	r3, r8
 800860c:	e7e0      	b.n	80085d0 <_strtod_l+0x8f0>
 800860e:	f7ff fb43 	bl	8007c98 <sulp>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008618:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800861a:	f7f7 fda5 	bl	8000168 <__aeabi_dsub>
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4680      	mov	r8, r0
 8008624:	4689      	mov	r9, r1
 8008626:	f7f8 f9bf 	bl	80009a8 <__aeabi_dcmpeq>
 800862a:	2800      	cmp	r0, #0
 800862c:	d0c0      	beq.n	80085b0 <_strtod_l+0x8d0>
 800862e:	e606      	b.n	800823e <_strtod_l+0x55e>
 8008630:	4659      	mov	r1, fp
 8008632:	4630      	mov	r0, r6
 8008634:	f7ff fabe 	bl	8007bb4 <__ratio>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008640:	2200      	movs	r2, #0
 8008642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008646:	f7f8 f9c3 	bl	80009d0 <__aeabi_dcmple>
 800864a:	2800      	cmp	r0, #0
 800864c:	d06f      	beq.n	800872e <_strtod_l+0xa4e>
 800864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d17c      	bne.n	800874e <_strtod_l+0xa6e>
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	d159      	bne.n	800870e <_strtod_l+0xa2e>
 800865a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800865e:	2b00      	cmp	r3, #0
 8008660:	d17b      	bne.n	800875a <_strtod_l+0xa7a>
 8008662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008666:	2200      	movs	r2, #0
 8008668:	4b62      	ldr	r3, [pc, #392]	; (80087f4 <_strtod_l+0xb14>)
 800866a:	f7f8 f9a7 	bl	80009bc <__aeabi_dcmplt>
 800866e:	2800      	cmp	r0, #0
 8008670:	d15a      	bne.n	8008728 <_strtod_l+0xa48>
 8008672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008676:	2200      	movs	r2, #0
 8008678:	4b5f      	ldr	r3, [pc, #380]	; (80087f8 <_strtod_l+0xb18>)
 800867a:	f7f7 ff2d 	bl	80004d8 <__aeabi_dmul>
 800867e:	4605      	mov	r5, r0
 8008680:	460f      	mov	r7, r1
 8008682:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008686:	9506      	str	r5, [sp, #24]
 8008688:	9307      	str	r3, [sp, #28]
 800868a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800868e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008692:	4b56      	ldr	r3, [pc, #344]	; (80087ec <_strtod_l+0xb0c>)
 8008694:	4a55      	ldr	r2, [pc, #340]	; (80087ec <_strtod_l+0xb0c>)
 8008696:	ea0a 0303 	and.w	r3, sl, r3
 800869a:	9313      	str	r3, [sp, #76]	; 0x4c
 800869c:	4b57      	ldr	r3, [pc, #348]	; (80087fc <_strtod_l+0xb1c>)
 800869e:	ea0a 0202 	and.w	r2, sl, r2
 80086a2:	429a      	cmp	r2, r3
 80086a4:	f040 80b0 	bne.w	8008808 <_strtod_l+0xb28>
 80086a8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7ff f9c2 	bl	8007a38 <__ulp>
 80086b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b8:	f7f7 ff0e 	bl	80004d8 <__aeabi_dmul>
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	f7f7 fd54 	bl	800016c <__adddf3>
 80086c4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80087ec <_strtod_l+0xb0c>
 80086c8:	4a4d      	ldr	r2, [pc, #308]	; (8008800 <_strtod_l+0xb20>)
 80086ca:	ea01 0a0a 	and.w	sl, r1, sl
 80086ce:	4592      	cmp	sl, r2
 80086d0:	4680      	mov	r8, r0
 80086d2:	d948      	bls.n	8008766 <_strtod_l+0xa86>
 80086d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086d6:	4b46      	ldr	r3, [pc, #280]	; (80087f0 <_strtod_l+0xb10>)
 80086d8:	429a      	cmp	r2, r3
 80086da:	d103      	bne.n	80086e4 <_strtod_l+0xa04>
 80086dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086de:	3301      	adds	r3, #1
 80086e0:	f43f ad3c 	beq.w	800815c <_strtod_l+0x47c>
 80086e4:	f04f 38ff 	mov.w	r8, #4294967295
 80086e8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80087f0 <_strtod_l+0xb10>
 80086ec:	4620      	mov	r0, r4
 80086ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086f0:	f7fe fe76 	bl	80073e0 <_Bfree>
 80086f4:	4620      	mov	r0, r4
 80086f6:	9908      	ldr	r1, [sp, #32]
 80086f8:	f7fe fe72 	bl	80073e0 <_Bfree>
 80086fc:	4659      	mov	r1, fp
 80086fe:	4620      	mov	r0, r4
 8008700:	f7fe fe6e 	bl	80073e0 <_Bfree>
 8008704:	4631      	mov	r1, r6
 8008706:	4620      	mov	r0, r4
 8008708:	f7fe fe6a 	bl	80073e0 <_Bfree>
 800870c:	e605      	b.n	800831a <_strtod_l+0x63a>
 800870e:	f1b8 0f01 	cmp.w	r8, #1
 8008712:	d103      	bne.n	800871c <_strtod_l+0xa3c>
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	f43f ad91 	beq.w	800823e <_strtod_l+0x55e>
 800871c:	2200      	movs	r2, #0
 800871e:	4b39      	ldr	r3, [pc, #228]	; (8008804 <_strtod_l+0xb24>)
 8008720:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008722:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008726:	e016      	b.n	8008756 <_strtod_l+0xa76>
 8008728:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800872a:	4f33      	ldr	r7, [pc, #204]	; (80087f8 <_strtod_l+0xb18>)
 800872c:	e7a9      	b.n	8008682 <_strtod_l+0x9a2>
 800872e:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <_strtod_l+0xb18>)
 8008730:	2200      	movs	r2, #0
 8008732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008736:	f7f7 fecf 	bl	80004d8 <__aeabi_dmul>
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	4605      	mov	r5, r0
 800873e:	460f      	mov	r7, r1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d09e      	beq.n	8008682 <_strtod_l+0x9a2>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800874c:	e79d      	b.n	800868a <_strtod_l+0x9aa>
 800874e:	2200      	movs	r2, #0
 8008750:	4b28      	ldr	r3, [pc, #160]	; (80087f4 <_strtod_l+0xb14>)
 8008752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008756:	4f27      	ldr	r7, [pc, #156]	; (80087f4 <_strtod_l+0xb14>)
 8008758:	e797      	b.n	800868a <_strtod_l+0x9aa>
 800875a:	2200      	movs	r2, #0
 800875c:	4b29      	ldr	r3, [pc, #164]	; (8008804 <_strtod_l+0xb24>)
 800875e:	4645      	mov	r5, r8
 8008760:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008764:	e7f7      	b.n	8008756 <_strtod_l+0xa76>
 8008766:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800876a:	9b05      	ldr	r3, [sp, #20]
 800876c:	46ca      	mov	sl, r9
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1bc      	bne.n	80086ec <_strtod_l+0xa0c>
 8008772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008776:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008778:	0d1b      	lsrs	r3, r3, #20
 800877a:	051b      	lsls	r3, r3, #20
 800877c:	429a      	cmp	r2, r3
 800877e:	d1b5      	bne.n	80086ec <_strtod_l+0xa0c>
 8008780:	4628      	mov	r0, r5
 8008782:	4639      	mov	r1, r7
 8008784:	f7f8 fa86 	bl	8000c94 <__aeabi_d2lz>
 8008788:	f7f7 fe78 	bl	800047c <__aeabi_l2d>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4628      	mov	r0, r5
 8008792:	4639      	mov	r1, r7
 8008794:	f7f7 fce8 	bl	8000168 <__aeabi_dsub>
 8008798:	460b      	mov	r3, r1
 800879a:	4602      	mov	r2, r0
 800879c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80087a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	ea4a 0a08 	orr.w	sl, sl, r8
 80087aa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80087ae:	d06c      	beq.n	800888a <_strtod_l+0xbaa>
 80087b0:	a309      	add	r3, pc, #36	; (adr r3, 80087d8 <_strtod_l+0xaf8>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f8 f901 	bl	80009bc <__aeabi_dcmplt>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f47f acd8 	bne.w	8008170 <_strtod_l+0x490>
 80087c0:	a307      	add	r3, pc, #28	; (adr r3, 80087e0 <_strtod_l+0xb00>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087ca:	f7f8 f915 	bl	80009f8 <__aeabi_dcmpgt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d08c      	beq.n	80086ec <_strtod_l+0xa0c>
 80087d2:	e4cd      	b.n	8008170 <_strtod_l+0x490>
 80087d4:	f3af 8000 	nop.w
 80087d8:	94a03595 	.word	0x94a03595
 80087dc:	3fdfffff 	.word	0x3fdfffff
 80087e0:	35afe535 	.word	0x35afe535
 80087e4:	3fe00000 	.word	0x3fe00000
 80087e8:	000fffff 	.word	0x000fffff
 80087ec:	7ff00000 	.word	0x7ff00000
 80087f0:	7fefffff 	.word	0x7fefffff
 80087f4:	3ff00000 	.word	0x3ff00000
 80087f8:	3fe00000 	.word	0x3fe00000
 80087fc:	7fe00000 	.word	0x7fe00000
 8008800:	7c9fffff 	.word	0x7c9fffff
 8008804:	bff00000 	.word	0xbff00000
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	b333      	cbz	r3, 800885a <_strtod_l+0xb7a>
 800880c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800880e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008812:	d822      	bhi.n	800885a <_strtod_l+0xb7a>
 8008814:	a328      	add	r3, pc, #160	; (adr r3, 80088b8 <_strtod_l+0xbd8>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	4628      	mov	r0, r5
 800881c:	4639      	mov	r1, r7
 800881e:	f7f8 f8d7 	bl	80009d0 <__aeabi_dcmple>
 8008822:	b1a0      	cbz	r0, 800884e <_strtod_l+0xb6e>
 8008824:	4639      	mov	r1, r7
 8008826:	4628      	mov	r0, r5
 8008828:	f7f8 f92e 	bl	8000a88 <__aeabi_d2uiz>
 800882c:	2801      	cmp	r0, #1
 800882e:	bf38      	it	cc
 8008830:	2001      	movcc	r0, #1
 8008832:	f7f7 fdd7 	bl	80003e4 <__aeabi_ui2d>
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	4605      	mov	r5, r0
 800883a:	460f      	mov	r7, r1
 800883c:	bb03      	cbnz	r3, 8008880 <_strtod_l+0xba0>
 800883e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008842:	9014      	str	r0, [sp, #80]	; 0x50
 8008844:	9315      	str	r3, [sp, #84]	; 0x54
 8008846:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800884a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800884e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008852:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	9311      	str	r3, [sp, #68]	; 0x44
 800885a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800885c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800885e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008862:	f7ff f8e9 	bl	8007a38 <__ulp>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4640      	mov	r0, r8
 800886c:	4649      	mov	r1, r9
 800886e:	f7f7 fe33 	bl	80004d8 <__aeabi_dmul>
 8008872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008876:	f7f7 fc79 	bl	800016c <__adddf3>
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	e774      	b.n	800876a <_strtod_l+0xa8a>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008888:	e7dd      	b.n	8008846 <_strtod_l+0xb66>
 800888a:	a30d      	add	r3, pc, #52	; (adr r3, 80088c0 <_strtod_l+0xbe0>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f7f8 f894 	bl	80009bc <__aeabi_dcmplt>
 8008894:	e79b      	b.n	80087ce <_strtod_l+0xaee>
 8008896:	2300      	movs	r3, #0
 8008898:	930e      	str	r3, [sp, #56]	; 0x38
 800889a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800889c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	f7ff ba5b 	b.w	8007d5a <_strtod_l+0x7a>
 80088a4:	2a65      	cmp	r2, #101	; 0x65
 80088a6:	f43f ab52 	beq.w	8007f4e <_strtod_l+0x26e>
 80088aa:	2a45      	cmp	r2, #69	; 0x45
 80088ac:	f43f ab4f 	beq.w	8007f4e <_strtod_l+0x26e>
 80088b0:	2301      	movs	r3, #1
 80088b2:	f7ff bb87 	b.w	8007fc4 <_strtod_l+0x2e4>
 80088b6:	bf00      	nop
 80088b8:	ffc00000 	.word	0xffc00000
 80088bc:	41dfffff 	.word	0x41dfffff
 80088c0:	94a03595 	.word	0x94a03595
 80088c4:	3fcfffff 	.word	0x3fcfffff

080088c8 <_strtod_r>:
 80088c8:	4b01      	ldr	r3, [pc, #4]	; (80088d0 <_strtod_r+0x8>)
 80088ca:	f7ff ba09 	b.w	8007ce0 <_strtod_l>
 80088ce:	bf00      	nop
 80088d0:	2000006c 	.word	0x2000006c

080088d4 <_strtol_l.constprop.0>:
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088da:	4686      	mov	lr, r0
 80088dc:	4690      	mov	r8, r2
 80088de:	d001      	beq.n	80088e4 <_strtol_l.constprop.0+0x10>
 80088e0:	2b24      	cmp	r3, #36	; 0x24
 80088e2:	d906      	bls.n	80088f2 <_strtol_l.constprop.0+0x1e>
 80088e4:	f7fd fd82 	bl	80063ec <__errno>
 80088e8:	2316      	movs	r3, #22
 80088ea:	6003      	str	r3, [r0, #0]
 80088ec:	2000      	movs	r0, #0
 80088ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f2:	460d      	mov	r5, r1
 80088f4:	4835      	ldr	r0, [pc, #212]	; (80089cc <_strtol_l.constprop.0+0xf8>)
 80088f6:	462a      	mov	r2, r5
 80088f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088fc:	5d06      	ldrb	r6, [r0, r4]
 80088fe:	f016 0608 	ands.w	r6, r6, #8
 8008902:	d1f8      	bne.n	80088f6 <_strtol_l.constprop.0+0x22>
 8008904:	2c2d      	cmp	r4, #45	; 0x2d
 8008906:	d12e      	bne.n	8008966 <_strtol_l.constprop.0+0x92>
 8008908:	2601      	movs	r6, #1
 800890a:	782c      	ldrb	r4, [r5, #0]
 800890c:	1c95      	adds	r5, r2, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d057      	beq.n	80089c2 <_strtol_l.constprop.0+0xee>
 8008912:	2b10      	cmp	r3, #16
 8008914:	d109      	bne.n	800892a <_strtol_l.constprop.0+0x56>
 8008916:	2c30      	cmp	r4, #48	; 0x30
 8008918:	d107      	bne.n	800892a <_strtol_l.constprop.0+0x56>
 800891a:	782a      	ldrb	r2, [r5, #0]
 800891c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008920:	2a58      	cmp	r2, #88	; 0x58
 8008922:	d149      	bne.n	80089b8 <_strtol_l.constprop.0+0xe4>
 8008924:	2310      	movs	r3, #16
 8008926:	786c      	ldrb	r4, [r5, #1]
 8008928:	3502      	adds	r5, #2
 800892a:	2200      	movs	r2, #0
 800892c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008930:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008934:	fbbc f9f3 	udiv	r9, ip, r3
 8008938:	4610      	mov	r0, r2
 800893a:	fb03 ca19 	mls	sl, r3, r9, ip
 800893e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008942:	2f09      	cmp	r7, #9
 8008944:	d814      	bhi.n	8008970 <_strtol_l.constprop.0+0x9c>
 8008946:	463c      	mov	r4, r7
 8008948:	42a3      	cmp	r3, r4
 800894a:	dd20      	ble.n	800898e <_strtol_l.constprop.0+0xba>
 800894c:	1c57      	adds	r7, r2, #1
 800894e:	d007      	beq.n	8008960 <_strtol_l.constprop.0+0x8c>
 8008950:	4581      	cmp	r9, r0
 8008952:	d319      	bcc.n	8008988 <_strtol_l.constprop.0+0xb4>
 8008954:	d101      	bne.n	800895a <_strtol_l.constprop.0+0x86>
 8008956:	45a2      	cmp	sl, r4
 8008958:	db16      	blt.n	8008988 <_strtol_l.constprop.0+0xb4>
 800895a:	2201      	movs	r2, #1
 800895c:	fb00 4003 	mla	r0, r0, r3, r4
 8008960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008964:	e7eb      	b.n	800893e <_strtol_l.constprop.0+0x6a>
 8008966:	2c2b      	cmp	r4, #43	; 0x2b
 8008968:	bf04      	itt	eq
 800896a:	782c      	ldrbeq	r4, [r5, #0]
 800896c:	1c95      	addeq	r5, r2, #2
 800896e:	e7ce      	b.n	800890e <_strtol_l.constprop.0+0x3a>
 8008970:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008974:	2f19      	cmp	r7, #25
 8008976:	d801      	bhi.n	800897c <_strtol_l.constprop.0+0xa8>
 8008978:	3c37      	subs	r4, #55	; 0x37
 800897a:	e7e5      	b.n	8008948 <_strtol_l.constprop.0+0x74>
 800897c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008980:	2f19      	cmp	r7, #25
 8008982:	d804      	bhi.n	800898e <_strtol_l.constprop.0+0xba>
 8008984:	3c57      	subs	r4, #87	; 0x57
 8008986:	e7df      	b.n	8008948 <_strtol_l.constprop.0+0x74>
 8008988:	f04f 32ff 	mov.w	r2, #4294967295
 800898c:	e7e8      	b.n	8008960 <_strtol_l.constprop.0+0x8c>
 800898e:	1c53      	adds	r3, r2, #1
 8008990:	d108      	bne.n	80089a4 <_strtol_l.constprop.0+0xd0>
 8008992:	2322      	movs	r3, #34	; 0x22
 8008994:	4660      	mov	r0, ip
 8008996:	f8ce 3000 	str.w	r3, [lr]
 800899a:	f1b8 0f00 	cmp.w	r8, #0
 800899e:	d0a6      	beq.n	80088ee <_strtol_l.constprop.0+0x1a>
 80089a0:	1e69      	subs	r1, r5, #1
 80089a2:	e006      	b.n	80089b2 <_strtol_l.constprop.0+0xde>
 80089a4:	b106      	cbz	r6, 80089a8 <_strtol_l.constprop.0+0xd4>
 80089a6:	4240      	negs	r0, r0
 80089a8:	f1b8 0f00 	cmp.w	r8, #0
 80089ac:	d09f      	beq.n	80088ee <_strtol_l.constprop.0+0x1a>
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d1f6      	bne.n	80089a0 <_strtol_l.constprop.0+0xcc>
 80089b2:	f8c8 1000 	str.w	r1, [r8]
 80089b6:	e79a      	b.n	80088ee <_strtol_l.constprop.0+0x1a>
 80089b8:	2430      	movs	r4, #48	; 0x30
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1b5      	bne.n	800892a <_strtol_l.constprop.0+0x56>
 80089be:	2308      	movs	r3, #8
 80089c0:	e7b3      	b.n	800892a <_strtol_l.constprop.0+0x56>
 80089c2:	2c30      	cmp	r4, #48	; 0x30
 80089c4:	d0a9      	beq.n	800891a <_strtol_l.constprop.0+0x46>
 80089c6:	230a      	movs	r3, #10
 80089c8:	e7af      	b.n	800892a <_strtol_l.constprop.0+0x56>
 80089ca:	bf00      	nop
 80089cc:	08009fb1 	.word	0x08009fb1

080089d0 <_strtol_r>:
 80089d0:	f7ff bf80 	b.w	80088d4 <_strtol_l.constprop.0>

080089d4 <__ssputs_r>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	461f      	mov	r7, r3
 80089da:	688e      	ldr	r6, [r1, #8]
 80089dc:	4682      	mov	sl, r0
 80089de:	42be      	cmp	r6, r7
 80089e0:	460c      	mov	r4, r1
 80089e2:	4690      	mov	r8, r2
 80089e4:	680b      	ldr	r3, [r1, #0]
 80089e6:	d82c      	bhi.n	8008a42 <__ssputs_r+0x6e>
 80089e8:	898a      	ldrh	r2, [r1, #12]
 80089ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089ee:	d026      	beq.n	8008a3e <__ssputs_r+0x6a>
 80089f0:	6965      	ldr	r5, [r4, #20]
 80089f2:	6909      	ldr	r1, [r1, #16]
 80089f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089f8:	eba3 0901 	sub.w	r9, r3, r1
 80089fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a00:	1c7b      	adds	r3, r7, #1
 8008a02:	444b      	add	r3, r9
 8008a04:	106d      	asrs	r5, r5, #1
 8008a06:	429d      	cmp	r5, r3
 8008a08:	bf38      	it	cc
 8008a0a:	461d      	movcc	r5, r3
 8008a0c:	0553      	lsls	r3, r2, #21
 8008a0e:	d527      	bpl.n	8008a60 <__ssputs_r+0x8c>
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7fe fc19 	bl	8007248 <_malloc_r>
 8008a16:	4606      	mov	r6, r0
 8008a18:	b360      	cbz	r0, 8008a74 <__ssputs_r+0xa0>
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	6921      	ldr	r1, [r4, #16]
 8008a1e:	f7fd fd20 	bl	8006462 <memcpy>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	6126      	str	r6, [r4, #16]
 8008a30:	444e      	add	r6, r9
 8008a32:	6026      	str	r6, [r4, #0]
 8008a34:	463e      	mov	r6, r7
 8008a36:	6165      	str	r5, [r4, #20]
 8008a38:	eba5 0509 	sub.w	r5, r5, r9
 8008a3c:	60a5      	str	r5, [r4, #8]
 8008a3e:	42be      	cmp	r6, r7
 8008a40:	d900      	bls.n	8008a44 <__ssputs_r+0x70>
 8008a42:	463e      	mov	r6, r7
 8008a44:	4632      	mov	r2, r6
 8008a46:	4641      	mov	r1, r8
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	f000 fb68 	bl	800911e <memmove>
 8008a4e:	2000      	movs	r0, #0
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	1b9b      	subs	r3, r3, r6
 8008a54:	60a3      	str	r3, [r4, #8]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	4433      	add	r3, r6
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a60:	462a      	mov	r2, r5
 8008a62:	f000 ff4c 	bl	80098fe <_realloc_r>
 8008a66:	4606      	mov	r6, r0
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d1e0      	bne.n	8008a2e <__ssputs_r+0x5a>
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	6921      	ldr	r1, [r4, #16]
 8008a70:	f7fe fb7a 	bl	8007168 <_free_r>
 8008a74:	230c      	movs	r3, #12
 8008a76:	f8ca 3000 	str.w	r3, [sl]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	e7e9      	b.n	8008a5c <__ssputs_r+0x88>

08008a88 <_svfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	4698      	mov	r8, r3
 8008a8e:	898b      	ldrh	r3, [r1, #12]
 8008a90:	4607      	mov	r7, r0
 8008a92:	061b      	lsls	r3, r3, #24
 8008a94:	460d      	mov	r5, r1
 8008a96:	4614      	mov	r4, r2
 8008a98:	b09d      	sub	sp, #116	; 0x74
 8008a9a:	d50e      	bpl.n	8008aba <_svfiprintf_r+0x32>
 8008a9c:	690b      	ldr	r3, [r1, #16]
 8008a9e:	b963      	cbnz	r3, 8008aba <_svfiprintf_r+0x32>
 8008aa0:	2140      	movs	r1, #64	; 0x40
 8008aa2:	f7fe fbd1 	bl	8007248 <_malloc_r>
 8008aa6:	6028      	str	r0, [r5, #0]
 8008aa8:	6128      	str	r0, [r5, #16]
 8008aaa:	b920      	cbnz	r0, 8008ab6 <_svfiprintf_r+0x2e>
 8008aac:	230c      	movs	r3, #12
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e0d0      	b.n	8008c58 <_svfiprintf_r+0x1d0>
 8008ab6:	2340      	movs	r3, #64	; 0x40
 8008ab8:	616b      	str	r3, [r5, #20]
 8008aba:	2300      	movs	r3, #0
 8008abc:	9309      	str	r3, [sp, #36]	; 0x24
 8008abe:	2320      	movs	r3, #32
 8008ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ac4:	2330      	movs	r3, #48	; 0x30
 8008ac6:	f04f 0901 	mov.w	r9, #1
 8008aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ace:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008c70 <_svfiprintf_r+0x1e8>
 8008ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	469a      	mov	sl, r3
 8008ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ade:	b10a      	cbz	r2, 8008ae4 <_svfiprintf_r+0x5c>
 8008ae0:	2a25      	cmp	r2, #37	; 0x25
 8008ae2:	d1f9      	bne.n	8008ad8 <_svfiprintf_r+0x50>
 8008ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ae8:	d00b      	beq.n	8008b02 <_svfiprintf_r+0x7a>
 8008aea:	465b      	mov	r3, fp
 8008aec:	4622      	mov	r2, r4
 8008aee:	4629      	mov	r1, r5
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7ff ff6f 	bl	80089d4 <__ssputs_r>
 8008af6:	3001      	adds	r0, #1
 8008af8:	f000 80a9 	beq.w	8008c4e <_svfiprintf_r+0x1c6>
 8008afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afe:	445a      	add	r2, fp
 8008b00:	9209      	str	r2, [sp, #36]	; 0x24
 8008b02:	f89a 3000 	ldrb.w	r3, [sl]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80a1 	beq.w	8008c4e <_svfiprintf_r+0x1c6>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b16:	f10a 0a01 	add.w	sl, sl, #1
 8008b1a:	9304      	str	r3, [sp, #16]
 8008b1c:	9307      	str	r3, [sp, #28]
 8008b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b22:	931a      	str	r3, [sp, #104]	; 0x68
 8008b24:	4654      	mov	r4, sl
 8008b26:	2205      	movs	r2, #5
 8008b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2c:	4850      	ldr	r0, [pc, #320]	; (8008c70 <_svfiprintf_r+0x1e8>)
 8008b2e:	f7fd fc8a 	bl	8006446 <memchr>
 8008b32:	9a04      	ldr	r2, [sp, #16]
 8008b34:	b9d8      	cbnz	r0, 8008b6e <_svfiprintf_r+0xe6>
 8008b36:	06d0      	lsls	r0, r2, #27
 8008b38:	bf44      	itt	mi
 8008b3a:	2320      	movmi	r3, #32
 8008b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b40:	0711      	lsls	r1, r2, #28
 8008b42:	bf44      	itt	mi
 8008b44:	232b      	movmi	r3, #43	; 0x2b
 8008b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b50:	d015      	beq.n	8008b7e <_svfiprintf_r+0xf6>
 8008b52:	4654      	mov	r4, sl
 8008b54:	2000      	movs	r0, #0
 8008b56:	f04f 0c0a 	mov.w	ip, #10
 8008b5a:	9a07      	ldr	r2, [sp, #28]
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b62:	3b30      	subs	r3, #48	; 0x30
 8008b64:	2b09      	cmp	r3, #9
 8008b66:	d94d      	bls.n	8008c04 <_svfiprintf_r+0x17c>
 8008b68:	b1b0      	cbz	r0, 8008b98 <_svfiprintf_r+0x110>
 8008b6a:	9207      	str	r2, [sp, #28]
 8008b6c:	e014      	b.n	8008b98 <_svfiprintf_r+0x110>
 8008b6e:	eba0 0308 	sub.w	r3, r0, r8
 8008b72:	fa09 f303 	lsl.w	r3, r9, r3
 8008b76:	4313      	orrs	r3, r2
 8008b78:	46a2      	mov	sl, r4
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	e7d2      	b.n	8008b24 <_svfiprintf_r+0x9c>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	1d19      	adds	r1, r3, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	9103      	str	r1, [sp, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfbb      	ittet	lt
 8008b8a:	425b      	neglt	r3, r3
 8008b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b90:	9307      	strge	r3, [sp, #28]
 8008b92:	9307      	strlt	r3, [sp, #28]
 8008b94:	bfb8      	it	lt
 8008b96:	9204      	strlt	r2, [sp, #16]
 8008b98:	7823      	ldrb	r3, [r4, #0]
 8008b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b9c:	d10c      	bne.n	8008bb8 <_svfiprintf_r+0x130>
 8008b9e:	7863      	ldrb	r3, [r4, #1]
 8008ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ba2:	d134      	bne.n	8008c0e <_svfiprintf_r+0x186>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	3402      	adds	r4, #2
 8008ba8:	1d1a      	adds	r2, r3, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	9203      	str	r2, [sp, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfb8      	it	lt
 8008bb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bb6:	9305      	str	r3, [sp, #20]
 8008bb8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008c74 <_svfiprintf_r+0x1ec>
 8008bbc:	2203      	movs	r2, #3
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	7821      	ldrb	r1, [r4, #0]
 8008bc2:	f7fd fc40 	bl	8006446 <memchr>
 8008bc6:	b138      	cbz	r0, 8008bd8 <_svfiprintf_r+0x150>
 8008bc8:	2240      	movs	r2, #64	; 0x40
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	eba0 000a 	sub.w	r0, r0, sl
 8008bd0:	4082      	lsls	r2, r0
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	3401      	adds	r4, #1
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bdc:	2206      	movs	r2, #6
 8008bde:	4826      	ldr	r0, [pc, #152]	; (8008c78 <_svfiprintf_r+0x1f0>)
 8008be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008be4:	f7fd fc2f 	bl	8006446 <memchr>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d038      	beq.n	8008c5e <_svfiprintf_r+0x1d6>
 8008bec:	4b23      	ldr	r3, [pc, #140]	; (8008c7c <_svfiprintf_r+0x1f4>)
 8008bee:	bb1b      	cbnz	r3, 8008c38 <_svfiprintf_r+0x1b0>
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	3307      	adds	r3, #7
 8008bf4:	f023 0307 	bic.w	r3, r3, #7
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	9303      	str	r3, [sp, #12]
 8008bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfe:	4433      	add	r3, r6
 8008c00:	9309      	str	r3, [sp, #36]	; 0x24
 8008c02:	e768      	b.n	8008ad6 <_svfiprintf_r+0x4e>
 8008c04:	460c      	mov	r4, r1
 8008c06:	2001      	movs	r0, #1
 8008c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c0c:	e7a6      	b.n	8008b5c <_svfiprintf_r+0xd4>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f04f 0c0a 	mov.w	ip, #10
 8008c14:	4619      	mov	r1, r3
 8008c16:	3401      	adds	r4, #1
 8008c18:	9305      	str	r3, [sp, #20]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c20:	3a30      	subs	r2, #48	; 0x30
 8008c22:	2a09      	cmp	r2, #9
 8008c24:	d903      	bls.n	8008c2e <_svfiprintf_r+0x1a6>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0c6      	beq.n	8008bb8 <_svfiprintf_r+0x130>
 8008c2a:	9105      	str	r1, [sp, #20]
 8008c2c:	e7c4      	b.n	8008bb8 <_svfiprintf_r+0x130>
 8008c2e:	4604      	mov	r4, r0
 8008c30:	2301      	movs	r3, #1
 8008c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c36:	e7f0      	b.n	8008c1a <_svfiprintf_r+0x192>
 8008c38:	ab03      	add	r3, sp, #12
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4638      	mov	r0, r7
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <_svfiprintf_r+0x1f8>)
 8008c42:	a904      	add	r1, sp, #16
 8008c44:	f7fc fab2 	bl	80051ac <_printf_float>
 8008c48:	1c42      	adds	r2, r0, #1
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	d1d6      	bne.n	8008bfc <_svfiprintf_r+0x174>
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	065b      	lsls	r3, r3, #25
 8008c52:	f53f af2d 	bmi.w	8008ab0 <_svfiprintf_r+0x28>
 8008c56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c58:	b01d      	add	sp, #116	; 0x74
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	ab03      	add	r3, sp, #12
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	462a      	mov	r2, r5
 8008c64:	4638      	mov	r0, r7
 8008c66:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <_svfiprintf_r+0x1f8>)
 8008c68:	a904      	add	r1, sp, #16
 8008c6a:	f7fc fd3f 	bl	80056ec <_printf_i>
 8008c6e:	e7eb      	b.n	8008c48 <_svfiprintf_r+0x1c0>
 8008c70:	0800a0b1 	.word	0x0800a0b1
 8008c74:	0800a0b7 	.word	0x0800a0b7
 8008c78:	0800a0bb 	.word	0x0800a0bb
 8008c7c:	080051ad 	.word	0x080051ad
 8008c80:	080089d5 	.word	0x080089d5

08008c84 <__sfputc_r>:
 8008c84:	6893      	ldr	r3, [r2, #8]
 8008c86:	b410      	push	{r4}
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	6093      	str	r3, [r2, #8]
 8008c8e:	da07      	bge.n	8008ca0 <__sfputc_r+0x1c>
 8008c90:	6994      	ldr	r4, [r2, #24]
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	db01      	blt.n	8008c9a <__sfputc_r+0x16>
 8008c96:	290a      	cmp	r1, #10
 8008c98:	d102      	bne.n	8008ca0 <__sfputc_r+0x1c>
 8008c9a:	bc10      	pop	{r4}
 8008c9c:	f7fd ba97 	b.w	80061ce <__swbuf_r>
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	1c58      	adds	r0, r3, #1
 8008ca4:	6010      	str	r0, [r2, #0]
 8008ca6:	7019      	strb	r1, [r3, #0]
 8008ca8:	4608      	mov	r0, r1
 8008caa:	bc10      	pop	{r4}
 8008cac:	4770      	bx	lr

08008cae <__sfputs_r>:
 8008cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460f      	mov	r7, r1
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	18d5      	adds	r5, r2, r3
 8008cb8:	42ac      	cmp	r4, r5
 8008cba:	d101      	bne.n	8008cc0 <__sfputs_r+0x12>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e007      	b.n	8008cd0 <__sfputs_r+0x22>
 8008cc0:	463a      	mov	r2, r7
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc8:	f7ff ffdc 	bl	8008c84 <__sfputc_r>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d1f3      	bne.n	8008cb8 <__sfputs_r+0xa>
 8008cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cd4 <_vfiprintf_r>:
 8008cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	460d      	mov	r5, r1
 8008cda:	4614      	mov	r4, r2
 8008cdc:	4698      	mov	r8, r3
 8008cde:	4606      	mov	r6, r0
 8008ce0:	b09d      	sub	sp, #116	; 0x74
 8008ce2:	b118      	cbz	r0, 8008cec <_vfiprintf_r+0x18>
 8008ce4:	6a03      	ldr	r3, [r0, #32]
 8008ce6:	b90b      	cbnz	r3, 8008cec <_vfiprintf_r+0x18>
 8008ce8:	f7fd f8bc 	bl	8005e64 <__sinit>
 8008cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cee:	07d9      	lsls	r1, r3, #31
 8008cf0:	d405      	bmi.n	8008cfe <_vfiprintf_r+0x2a>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	059a      	lsls	r2, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_vfiprintf_r+0x2a>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cfa:	f7fd fba2 	bl	8006442 <__retarget_lock_acquire_recursive>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	071b      	lsls	r3, r3, #28
 8008d02:	d501      	bpl.n	8008d08 <_vfiprintf_r+0x34>
 8008d04:	692b      	ldr	r3, [r5, #16]
 8008d06:	b99b      	cbnz	r3, 8008d30 <_vfiprintf_r+0x5c>
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7fd fa9c 	bl	8006248 <__swsetup_r>
 8008d10:	b170      	cbz	r0, 8008d30 <_vfiprintf_r+0x5c>
 8008d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d14:	07dc      	lsls	r4, r3, #31
 8008d16:	d504      	bpl.n	8008d22 <_vfiprintf_r+0x4e>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	b01d      	add	sp, #116	; 0x74
 8008d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d22:	89ab      	ldrh	r3, [r5, #12]
 8008d24:	0598      	lsls	r0, r3, #22
 8008d26:	d4f7      	bmi.n	8008d18 <_vfiprintf_r+0x44>
 8008d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d2a:	f7fd fb8b 	bl	8006444 <__retarget_lock_release_recursive>
 8008d2e:	e7f3      	b.n	8008d18 <_vfiprintf_r+0x44>
 8008d30:	2300      	movs	r3, #0
 8008d32:	9309      	str	r3, [sp, #36]	; 0x24
 8008d34:	2320      	movs	r3, #32
 8008d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d3a:	2330      	movs	r3, #48	; 0x30
 8008d3c:	f04f 0901 	mov.w	r9, #1
 8008d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008ef4 <_vfiprintf_r+0x220>
 8008d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d4c:	4623      	mov	r3, r4
 8008d4e:	469a      	mov	sl, r3
 8008d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d54:	b10a      	cbz	r2, 8008d5a <_vfiprintf_r+0x86>
 8008d56:	2a25      	cmp	r2, #37	; 0x25
 8008d58:	d1f9      	bne.n	8008d4e <_vfiprintf_r+0x7a>
 8008d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5e:	d00b      	beq.n	8008d78 <_vfiprintf_r+0xa4>
 8008d60:	465b      	mov	r3, fp
 8008d62:	4622      	mov	r2, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7ff ffa1 	bl	8008cae <__sfputs_r>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	f000 80a9 	beq.w	8008ec4 <_vfiprintf_r+0x1f0>
 8008d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d74:	445a      	add	r2, fp
 8008d76:	9209      	str	r2, [sp, #36]	; 0x24
 8008d78:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80a1 	beq.w	8008ec4 <_vfiprintf_r+0x1f0>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f04f 32ff 	mov.w	r2, #4294967295
 8008d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d8c:	f10a 0a01 	add.w	sl, sl, #1
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	9307      	str	r3, [sp, #28]
 8008d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d98:	931a      	str	r3, [sp, #104]	; 0x68
 8008d9a:	4654      	mov	r4, sl
 8008d9c:	2205      	movs	r2, #5
 8008d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da2:	4854      	ldr	r0, [pc, #336]	; (8008ef4 <_vfiprintf_r+0x220>)
 8008da4:	f7fd fb4f 	bl	8006446 <memchr>
 8008da8:	9a04      	ldr	r2, [sp, #16]
 8008daa:	b9d8      	cbnz	r0, 8008de4 <_vfiprintf_r+0x110>
 8008dac:	06d1      	lsls	r1, r2, #27
 8008dae:	bf44      	itt	mi
 8008db0:	2320      	movmi	r3, #32
 8008db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db6:	0713      	lsls	r3, r2, #28
 8008db8:	bf44      	itt	mi
 8008dba:	232b      	movmi	r3, #43	; 0x2b
 8008dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc6:	d015      	beq.n	8008df4 <_vfiprintf_r+0x120>
 8008dc8:	4654      	mov	r4, sl
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f04f 0c0a 	mov.w	ip, #10
 8008dd0:	9a07      	ldr	r2, [sp, #28]
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd8:	3b30      	subs	r3, #48	; 0x30
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d94d      	bls.n	8008e7a <_vfiprintf_r+0x1a6>
 8008dde:	b1b0      	cbz	r0, 8008e0e <_vfiprintf_r+0x13a>
 8008de0:	9207      	str	r2, [sp, #28]
 8008de2:	e014      	b.n	8008e0e <_vfiprintf_r+0x13a>
 8008de4:	eba0 0308 	sub.w	r3, r0, r8
 8008de8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dec:	4313      	orrs	r3, r2
 8008dee:	46a2      	mov	sl, r4
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	e7d2      	b.n	8008d9a <_vfiprintf_r+0xc6>
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	1d19      	adds	r1, r3, #4
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	9103      	str	r1, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfbb      	ittet	lt
 8008e00:	425b      	neglt	r3, r3
 8008e02:	f042 0202 	orrlt.w	r2, r2, #2
 8008e06:	9307      	strge	r3, [sp, #28]
 8008e08:	9307      	strlt	r3, [sp, #28]
 8008e0a:	bfb8      	it	lt
 8008e0c:	9204      	strlt	r2, [sp, #16]
 8008e0e:	7823      	ldrb	r3, [r4, #0]
 8008e10:	2b2e      	cmp	r3, #46	; 0x2e
 8008e12:	d10c      	bne.n	8008e2e <_vfiprintf_r+0x15a>
 8008e14:	7863      	ldrb	r3, [r4, #1]
 8008e16:	2b2a      	cmp	r3, #42	; 0x2a
 8008e18:	d134      	bne.n	8008e84 <_vfiprintf_r+0x1b0>
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	3402      	adds	r4, #2
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	9203      	str	r2, [sp, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfb8      	it	lt
 8008e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e2c:	9305      	str	r3, [sp, #20]
 8008e2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ef8 <_vfiprintf_r+0x224>
 8008e32:	2203      	movs	r2, #3
 8008e34:	4650      	mov	r0, sl
 8008e36:	7821      	ldrb	r1, [r4, #0]
 8008e38:	f7fd fb05 	bl	8006446 <memchr>
 8008e3c:	b138      	cbz	r0, 8008e4e <_vfiprintf_r+0x17a>
 8008e3e:	2240      	movs	r2, #64	; 0x40
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	eba0 000a 	sub.w	r0, r0, sl
 8008e46:	4082      	lsls	r2, r0
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	3401      	adds	r4, #1
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e52:	2206      	movs	r2, #6
 8008e54:	4829      	ldr	r0, [pc, #164]	; (8008efc <_vfiprintf_r+0x228>)
 8008e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e5a:	f7fd faf4 	bl	8006446 <memchr>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d03f      	beq.n	8008ee2 <_vfiprintf_r+0x20e>
 8008e62:	4b27      	ldr	r3, [pc, #156]	; (8008f00 <_vfiprintf_r+0x22c>)
 8008e64:	bb1b      	cbnz	r3, 8008eae <_vfiprintf_r+0x1da>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	3307      	adds	r3, #7
 8008e6a:	f023 0307 	bic.w	r3, r3, #7
 8008e6e:	3308      	adds	r3, #8
 8008e70:	9303      	str	r3, [sp, #12]
 8008e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e74:	443b      	add	r3, r7
 8008e76:	9309      	str	r3, [sp, #36]	; 0x24
 8008e78:	e768      	b.n	8008d4c <_vfiprintf_r+0x78>
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e82:	e7a6      	b.n	8008dd2 <_vfiprintf_r+0xfe>
 8008e84:	2300      	movs	r3, #0
 8008e86:	f04f 0c0a 	mov.w	ip, #10
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	3401      	adds	r4, #1
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	4620      	mov	r0, r4
 8008e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e96:	3a30      	subs	r2, #48	; 0x30
 8008e98:	2a09      	cmp	r2, #9
 8008e9a:	d903      	bls.n	8008ea4 <_vfiprintf_r+0x1d0>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0c6      	beq.n	8008e2e <_vfiprintf_r+0x15a>
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	e7c4      	b.n	8008e2e <_vfiprintf_r+0x15a>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eac:	e7f0      	b.n	8008e90 <_vfiprintf_r+0x1bc>
 8008eae:	ab03      	add	r3, sp, #12
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4b13      	ldr	r3, [pc, #76]	; (8008f04 <_vfiprintf_r+0x230>)
 8008eb8:	a904      	add	r1, sp, #16
 8008eba:	f7fc f977 	bl	80051ac <_printf_float>
 8008ebe:	4607      	mov	r7, r0
 8008ec0:	1c78      	adds	r0, r7, #1
 8008ec2:	d1d6      	bne.n	8008e72 <_vfiprintf_r+0x19e>
 8008ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	d405      	bmi.n	8008ed6 <_vfiprintf_r+0x202>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	059a      	lsls	r2, r3, #22
 8008ece:	d402      	bmi.n	8008ed6 <_vfiprintf_r+0x202>
 8008ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed2:	f7fd fab7 	bl	8006444 <__retarget_lock_release_recursive>
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	065b      	lsls	r3, r3, #25
 8008eda:	f53f af1d 	bmi.w	8008d18 <_vfiprintf_r+0x44>
 8008ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ee0:	e71c      	b.n	8008d1c <_vfiprintf_r+0x48>
 8008ee2:	ab03      	add	r3, sp, #12
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <_vfiprintf_r+0x230>)
 8008eec:	a904      	add	r1, sp, #16
 8008eee:	f7fc fbfd 	bl	80056ec <_printf_i>
 8008ef2:	e7e4      	b.n	8008ebe <_vfiprintf_r+0x1ea>
 8008ef4:	0800a0b1 	.word	0x0800a0b1
 8008ef8:	0800a0b7 	.word	0x0800a0b7
 8008efc:	0800a0bb 	.word	0x0800a0bb
 8008f00:	080051ad 	.word	0x080051ad
 8008f04:	08008caf 	.word	0x08008caf

08008f08 <__sflush_r>:
 8008f08:	898a      	ldrh	r2, [r1, #12]
 8008f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	0710      	lsls	r0, r2, #28
 8008f10:	460c      	mov	r4, r1
 8008f12:	d457      	bmi.n	8008fc4 <__sflush_r+0xbc>
 8008f14:	684b      	ldr	r3, [r1, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dc04      	bgt.n	8008f24 <__sflush_r+0x1c>
 8008f1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dc01      	bgt.n	8008f24 <__sflush_r+0x1c>
 8008f20:	2000      	movs	r0, #0
 8008f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d0fa      	beq.n	8008f20 <__sflush_r+0x18>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f30:	682f      	ldr	r7, [r5, #0]
 8008f32:	6a21      	ldr	r1, [r4, #32]
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	d032      	beq.n	8008f9e <__sflush_r+0x96>
 8008f38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	075a      	lsls	r2, r3, #29
 8008f3e:	d505      	bpl.n	8008f4c <__sflush_r+0x44>
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	1ac0      	subs	r0, r0, r3
 8008f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f46:	b10b      	cbz	r3, 8008f4c <__sflush_r+0x44>
 8008f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f4a:	1ac0      	subs	r0, r0, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4602      	mov	r2, r0
 8008f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f52:	4628      	mov	r0, r5
 8008f54:	6a21      	ldr	r1, [r4, #32]
 8008f56:	47b0      	blx	r6
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	d106      	bne.n	8008f6c <__sflush_r+0x64>
 8008f5e:	6829      	ldr	r1, [r5, #0]
 8008f60:	291d      	cmp	r1, #29
 8008f62:	d82b      	bhi.n	8008fbc <__sflush_r+0xb4>
 8008f64:	4a28      	ldr	r2, [pc, #160]	; (8009008 <__sflush_r+0x100>)
 8008f66:	410a      	asrs	r2, r1
 8008f68:	07d6      	lsls	r6, r2, #31
 8008f6a:	d427      	bmi.n	8008fbc <__sflush_r+0xb4>
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	6062      	str	r2, [r4, #4]
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	04d9      	lsls	r1, r3, #19
 8008f74:	6022      	str	r2, [r4, #0]
 8008f76:	d504      	bpl.n	8008f82 <__sflush_r+0x7a>
 8008f78:	1c42      	adds	r2, r0, #1
 8008f7a:	d101      	bne.n	8008f80 <__sflush_r+0x78>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b903      	cbnz	r3, 8008f82 <__sflush_r+0x7a>
 8008f80:	6560      	str	r0, [r4, #84]	; 0x54
 8008f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f84:	602f      	str	r7, [r5, #0]
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d0ca      	beq.n	8008f20 <__sflush_r+0x18>
 8008f8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	d002      	beq.n	8008f98 <__sflush_r+0x90>
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7fe f8e8 	bl	8007168 <_free_r>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9c:	e7c1      	b.n	8008f22 <__sflush_r+0x1a>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c41      	adds	r1, r0, #1
 8008fa6:	d1c8      	bne.n	8008f3a <__sflush_r+0x32>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c5      	beq.n	8008f3a <__sflush_r+0x32>
 8008fae:	2b1d      	cmp	r3, #29
 8008fb0:	d001      	beq.n	8008fb6 <__sflush_r+0xae>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0xb2>
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	e7b2      	b.n	8008f20 <__sflush_r+0x18>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7ae      	b.n	8008f22 <__sflush_r+0x1a>
 8008fc4:	690f      	ldr	r7, [r1, #16]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d0aa      	beq.n	8008f20 <__sflush_r+0x18>
 8008fca:	0793      	lsls	r3, r2, #30
 8008fcc:	bf18      	it	ne
 8008fce:	2300      	movne	r3, #0
 8008fd0:	680e      	ldr	r6, [r1, #0]
 8008fd2:	bf08      	it	eq
 8008fd4:	694b      	ldreq	r3, [r1, #20]
 8008fd6:	1bf6      	subs	r6, r6, r7
 8008fd8:	600f      	str	r7, [r1, #0]
 8008fda:	608b      	str	r3, [r1, #8]
 8008fdc:	2e00      	cmp	r6, #0
 8008fde:	dd9f      	ble.n	8008f20 <__sflush_r+0x18>
 8008fe0:	4633      	mov	r3, r6
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008fec:	47e0      	blx	ip
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	dc06      	bgt.n	8009000 <__sflush_r+0xf8>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e790      	b.n	8008f22 <__sflush_r+0x1a>
 8009000:	4407      	add	r7, r0
 8009002:	1a36      	subs	r6, r6, r0
 8009004:	e7ea      	b.n	8008fdc <__sflush_r+0xd4>
 8009006:	bf00      	nop
 8009008:	dfbffffe 	.word	0xdfbffffe

0800900c <_fflush_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	4605      	mov	r5, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b913      	cbnz	r3, 800901c <_fflush_r+0x10>
 8009016:	2500      	movs	r5, #0
 8009018:	4628      	mov	r0, r5
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	b118      	cbz	r0, 8009026 <_fflush_r+0x1a>
 800901e:	6a03      	ldr	r3, [r0, #32]
 8009020:	b90b      	cbnz	r3, 8009026 <_fflush_r+0x1a>
 8009022:	f7fc ff1f 	bl	8005e64 <__sinit>
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f3      	beq.n	8009016 <_fflush_r+0xa>
 800902e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009030:	07d0      	lsls	r0, r2, #31
 8009032:	d404      	bmi.n	800903e <_fflush_r+0x32>
 8009034:	0599      	lsls	r1, r3, #22
 8009036:	d402      	bmi.n	800903e <_fflush_r+0x32>
 8009038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903a:	f7fd fa02 	bl	8006442 <__retarget_lock_acquire_recursive>
 800903e:	4628      	mov	r0, r5
 8009040:	4621      	mov	r1, r4
 8009042:	f7ff ff61 	bl	8008f08 <__sflush_r>
 8009046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009048:	4605      	mov	r5, r0
 800904a:	07da      	lsls	r2, r3, #31
 800904c:	d4e4      	bmi.n	8009018 <_fflush_r+0xc>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	059b      	lsls	r3, r3, #22
 8009052:	d4e1      	bmi.n	8009018 <_fflush_r+0xc>
 8009054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009056:	f7fd f9f5 	bl	8006444 <__retarget_lock_release_recursive>
 800905a:	e7dd      	b.n	8009018 <_fflush_r+0xc>

0800905c <__swhatbuf_r>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	4615      	mov	r5, r2
 8009066:	2900      	cmp	r1, #0
 8009068:	461e      	mov	r6, r3
 800906a:	b096      	sub	sp, #88	; 0x58
 800906c:	da0c      	bge.n	8009088 <__swhatbuf_r+0x2c>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	2100      	movs	r1, #0
 8009072:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009076:	bf0c      	ite	eq
 8009078:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800907c:	2340      	movne	r3, #64	; 0x40
 800907e:	2000      	movs	r0, #0
 8009080:	6031      	str	r1, [r6, #0]
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	b016      	add	sp, #88	; 0x58
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	466a      	mov	r2, sp
 800908a:	f000 f863 	bl	8009154 <_fstat_r>
 800908e:	2800      	cmp	r0, #0
 8009090:	dbed      	blt.n	800906e <__swhatbuf_r+0x12>
 8009092:	9901      	ldr	r1, [sp, #4]
 8009094:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009098:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800909c:	4259      	negs	r1, r3
 800909e:	4159      	adcs	r1, r3
 80090a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a4:	e7eb      	b.n	800907e <__swhatbuf_r+0x22>

080090a6 <__smakebuf_r>:
 80090a6:	898b      	ldrh	r3, [r1, #12]
 80090a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090aa:	079d      	lsls	r5, r3, #30
 80090ac:	4606      	mov	r6, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	d507      	bpl.n	80090c2 <__smakebuf_r+0x1c>
 80090b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	2301      	movs	r3, #1
 80090bc:	6163      	str	r3, [r4, #20]
 80090be:	b002      	add	sp, #8
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
 80090c2:	466a      	mov	r2, sp
 80090c4:	ab01      	add	r3, sp, #4
 80090c6:	f7ff ffc9 	bl	800905c <__swhatbuf_r>
 80090ca:	9900      	ldr	r1, [sp, #0]
 80090cc:	4605      	mov	r5, r0
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7fe f8ba 	bl	8007248 <_malloc_r>
 80090d4:	b948      	cbnz	r0, 80090ea <__smakebuf_r+0x44>
 80090d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090da:	059a      	lsls	r2, r3, #22
 80090dc:	d4ef      	bmi.n	80090be <__smakebuf_r+0x18>
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	f043 0302 	orr.w	r3, r3, #2
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	e7e3      	b.n	80090b2 <__smakebuf_r+0xc>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	6020      	str	r0, [r4, #0]
 80090ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	6120      	str	r0, [r4, #16]
 80090f8:	6163      	str	r3, [r4, #20]
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	b15b      	cbz	r3, 8009116 <__smakebuf_r+0x70>
 80090fe:	4630      	mov	r0, r6
 8009100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009104:	f000 f838 	bl	8009178 <_isatty_r>
 8009108:	b128      	cbz	r0, 8009116 <__smakebuf_r+0x70>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	431d      	orrs	r5, r3
 800911a:	81a5      	strh	r5, [r4, #12]
 800911c:	e7cf      	b.n	80090be <__smakebuf_r+0x18>

0800911e <memmove>:
 800911e:	4288      	cmp	r0, r1
 8009120:	b510      	push	{r4, lr}
 8009122:	eb01 0402 	add.w	r4, r1, r2
 8009126:	d902      	bls.n	800912e <memmove+0x10>
 8009128:	4284      	cmp	r4, r0
 800912a:	4623      	mov	r3, r4
 800912c:	d807      	bhi.n	800913e <memmove+0x20>
 800912e:	1e43      	subs	r3, r0, #1
 8009130:	42a1      	cmp	r1, r4
 8009132:	d008      	beq.n	8009146 <memmove+0x28>
 8009134:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009138:	f803 2f01 	strb.w	r2, [r3, #1]!
 800913c:	e7f8      	b.n	8009130 <memmove+0x12>
 800913e:	4601      	mov	r1, r0
 8009140:	4402      	add	r2, r0
 8009142:	428a      	cmp	r2, r1
 8009144:	d100      	bne.n	8009148 <memmove+0x2a>
 8009146:	bd10      	pop	{r4, pc}
 8009148:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800914c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009150:	e7f7      	b.n	8009142 <memmove+0x24>
	...

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	2300      	movs	r3, #0
 8009158:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_fstat_r+0x20>)
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f8 f873 	bl	800124c <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000cec 	.word	0x20000cec

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	2300      	movs	r3, #0
 800917c:	4d05      	ldr	r5, [pc, #20]	; (8009194 <_isatty_r+0x1c>)
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 f871 	bl	800126a <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000cec 	.word	0x20000cec

08009198 <_sbrk_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	2300      	movs	r3, #0
 800919c:	4d05      	ldr	r5, [pc, #20]	; (80091b4 <_sbrk_r+0x1c>)
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	f7f8 f878 	bl	8001298 <_sbrk>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_sbrk_r+0x1a>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_sbrk_r+0x1a>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000cec 	.word	0x20000cec

080091b8 <nan>:
 80091b8:	2000      	movs	r0, #0
 80091ba:	4901      	ldr	r1, [pc, #4]	; (80091c0 <nan+0x8>)
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	7ff80000 	.word	0x7ff80000

080091c4 <__assert_func>:
 80091c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091c6:	4614      	mov	r4, r2
 80091c8:	461a      	mov	r2, r3
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <__assert_func+0x2c>)
 80091cc:	4605      	mov	r5, r0
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68d8      	ldr	r0, [r3, #12]
 80091d2:	b14c      	cbz	r4, 80091e8 <__assert_func+0x24>
 80091d4:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <__assert_func+0x30>)
 80091d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091da:	9100      	str	r1, [sp, #0]
 80091dc:	462b      	mov	r3, r5
 80091de:	4906      	ldr	r1, [pc, #24]	; (80091f8 <__assert_func+0x34>)
 80091e0:	f000 fbca 	bl	8009978 <fiprintf>
 80091e4:	f000 fbda 	bl	800999c <abort>
 80091e8:	4b04      	ldr	r3, [pc, #16]	; (80091fc <__assert_func+0x38>)
 80091ea:	461c      	mov	r4, r3
 80091ec:	e7f3      	b.n	80091d6 <__assert_func+0x12>
 80091ee:	bf00      	nop
 80091f0:	20000068 	.word	0x20000068
 80091f4:	0800a0ca 	.word	0x0800a0ca
 80091f8:	0800a0d7 	.word	0x0800a0d7
 80091fc:	0800a105 	.word	0x0800a105

08009200 <_calloc_r>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	fba1 5402 	umull	r5, r4, r1, r2
 8009206:	b934      	cbnz	r4, 8009216 <_calloc_r+0x16>
 8009208:	4629      	mov	r1, r5
 800920a:	f7fe f81d 	bl	8007248 <_malloc_r>
 800920e:	4606      	mov	r6, r0
 8009210:	b928      	cbnz	r0, 800921e <_calloc_r+0x1e>
 8009212:	4630      	mov	r0, r6
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	220c      	movs	r2, #12
 8009218:	2600      	movs	r6, #0
 800921a:	6002      	str	r2, [r0, #0]
 800921c:	e7f9      	b.n	8009212 <_calloc_r+0x12>
 800921e:	462a      	mov	r2, r5
 8009220:	4621      	mov	r1, r4
 8009222:	f7fd f869 	bl	80062f8 <memset>
 8009226:	e7f4      	b.n	8009212 <_calloc_r+0x12>

08009228 <rshift>:
 8009228:	6903      	ldr	r3, [r0, #16]
 800922a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800922e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009232:	f100 0414 	add.w	r4, r0, #20
 8009236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800923a:	dd46      	ble.n	80092ca <rshift+0xa2>
 800923c:	f011 011f 	ands.w	r1, r1, #31
 8009240:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009244:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009248:	d10c      	bne.n	8009264 <rshift+0x3c>
 800924a:	4629      	mov	r1, r5
 800924c:	f100 0710 	add.w	r7, r0, #16
 8009250:	42b1      	cmp	r1, r6
 8009252:	d335      	bcc.n	80092c0 <rshift+0x98>
 8009254:	1a9b      	subs	r3, r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	1eea      	subs	r2, r5, #3
 800925a:	4296      	cmp	r6, r2
 800925c:	bf38      	it	cc
 800925e:	2300      	movcc	r3, #0
 8009260:	4423      	add	r3, r4
 8009262:	e015      	b.n	8009290 <rshift+0x68>
 8009264:	46a1      	mov	r9, r4
 8009266:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800926a:	f1c1 0820 	rsb	r8, r1, #32
 800926e:	40cf      	lsrs	r7, r1
 8009270:	f105 0e04 	add.w	lr, r5, #4
 8009274:	4576      	cmp	r6, lr
 8009276:	46f4      	mov	ip, lr
 8009278:	d816      	bhi.n	80092a8 <rshift+0x80>
 800927a:	1a9a      	subs	r2, r3, r2
 800927c:	0092      	lsls	r2, r2, #2
 800927e:	3a04      	subs	r2, #4
 8009280:	3501      	adds	r5, #1
 8009282:	42ae      	cmp	r6, r5
 8009284:	bf38      	it	cc
 8009286:	2200      	movcc	r2, #0
 8009288:	18a3      	adds	r3, r4, r2
 800928a:	50a7      	str	r7, [r4, r2]
 800928c:	b107      	cbz	r7, 8009290 <rshift+0x68>
 800928e:	3304      	adds	r3, #4
 8009290:	42a3      	cmp	r3, r4
 8009292:	eba3 0204 	sub.w	r2, r3, r4
 8009296:	bf08      	it	eq
 8009298:	2300      	moveq	r3, #0
 800929a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800929e:	6102      	str	r2, [r0, #16]
 80092a0:	bf08      	it	eq
 80092a2:	6143      	streq	r3, [r0, #20]
 80092a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092a8:	f8dc c000 	ldr.w	ip, [ip]
 80092ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80092b0:	ea4c 0707 	orr.w	r7, ip, r7
 80092b4:	f849 7b04 	str.w	r7, [r9], #4
 80092b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092bc:	40cf      	lsrs	r7, r1
 80092be:	e7d9      	b.n	8009274 <rshift+0x4c>
 80092c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80092c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80092c8:	e7c2      	b.n	8009250 <rshift+0x28>
 80092ca:	4623      	mov	r3, r4
 80092cc:	e7e0      	b.n	8009290 <rshift+0x68>

080092ce <__hexdig_fun>:
 80092ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092d2:	2b09      	cmp	r3, #9
 80092d4:	d802      	bhi.n	80092dc <__hexdig_fun+0xe>
 80092d6:	3820      	subs	r0, #32
 80092d8:	b2c0      	uxtb	r0, r0
 80092da:	4770      	bx	lr
 80092dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092e0:	2b05      	cmp	r3, #5
 80092e2:	d801      	bhi.n	80092e8 <__hexdig_fun+0x1a>
 80092e4:	3847      	subs	r0, #71	; 0x47
 80092e6:	e7f7      	b.n	80092d8 <__hexdig_fun+0xa>
 80092e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	d801      	bhi.n	80092f4 <__hexdig_fun+0x26>
 80092f0:	3827      	subs	r0, #39	; 0x27
 80092f2:	e7f1      	b.n	80092d8 <__hexdig_fun+0xa>
 80092f4:	2000      	movs	r0, #0
 80092f6:	4770      	bx	lr

080092f8 <__gethex>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	4681      	mov	r9, r0
 80092fe:	468a      	mov	sl, r1
 8009300:	4617      	mov	r7, r2
 8009302:	680a      	ldr	r2, [r1, #0]
 8009304:	b085      	sub	sp, #20
 8009306:	f102 0b02 	add.w	fp, r2, #2
 800930a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800930e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009312:	9302      	str	r3, [sp, #8]
 8009314:	32fe      	adds	r2, #254	; 0xfe
 8009316:	eb02 030b 	add.w	r3, r2, fp
 800931a:	46d8      	mov	r8, fp
 800931c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	2830      	cmp	r0, #48	; 0x30
 8009324:	d0f7      	beq.n	8009316 <__gethex+0x1e>
 8009326:	f7ff ffd2 	bl	80092ce <__hexdig_fun>
 800932a:	4604      	mov	r4, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	d138      	bne.n	80093a2 <__gethex+0xaa>
 8009330:	2201      	movs	r2, #1
 8009332:	4640      	mov	r0, r8
 8009334:	49a7      	ldr	r1, [pc, #668]	; (80095d4 <__gethex+0x2dc>)
 8009336:	f7fc ffe7 	bl	8006308 <strncmp>
 800933a:	4606      	mov	r6, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	d169      	bne.n	8009414 <__gethex+0x11c>
 8009340:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009344:	465d      	mov	r5, fp
 8009346:	f7ff ffc2 	bl	80092ce <__hexdig_fun>
 800934a:	2800      	cmp	r0, #0
 800934c:	d064      	beq.n	8009418 <__gethex+0x120>
 800934e:	465a      	mov	r2, fp
 8009350:	7810      	ldrb	r0, [r2, #0]
 8009352:	4690      	mov	r8, r2
 8009354:	2830      	cmp	r0, #48	; 0x30
 8009356:	f102 0201 	add.w	r2, r2, #1
 800935a:	d0f9      	beq.n	8009350 <__gethex+0x58>
 800935c:	f7ff ffb7 	bl	80092ce <__hexdig_fun>
 8009360:	2301      	movs	r3, #1
 8009362:	fab0 f480 	clz	r4, r0
 8009366:	465e      	mov	r6, fp
 8009368:	0964      	lsrs	r4, r4, #5
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	4642      	mov	r2, r8
 800936e:	4615      	mov	r5, r2
 8009370:	7828      	ldrb	r0, [r5, #0]
 8009372:	3201      	adds	r2, #1
 8009374:	f7ff ffab 	bl	80092ce <__hexdig_fun>
 8009378:	2800      	cmp	r0, #0
 800937a:	d1f8      	bne.n	800936e <__gethex+0x76>
 800937c:	2201      	movs	r2, #1
 800937e:	4628      	mov	r0, r5
 8009380:	4994      	ldr	r1, [pc, #592]	; (80095d4 <__gethex+0x2dc>)
 8009382:	f7fc ffc1 	bl	8006308 <strncmp>
 8009386:	b978      	cbnz	r0, 80093a8 <__gethex+0xb0>
 8009388:	b946      	cbnz	r6, 800939c <__gethex+0xa4>
 800938a:	1c6e      	adds	r6, r5, #1
 800938c:	4632      	mov	r2, r6
 800938e:	4615      	mov	r5, r2
 8009390:	7828      	ldrb	r0, [r5, #0]
 8009392:	3201      	adds	r2, #1
 8009394:	f7ff ff9b 	bl	80092ce <__hexdig_fun>
 8009398:	2800      	cmp	r0, #0
 800939a:	d1f8      	bne.n	800938e <__gethex+0x96>
 800939c:	1b73      	subs	r3, r6, r5
 800939e:	009e      	lsls	r6, r3, #2
 80093a0:	e004      	b.n	80093ac <__gethex+0xb4>
 80093a2:	2400      	movs	r4, #0
 80093a4:	4626      	mov	r6, r4
 80093a6:	e7e1      	b.n	800936c <__gethex+0x74>
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	d1f7      	bne.n	800939c <__gethex+0xa4>
 80093ac:	782b      	ldrb	r3, [r5, #0]
 80093ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093b2:	2b50      	cmp	r3, #80	; 0x50
 80093b4:	d13d      	bne.n	8009432 <__gethex+0x13a>
 80093b6:	786b      	ldrb	r3, [r5, #1]
 80093b8:	2b2b      	cmp	r3, #43	; 0x2b
 80093ba:	d02f      	beq.n	800941c <__gethex+0x124>
 80093bc:	2b2d      	cmp	r3, #45	; 0x2d
 80093be:	d031      	beq.n	8009424 <__gethex+0x12c>
 80093c0:	f04f 0b00 	mov.w	fp, #0
 80093c4:	1c69      	adds	r1, r5, #1
 80093c6:	7808      	ldrb	r0, [r1, #0]
 80093c8:	f7ff ff81 	bl	80092ce <__hexdig_fun>
 80093cc:	1e42      	subs	r2, r0, #1
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	2a18      	cmp	r2, #24
 80093d2:	d82e      	bhi.n	8009432 <__gethex+0x13a>
 80093d4:	f1a0 0210 	sub.w	r2, r0, #16
 80093d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093dc:	f7ff ff77 	bl	80092ce <__hexdig_fun>
 80093e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80093e4:	fa5f fc8c 	uxtb.w	ip, ip
 80093e8:	f1bc 0f18 	cmp.w	ip, #24
 80093ec:	d91d      	bls.n	800942a <__gethex+0x132>
 80093ee:	f1bb 0f00 	cmp.w	fp, #0
 80093f2:	d000      	beq.n	80093f6 <__gethex+0xfe>
 80093f4:	4252      	negs	r2, r2
 80093f6:	4416      	add	r6, r2
 80093f8:	f8ca 1000 	str.w	r1, [sl]
 80093fc:	b1dc      	cbz	r4, 8009436 <__gethex+0x13e>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bf14      	ite	ne
 8009404:	f04f 0800 	movne.w	r8, #0
 8009408:	f04f 0806 	moveq.w	r8, #6
 800940c:	4640      	mov	r0, r8
 800940e:	b005      	add	sp, #20
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	4645      	mov	r5, r8
 8009416:	4626      	mov	r6, r4
 8009418:	2401      	movs	r4, #1
 800941a:	e7c7      	b.n	80093ac <__gethex+0xb4>
 800941c:	f04f 0b00 	mov.w	fp, #0
 8009420:	1ca9      	adds	r1, r5, #2
 8009422:	e7d0      	b.n	80093c6 <__gethex+0xce>
 8009424:	f04f 0b01 	mov.w	fp, #1
 8009428:	e7fa      	b.n	8009420 <__gethex+0x128>
 800942a:	230a      	movs	r3, #10
 800942c:	fb03 0002 	mla	r0, r3, r2, r0
 8009430:	e7d0      	b.n	80093d4 <__gethex+0xdc>
 8009432:	4629      	mov	r1, r5
 8009434:	e7e0      	b.n	80093f8 <__gethex+0x100>
 8009436:	4621      	mov	r1, r4
 8009438:	eba5 0308 	sub.w	r3, r5, r8
 800943c:	3b01      	subs	r3, #1
 800943e:	2b07      	cmp	r3, #7
 8009440:	dc0a      	bgt.n	8009458 <__gethex+0x160>
 8009442:	4648      	mov	r0, r9
 8009444:	f7fd ff8c 	bl	8007360 <_Balloc>
 8009448:	4604      	mov	r4, r0
 800944a:	b940      	cbnz	r0, 800945e <__gethex+0x166>
 800944c:	4602      	mov	r2, r0
 800944e:	21e4      	movs	r1, #228	; 0xe4
 8009450:	4b61      	ldr	r3, [pc, #388]	; (80095d8 <__gethex+0x2e0>)
 8009452:	4862      	ldr	r0, [pc, #392]	; (80095dc <__gethex+0x2e4>)
 8009454:	f7ff feb6 	bl	80091c4 <__assert_func>
 8009458:	3101      	adds	r1, #1
 800945a:	105b      	asrs	r3, r3, #1
 800945c:	e7ef      	b.n	800943e <__gethex+0x146>
 800945e:	2300      	movs	r3, #0
 8009460:	469b      	mov	fp, r3
 8009462:	f100 0a14 	add.w	sl, r0, #20
 8009466:	f8cd a004 	str.w	sl, [sp, #4]
 800946a:	45a8      	cmp	r8, r5
 800946c:	d344      	bcc.n	80094f8 <__gethex+0x200>
 800946e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009472:	4658      	mov	r0, fp
 8009474:	f848 bb04 	str.w	fp, [r8], #4
 8009478:	eba8 080a 	sub.w	r8, r8, sl
 800947c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009480:	6122      	str	r2, [r4, #16]
 8009482:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009486:	f7fe f85d 	bl	8007544 <__hi0bits>
 800948a:	683d      	ldr	r5, [r7, #0]
 800948c:	eba8 0800 	sub.w	r8, r8, r0
 8009490:	45a8      	cmp	r8, r5
 8009492:	dd59      	ble.n	8009548 <__gethex+0x250>
 8009494:	eba8 0805 	sub.w	r8, r8, r5
 8009498:	4641      	mov	r1, r8
 800949a:	4620      	mov	r0, r4
 800949c:	f7fe fbdb 	bl	8007c56 <__any_on>
 80094a0:	4683      	mov	fp, r0
 80094a2:	b1b8      	cbz	r0, 80094d4 <__gethex+0x1dc>
 80094a4:	f04f 0b01 	mov.w	fp, #1
 80094a8:	f108 33ff 	add.w	r3, r8, #4294967295
 80094ac:	1159      	asrs	r1, r3, #5
 80094ae:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094b2:	f003 021f 	and.w	r2, r3, #31
 80094b6:	fa0b f202 	lsl.w	r2, fp, r2
 80094ba:	420a      	tst	r2, r1
 80094bc:	d00a      	beq.n	80094d4 <__gethex+0x1dc>
 80094be:	455b      	cmp	r3, fp
 80094c0:	dd06      	ble.n	80094d0 <__gethex+0x1d8>
 80094c2:	4620      	mov	r0, r4
 80094c4:	f1a8 0102 	sub.w	r1, r8, #2
 80094c8:	f7fe fbc5 	bl	8007c56 <__any_on>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d138      	bne.n	8009542 <__gethex+0x24a>
 80094d0:	f04f 0b02 	mov.w	fp, #2
 80094d4:	4641      	mov	r1, r8
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff fea6 	bl	8009228 <rshift>
 80094dc:	4446      	add	r6, r8
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	42b3      	cmp	r3, r6
 80094e2:	da41      	bge.n	8009568 <__gethex+0x270>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4648      	mov	r0, r9
 80094e8:	f7fd ff7a 	bl	80073e0 <_Bfree>
 80094ec:	2300      	movs	r3, #0
 80094ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e789      	b.n	800940c <__gethex+0x114>
 80094f8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80094fc:	2a2e      	cmp	r2, #46	; 0x2e
 80094fe:	d014      	beq.n	800952a <__gethex+0x232>
 8009500:	2b20      	cmp	r3, #32
 8009502:	d106      	bne.n	8009512 <__gethex+0x21a>
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	f843 bb04 	str.w	fp, [r3], #4
 800950a:	f04f 0b00 	mov.w	fp, #0
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	465b      	mov	r3, fp
 8009512:	7828      	ldrb	r0, [r5, #0]
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	f7ff feda 	bl	80092ce <__hexdig_fun>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	f000 000f 	and.w	r0, r0, #15
 8009520:	4098      	lsls	r0, r3
 8009522:	ea4b 0b00 	orr.w	fp, fp, r0
 8009526:	3304      	adds	r3, #4
 8009528:	e79f      	b.n	800946a <__gethex+0x172>
 800952a:	45a8      	cmp	r8, r5
 800952c:	d8e8      	bhi.n	8009500 <__gethex+0x208>
 800952e:	2201      	movs	r2, #1
 8009530:	4628      	mov	r0, r5
 8009532:	4928      	ldr	r1, [pc, #160]	; (80095d4 <__gethex+0x2dc>)
 8009534:	9303      	str	r3, [sp, #12]
 8009536:	f7fc fee7 	bl	8006308 <strncmp>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	2800      	cmp	r0, #0
 800953e:	d1df      	bne.n	8009500 <__gethex+0x208>
 8009540:	e793      	b.n	800946a <__gethex+0x172>
 8009542:	f04f 0b03 	mov.w	fp, #3
 8009546:	e7c5      	b.n	80094d4 <__gethex+0x1dc>
 8009548:	da0b      	bge.n	8009562 <__gethex+0x26a>
 800954a:	eba5 0808 	sub.w	r8, r5, r8
 800954e:	4621      	mov	r1, r4
 8009550:	4642      	mov	r2, r8
 8009552:	4648      	mov	r0, r9
 8009554:	f7fe f95c 	bl	8007810 <__lshift>
 8009558:	4604      	mov	r4, r0
 800955a:	eba6 0608 	sub.w	r6, r6, r8
 800955e:	f100 0a14 	add.w	sl, r0, #20
 8009562:	f04f 0b00 	mov.w	fp, #0
 8009566:	e7ba      	b.n	80094de <__gethex+0x1e6>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	42b3      	cmp	r3, r6
 800956c:	dd74      	ble.n	8009658 <__gethex+0x360>
 800956e:	1b9e      	subs	r6, r3, r6
 8009570:	42b5      	cmp	r5, r6
 8009572:	dc35      	bgt.n	80095e0 <__gethex+0x2e8>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d023      	beq.n	80095c2 <__gethex+0x2ca>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d025      	beq.n	80095ca <__gethex+0x2d2>
 800957e:	2b01      	cmp	r3, #1
 8009580:	d115      	bne.n	80095ae <__gethex+0x2b6>
 8009582:	42b5      	cmp	r5, r6
 8009584:	d113      	bne.n	80095ae <__gethex+0x2b6>
 8009586:	2d01      	cmp	r5, #1
 8009588:	d10b      	bne.n	80095a2 <__gethex+0x2aa>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	9a02      	ldr	r2, [sp, #8]
 800958e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	2301      	movs	r3, #1
 8009596:	6123      	str	r3, [r4, #16]
 8009598:	f8ca 3000 	str.w	r3, [sl]
 800959c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800959e:	601c      	str	r4, [r3, #0]
 80095a0:	e734      	b.n	800940c <__gethex+0x114>
 80095a2:	4620      	mov	r0, r4
 80095a4:	1e69      	subs	r1, r5, #1
 80095a6:	f7fe fb56 	bl	8007c56 <__any_on>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1ed      	bne.n	800958a <__gethex+0x292>
 80095ae:	4621      	mov	r1, r4
 80095b0:	4648      	mov	r0, r9
 80095b2:	f7fd ff15 	bl	80073e0 <_Bfree>
 80095b6:	2300      	movs	r3, #0
 80095b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	e724      	b.n	800940c <__gethex+0x114>
 80095c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1f2      	bne.n	80095ae <__gethex+0x2b6>
 80095c8:	e7df      	b.n	800958a <__gethex+0x292>
 80095ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1dc      	bne.n	800958a <__gethex+0x292>
 80095d0:	e7ed      	b.n	80095ae <__gethex+0x2b6>
 80095d2:	bf00      	nop
 80095d4:	08009f5c 	.word	0x08009f5c
 80095d8:	08009df3 	.word	0x08009df3
 80095dc:	0800a106 	.word	0x0800a106
 80095e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80095e4:	f1bb 0f00 	cmp.w	fp, #0
 80095e8:	d133      	bne.n	8009652 <__gethex+0x35a>
 80095ea:	f1b8 0f00 	cmp.w	r8, #0
 80095ee:	d004      	beq.n	80095fa <__gethex+0x302>
 80095f0:	4641      	mov	r1, r8
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7fe fb2f 	bl	8007c56 <__any_on>
 80095f8:	4683      	mov	fp, r0
 80095fa:	2301      	movs	r3, #1
 80095fc:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009600:	f008 081f 	and.w	r8, r8, #31
 8009604:	fa03 f308 	lsl.w	r3, r3, r8
 8009608:	f04f 0802 	mov.w	r8, #2
 800960c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009610:	4631      	mov	r1, r6
 8009612:	4213      	tst	r3, r2
 8009614:	4620      	mov	r0, r4
 8009616:	bf18      	it	ne
 8009618:	f04b 0b02 	orrne.w	fp, fp, #2
 800961c:	1bad      	subs	r5, r5, r6
 800961e:	f7ff fe03 	bl	8009228 <rshift>
 8009622:	687e      	ldr	r6, [r7, #4]
 8009624:	f1bb 0f00 	cmp.w	fp, #0
 8009628:	d04a      	beq.n	80096c0 <__gethex+0x3c8>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d016      	beq.n	800965e <__gethex+0x366>
 8009630:	2b03      	cmp	r3, #3
 8009632:	d018      	beq.n	8009666 <__gethex+0x36e>
 8009634:	2b01      	cmp	r3, #1
 8009636:	d109      	bne.n	800964c <__gethex+0x354>
 8009638:	f01b 0f02 	tst.w	fp, #2
 800963c:	d006      	beq.n	800964c <__gethex+0x354>
 800963e:	f8da 3000 	ldr.w	r3, [sl]
 8009642:	ea4b 0b03 	orr.w	fp, fp, r3
 8009646:	f01b 0f01 	tst.w	fp, #1
 800964a:	d10f      	bne.n	800966c <__gethex+0x374>
 800964c:	f048 0810 	orr.w	r8, r8, #16
 8009650:	e036      	b.n	80096c0 <__gethex+0x3c8>
 8009652:	f04f 0b01 	mov.w	fp, #1
 8009656:	e7d0      	b.n	80095fa <__gethex+0x302>
 8009658:	f04f 0801 	mov.w	r8, #1
 800965c:	e7e2      	b.n	8009624 <__gethex+0x32c>
 800965e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009660:	f1c3 0301 	rsb	r3, r3, #1
 8009664:	930f      	str	r3, [sp, #60]	; 0x3c
 8009666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0ef      	beq.n	800964c <__gethex+0x354>
 800966c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009670:	f104 0214 	add.w	r2, r4, #20
 8009674:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	2300      	movs	r3, #0
 800967c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009680:	4694      	mov	ip, r2
 8009682:	f852 1b04 	ldr.w	r1, [r2], #4
 8009686:	f1b1 3fff 	cmp.w	r1, #4294967295
 800968a:	d01e      	beq.n	80096ca <__gethex+0x3d2>
 800968c:	3101      	adds	r1, #1
 800968e:	f8cc 1000 	str.w	r1, [ip]
 8009692:	f1b8 0f02 	cmp.w	r8, #2
 8009696:	f104 0214 	add.w	r2, r4, #20
 800969a:	d13d      	bne.n	8009718 <__gethex+0x420>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	3b01      	subs	r3, #1
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	d10b      	bne.n	80096bc <__gethex+0x3c4>
 80096a4:	2301      	movs	r3, #1
 80096a6:	1169      	asrs	r1, r5, #5
 80096a8:	f005 051f 	and.w	r5, r5, #31
 80096ac:	fa03 f505 	lsl.w	r5, r3, r5
 80096b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096b4:	421d      	tst	r5, r3
 80096b6:	bf18      	it	ne
 80096b8:	f04f 0801 	movne.w	r8, #1
 80096bc:	f048 0820 	orr.w	r8, r8, #32
 80096c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c2:	601c      	str	r4, [r3, #0]
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	601e      	str	r6, [r3, #0]
 80096c8:	e6a0      	b.n	800940c <__gethex+0x114>
 80096ca:	4290      	cmp	r0, r2
 80096cc:	f842 3c04 	str.w	r3, [r2, #-4]
 80096d0:	d8d6      	bhi.n	8009680 <__gethex+0x388>
 80096d2:	68a2      	ldr	r2, [r4, #8]
 80096d4:	4593      	cmp	fp, r2
 80096d6:	db17      	blt.n	8009708 <__gethex+0x410>
 80096d8:	6861      	ldr	r1, [r4, #4]
 80096da:	4648      	mov	r0, r9
 80096dc:	3101      	adds	r1, #1
 80096de:	f7fd fe3f 	bl	8007360 <_Balloc>
 80096e2:	4682      	mov	sl, r0
 80096e4:	b918      	cbnz	r0, 80096ee <__gethex+0x3f6>
 80096e6:	4602      	mov	r2, r0
 80096e8:	2184      	movs	r1, #132	; 0x84
 80096ea:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <__gethex+0x45c>)
 80096ec:	e6b1      	b.n	8009452 <__gethex+0x15a>
 80096ee:	6922      	ldr	r2, [r4, #16]
 80096f0:	f104 010c 	add.w	r1, r4, #12
 80096f4:	3202      	adds	r2, #2
 80096f6:	0092      	lsls	r2, r2, #2
 80096f8:	300c      	adds	r0, #12
 80096fa:	f7fc feb2 	bl	8006462 <memcpy>
 80096fe:	4621      	mov	r1, r4
 8009700:	4648      	mov	r0, r9
 8009702:	f7fd fe6d 	bl	80073e0 <_Bfree>
 8009706:	4654      	mov	r4, sl
 8009708:	6922      	ldr	r2, [r4, #16]
 800970a:	1c51      	adds	r1, r2, #1
 800970c:	6121      	str	r1, [r4, #16]
 800970e:	2101      	movs	r1, #1
 8009710:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009714:	6151      	str	r1, [r2, #20]
 8009716:	e7bc      	b.n	8009692 <__gethex+0x39a>
 8009718:	6921      	ldr	r1, [r4, #16]
 800971a:	4559      	cmp	r1, fp
 800971c:	dd0b      	ble.n	8009736 <__gethex+0x43e>
 800971e:	2101      	movs	r1, #1
 8009720:	4620      	mov	r0, r4
 8009722:	f7ff fd81 	bl	8009228 <rshift>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	3601      	adds	r6, #1
 800972a:	42b3      	cmp	r3, r6
 800972c:	f6ff aeda 	blt.w	80094e4 <__gethex+0x1ec>
 8009730:	f04f 0801 	mov.w	r8, #1
 8009734:	e7c2      	b.n	80096bc <__gethex+0x3c4>
 8009736:	f015 051f 	ands.w	r5, r5, #31
 800973a:	d0f9      	beq.n	8009730 <__gethex+0x438>
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	f1c5 0520 	rsb	r5, r5, #32
 8009742:	441a      	add	r2, r3
 8009744:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009748:	f7fd fefc 	bl	8007544 <__hi0bits>
 800974c:	42a8      	cmp	r0, r5
 800974e:	dbe6      	blt.n	800971e <__gethex+0x426>
 8009750:	e7ee      	b.n	8009730 <__gethex+0x438>
 8009752:	bf00      	nop
 8009754:	08009df3 	.word	0x08009df3

08009758 <L_shift>:
 8009758:	f1c2 0208 	rsb	r2, r2, #8
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	b570      	push	{r4, r5, r6, lr}
 8009760:	f1c2 0620 	rsb	r6, r2, #32
 8009764:	6843      	ldr	r3, [r0, #4]
 8009766:	6804      	ldr	r4, [r0, #0]
 8009768:	fa03 f506 	lsl.w	r5, r3, r6
 800976c:	432c      	orrs	r4, r5
 800976e:	40d3      	lsrs	r3, r2
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	f840 3f04 	str.w	r3, [r0, #4]!
 8009776:	4288      	cmp	r0, r1
 8009778:	d3f4      	bcc.n	8009764 <L_shift+0xc>
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <__match>:
 800977c:	b530      	push	{r4, r5, lr}
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009786:	b914      	cbnz	r4, 800978e <__match+0x12>
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	2001      	movs	r0, #1
 800978c:	bd30      	pop	{r4, r5, pc}
 800978e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009792:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009796:	2d19      	cmp	r5, #25
 8009798:	bf98      	it	ls
 800979a:	3220      	addls	r2, #32
 800979c:	42a2      	cmp	r2, r4
 800979e:	d0f0      	beq.n	8009782 <__match+0x6>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7f3      	b.n	800978c <__match+0x10>

080097a4 <__hexnan>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	2500      	movs	r5, #0
 80097aa:	680b      	ldr	r3, [r1, #0]
 80097ac:	4682      	mov	sl, r0
 80097ae:	115e      	asrs	r6, r3, #5
 80097b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097b4:	f013 031f 	ands.w	r3, r3, #31
 80097b8:	bf18      	it	ne
 80097ba:	3604      	addne	r6, #4
 80097bc:	1f37      	subs	r7, r6, #4
 80097be:	4690      	mov	r8, r2
 80097c0:	46b9      	mov	r9, r7
 80097c2:	463c      	mov	r4, r7
 80097c4:	46ab      	mov	fp, r5
 80097c6:	b087      	sub	sp, #28
 80097c8:	6801      	ldr	r1, [r0, #0]
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80097d0:	9502      	str	r5, [sp, #8]
 80097d2:	784a      	ldrb	r2, [r1, #1]
 80097d4:	1c4b      	adds	r3, r1, #1
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	b342      	cbz	r2, 800982c <__hexnan+0x88>
 80097da:	4610      	mov	r0, r2
 80097dc:	9105      	str	r1, [sp, #20]
 80097de:	9204      	str	r2, [sp, #16]
 80097e0:	f7ff fd75 	bl	80092ce <__hexdig_fun>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d14f      	bne.n	8009888 <__hexnan+0xe4>
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	9905      	ldr	r1, [sp, #20]
 80097ec:	2a20      	cmp	r2, #32
 80097ee:	d818      	bhi.n	8009822 <__hexnan+0x7e>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	459b      	cmp	fp, r3
 80097f4:	dd13      	ble.n	800981e <__hexnan+0x7a>
 80097f6:	454c      	cmp	r4, r9
 80097f8:	d206      	bcs.n	8009808 <__hexnan+0x64>
 80097fa:	2d07      	cmp	r5, #7
 80097fc:	dc04      	bgt.n	8009808 <__hexnan+0x64>
 80097fe:	462a      	mov	r2, r5
 8009800:	4649      	mov	r1, r9
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff ffa8 	bl	8009758 <L_shift>
 8009808:	4544      	cmp	r4, r8
 800980a:	d950      	bls.n	80098ae <__hexnan+0x10a>
 800980c:	2300      	movs	r3, #0
 800980e:	f1a4 0904 	sub.w	r9, r4, #4
 8009812:	f844 3c04 	str.w	r3, [r4, #-4]
 8009816:	461d      	mov	r5, r3
 8009818:	464c      	mov	r4, r9
 800981a:	f8cd b008 	str.w	fp, [sp, #8]
 800981e:	9903      	ldr	r1, [sp, #12]
 8009820:	e7d7      	b.n	80097d2 <__hexnan+0x2e>
 8009822:	2a29      	cmp	r2, #41	; 0x29
 8009824:	d155      	bne.n	80098d2 <__hexnan+0x12e>
 8009826:	3102      	adds	r1, #2
 8009828:	f8ca 1000 	str.w	r1, [sl]
 800982c:	f1bb 0f00 	cmp.w	fp, #0
 8009830:	d04f      	beq.n	80098d2 <__hexnan+0x12e>
 8009832:	454c      	cmp	r4, r9
 8009834:	d206      	bcs.n	8009844 <__hexnan+0xa0>
 8009836:	2d07      	cmp	r5, #7
 8009838:	dc04      	bgt.n	8009844 <__hexnan+0xa0>
 800983a:	462a      	mov	r2, r5
 800983c:	4649      	mov	r1, r9
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff ff8a 	bl	8009758 <L_shift>
 8009844:	4544      	cmp	r4, r8
 8009846:	d934      	bls.n	80098b2 <__hexnan+0x10e>
 8009848:	4623      	mov	r3, r4
 800984a:	f1a8 0204 	sub.w	r2, r8, #4
 800984e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009852:	429f      	cmp	r7, r3
 8009854:	f842 1f04 	str.w	r1, [r2, #4]!
 8009858:	d2f9      	bcs.n	800984e <__hexnan+0xaa>
 800985a:	1b3b      	subs	r3, r7, r4
 800985c:	f023 0303 	bic.w	r3, r3, #3
 8009860:	3304      	adds	r3, #4
 8009862:	3e03      	subs	r6, #3
 8009864:	3401      	adds	r4, #1
 8009866:	42a6      	cmp	r6, r4
 8009868:	bf38      	it	cc
 800986a:	2304      	movcc	r3, #4
 800986c:	2200      	movs	r2, #0
 800986e:	4443      	add	r3, r8
 8009870:	f843 2b04 	str.w	r2, [r3], #4
 8009874:	429f      	cmp	r7, r3
 8009876:	d2fb      	bcs.n	8009870 <__hexnan+0xcc>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	b91b      	cbnz	r3, 8009884 <__hexnan+0xe0>
 800987c:	4547      	cmp	r7, r8
 800987e:	d126      	bne.n	80098ce <__hexnan+0x12a>
 8009880:	2301      	movs	r3, #1
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	2005      	movs	r0, #5
 8009886:	e025      	b.n	80098d4 <__hexnan+0x130>
 8009888:	3501      	adds	r5, #1
 800988a:	2d08      	cmp	r5, #8
 800988c:	f10b 0b01 	add.w	fp, fp, #1
 8009890:	dd06      	ble.n	80098a0 <__hexnan+0xfc>
 8009892:	4544      	cmp	r4, r8
 8009894:	d9c3      	bls.n	800981e <__hexnan+0x7a>
 8009896:	2300      	movs	r3, #0
 8009898:	2501      	movs	r5, #1
 800989a:	f844 3c04 	str.w	r3, [r4, #-4]
 800989e:	3c04      	subs	r4, #4
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	f000 000f 	and.w	r0, r0, #15
 80098a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098aa:	6020      	str	r0, [r4, #0]
 80098ac:	e7b7      	b.n	800981e <__hexnan+0x7a>
 80098ae:	2508      	movs	r5, #8
 80098b0:	e7b5      	b.n	800981e <__hexnan+0x7a>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0df      	beq.n	8009878 <__hexnan+0xd4>
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	f1c3 0320 	rsb	r3, r3, #32
 80098c0:	40da      	lsrs	r2, r3
 80098c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098c6:	4013      	ands	r3, r2
 80098c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80098cc:	e7d4      	b.n	8009878 <__hexnan+0xd4>
 80098ce:	3f04      	subs	r7, #4
 80098d0:	e7d2      	b.n	8009878 <__hexnan+0xd4>
 80098d2:	2004      	movs	r0, #4
 80098d4:	b007      	add	sp, #28
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098da <__ascii_mbtowc>:
 80098da:	b082      	sub	sp, #8
 80098dc:	b901      	cbnz	r1, 80098e0 <__ascii_mbtowc+0x6>
 80098de:	a901      	add	r1, sp, #4
 80098e0:	b142      	cbz	r2, 80098f4 <__ascii_mbtowc+0x1a>
 80098e2:	b14b      	cbz	r3, 80098f8 <__ascii_mbtowc+0x1e>
 80098e4:	7813      	ldrb	r3, [r2, #0]
 80098e6:	600b      	str	r3, [r1, #0]
 80098e8:	7812      	ldrb	r2, [r2, #0]
 80098ea:	1e10      	subs	r0, r2, #0
 80098ec:	bf18      	it	ne
 80098ee:	2001      	movne	r0, #1
 80098f0:	b002      	add	sp, #8
 80098f2:	4770      	bx	lr
 80098f4:	4610      	mov	r0, r2
 80098f6:	e7fb      	b.n	80098f0 <__ascii_mbtowc+0x16>
 80098f8:	f06f 0001 	mvn.w	r0, #1
 80098fc:	e7f8      	b.n	80098f0 <__ascii_mbtowc+0x16>

080098fe <_realloc_r>:
 80098fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	4680      	mov	r8, r0
 8009904:	4614      	mov	r4, r2
 8009906:	460e      	mov	r6, r1
 8009908:	b921      	cbnz	r1, 8009914 <_realloc_r+0x16>
 800990a:	4611      	mov	r1, r2
 800990c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	f7fd bc9a 	b.w	8007248 <_malloc_r>
 8009914:	b92a      	cbnz	r2, 8009922 <_realloc_r+0x24>
 8009916:	f7fd fc27 	bl	8007168 <_free_r>
 800991a:	4625      	mov	r5, r4
 800991c:	4628      	mov	r0, r5
 800991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009922:	f000 f842 	bl	80099aa <_malloc_usable_size_r>
 8009926:	4284      	cmp	r4, r0
 8009928:	4607      	mov	r7, r0
 800992a:	d802      	bhi.n	8009932 <_realloc_r+0x34>
 800992c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009930:	d812      	bhi.n	8009958 <_realloc_r+0x5a>
 8009932:	4621      	mov	r1, r4
 8009934:	4640      	mov	r0, r8
 8009936:	f7fd fc87 	bl	8007248 <_malloc_r>
 800993a:	4605      	mov	r5, r0
 800993c:	2800      	cmp	r0, #0
 800993e:	d0ed      	beq.n	800991c <_realloc_r+0x1e>
 8009940:	42bc      	cmp	r4, r7
 8009942:	4622      	mov	r2, r4
 8009944:	4631      	mov	r1, r6
 8009946:	bf28      	it	cs
 8009948:	463a      	movcs	r2, r7
 800994a:	f7fc fd8a 	bl	8006462 <memcpy>
 800994e:	4631      	mov	r1, r6
 8009950:	4640      	mov	r0, r8
 8009952:	f7fd fc09 	bl	8007168 <_free_r>
 8009956:	e7e1      	b.n	800991c <_realloc_r+0x1e>
 8009958:	4635      	mov	r5, r6
 800995a:	e7df      	b.n	800991c <_realloc_r+0x1e>

0800995c <__ascii_wctomb>:
 800995c:	4603      	mov	r3, r0
 800995e:	4608      	mov	r0, r1
 8009960:	b141      	cbz	r1, 8009974 <__ascii_wctomb+0x18>
 8009962:	2aff      	cmp	r2, #255	; 0xff
 8009964:	d904      	bls.n	8009970 <__ascii_wctomb+0x14>
 8009966:	228a      	movs	r2, #138	; 0x8a
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	4770      	bx	lr
 8009970:	2001      	movs	r0, #1
 8009972:	700a      	strb	r2, [r1, #0]
 8009974:	4770      	bx	lr
	...

08009978 <fiprintf>:
 8009978:	b40e      	push	{r1, r2, r3}
 800997a:	b503      	push	{r0, r1, lr}
 800997c:	4601      	mov	r1, r0
 800997e:	ab03      	add	r3, sp, #12
 8009980:	4805      	ldr	r0, [pc, #20]	; (8009998 <fiprintf+0x20>)
 8009982:	f853 2b04 	ldr.w	r2, [r3], #4
 8009986:	6800      	ldr	r0, [r0, #0]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	f7ff f9a3 	bl	8008cd4 <_vfiprintf_r>
 800998e:	b002      	add	sp, #8
 8009990:	f85d eb04 	ldr.w	lr, [sp], #4
 8009994:	b003      	add	sp, #12
 8009996:	4770      	bx	lr
 8009998:	20000068 	.word	0x20000068

0800999c <abort>:
 800999c:	2006      	movs	r0, #6
 800999e:	b508      	push	{r3, lr}
 80099a0:	f000 f834 	bl	8009a0c <raise>
 80099a4:	2001      	movs	r0, #1
 80099a6:	f7f7 fc3c 	bl	8001222 <_exit>

080099aa <_malloc_usable_size_r>:
 80099aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ae:	1f18      	subs	r0, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfbc      	itt	lt
 80099b4:	580b      	ldrlt	r3, [r1, r0]
 80099b6:	18c0      	addlt	r0, r0, r3
 80099b8:	4770      	bx	lr

080099ba <_raise_r>:
 80099ba:	291f      	cmp	r1, #31
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4604      	mov	r4, r0
 80099c0:	460d      	mov	r5, r1
 80099c2:	d904      	bls.n	80099ce <_raise_r+0x14>
 80099c4:	2316      	movs	r3, #22
 80099c6:	6003      	str	r3, [r0, #0]
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	bd38      	pop	{r3, r4, r5, pc}
 80099ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80099d0:	b112      	cbz	r2, 80099d8 <_raise_r+0x1e>
 80099d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099d6:	b94b      	cbnz	r3, 80099ec <_raise_r+0x32>
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 f831 	bl	8009a40 <_getpid_r>
 80099de:	462a      	mov	r2, r5
 80099e0:	4601      	mov	r1, r0
 80099e2:	4620      	mov	r0, r4
 80099e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e8:	f000 b818 	b.w	8009a1c <_kill_r>
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d00a      	beq.n	8009a06 <_raise_r+0x4c>
 80099f0:	1c59      	adds	r1, r3, #1
 80099f2:	d103      	bne.n	80099fc <_raise_r+0x42>
 80099f4:	2316      	movs	r3, #22
 80099f6:	6003      	str	r3, [r0, #0]
 80099f8:	2001      	movs	r0, #1
 80099fa:	e7e7      	b.n	80099cc <_raise_r+0x12>
 80099fc:	2400      	movs	r4, #0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a04:	4798      	blx	r3
 8009a06:	2000      	movs	r0, #0
 8009a08:	e7e0      	b.n	80099cc <_raise_r+0x12>
	...

08009a0c <raise>:
 8009a0c:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <raise+0xc>)
 8009a0e:	4601      	mov	r1, r0
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	f7ff bfd2 	b.w	80099ba <_raise_r>
 8009a16:	bf00      	nop
 8009a18:	20000068 	.word	0x20000068

08009a1c <_kill_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4d06      	ldr	r5, [pc, #24]	; (8009a3c <_kill_r+0x20>)
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	f7f7 fbea 	bl	8001202 <_kill>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	d102      	bne.n	8009a38 <_kill_r+0x1c>
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	b103      	cbz	r3, 8009a38 <_kill_r+0x1c>
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	bd38      	pop	{r3, r4, r5, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000cec 	.word	0x20000cec

08009a40 <_getpid_r>:
 8009a40:	f7f7 bbd8 	b.w	80011f4 <_getpid>

08009a44 <_init>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	bf00      	nop
 8009a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4a:	bc08      	pop	{r3}
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	4770      	bx	lr

08009a50 <_fini>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	bf00      	nop
 8009a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a56:	bc08      	pop	{r3}
 8009a58:	469e      	mov	lr, r3
 8009a5a:	4770      	bx	lr
