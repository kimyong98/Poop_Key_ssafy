
choumpa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800316c  0800316c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800316c  0800316c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800316c  0800316c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080031dc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080031dc  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000072f5  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017a9  00000000  00000000  000273c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00028b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000545  00000000  00000000  00029280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b49  00000000  00000000  000297c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009132  00000000  00000000  0004130e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083b90  00000000  00000000  0004a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002364  00000000  00000000  000cdfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d0334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080030d8 	.word	0x080030d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080030d8 	.word	0x080030d8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_GPIO_Init+0x114>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <MX_GPIO_Init+0x114>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a38      	ldr	r2, [pc, #224]	; (8000a40 <MX_GPIO_Init+0x114>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a32      	ldr	r2, [pc, #200]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <MX_GPIO_Init+0x114>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_GPIO_Init+0x114>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <MX_GPIO_Init+0x114>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_GPIO_Init+0x114>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80009a6:	4827      	ldr	r0, [pc, #156]	; (8000a44 <MX_GPIO_Init+0x118>)
 80009a8:	f000 fde1 	bl	800156e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009b4:	f000 fddb 	bl	800156e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_GPIO_Init+0x120>)
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	4820      	ldr	r0, [pc, #128]	; (8000a50 <MX_GPIO_Init+0x124>)
 80009ce:	f000 fc33 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80009d2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_GPIO_Init+0x118>)
 80009ec:	f000 fc24 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000a0a:	f000 fc15 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_GPIO_Init+0x118>)
 8000a24:	f000 fc08 	bl	8001238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f000 fbcc 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f000 fbe5 	bl	8001202 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40011000 	.word	0x40011000

08000a54 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a5c:	1d39      	adds	r1, r7, #4
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	2201      	movs	r2, #1
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <__io_putchar+0x20>)
 8000a66:	f001 fa1d 	bl	8001ea4 <HAL_UART_Transmit>
  return ch;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000088 	.word	0x20000088

08000a78 <HAL_InitTick>:
uint32_t micros(){
  return (millis_cnt&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
}
*/

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	  if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000) == 0) {
 8000a80:	f001 f970 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <HAL_InitTick+0x3c>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fbc5 	bl	800121e <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <HAL_InitTick+0x2c>
		  printf("HAL_OK\r\n");
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <HAL_InitTick+0x40>)
 8000a9c:	f001 fcaa 	bl	80023f4 <puts>
	    return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e003      	b.n	8000aac <HAL_InitTick+0x34>
	  } else {
		  printf("HAL_ERROR\r\n");
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_InitTick+0x44>)
 8000aa6:	f001 fca5 	bl	80023f4 <puts>
	    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
	}
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	080030f0 	.word	0x080030f0
 8000abc:	080030f8 	.word	0x080030f8

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ffd6 	bl	8000a78 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <main+0x16>
	    Error_Handler();
 8000ad2:	f000 f8a6 	bl	8000c22 <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 fa4b 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f867 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f7ff ff25 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ae2:	f000 f9b7 	bl	8000e54 <MX_USART2_UART_Init>


	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
	  // HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	482c      	ldr	r0, [pc, #176]	; (8000ba0 <main+0xe0>)
 8000aee:	f000 fd3e 	bl	800156e <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000af2:	2005      	movs	r0, #5
 8000af4:	f000 fa6e 	bl	8000fd4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afe:	4828      	ldr	r0, [pc, #160]	; (8000ba0 <main+0xe0>)
 8000b00:	f000 fd35 	bl	800156e <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000b04:	2014      	movs	r0, #20
 8000b06:	f000 fa65 	bl	8000fd4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b10:	4823      	ldr	r0, [pc, #140]	; (8000ba0 <main+0xe0>)
 8000b12:	f000 fd2c 	bl	800156e <HAL_GPIO_WritePin>
	  //printf("right after : %lu\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
	  st = HAL_GetTick();
 8000b16:	f000 fa53 	bl	8000fc0 <HAL_GetTick>
 8000b1a:	60f8      	str	r0, [r7, #12]
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_RESET);
 8000b1c:	bf00      	nop
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <main+0xe0>)
 8000b24:	f000 fd0c 	bl	8001540 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f7      	beq.n	8000b1e <main+0x5e>
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET);
 8000b2e:	bf00      	nop
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <main+0xe0>)
 8000b36:	f000 fd03 	bl	8001540 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d0f7      	beq.n	8000b30 <main+0x70>
	  ed = HAL_GetTick();
 8000b40:	f000 fa3e 	bl	8000fc0 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]

	  diff = ed -st;
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	607b      	str	r3, [r7, #4]
	  distance = diff * 0.034 / 2;
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fc40 	bl	80003d4 <__aeabi_ui2d>
 8000b54:	a310      	add	r3, pc, #64	; (adr r3, 8000b98 <main+0xd8>)
 8000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5a:	f7ff fcb5 	bl	80004c8 <__aeabi_dmul>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	4610      	mov	r0, r2
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 0200 	mov.w	r2, #0
 8000b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6e:	f7ff fdd5 	bl	800071c <__aeabi_ddiv>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4610      	mov	r0, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff feb7 	bl	80008ec <__aeabi_d2uiz>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	603b      	str	r3, [r7, #0]
	  printf("%lu\r\n", diff);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <main+0xe4>)
 8000b86:	f001 fbcf 	bl	8002328 <iprintf>

	  //printf("%lu \r\n", micros());
	  HAL_Delay(100000);
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <main+0xe8>)
 8000b8c:	f000 fa22 	bl	8000fd4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000b90:	e7a9      	b.n	8000ae6 <main+0x26>
 8000b92:	bf00      	nop
 8000b94:	f3af 8000 	nop.w
 8000b98:	b020c49c 	.word	0xb020c49c
 8000b9c:	3fa16872 	.word	0x3fa16872
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	08003104 	.word	0x08003104
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	; 0x40
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fcfa 	bl	80025b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fcfe 	bl	80015e4 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bee:	f000 f818 	bl	8000c22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 ff6c 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f804 	bl	8000c22 <Error_Handler>
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3740      	adds	r7, #64	; 0x40
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c26:	b672      	cpsid	i
}
 8000c28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2005      	movs	r0, #5
 8000c68:	f000 faaf 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c6c:	2005      	movs	r0, #5
 8000c6e:	f000 fac8 	bl	8001202 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_MspInit+0x70>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_MspInit+0x70>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce6:	f000 f959 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cfe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d02:	f000 fc4d 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e00a      	b.n	8000d32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d1c:	f3af 8000 	nop.w
 8000d20:	4601      	mov	r1, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	b2ca      	uxtb	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbf0      	blt.n	8000d1c <_read+0x12>
  }

  return len;
 8000d3a:	687b      	ldr	r3, [r7, #4]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e009      	b.n	8000d6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	60ba      	str	r2, [r7, #8]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe78 	bl	8000a54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbf1      	blt.n	8000d56 <_write+0x12>
  }
  return len;
 8000d72:	687b      	ldr	r3, [r7, #4]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_close>:

int _close(int file)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da2:	605a      	str	r2, [r3, #4]
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <_isatty>:

int _isatty(int file)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f001 fc20 	bl	8002650 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20005000 	.word	0x20005000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000084 	.word	0x20000084
 8000e44:	20000220 	.word	0x20000220

08000e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f000 ffba 	bl	8001e04 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f7ff fec4 	bl	8000c22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000088 	.word	0x20000088
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0x70>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d123      	bne.n	8000f10 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0x74>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_UART_MspInit+0x74>)
 8000ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed2:	61d3      	str	r3, [r2, #28]
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0x74>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_UART_MspInit+0x74>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_UART_MspInit+0x74>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_UART_MspInit+0x74>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_UART_MspInit+0x78>)
 8000f0c:	f000 f994 	bl	8001238 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010800 	.word	0x40010800

08000f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ff90 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2a:	490c      	ldr	r1, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f40:	4c09      	ldr	r4, [pc, #36]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f001 fb85 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f52:	f7ff fdb5 	bl	8000ac0 <main>
  bx lr
 8000f56:	4770      	bx	lr
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f60:	08003174 	.word	0x08003174
  ldr r2, =_sbss
 8000f64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f68:	20000220 	.word	0x20000220

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f917 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fd76 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fe4e 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x1c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <HAL_IncTick+0x20>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200000d0 	.word	0x200000d0

08000fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <HAL_GetTick+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	200000d0 	.word	0x200000d0

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff fff0 	bl	8000fc0 <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffe0 	bl	8000fc0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <__NVIC_EnableIRQ+0x34>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff90 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff2d 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff42 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff90 	bl	800110c <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5f 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff35 	bl	8001080 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa2 	bl	8001170 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b08b      	sub	sp, #44	; 0x2c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e169      	b.n	8001520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800124c:	2201      	movs	r2, #1
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8158 	bne.w	800151a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4a9a      	ldr	r2, [pc, #616]	; (80014d8 <HAL_GPIO_Init+0x2a0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d05e      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001274:	4a98      	ldr	r2, [pc, #608]	; (80014d8 <HAL_GPIO_Init+0x2a0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d875      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800127a:	4a98      	ldr	r2, [pc, #608]	; (80014dc <HAL_GPIO_Init+0x2a4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d058      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001280:	4a96      	ldr	r2, [pc, #600]	; (80014dc <HAL_GPIO_Init+0x2a4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d86f      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001286:	4a96      	ldr	r2, [pc, #600]	; (80014e0 <HAL_GPIO_Init+0x2a8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d052      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 800128c:	4a94      	ldr	r2, [pc, #592]	; (80014e0 <HAL_GPIO_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d869      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001292:	4a94      	ldr	r2, [pc, #592]	; (80014e4 <HAL_GPIO_Init+0x2ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d04c      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001298:	4a92      	ldr	r2, [pc, #584]	; (80014e4 <HAL_GPIO_Init+0x2ac>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d863      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800129e:	4a92      	ldr	r2, [pc, #584]	; (80014e8 <HAL_GPIO_Init+0x2b0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d046      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 80012a4:	4a90      	ldr	r2, [pc, #576]	; (80014e8 <HAL_GPIO_Init+0x2b0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d85d      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d82a      	bhi.n	8001304 <HAL_GPIO_Init+0xcc>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d859      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_GPIO_Init+0x80>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	08001333 	.word	0x08001333
 80012bc:	0800130d 	.word	0x0800130d
 80012c0:	0800131f 	.word	0x0800131f
 80012c4:	08001361 	.word	0x08001361
 80012c8:	08001367 	.word	0x08001367
 80012cc:	08001367 	.word	0x08001367
 80012d0:	08001367 	.word	0x08001367
 80012d4:	08001367 	.word	0x08001367
 80012d8:	08001367 	.word	0x08001367
 80012dc:	08001367 	.word	0x08001367
 80012e0:	08001367 	.word	0x08001367
 80012e4:	08001367 	.word	0x08001367
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001367 	.word	0x08001367
 80012f4:	08001367 	.word	0x08001367
 80012f8:	08001367 	.word	0x08001367
 80012fc:	08001315 	.word	0x08001315
 8001300:	08001329 	.word	0x08001329
 8001304:	4a79      	ldr	r2, [pc, #484]	; (80014ec <HAL_GPIO_Init+0x2b4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130a:	e02c      	b.n	8001366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e029      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	623b      	str	r3, [r7, #32]
          break;
 800131c:	e024      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	3308      	adds	r3, #8
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e01f      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	330c      	adds	r3, #12
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e01a      	b.n	8001368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133a:	2304      	movs	r3, #4
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e013      	b.n	8001368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	611a      	str	r2, [r3, #16]
          break;
 8001352:	e009      	b.n	8001368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	615a      	str	r2, [r3, #20]
          break;
 800135e:	e003      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x130>
          break;
 8001366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2bff      	cmp	r3, #255	; 0xff
 800136c:	d801      	bhi.n	8001372 <HAL_GPIO_Init+0x13a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_Init+0x13e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d802      	bhi.n	8001384 <HAL_GPIO_Init+0x14c>
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x152>
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	3b08      	subs	r3, #8
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	210f      	movs	r1, #15
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	6a39      	ldr	r1, [r7, #32]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80b1 	beq.w	800151a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b8:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d0:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_GPIO_Init+0x2bc>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <HAL_GPIO_Init+0x2c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d013      	beq.n	8001424 <HAL_GPIO_Init+0x1ec>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00d      	beq.n	8001420 <HAL_GPIO_Init+0x1e8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3e      	ldr	r2, [pc, #248]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x1e4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_GPIO_Init+0x1e0>
 8001414:	2303      	movs	r3, #3
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001418:	2304      	movs	r3, #4
 800141a:	e004      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 800141c:	2302      	movs	r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001424:	2300      	movs	r3, #0
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001436:	492f      	ldr	r1, [pc, #188]	; (80014f4 <HAL_GPIO_Init+0x2bc>)
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	492c      	ldr	r1, [pc, #176]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4928      	ldr	r1, [pc, #160]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4922      	ldr	r1, [pc, #136]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	491e      	ldr	r1, [pc, #120]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001490:	4013      	ands	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4918      	ldr	r1, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4914      	ldr	r1, [pc, #80]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d021      	beq.n	800150c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
 80014d4:	e021      	b.n	800151a <HAL_GPIO_Init+0x2e2>
 80014d6:	bf00      	nop
 80014d8:	10320000 	.word	0x10320000
 80014dc:	10310000 	.word	0x10310000
 80014e0:	10220000 	.word	0x10220000
 80014e4:	10210000 	.word	0x10210000
 80014e8:	10120000 	.word	0x10120000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40010800 	.word	0x40010800
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	40011000 	.word	0x40011000
 8001504:	40011400 	.word	0x40011400
 8001508:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_GPIO_Init+0x304>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	43db      	mvns	r3, r3
 8001514:	4909      	ldr	r1, [pc, #36]	; (800153c <HAL_GPIO_Init+0x304>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	f47f ae8e 	bne.w	800124c <HAL_GPIO_Init+0x14>
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e001      	b.n	8001562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800157e:	787b      	ldrb	r3, [r7, #1]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800158a:	e003      	b.n	8001594 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	041a      	lsls	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	611a      	str	r2, [r3, #16]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f806 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e272      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d112      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
 800161c:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <HAL_RCC_OscConfig+0x12c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d168      	bne.n	8001710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e24c      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x76>
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a77      	ldr	r2, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xbc>
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc7e 	bl	8000fc0 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc7a 	bl	8000fc0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e200      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe4>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fc6a 	bl	8000fc0 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fc66 	bl	8000fc0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1ec      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x10c>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d063      	beq.n	80017e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1c0      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4939      	ldr	r1, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e03a      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fc1f 	bl	8000fc0 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff fc1b 	bl	8000fc0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1a1      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbfe 	bl	8000fc0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff fbfa 	bl	8000fc0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e180      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03a      	beq.n	8001868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d019      	beq.n	800182e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff fbde 	bl	8000fc0 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fbda 	bl	8000fc0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e160      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 face 	bl	8001dc8 <RCC_Delay>
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fbc4 	bl	8000fc0 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fbc0 	bl	8000fc0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d908      	bls.n	800185c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e146      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	42420000 	.word	0x42420000
 8001858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e9      	bne.n	800183c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a6 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b82      	ldr	r3, [pc, #520]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7e      	ldr	r2, [pc, #504]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb81 	bl	8000fc0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fb7d 	bl	8000fc0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e103      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b75      	ldr	r3, [pc, #468]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x312>
 80018e8:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x334>
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x356>
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a60      	ldr	r2, [pc, #384]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a5d      	ldr	r2, [pc, #372]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fb31 	bl	8000fc0 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fb2d 	bl	8000fc0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0b1      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x37e>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb1b 	bl	8000fc0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fb17 	bl	8000fc0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e09b      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d061      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d146      	bne.n	8001a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff faeb 	bl	8000fc0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fae7 	bl	8000fc0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e06d      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a19      	ldr	r1, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fabb 	bl	8000fc0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fab7 	bl	8000fc0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e03d      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46a>
 8001a6c:	e035      	b.n	8001ada <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff faa4 	bl	8000fc0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff faa0 	bl	8000fc0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e026      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x498>
 8001a9a:	e01e      	b.n	8001ada <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e019      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_OscConfig+0x500>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d0      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4965      	ldr	r1, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d040      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e073      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06b      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4936      	ldr	r1, [pc, #216]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f9f2 	bl	8000fc0 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f9ee 	bl	8000fc0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e053      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d210      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	4922      	ldr	r1, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe feee 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	0800310c 	.word	0x0800310c
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x30>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cea:	e027      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	e027      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0c5b      	lsrs	r3, r3, #17
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e004      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	613b      	str	r3, [r7, #16]
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3e:	613b      	str	r3, [r7, #16]
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	693b      	ldr	r3, [r7, #16]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	007a1200 	.word	0x007a1200
 8001d58:	08003124 	.word	0x08003124
 8001d5c:	08003134 	.word	0x08003134
 8001d60:	003d0900 	.word	0x003d0900

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	0800311c 	.word	0x0800311c

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	0800311c 	.word	0x0800311c

08001dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <RCC_Delay+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <RCC_Delay+0x38>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a5b      	lsrs	r3, r3, #9
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de4:	bf00      	nop
  }
  while (Delay --);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f9      	bne.n	8001de4 <RCC_Delay+0x1c>
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e042      	b.n	8001e9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff f83c 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f91d 	bl	8002088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d16d      	bne.n	8001fa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_UART_Transmit+0x2c>
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e066      	b.n	8001fa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2221      	movs	r2, #33	; 0x21
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee2:	f7ff f86d 	bl	8000fc0 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	88fa      	ldrh	r2, [r7, #6]
 8001ef2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d108      	bne.n	8001f10 <HAL_UART_Transmit+0x6c>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d104      	bne.n	8001f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e003      	b.n	8001f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f18:	e02a      	b.n	8001f70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f840 	bl	8001faa <UART_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e036      	b.n	8001fa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10b      	bne.n	8001f52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e007      	b.n	8001f62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1cf      	bne.n	8001f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f810 	bl	8001faa <UART_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b090      	sub	sp, #64	; 0x40
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fba:	e050      	b.n	800205e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d04c      	beq.n	800205e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <UART_WaitOnFlagUntilTimeout+0x30>
 8001fca:	f7fe fff9 	bl	8000fc0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d241      	bcs.n	800205e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	e853 3f00 	ldrex	r3, [r3]
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffa:	637a      	str	r2, [r7, #52]	; 0x34
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002002:	e841 2300 	strex	r3, r2, [r1]
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1e5      	bne.n	8001fda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	613b      	str	r3, [r7, #16]
   return(result);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	63bb      	str	r3, [r7, #56]	; 0x38
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3314      	adds	r3, #20
 800202c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800202e:	623a      	str	r2, [r7, #32]
 8002030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002032:	69f9      	ldr	r1, [r7, #28]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	e841 2300 	strex	r3, r2, [r1]
 800203a:	61bb      	str	r3, [r7, #24]
   return(result);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e5      	bne.n	800200e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e00f      	b.n	800207e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	429a      	cmp	r2, r3
 800207a:	d09f      	beq.n	8001fbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3740      	adds	r7, #64	; 0x40
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020c2:	f023 030c 	bic.w	r3, r3, #12
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2c      	ldr	r2, [pc, #176]	; (800219c <UART_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d103      	bne.n	80020f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f0:	f7ff fe56 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	e002      	b.n	80020fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020f8:	f7ff fe3e 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80020fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009a      	lsls	r2, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <UART_SetConfig+0x118>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	0119      	lsls	r1, r3, #4
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fbb2 f2f3 	udiv	r2, r2, r3
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <UART_SetConfig+0x118>)
 8002136:	fba3 0302 	umull	r0, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2064      	movs	r0, #100	; 0x64
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	3332      	adds	r3, #50	; 0x32
 8002148:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <UART_SetConfig+0x118>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002154:	4419      	add	r1, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009a      	lsls	r2, r3, #2
 8002160:	441a      	add	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fbb2 f2f3 	udiv	r2, r2, r3
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <UART_SetConfig+0x118>)
 800216e:	fba3 0302 	umull	r0, r3, r3, r2
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2064      	movs	r0, #100	; 0x64
 8002176:	fb00 f303 	mul.w	r3, r0, r3
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	3332      	adds	r3, #50	; 0x32
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <UART_SetConfig+0x118>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	440a      	add	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40013800 	.word	0x40013800
 80021a0:	51eb851f 	.word	0x51eb851f

080021a4 <std>:
 80021a4:	2300      	movs	r3, #0
 80021a6:	b510      	push	{r4, lr}
 80021a8:	4604      	mov	r4, r0
 80021aa:	e9c0 3300 	strd	r3, r3, [r0]
 80021ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021b2:	6083      	str	r3, [r0, #8]
 80021b4:	8181      	strh	r1, [r0, #12]
 80021b6:	6643      	str	r3, [r0, #100]	; 0x64
 80021b8:	81c2      	strh	r2, [r0, #14]
 80021ba:	6183      	str	r3, [r0, #24]
 80021bc:	4619      	mov	r1, r3
 80021be:	2208      	movs	r2, #8
 80021c0:	305c      	adds	r0, #92	; 0x5c
 80021c2:	f000 f9f7 	bl	80025b4 <memset>
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <std+0x58>)
 80021c8:	6224      	str	r4, [r4, #32]
 80021ca:	6263      	str	r3, [r4, #36]	; 0x24
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <std+0x5c>)
 80021ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <std+0x60>)
 80021d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <std+0x64>)
 80021d6:	6323      	str	r3, [r4, #48]	; 0x30
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <std+0x68>)
 80021da:	429c      	cmp	r4, r3
 80021dc:	d006      	beq.n	80021ec <std+0x48>
 80021de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80021e2:	4294      	cmp	r4, r2
 80021e4:	d002      	beq.n	80021ec <std+0x48>
 80021e6:	33d0      	adds	r3, #208	; 0xd0
 80021e8:	429c      	cmp	r4, r3
 80021ea:	d105      	bne.n	80021f8 <std+0x54>
 80021ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021f4:	f000 ba56 	b.w	80026a4 <__retarget_lock_init_recursive>
 80021f8:	bd10      	pop	{r4, pc}
 80021fa:	bf00      	nop
 80021fc:	08002405 	.word	0x08002405
 8002200:	08002427 	.word	0x08002427
 8002204:	0800245f 	.word	0x0800245f
 8002208:	08002483 	.word	0x08002483
 800220c:	200000d4 	.word	0x200000d4

08002210 <stdio_exit_handler>:
 8002210:	4a02      	ldr	r2, [pc, #8]	; (800221c <stdio_exit_handler+0xc>)
 8002212:	4903      	ldr	r1, [pc, #12]	; (8002220 <stdio_exit_handler+0x10>)
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <stdio_exit_handler+0x14>)
 8002216:	f000 b869 	b.w	80022ec <_fwalk_sglue>
 800221a:	bf00      	nop
 800221c:	2000000c 	.word	0x2000000c
 8002220:	08002f45 	.word	0x08002f45
 8002224:	20000018 	.word	0x20000018

08002228 <cleanup_stdio>:
 8002228:	6841      	ldr	r1, [r0, #4]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <cleanup_stdio+0x34>)
 800222c:	b510      	push	{r4, lr}
 800222e:	4299      	cmp	r1, r3
 8002230:	4604      	mov	r4, r0
 8002232:	d001      	beq.n	8002238 <cleanup_stdio+0x10>
 8002234:	f000 fe86 	bl	8002f44 <_fflush_r>
 8002238:	68a1      	ldr	r1, [r4, #8]
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <cleanup_stdio+0x38>)
 800223c:	4299      	cmp	r1, r3
 800223e:	d002      	beq.n	8002246 <cleanup_stdio+0x1e>
 8002240:	4620      	mov	r0, r4
 8002242:	f000 fe7f 	bl	8002f44 <_fflush_r>
 8002246:	68e1      	ldr	r1, [r4, #12]
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <cleanup_stdio+0x3c>)
 800224a:	4299      	cmp	r1, r3
 800224c:	d004      	beq.n	8002258 <cleanup_stdio+0x30>
 800224e:	4620      	mov	r0, r4
 8002250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002254:	f000 be76 	b.w	8002f44 <_fflush_r>
 8002258:	bd10      	pop	{r4, pc}
 800225a:	bf00      	nop
 800225c:	200000d4 	.word	0x200000d4
 8002260:	2000013c 	.word	0x2000013c
 8002264:	200001a4 	.word	0x200001a4

08002268 <global_stdio_init.part.0>:
 8002268:	b510      	push	{r4, lr}
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <global_stdio_init.part.0+0x30>)
 800226c:	4c0b      	ldr	r4, [pc, #44]	; (800229c <global_stdio_init.part.0+0x34>)
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <global_stdio_init.part.0+0x38>)
 8002270:	4620      	mov	r0, r4
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	2104      	movs	r1, #4
 8002276:	2200      	movs	r2, #0
 8002278:	f7ff ff94 	bl	80021a4 <std>
 800227c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002280:	2201      	movs	r2, #1
 8002282:	2109      	movs	r1, #9
 8002284:	f7ff ff8e 	bl	80021a4 <std>
 8002288:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800228c:	2202      	movs	r2, #2
 800228e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002292:	2112      	movs	r1, #18
 8002294:	f7ff bf86 	b.w	80021a4 <std>
 8002298:	2000020c 	.word	0x2000020c
 800229c:	200000d4 	.word	0x200000d4
 80022a0:	08002211 	.word	0x08002211

080022a4 <__sfp_lock_acquire>:
 80022a4:	4801      	ldr	r0, [pc, #4]	; (80022ac <__sfp_lock_acquire+0x8>)
 80022a6:	f000 b9fe 	b.w	80026a6 <__retarget_lock_acquire_recursive>
 80022aa:	bf00      	nop
 80022ac:	20000215 	.word	0x20000215

080022b0 <__sfp_lock_release>:
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <__sfp_lock_release+0x8>)
 80022b2:	f000 b9f9 	b.w	80026a8 <__retarget_lock_release_recursive>
 80022b6:	bf00      	nop
 80022b8:	20000215 	.word	0x20000215

080022bc <__sinit>:
 80022bc:	b510      	push	{r4, lr}
 80022be:	4604      	mov	r4, r0
 80022c0:	f7ff fff0 	bl	80022a4 <__sfp_lock_acquire>
 80022c4:	6a23      	ldr	r3, [r4, #32]
 80022c6:	b11b      	cbz	r3, 80022d0 <__sinit+0x14>
 80022c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022cc:	f7ff bff0 	b.w	80022b0 <__sfp_lock_release>
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__sinit+0x28>)
 80022d2:	6223      	str	r3, [r4, #32]
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__sinit+0x2c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f5      	bne.n	80022c8 <__sinit+0xc>
 80022dc:	f7ff ffc4 	bl	8002268 <global_stdio_init.part.0>
 80022e0:	e7f2      	b.n	80022c8 <__sinit+0xc>
 80022e2:	bf00      	nop
 80022e4:	08002229 	.word	0x08002229
 80022e8:	2000020c 	.word	0x2000020c

080022ec <_fwalk_sglue>:
 80022ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022f0:	4607      	mov	r7, r0
 80022f2:	4688      	mov	r8, r1
 80022f4:	4614      	mov	r4, r2
 80022f6:	2600      	movs	r6, #0
 80022f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002300:	d505      	bpl.n	800230e <_fwalk_sglue+0x22>
 8002302:	6824      	ldr	r4, [r4, #0]
 8002304:	2c00      	cmp	r4, #0
 8002306:	d1f7      	bne.n	80022f8 <_fwalk_sglue+0xc>
 8002308:	4630      	mov	r0, r6
 800230a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800230e:	89ab      	ldrh	r3, [r5, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d907      	bls.n	8002324 <_fwalk_sglue+0x38>
 8002314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002318:	3301      	adds	r3, #1
 800231a:	d003      	beq.n	8002324 <_fwalk_sglue+0x38>
 800231c:	4629      	mov	r1, r5
 800231e:	4638      	mov	r0, r7
 8002320:	47c0      	blx	r8
 8002322:	4306      	orrs	r6, r0
 8002324:	3568      	adds	r5, #104	; 0x68
 8002326:	e7e9      	b.n	80022fc <_fwalk_sglue+0x10>

08002328 <iprintf>:
 8002328:	b40f      	push	{r0, r1, r2, r3}
 800232a:	b507      	push	{r0, r1, r2, lr}
 800232c:	4906      	ldr	r1, [pc, #24]	; (8002348 <iprintf+0x20>)
 800232e:	ab04      	add	r3, sp, #16
 8002330:	6808      	ldr	r0, [r1, #0]
 8002332:	f853 2b04 	ldr.w	r2, [r3], #4
 8002336:	6881      	ldr	r1, [r0, #8]
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f000 fad3 	bl	80028e4 <_vfiprintf_r>
 800233e:	b003      	add	sp, #12
 8002340:	f85d eb04 	ldr.w	lr, [sp], #4
 8002344:	b004      	add	sp, #16
 8002346:	4770      	bx	lr
 8002348:	20000064 	.word	0x20000064

0800234c <_puts_r>:
 800234c:	6a03      	ldr	r3, [r0, #32]
 800234e:	b570      	push	{r4, r5, r6, lr}
 8002350:	4605      	mov	r5, r0
 8002352:	460e      	mov	r6, r1
 8002354:	6884      	ldr	r4, [r0, #8]
 8002356:	b90b      	cbnz	r3, 800235c <_puts_r+0x10>
 8002358:	f7ff ffb0 	bl	80022bc <__sinit>
 800235c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800235e:	07db      	lsls	r3, r3, #31
 8002360:	d405      	bmi.n	800236e <_puts_r+0x22>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	0598      	lsls	r0, r3, #22
 8002366:	d402      	bmi.n	800236e <_puts_r+0x22>
 8002368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800236a:	f000 f99c 	bl	80026a6 <__retarget_lock_acquire_recursive>
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	0719      	lsls	r1, r3, #28
 8002372:	d513      	bpl.n	800239c <_puts_r+0x50>
 8002374:	6923      	ldr	r3, [r4, #16]
 8002376:	b18b      	cbz	r3, 800239c <_puts_r+0x50>
 8002378:	3e01      	subs	r6, #1
 800237a:	68a3      	ldr	r3, [r4, #8]
 800237c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002380:	3b01      	subs	r3, #1
 8002382:	60a3      	str	r3, [r4, #8]
 8002384:	b9e9      	cbnz	r1, 80023c2 <_puts_r+0x76>
 8002386:	2b00      	cmp	r3, #0
 8002388:	da2e      	bge.n	80023e8 <_puts_r+0x9c>
 800238a:	4622      	mov	r2, r4
 800238c:	210a      	movs	r1, #10
 800238e:	4628      	mov	r0, r5
 8002390:	f000 f87b 	bl	800248a <__swbuf_r>
 8002394:	3001      	adds	r0, #1
 8002396:	d007      	beq.n	80023a8 <_puts_r+0x5c>
 8002398:	250a      	movs	r5, #10
 800239a:	e007      	b.n	80023ac <_puts_r+0x60>
 800239c:	4621      	mov	r1, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	f000 f8b0 	bl	8002504 <__swsetup_r>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d0e7      	beq.n	8002378 <_puts_r+0x2c>
 80023a8:	f04f 35ff 	mov.w	r5, #4294967295
 80023ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023ae:	07da      	lsls	r2, r3, #31
 80023b0:	d405      	bmi.n	80023be <_puts_r+0x72>
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	059b      	lsls	r3, r3, #22
 80023b6:	d402      	bmi.n	80023be <_puts_r+0x72>
 80023b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ba:	f000 f975 	bl	80026a8 <__retarget_lock_release_recursive>
 80023be:	4628      	mov	r0, r5
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da04      	bge.n	80023d0 <_puts_r+0x84>
 80023c6:	69a2      	ldr	r2, [r4, #24]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dc06      	bgt.n	80023da <_puts_r+0x8e>
 80023cc:	290a      	cmp	r1, #10
 80023ce:	d004      	beq.n	80023da <_puts_r+0x8e>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	6022      	str	r2, [r4, #0]
 80023d6:	7019      	strb	r1, [r3, #0]
 80023d8:	e7cf      	b.n	800237a <_puts_r+0x2e>
 80023da:	4622      	mov	r2, r4
 80023dc:	4628      	mov	r0, r5
 80023de:	f000 f854 	bl	800248a <__swbuf_r>
 80023e2:	3001      	adds	r0, #1
 80023e4:	d1c9      	bne.n	800237a <_puts_r+0x2e>
 80023e6:	e7df      	b.n	80023a8 <_puts_r+0x5c>
 80023e8:	250a      	movs	r5, #10
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	6022      	str	r2, [r4, #0]
 80023f0:	701d      	strb	r5, [r3, #0]
 80023f2:	e7db      	b.n	80023ac <_puts_r+0x60>

080023f4 <puts>:
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <puts+0xc>)
 80023f6:	4601      	mov	r1, r0
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	f7ff bfa7 	b.w	800234c <_puts_r>
 80023fe:	bf00      	nop
 8002400:	20000064 	.word	0x20000064

08002404 <__sread>:
 8002404:	b510      	push	{r4, lr}
 8002406:	460c      	mov	r4, r1
 8002408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800240c:	f000 f8fc 	bl	8002608 <_read_r>
 8002410:	2800      	cmp	r0, #0
 8002412:	bfab      	itete	ge
 8002414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002416:	89a3      	ldrhlt	r3, [r4, #12]
 8002418:	181b      	addge	r3, r3, r0
 800241a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800241e:	bfac      	ite	ge
 8002420:	6563      	strge	r3, [r4, #84]	; 0x54
 8002422:	81a3      	strhlt	r3, [r4, #12]
 8002424:	bd10      	pop	{r4, pc}

08002426 <__swrite>:
 8002426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242a:	461f      	mov	r7, r3
 800242c:	898b      	ldrh	r3, [r1, #12]
 800242e:	4605      	mov	r5, r0
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	460c      	mov	r4, r1
 8002434:	4616      	mov	r6, r2
 8002436:	d505      	bpl.n	8002444 <__swrite+0x1e>
 8002438:	2302      	movs	r3, #2
 800243a:	2200      	movs	r2, #0
 800243c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002440:	f000 f8d0 	bl	80025e4 <_lseek_r>
 8002444:	89a3      	ldrh	r3, [r4, #12]
 8002446:	4632      	mov	r2, r6
 8002448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800244c:	81a3      	strh	r3, [r4, #12]
 800244e:	4628      	mov	r0, r5
 8002450:	463b      	mov	r3, r7
 8002452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800245a:	f000 b8e7 	b.w	800262c <_write_r>

0800245e <__sseek>:
 800245e:	b510      	push	{r4, lr}
 8002460:	460c      	mov	r4, r1
 8002462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002466:	f000 f8bd 	bl	80025e4 <_lseek_r>
 800246a:	1c43      	adds	r3, r0, #1
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	bf15      	itete	ne
 8002470:	6560      	strne	r0, [r4, #84]	; 0x54
 8002472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800247a:	81a3      	strheq	r3, [r4, #12]
 800247c:	bf18      	it	ne
 800247e:	81a3      	strhne	r3, [r4, #12]
 8002480:	bd10      	pop	{r4, pc}

08002482 <__sclose>:
 8002482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002486:	f000 b89d 	b.w	80025c4 <_close_r>

0800248a <__swbuf_r>:
 800248a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248c:	460e      	mov	r6, r1
 800248e:	4614      	mov	r4, r2
 8002490:	4605      	mov	r5, r0
 8002492:	b118      	cbz	r0, 800249c <__swbuf_r+0x12>
 8002494:	6a03      	ldr	r3, [r0, #32]
 8002496:	b90b      	cbnz	r3, 800249c <__swbuf_r+0x12>
 8002498:	f7ff ff10 	bl	80022bc <__sinit>
 800249c:	69a3      	ldr	r3, [r4, #24]
 800249e:	60a3      	str	r3, [r4, #8]
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	071a      	lsls	r2, r3, #28
 80024a4:	d525      	bpl.n	80024f2 <__swbuf_r+0x68>
 80024a6:	6923      	ldr	r3, [r4, #16]
 80024a8:	b31b      	cbz	r3, 80024f2 <__swbuf_r+0x68>
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	6922      	ldr	r2, [r4, #16]
 80024ae:	b2f6      	uxtb	r6, r6
 80024b0:	1a98      	subs	r0, r3, r2
 80024b2:	6963      	ldr	r3, [r4, #20]
 80024b4:	4637      	mov	r7, r6
 80024b6:	4283      	cmp	r3, r0
 80024b8:	dc04      	bgt.n	80024c4 <__swbuf_r+0x3a>
 80024ba:	4621      	mov	r1, r4
 80024bc:	4628      	mov	r0, r5
 80024be:	f000 fd41 	bl	8002f44 <_fflush_r>
 80024c2:	b9e0      	cbnz	r0, 80024fe <__swbuf_r+0x74>
 80024c4:	68a3      	ldr	r3, [r4, #8]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60a3      	str	r3, [r4, #8]
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	6022      	str	r2, [r4, #0]
 80024d0:	701e      	strb	r6, [r3, #0]
 80024d2:	6962      	ldr	r2, [r4, #20]
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d004      	beq.n	80024e4 <__swbuf_r+0x5a>
 80024da:	89a3      	ldrh	r3, [r4, #12]
 80024dc:	07db      	lsls	r3, r3, #31
 80024de:	d506      	bpl.n	80024ee <__swbuf_r+0x64>
 80024e0:	2e0a      	cmp	r6, #10
 80024e2:	d104      	bne.n	80024ee <__swbuf_r+0x64>
 80024e4:	4621      	mov	r1, r4
 80024e6:	4628      	mov	r0, r5
 80024e8:	f000 fd2c 	bl	8002f44 <_fflush_r>
 80024ec:	b938      	cbnz	r0, 80024fe <__swbuf_r+0x74>
 80024ee:	4638      	mov	r0, r7
 80024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f2:	4621      	mov	r1, r4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f000 f805 	bl	8002504 <__swsetup_r>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d0d5      	beq.n	80024aa <__swbuf_r+0x20>
 80024fe:	f04f 37ff 	mov.w	r7, #4294967295
 8002502:	e7f4      	b.n	80024ee <__swbuf_r+0x64>

08002504 <__swsetup_r>:
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <__swsetup_r+0xac>)
 8002508:	4605      	mov	r5, r0
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	460c      	mov	r4, r1
 800250e:	b118      	cbz	r0, 8002518 <__swsetup_r+0x14>
 8002510:	6a03      	ldr	r3, [r0, #32]
 8002512:	b90b      	cbnz	r3, 8002518 <__swsetup_r+0x14>
 8002514:	f7ff fed2 	bl	80022bc <__sinit>
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800251e:	0718      	lsls	r0, r3, #28
 8002520:	d422      	bmi.n	8002568 <__swsetup_r+0x64>
 8002522:	06d9      	lsls	r1, r3, #27
 8002524:	d407      	bmi.n	8002536 <__swsetup_r+0x32>
 8002526:	2309      	movs	r3, #9
 8002528:	602b      	str	r3, [r5, #0]
 800252a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	81a3      	strh	r3, [r4, #12]
 8002534:	e034      	b.n	80025a0 <__swsetup_r+0x9c>
 8002536:	0758      	lsls	r0, r3, #29
 8002538:	d512      	bpl.n	8002560 <__swsetup_r+0x5c>
 800253a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800253c:	b141      	cbz	r1, 8002550 <__swsetup_r+0x4c>
 800253e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002542:	4299      	cmp	r1, r3
 8002544:	d002      	beq.n	800254c <__swsetup_r+0x48>
 8002546:	4628      	mov	r0, r5
 8002548:	f000 f8b0 	bl	80026ac <_free_r>
 800254c:	2300      	movs	r3, #0
 800254e:	6363      	str	r3, [r4, #52]	; 0x34
 8002550:	89a3      	ldrh	r3, [r4, #12]
 8002552:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002556:	81a3      	strh	r3, [r4, #12]
 8002558:	2300      	movs	r3, #0
 800255a:	6063      	str	r3, [r4, #4]
 800255c:	6923      	ldr	r3, [r4, #16]
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	81a3      	strh	r3, [r4, #12]
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	b94b      	cbnz	r3, 8002580 <__swsetup_r+0x7c>
 800256c:	89a3      	ldrh	r3, [r4, #12]
 800256e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002576:	d003      	beq.n	8002580 <__swsetup_r+0x7c>
 8002578:	4621      	mov	r1, r4
 800257a:	4628      	mov	r0, r5
 800257c:	f000 fd2f 	bl	8002fde <__smakebuf_r>
 8002580:	89a0      	ldrh	r0, [r4, #12]
 8002582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002586:	f010 0301 	ands.w	r3, r0, #1
 800258a:	d00a      	beq.n	80025a2 <__swsetup_r+0x9e>
 800258c:	2300      	movs	r3, #0
 800258e:	60a3      	str	r3, [r4, #8]
 8002590:	6963      	ldr	r3, [r4, #20]
 8002592:	425b      	negs	r3, r3
 8002594:	61a3      	str	r3, [r4, #24]
 8002596:	6923      	ldr	r3, [r4, #16]
 8002598:	b943      	cbnz	r3, 80025ac <__swsetup_r+0xa8>
 800259a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800259e:	d1c4      	bne.n	800252a <__swsetup_r+0x26>
 80025a0:	bd38      	pop	{r3, r4, r5, pc}
 80025a2:	0781      	lsls	r1, r0, #30
 80025a4:	bf58      	it	pl
 80025a6:	6963      	ldrpl	r3, [r4, #20]
 80025a8:	60a3      	str	r3, [r4, #8]
 80025aa:	e7f4      	b.n	8002596 <__swsetup_r+0x92>
 80025ac:	2000      	movs	r0, #0
 80025ae:	e7f7      	b.n	80025a0 <__swsetup_r+0x9c>
 80025b0:	20000064 	.word	0x20000064

080025b4 <memset>:
 80025b4:	4603      	mov	r3, r0
 80025b6:	4402      	add	r2, r0
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d100      	bne.n	80025be <memset+0xa>
 80025bc:	4770      	bx	lr
 80025be:	f803 1b01 	strb.w	r1, [r3], #1
 80025c2:	e7f9      	b.n	80025b8 <memset+0x4>

080025c4 <_close_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	2300      	movs	r3, #0
 80025c8:	4d05      	ldr	r5, [pc, #20]	; (80025e0 <_close_r+0x1c>)
 80025ca:	4604      	mov	r4, r0
 80025cc:	4608      	mov	r0, r1
 80025ce:	602b      	str	r3, [r5, #0]
 80025d0:	f7fe fbd4 	bl	8000d7c <_close>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d102      	bne.n	80025de <_close_r+0x1a>
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	b103      	cbz	r3, 80025de <_close_r+0x1a>
 80025dc:	6023      	str	r3, [r4, #0]
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	20000210 	.word	0x20000210

080025e4 <_lseek_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4604      	mov	r4, r0
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	4d05      	ldr	r5, [pc, #20]	; (8002604 <_lseek_r+0x20>)
 80025f0:	602a      	str	r2, [r5, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7fe fbe6 	bl	8000dc4 <_lseek>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	d102      	bne.n	8002602 <_lseek_r+0x1e>
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	b103      	cbz	r3, 8002602 <_lseek_r+0x1e>
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	20000210 	.word	0x20000210

08002608 <_read_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	2200      	movs	r2, #0
 8002612:	4d05      	ldr	r5, [pc, #20]	; (8002628 <_read_r+0x20>)
 8002614:	602a      	str	r2, [r5, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	f7fe fb77 	bl	8000d0a <_read>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	d102      	bne.n	8002626 <_read_r+0x1e>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	b103      	cbz	r3, 8002626 <_read_r+0x1e>
 8002624:	6023      	str	r3, [r4, #0]
 8002626:	bd38      	pop	{r3, r4, r5, pc}
 8002628:	20000210 	.word	0x20000210

0800262c <_write_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	2200      	movs	r2, #0
 8002636:	4d05      	ldr	r5, [pc, #20]	; (800264c <_write_r+0x20>)
 8002638:	602a      	str	r2, [r5, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	f7fe fb82 	bl	8000d44 <_write>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	d102      	bne.n	800264a <_write_r+0x1e>
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	b103      	cbz	r3, 800264a <_write_r+0x1e>
 8002648:	6023      	str	r3, [r4, #0]
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	20000210 	.word	0x20000210

08002650 <__errno>:
 8002650:	4b01      	ldr	r3, [pc, #4]	; (8002658 <__errno+0x8>)
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000064 	.word	0x20000064

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	2600      	movs	r6, #0
 8002660:	4d0c      	ldr	r5, [pc, #48]	; (8002694 <__libc_init_array+0x38>)
 8002662:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	f000 fd34 	bl	80030d8 <_init>
 8002670:	2600      	movs	r6, #0
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <__libc_init_array+0x40>)
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <__libc_init_array+0x44>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	0800316c 	.word	0x0800316c
 8002698:	0800316c 	.word	0x0800316c
 800269c:	0800316c 	.word	0x0800316c
 80026a0:	08003170 	.word	0x08003170

080026a4 <__retarget_lock_init_recursive>:
 80026a4:	4770      	bx	lr

080026a6 <__retarget_lock_acquire_recursive>:
 80026a6:	4770      	bx	lr

080026a8 <__retarget_lock_release_recursive>:
 80026a8:	4770      	bx	lr
	...

080026ac <_free_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4605      	mov	r5, r0
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d040      	beq.n	8002736 <_free_r+0x8a>
 80026b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026b8:	1f0c      	subs	r4, r1, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	18e4      	addlt	r4, r4, r3
 80026c0:	f000 f8dc 	bl	800287c <__malloc_lock>
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <_free_r+0x8c>)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	b933      	cbnz	r3, 80026d8 <_free_r+0x2c>
 80026ca:	6063      	str	r3, [r4, #4]
 80026cc:	6014      	str	r4, [r2, #0]
 80026ce:	4628      	mov	r0, r5
 80026d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026d4:	f000 b8d8 	b.w	8002888 <__malloc_unlock>
 80026d8:	42a3      	cmp	r3, r4
 80026da:	d908      	bls.n	80026ee <_free_r+0x42>
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	1821      	adds	r1, r4, r0
 80026e0:	428b      	cmp	r3, r1
 80026e2:	bf01      	itttt	eq
 80026e4:	6819      	ldreq	r1, [r3, #0]
 80026e6:	685b      	ldreq	r3, [r3, #4]
 80026e8:	1809      	addeq	r1, r1, r0
 80026ea:	6021      	streq	r1, [r4, #0]
 80026ec:	e7ed      	b.n	80026ca <_free_r+0x1e>
 80026ee:	461a      	mov	r2, r3
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b10b      	cbz	r3, 80026f8 <_free_r+0x4c>
 80026f4:	42a3      	cmp	r3, r4
 80026f6:	d9fa      	bls.n	80026ee <_free_r+0x42>
 80026f8:	6811      	ldr	r1, [r2, #0]
 80026fa:	1850      	adds	r0, r2, r1
 80026fc:	42a0      	cmp	r0, r4
 80026fe:	d10b      	bne.n	8002718 <_free_r+0x6c>
 8002700:	6820      	ldr	r0, [r4, #0]
 8002702:	4401      	add	r1, r0
 8002704:	1850      	adds	r0, r2, r1
 8002706:	4283      	cmp	r3, r0
 8002708:	6011      	str	r1, [r2, #0]
 800270a:	d1e0      	bne.n	80026ce <_free_r+0x22>
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4408      	add	r0, r1
 8002712:	6010      	str	r0, [r2, #0]
 8002714:	6053      	str	r3, [r2, #4]
 8002716:	e7da      	b.n	80026ce <_free_r+0x22>
 8002718:	d902      	bls.n	8002720 <_free_r+0x74>
 800271a:	230c      	movs	r3, #12
 800271c:	602b      	str	r3, [r5, #0]
 800271e:	e7d6      	b.n	80026ce <_free_r+0x22>
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	1821      	adds	r1, r4, r0
 8002724:	428b      	cmp	r3, r1
 8002726:	bf01      	itttt	eq
 8002728:	6819      	ldreq	r1, [r3, #0]
 800272a:	685b      	ldreq	r3, [r3, #4]
 800272c:	1809      	addeq	r1, r1, r0
 800272e:	6021      	streq	r1, [r4, #0]
 8002730:	6063      	str	r3, [r4, #4]
 8002732:	6054      	str	r4, [r2, #4]
 8002734:	e7cb      	b.n	80026ce <_free_r+0x22>
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	20000218 	.word	0x20000218

0800273c <sbrk_aligned>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	4e0e      	ldr	r6, [pc, #56]	; (8002778 <sbrk_aligned+0x3c>)
 8002740:	460c      	mov	r4, r1
 8002742:	6831      	ldr	r1, [r6, #0]
 8002744:	4605      	mov	r5, r0
 8002746:	b911      	cbnz	r1, 800274e <sbrk_aligned+0x12>
 8002748:	f000 fca8 	bl	800309c <_sbrk_r>
 800274c:	6030      	str	r0, [r6, #0]
 800274e:	4621      	mov	r1, r4
 8002750:	4628      	mov	r0, r5
 8002752:	f000 fca3 	bl	800309c <_sbrk_r>
 8002756:	1c43      	adds	r3, r0, #1
 8002758:	d00a      	beq.n	8002770 <sbrk_aligned+0x34>
 800275a:	1cc4      	adds	r4, r0, #3
 800275c:	f024 0403 	bic.w	r4, r4, #3
 8002760:	42a0      	cmp	r0, r4
 8002762:	d007      	beq.n	8002774 <sbrk_aligned+0x38>
 8002764:	1a21      	subs	r1, r4, r0
 8002766:	4628      	mov	r0, r5
 8002768:	f000 fc98 	bl	800309c <_sbrk_r>
 800276c:	3001      	adds	r0, #1
 800276e:	d101      	bne.n	8002774 <sbrk_aligned+0x38>
 8002770:	f04f 34ff 	mov.w	r4, #4294967295
 8002774:	4620      	mov	r0, r4
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	2000021c 	.word	0x2000021c

0800277c <_malloc_r>:
 800277c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002780:	1ccd      	adds	r5, r1, #3
 8002782:	f025 0503 	bic.w	r5, r5, #3
 8002786:	3508      	adds	r5, #8
 8002788:	2d0c      	cmp	r5, #12
 800278a:	bf38      	it	cc
 800278c:	250c      	movcc	r5, #12
 800278e:	2d00      	cmp	r5, #0
 8002790:	4607      	mov	r7, r0
 8002792:	db01      	blt.n	8002798 <_malloc_r+0x1c>
 8002794:	42a9      	cmp	r1, r5
 8002796:	d905      	bls.n	80027a4 <_malloc_r+0x28>
 8002798:	230c      	movs	r3, #12
 800279a:	2600      	movs	r6, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4630      	mov	r0, r6
 80027a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002878 <_malloc_r+0xfc>
 80027a8:	f000 f868 	bl	800287c <__malloc_lock>
 80027ac:	f8d8 3000 	ldr.w	r3, [r8]
 80027b0:	461c      	mov	r4, r3
 80027b2:	bb5c      	cbnz	r4, 800280c <_malloc_r+0x90>
 80027b4:	4629      	mov	r1, r5
 80027b6:	4638      	mov	r0, r7
 80027b8:	f7ff ffc0 	bl	800273c <sbrk_aligned>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	4604      	mov	r4, r0
 80027c0:	d155      	bne.n	800286e <_malloc_r+0xf2>
 80027c2:	f8d8 4000 	ldr.w	r4, [r8]
 80027c6:	4626      	mov	r6, r4
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	d145      	bne.n	8002858 <_malloc_r+0xdc>
 80027cc:	2c00      	cmp	r4, #0
 80027ce:	d048      	beq.n	8002862 <_malloc_r+0xe6>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	4631      	mov	r1, r6
 80027d4:	4638      	mov	r0, r7
 80027d6:	eb04 0903 	add.w	r9, r4, r3
 80027da:	f000 fc5f 	bl	800309c <_sbrk_r>
 80027de:	4581      	cmp	r9, r0
 80027e0:	d13f      	bne.n	8002862 <_malloc_r+0xe6>
 80027e2:	6821      	ldr	r1, [r4, #0]
 80027e4:	4638      	mov	r0, r7
 80027e6:	1a6d      	subs	r5, r5, r1
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7ff ffa7 	bl	800273c <sbrk_aligned>
 80027ee:	3001      	adds	r0, #1
 80027f0:	d037      	beq.n	8002862 <_malloc_r+0xe6>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	442b      	add	r3, r5
 80027f6:	6023      	str	r3, [r4, #0]
 80027f8:	f8d8 3000 	ldr.w	r3, [r8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d038      	beq.n	8002872 <_malloc_r+0xf6>
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	42a2      	cmp	r2, r4
 8002804:	d12b      	bne.n	800285e <_malloc_r+0xe2>
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	e00f      	b.n	800282c <_malloc_r+0xb0>
 800280c:	6822      	ldr	r2, [r4, #0]
 800280e:	1b52      	subs	r2, r2, r5
 8002810:	d41f      	bmi.n	8002852 <_malloc_r+0xd6>
 8002812:	2a0b      	cmp	r2, #11
 8002814:	d917      	bls.n	8002846 <_malloc_r+0xca>
 8002816:	1961      	adds	r1, r4, r5
 8002818:	42a3      	cmp	r3, r4
 800281a:	6025      	str	r5, [r4, #0]
 800281c:	bf18      	it	ne
 800281e:	6059      	strne	r1, [r3, #4]
 8002820:	6863      	ldr	r3, [r4, #4]
 8002822:	bf08      	it	eq
 8002824:	f8c8 1000 	streq.w	r1, [r8]
 8002828:	5162      	str	r2, [r4, r5]
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	4638      	mov	r0, r7
 800282e:	f104 060b 	add.w	r6, r4, #11
 8002832:	f000 f829 	bl	8002888 <__malloc_unlock>
 8002836:	f026 0607 	bic.w	r6, r6, #7
 800283a:	1d23      	adds	r3, r4, #4
 800283c:	1af2      	subs	r2, r6, r3
 800283e:	d0ae      	beq.n	800279e <_malloc_r+0x22>
 8002840:	1b9b      	subs	r3, r3, r6
 8002842:	50a3      	str	r3, [r4, r2]
 8002844:	e7ab      	b.n	800279e <_malloc_r+0x22>
 8002846:	42a3      	cmp	r3, r4
 8002848:	6862      	ldr	r2, [r4, #4]
 800284a:	d1dd      	bne.n	8002808 <_malloc_r+0x8c>
 800284c:	f8c8 2000 	str.w	r2, [r8]
 8002850:	e7ec      	b.n	800282c <_malloc_r+0xb0>
 8002852:	4623      	mov	r3, r4
 8002854:	6864      	ldr	r4, [r4, #4]
 8002856:	e7ac      	b.n	80027b2 <_malloc_r+0x36>
 8002858:	4634      	mov	r4, r6
 800285a:	6876      	ldr	r6, [r6, #4]
 800285c:	e7b4      	b.n	80027c8 <_malloc_r+0x4c>
 800285e:	4613      	mov	r3, r2
 8002860:	e7cc      	b.n	80027fc <_malloc_r+0x80>
 8002862:	230c      	movs	r3, #12
 8002864:	4638      	mov	r0, r7
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	f000 f80e 	bl	8002888 <__malloc_unlock>
 800286c:	e797      	b.n	800279e <_malloc_r+0x22>
 800286e:	6025      	str	r5, [r4, #0]
 8002870:	e7dc      	b.n	800282c <_malloc_r+0xb0>
 8002872:	605b      	str	r3, [r3, #4]
 8002874:	deff      	udf	#255	; 0xff
 8002876:	bf00      	nop
 8002878:	20000218 	.word	0x20000218

0800287c <__malloc_lock>:
 800287c:	4801      	ldr	r0, [pc, #4]	; (8002884 <__malloc_lock+0x8>)
 800287e:	f7ff bf12 	b.w	80026a6 <__retarget_lock_acquire_recursive>
 8002882:	bf00      	nop
 8002884:	20000214 	.word	0x20000214

08002888 <__malloc_unlock>:
 8002888:	4801      	ldr	r0, [pc, #4]	; (8002890 <__malloc_unlock+0x8>)
 800288a:	f7ff bf0d 	b.w	80026a8 <__retarget_lock_release_recursive>
 800288e:	bf00      	nop
 8002890:	20000214 	.word	0x20000214

08002894 <__sfputc_r>:
 8002894:	6893      	ldr	r3, [r2, #8]
 8002896:	b410      	push	{r4}
 8002898:	3b01      	subs	r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	6093      	str	r3, [r2, #8]
 800289e:	da07      	bge.n	80028b0 <__sfputc_r+0x1c>
 80028a0:	6994      	ldr	r4, [r2, #24]
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	db01      	blt.n	80028aa <__sfputc_r+0x16>
 80028a6:	290a      	cmp	r1, #10
 80028a8:	d102      	bne.n	80028b0 <__sfputc_r+0x1c>
 80028aa:	bc10      	pop	{r4}
 80028ac:	f7ff bded 	b.w	800248a <__swbuf_r>
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	1c58      	adds	r0, r3, #1
 80028b4:	6010      	str	r0, [r2, #0]
 80028b6:	7019      	strb	r1, [r3, #0]
 80028b8:	4608      	mov	r0, r1
 80028ba:	bc10      	pop	{r4}
 80028bc:	4770      	bx	lr

080028be <__sfputs_r>:
 80028be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c0:	4606      	mov	r6, r0
 80028c2:	460f      	mov	r7, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	18d5      	adds	r5, r2, r3
 80028c8:	42ac      	cmp	r4, r5
 80028ca:	d101      	bne.n	80028d0 <__sfputs_r+0x12>
 80028cc:	2000      	movs	r0, #0
 80028ce:	e007      	b.n	80028e0 <__sfputs_r+0x22>
 80028d0:	463a      	mov	r2, r7
 80028d2:	4630      	mov	r0, r6
 80028d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d8:	f7ff ffdc 	bl	8002894 <__sfputc_r>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d1f3      	bne.n	80028c8 <__sfputs_r+0xa>
 80028e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028e4 <_vfiprintf_r>:
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	460d      	mov	r5, r1
 80028ea:	4614      	mov	r4, r2
 80028ec:	4698      	mov	r8, r3
 80028ee:	4606      	mov	r6, r0
 80028f0:	b09d      	sub	sp, #116	; 0x74
 80028f2:	b118      	cbz	r0, 80028fc <_vfiprintf_r+0x18>
 80028f4:	6a03      	ldr	r3, [r0, #32]
 80028f6:	b90b      	cbnz	r3, 80028fc <_vfiprintf_r+0x18>
 80028f8:	f7ff fce0 	bl	80022bc <__sinit>
 80028fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028fe:	07d9      	lsls	r1, r3, #31
 8002900:	d405      	bmi.n	800290e <_vfiprintf_r+0x2a>
 8002902:	89ab      	ldrh	r3, [r5, #12]
 8002904:	059a      	lsls	r2, r3, #22
 8002906:	d402      	bmi.n	800290e <_vfiprintf_r+0x2a>
 8002908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800290a:	f7ff fecc 	bl	80026a6 <__retarget_lock_acquire_recursive>
 800290e:	89ab      	ldrh	r3, [r5, #12]
 8002910:	071b      	lsls	r3, r3, #28
 8002912:	d501      	bpl.n	8002918 <_vfiprintf_r+0x34>
 8002914:	692b      	ldr	r3, [r5, #16]
 8002916:	b99b      	cbnz	r3, 8002940 <_vfiprintf_r+0x5c>
 8002918:	4629      	mov	r1, r5
 800291a:	4630      	mov	r0, r6
 800291c:	f7ff fdf2 	bl	8002504 <__swsetup_r>
 8002920:	b170      	cbz	r0, 8002940 <_vfiprintf_r+0x5c>
 8002922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002924:	07dc      	lsls	r4, r3, #31
 8002926:	d504      	bpl.n	8002932 <_vfiprintf_r+0x4e>
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	b01d      	add	sp, #116	; 0x74
 800292e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002932:	89ab      	ldrh	r3, [r5, #12]
 8002934:	0598      	lsls	r0, r3, #22
 8002936:	d4f7      	bmi.n	8002928 <_vfiprintf_r+0x44>
 8002938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800293a:	f7ff feb5 	bl	80026a8 <__retarget_lock_release_recursive>
 800293e:	e7f3      	b.n	8002928 <_vfiprintf_r+0x44>
 8002940:	2300      	movs	r3, #0
 8002942:	9309      	str	r3, [sp, #36]	; 0x24
 8002944:	2320      	movs	r3, #32
 8002946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800294a:	2330      	movs	r3, #48	; 0x30
 800294c:	f04f 0901 	mov.w	r9, #1
 8002950:	f8cd 800c 	str.w	r8, [sp, #12]
 8002954:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002b04 <_vfiprintf_r+0x220>
 8002958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800295c:	4623      	mov	r3, r4
 800295e:	469a      	mov	sl, r3
 8002960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002964:	b10a      	cbz	r2, 800296a <_vfiprintf_r+0x86>
 8002966:	2a25      	cmp	r2, #37	; 0x25
 8002968:	d1f9      	bne.n	800295e <_vfiprintf_r+0x7a>
 800296a:	ebba 0b04 	subs.w	fp, sl, r4
 800296e:	d00b      	beq.n	8002988 <_vfiprintf_r+0xa4>
 8002970:	465b      	mov	r3, fp
 8002972:	4622      	mov	r2, r4
 8002974:	4629      	mov	r1, r5
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff ffa1 	bl	80028be <__sfputs_r>
 800297c:	3001      	adds	r0, #1
 800297e:	f000 80a9 	beq.w	8002ad4 <_vfiprintf_r+0x1f0>
 8002982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002984:	445a      	add	r2, fp
 8002986:	9209      	str	r2, [sp, #36]	; 0x24
 8002988:	f89a 3000 	ldrb.w	r3, [sl]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80a1 	beq.w	8002ad4 <_vfiprintf_r+0x1f0>
 8002992:	2300      	movs	r3, #0
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800299c:	f10a 0a01 	add.w	sl, sl, #1
 80029a0:	9304      	str	r3, [sp, #16]
 80029a2:	9307      	str	r3, [sp, #28]
 80029a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029a8:	931a      	str	r3, [sp, #104]	; 0x68
 80029aa:	4654      	mov	r4, sl
 80029ac:	2205      	movs	r2, #5
 80029ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b2:	4854      	ldr	r0, [pc, #336]	; (8002b04 <_vfiprintf_r+0x220>)
 80029b4:	f000 fb82 	bl	80030bc <memchr>
 80029b8:	9a04      	ldr	r2, [sp, #16]
 80029ba:	b9d8      	cbnz	r0, 80029f4 <_vfiprintf_r+0x110>
 80029bc:	06d1      	lsls	r1, r2, #27
 80029be:	bf44      	itt	mi
 80029c0:	2320      	movmi	r3, #32
 80029c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029c6:	0713      	lsls	r3, r2, #28
 80029c8:	bf44      	itt	mi
 80029ca:	232b      	movmi	r3, #43	; 0x2b
 80029cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029d0:	f89a 3000 	ldrb.w	r3, [sl]
 80029d4:	2b2a      	cmp	r3, #42	; 0x2a
 80029d6:	d015      	beq.n	8002a04 <_vfiprintf_r+0x120>
 80029d8:	4654      	mov	r4, sl
 80029da:	2000      	movs	r0, #0
 80029dc:	f04f 0c0a 	mov.w	ip, #10
 80029e0:	9a07      	ldr	r2, [sp, #28]
 80029e2:	4621      	mov	r1, r4
 80029e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029e8:	3b30      	subs	r3, #48	; 0x30
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d94d      	bls.n	8002a8a <_vfiprintf_r+0x1a6>
 80029ee:	b1b0      	cbz	r0, 8002a1e <_vfiprintf_r+0x13a>
 80029f0:	9207      	str	r2, [sp, #28]
 80029f2:	e014      	b.n	8002a1e <_vfiprintf_r+0x13a>
 80029f4:	eba0 0308 	sub.w	r3, r0, r8
 80029f8:	fa09 f303 	lsl.w	r3, r9, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	46a2      	mov	sl, r4
 8002a00:	9304      	str	r3, [sp, #16]
 8002a02:	e7d2      	b.n	80029aa <_vfiprintf_r+0xc6>
 8002a04:	9b03      	ldr	r3, [sp, #12]
 8002a06:	1d19      	adds	r1, r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	9103      	str	r1, [sp, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bfbb      	ittet	lt
 8002a10:	425b      	neglt	r3, r3
 8002a12:	f042 0202 	orrlt.w	r2, r2, #2
 8002a16:	9307      	strge	r3, [sp, #28]
 8002a18:	9307      	strlt	r3, [sp, #28]
 8002a1a:	bfb8      	it	lt
 8002a1c:	9204      	strlt	r2, [sp, #16]
 8002a1e:	7823      	ldrb	r3, [r4, #0]
 8002a20:	2b2e      	cmp	r3, #46	; 0x2e
 8002a22:	d10c      	bne.n	8002a3e <_vfiprintf_r+0x15a>
 8002a24:	7863      	ldrb	r3, [r4, #1]
 8002a26:	2b2a      	cmp	r3, #42	; 0x2a
 8002a28:	d134      	bne.n	8002a94 <_vfiprintf_r+0x1b0>
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	3402      	adds	r4, #2
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	9203      	str	r2, [sp, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bfb8      	it	lt
 8002a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a3c:	9305      	str	r3, [sp, #20]
 8002a3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b08 <_vfiprintf_r+0x224>
 8002a42:	2203      	movs	r2, #3
 8002a44:	4650      	mov	r0, sl
 8002a46:	7821      	ldrb	r1, [r4, #0]
 8002a48:	f000 fb38 	bl	80030bc <memchr>
 8002a4c:	b138      	cbz	r0, 8002a5e <_vfiprintf_r+0x17a>
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	9b04      	ldr	r3, [sp, #16]
 8002a52:	eba0 000a 	sub.w	r0, r0, sl
 8002a56:	4082      	lsls	r2, r0
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	3401      	adds	r4, #1
 8002a5c:	9304      	str	r3, [sp, #16]
 8002a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a62:	2206      	movs	r2, #6
 8002a64:	4829      	ldr	r0, [pc, #164]	; (8002b0c <_vfiprintf_r+0x228>)
 8002a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a6a:	f000 fb27 	bl	80030bc <memchr>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d03f      	beq.n	8002af2 <_vfiprintf_r+0x20e>
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <_vfiprintf_r+0x22c>)
 8002a74:	bb1b      	cbnz	r3, 8002abe <_vfiprintf_r+0x1da>
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	f023 0307 	bic.w	r3, r3, #7
 8002a7e:	3308      	adds	r3, #8
 8002a80:	9303      	str	r3, [sp, #12]
 8002a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a84:	443b      	add	r3, r7
 8002a86:	9309      	str	r3, [sp, #36]	; 0x24
 8002a88:	e768      	b.n	800295c <_vfiprintf_r+0x78>
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a92:	e7a6      	b.n	80029e2 <_vfiprintf_r+0xfe>
 8002a94:	2300      	movs	r3, #0
 8002a96:	f04f 0c0a 	mov.w	ip, #10
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	3401      	adds	r4, #1
 8002a9e:	9305      	str	r3, [sp, #20]
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aa6:	3a30      	subs	r2, #48	; 0x30
 8002aa8:	2a09      	cmp	r2, #9
 8002aaa:	d903      	bls.n	8002ab4 <_vfiprintf_r+0x1d0>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0c6      	beq.n	8002a3e <_vfiprintf_r+0x15a>
 8002ab0:	9105      	str	r1, [sp, #20]
 8002ab2:	e7c4      	b.n	8002a3e <_vfiprintf_r+0x15a>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002abc:	e7f0      	b.n	8002aa0 <_vfiprintf_r+0x1bc>
 8002abe:	ab03      	add	r3, sp, #12
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	462a      	mov	r2, r5
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <_vfiprintf_r+0x230>)
 8002ac8:	a904      	add	r1, sp, #16
 8002aca:	f3af 8000 	nop.w
 8002ace:	4607      	mov	r7, r0
 8002ad0:	1c78      	adds	r0, r7, #1
 8002ad2:	d1d6      	bne.n	8002a82 <_vfiprintf_r+0x19e>
 8002ad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ad6:	07d9      	lsls	r1, r3, #31
 8002ad8:	d405      	bmi.n	8002ae6 <_vfiprintf_r+0x202>
 8002ada:	89ab      	ldrh	r3, [r5, #12]
 8002adc:	059a      	lsls	r2, r3, #22
 8002ade:	d402      	bmi.n	8002ae6 <_vfiprintf_r+0x202>
 8002ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ae2:	f7ff fde1 	bl	80026a8 <__retarget_lock_release_recursive>
 8002ae6:	89ab      	ldrh	r3, [r5, #12]
 8002ae8:	065b      	lsls	r3, r3, #25
 8002aea:	f53f af1d 	bmi.w	8002928 <_vfiprintf_r+0x44>
 8002aee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002af0:	e71c      	b.n	800292c <_vfiprintf_r+0x48>
 8002af2:	ab03      	add	r3, sp, #12
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	462a      	mov	r2, r5
 8002af8:	4630      	mov	r0, r6
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <_vfiprintf_r+0x230>)
 8002afc:	a904      	add	r1, sp, #16
 8002afe:	f000 f87d 	bl	8002bfc <_printf_i>
 8002b02:	e7e4      	b.n	8002ace <_vfiprintf_r+0x1ea>
 8002b04:	08003136 	.word	0x08003136
 8002b08:	0800313c 	.word	0x0800313c
 8002b0c:	08003140 	.word	0x08003140
 8002b10:	00000000 	.word	0x00000000
 8002b14:	080028bf 	.word	0x080028bf

08002b18 <_printf_common>:
 8002b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1c:	4616      	mov	r6, r2
 8002b1e:	4699      	mov	r9, r3
 8002b20:	688a      	ldr	r2, [r1, #8]
 8002b22:	690b      	ldr	r3, [r1, #16]
 8002b24:	4607      	mov	r7, r0
 8002b26:	4293      	cmp	r3, r2
 8002b28:	bfb8      	it	lt
 8002b2a:	4613      	movlt	r3, r2
 8002b2c:	6033      	str	r3, [r6, #0]
 8002b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b32:	460c      	mov	r4, r1
 8002b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b38:	b10a      	cbz	r2, 8002b3e <_printf_common+0x26>
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	6033      	str	r3, [r6, #0]
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	0699      	lsls	r1, r3, #26
 8002b42:	bf42      	ittt	mi
 8002b44:	6833      	ldrmi	r3, [r6, #0]
 8002b46:	3302      	addmi	r3, #2
 8002b48:	6033      	strmi	r3, [r6, #0]
 8002b4a:	6825      	ldr	r5, [r4, #0]
 8002b4c:	f015 0506 	ands.w	r5, r5, #6
 8002b50:	d106      	bne.n	8002b60 <_printf_common+0x48>
 8002b52:	f104 0a19 	add.w	sl, r4, #25
 8002b56:	68e3      	ldr	r3, [r4, #12]
 8002b58:	6832      	ldr	r2, [r6, #0]
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	42ab      	cmp	r3, r5
 8002b5e:	dc2b      	bgt.n	8002bb8 <_printf_common+0xa0>
 8002b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b64:	1e13      	subs	r3, r2, #0
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	bf18      	it	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	0692      	lsls	r2, r2, #26
 8002b6e:	d430      	bmi.n	8002bd2 <_printf_common+0xba>
 8002b70:	4649      	mov	r1, r9
 8002b72:	4638      	mov	r0, r7
 8002b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b78:	47c0      	blx	r8
 8002b7a:	3001      	adds	r0, #1
 8002b7c:	d023      	beq.n	8002bc6 <_printf_common+0xae>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	6922      	ldr	r2, [r4, #16]
 8002b82:	f003 0306 	and.w	r3, r3, #6
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf14      	ite	ne
 8002b8a:	2500      	movne	r5, #0
 8002b8c:	6833      	ldreq	r3, [r6, #0]
 8002b8e:	f04f 0600 	mov.w	r6, #0
 8002b92:	bf08      	it	eq
 8002b94:	68e5      	ldreq	r5, [r4, #12]
 8002b96:	f104 041a 	add.w	r4, r4, #26
 8002b9a:	bf08      	it	eq
 8002b9c:	1aed      	subeq	r5, r5, r3
 8002b9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ba2:	bf08      	it	eq
 8002ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bfc4      	itt	gt
 8002bac:	1a9b      	subgt	r3, r3, r2
 8002bae:	18ed      	addgt	r5, r5, r3
 8002bb0:	42b5      	cmp	r5, r6
 8002bb2:	d11a      	bne.n	8002bea <_printf_common+0xd2>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e008      	b.n	8002bca <_printf_common+0xb2>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4652      	mov	r2, sl
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	47c0      	blx	r8
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d103      	bne.n	8002bce <_printf_common+0xb6>
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bce:	3501      	adds	r5, #1
 8002bd0:	e7c1      	b.n	8002b56 <_printf_common+0x3e>
 8002bd2:	2030      	movs	r0, #48	; 0x30
 8002bd4:	18e1      	adds	r1, r4, r3
 8002bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002be0:	4422      	add	r2, r4
 8002be2:	3302      	adds	r3, #2
 8002be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002be8:	e7c2      	b.n	8002b70 <_printf_common+0x58>
 8002bea:	2301      	movs	r3, #1
 8002bec:	4622      	mov	r2, r4
 8002bee:	4649      	mov	r1, r9
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	47c0      	blx	r8
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d0e6      	beq.n	8002bc6 <_printf_common+0xae>
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7d9      	b.n	8002bb0 <_printf_common+0x98>

08002bfc <_printf_i>:
 8002bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c00:	7e0f      	ldrb	r7, [r1, #24]
 8002c02:	4691      	mov	r9, r2
 8002c04:	2f78      	cmp	r7, #120	; 0x78
 8002c06:	4680      	mov	r8, r0
 8002c08:	460c      	mov	r4, r1
 8002c0a:	469a      	mov	sl, r3
 8002c0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c12:	d807      	bhi.n	8002c24 <_printf_i+0x28>
 8002c14:	2f62      	cmp	r7, #98	; 0x62
 8002c16:	d80a      	bhi.n	8002c2e <_printf_i+0x32>
 8002c18:	2f00      	cmp	r7, #0
 8002c1a:	f000 80d5 	beq.w	8002dc8 <_printf_i+0x1cc>
 8002c1e:	2f58      	cmp	r7, #88	; 0x58
 8002c20:	f000 80c1 	beq.w	8002da6 <_printf_i+0x1aa>
 8002c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c2c:	e03a      	b.n	8002ca4 <_printf_i+0xa8>
 8002c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c32:	2b15      	cmp	r3, #21
 8002c34:	d8f6      	bhi.n	8002c24 <_printf_i+0x28>
 8002c36:	a101      	add	r1, pc, #4	; (adr r1, 8002c3c <_printf_i+0x40>)
 8002c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c3c:	08002c95 	.word	0x08002c95
 8002c40:	08002ca9 	.word	0x08002ca9
 8002c44:	08002c25 	.word	0x08002c25
 8002c48:	08002c25 	.word	0x08002c25
 8002c4c:	08002c25 	.word	0x08002c25
 8002c50:	08002c25 	.word	0x08002c25
 8002c54:	08002ca9 	.word	0x08002ca9
 8002c58:	08002c25 	.word	0x08002c25
 8002c5c:	08002c25 	.word	0x08002c25
 8002c60:	08002c25 	.word	0x08002c25
 8002c64:	08002c25 	.word	0x08002c25
 8002c68:	08002daf 	.word	0x08002daf
 8002c6c:	08002cd5 	.word	0x08002cd5
 8002c70:	08002d69 	.word	0x08002d69
 8002c74:	08002c25 	.word	0x08002c25
 8002c78:	08002c25 	.word	0x08002c25
 8002c7c:	08002dd1 	.word	0x08002dd1
 8002c80:	08002c25 	.word	0x08002c25
 8002c84:	08002cd5 	.word	0x08002cd5
 8002c88:	08002c25 	.word	0x08002c25
 8002c8c:	08002c25 	.word	0x08002c25
 8002c90:	08002d71 	.word	0x08002d71
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	602a      	str	r2, [r5, #0]
 8002c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0a0      	b.n	8002dea <_printf_i+0x1ee>
 8002ca8:	6820      	ldr	r0, [r4, #0]
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	0607      	lsls	r7, r0, #24
 8002cae:	f103 0104 	add.w	r1, r3, #4
 8002cb2:	6029      	str	r1, [r5, #0]
 8002cb4:	d501      	bpl.n	8002cba <_printf_i+0xbe>
 8002cb6:	681e      	ldr	r6, [r3, #0]
 8002cb8:	e003      	b.n	8002cc2 <_printf_i+0xc6>
 8002cba:	0646      	lsls	r6, r0, #25
 8002cbc:	d5fb      	bpl.n	8002cb6 <_printf_i+0xba>
 8002cbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	da03      	bge.n	8002cce <_printf_i+0xd2>
 8002cc6:	232d      	movs	r3, #45	; 0x2d
 8002cc8:	4276      	negs	r6, r6
 8002cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cce:	230a      	movs	r3, #10
 8002cd0:	4859      	ldr	r0, [pc, #356]	; (8002e38 <_printf_i+0x23c>)
 8002cd2:	e012      	b.n	8002cfa <_printf_i+0xfe>
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	1d19      	adds	r1, r3, #4
 8002cda:	6029      	str	r1, [r5, #0]
 8002cdc:	0605      	lsls	r5, r0, #24
 8002cde:	d501      	bpl.n	8002ce4 <_printf_i+0xe8>
 8002ce0:	681e      	ldr	r6, [r3, #0]
 8002ce2:	e002      	b.n	8002cea <_printf_i+0xee>
 8002ce4:	0641      	lsls	r1, r0, #25
 8002ce6:	d5fb      	bpl.n	8002ce0 <_printf_i+0xe4>
 8002ce8:	881e      	ldrh	r6, [r3, #0]
 8002cea:	2f6f      	cmp	r7, #111	; 0x6f
 8002cec:	bf0c      	ite	eq
 8002cee:	2308      	moveq	r3, #8
 8002cf0:	230a      	movne	r3, #10
 8002cf2:	4851      	ldr	r0, [pc, #324]	; (8002e38 <_printf_i+0x23c>)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cfa:	6865      	ldr	r5, [r4, #4]
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	bfa8      	it	ge
 8002d00:	6821      	ldrge	r1, [r4, #0]
 8002d02:	60a5      	str	r5, [r4, #8]
 8002d04:	bfa4      	itt	ge
 8002d06:	f021 0104 	bicge.w	r1, r1, #4
 8002d0a:	6021      	strge	r1, [r4, #0]
 8002d0c:	b90e      	cbnz	r6, 8002d12 <_printf_i+0x116>
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	d04b      	beq.n	8002daa <_printf_i+0x1ae>
 8002d12:	4615      	mov	r5, r2
 8002d14:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d18:	fb03 6711 	mls	r7, r3, r1, r6
 8002d1c:	5dc7      	ldrb	r7, [r0, r7]
 8002d1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d22:	4637      	mov	r7, r6
 8002d24:	42bb      	cmp	r3, r7
 8002d26:	460e      	mov	r6, r1
 8002d28:	d9f4      	bls.n	8002d14 <_printf_i+0x118>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d10b      	bne.n	8002d46 <_printf_i+0x14a>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	07de      	lsls	r6, r3, #31
 8002d32:	d508      	bpl.n	8002d46 <_printf_i+0x14a>
 8002d34:	6923      	ldr	r3, [r4, #16]
 8002d36:	6861      	ldr	r1, [r4, #4]
 8002d38:	4299      	cmp	r1, r3
 8002d3a:	bfde      	ittt	le
 8002d3c:	2330      	movle	r3, #48	; 0x30
 8002d3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d46:	1b52      	subs	r2, r2, r5
 8002d48:	6122      	str	r2, [r4, #16]
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	4640      	mov	r0, r8
 8002d50:	f8cd a000 	str.w	sl, [sp]
 8002d54:	aa03      	add	r2, sp, #12
 8002d56:	f7ff fedf 	bl	8002b18 <_printf_common>
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d14a      	bne.n	8002df4 <_printf_i+0x1f8>
 8002d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d62:	b004      	add	sp, #16
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	f043 0320 	orr.w	r3, r3, #32
 8002d6e:	6023      	str	r3, [r4, #0]
 8002d70:	2778      	movs	r7, #120	; 0x78
 8002d72:	4832      	ldr	r0, [pc, #200]	; (8002e3c <_printf_i+0x240>)
 8002d74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	6829      	ldr	r1, [r5, #0]
 8002d7c:	061f      	lsls	r7, r3, #24
 8002d7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d82:	d402      	bmi.n	8002d8a <_printf_i+0x18e>
 8002d84:	065f      	lsls	r7, r3, #25
 8002d86:	bf48      	it	mi
 8002d88:	b2b6      	uxthmi	r6, r6
 8002d8a:	07df      	lsls	r7, r3, #31
 8002d8c:	bf48      	it	mi
 8002d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8002d92:	6029      	str	r1, [r5, #0]
 8002d94:	bf48      	it	mi
 8002d96:	6023      	strmi	r3, [r4, #0]
 8002d98:	b91e      	cbnz	r6, 8002da2 <_printf_i+0x1a6>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	f023 0320 	bic.w	r3, r3, #32
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	2310      	movs	r3, #16
 8002da4:	e7a6      	b.n	8002cf4 <_printf_i+0xf8>
 8002da6:	4824      	ldr	r0, [pc, #144]	; (8002e38 <_printf_i+0x23c>)
 8002da8:	e7e4      	b.n	8002d74 <_printf_i+0x178>
 8002daa:	4615      	mov	r5, r2
 8002dac:	e7bd      	b.n	8002d2a <_printf_i+0x12e>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	6826      	ldr	r6, [r4, #0]
 8002db2:	1d18      	adds	r0, r3, #4
 8002db4:	6961      	ldr	r1, [r4, #20]
 8002db6:	6028      	str	r0, [r5, #0]
 8002db8:	0635      	lsls	r5, r6, #24
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	d501      	bpl.n	8002dc2 <_printf_i+0x1c6>
 8002dbe:	6019      	str	r1, [r3, #0]
 8002dc0:	e002      	b.n	8002dc8 <_printf_i+0x1cc>
 8002dc2:	0670      	lsls	r0, r6, #25
 8002dc4:	d5fb      	bpl.n	8002dbe <_printf_i+0x1c2>
 8002dc6:	8019      	strh	r1, [r3, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4615      	mov	r5, r2
 8002dcc:	6123      	str	r3, [r4, #16]
 8002dce:	e7bc      	b.n	8002d4a <_printf_i+0x14e>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	1d1a      	adds	r2, r3, #4
 8002dd6:	602a      	str	r2, [r5, #0]
 8002dd8:	681d      	ldr	r5, [r3, #0]
 8002dda:	6862      	ldr	r2, [r4, #4]
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f000 f96d 	bl	80030bc <memchr>
 8002de2:	b108      	cbz	r0, 8002de8 <_printf_i+0x1ec>
 8002de4:	1b40      	subs	r0, r0, r5
 8002de6:	6060      	str	r0, [r4, #4]
 8002de8:	6863      	ldr	r3, [r4, #4]
 8002dea:	6123      	str	r3, [r4, #16]
 8002dec:	2300      	movs	r3, #0
 8002dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df2:	e7aa      	b.n	8002d4a <_printf_i+0x14e>
 8002df4:	462a      	mov	r2, r5
 8002df6:	4649      	mov	r1, r9
 8002df8:	4640      	mov	r0, r8
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	47d0      	blx	sl
 8002dfe:	3001      	adds	r0, #1
 8002e00:	d0ad      	beq.n	8002d5e <_printf_i+0x162>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	079b      	lsls	r3, r3, #30
 8002e06:	d413      	bmi.n	8002e30 <_printf_i+0x234>
 8002e08:	68e0      	ldr	r0, [r4, #12]
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	4298      	cmp	r0, r3
 8002e0e:	bfb8      	it	lt
 8002e10:	4618      	movlt	r0, r3
 8002e12:	e7a6      	b.n	8002d62 <_printf_i+0x166>
 8002e14:	2301      	movs	r3, #1
 8002e16:	4632      	mov	r2, r6
 8002e18:	4649      	mov	r1, r9
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	47d0      	blx	sl
 8002e1e:	3001      	adds	r0, #1
 8002e20:	d09d      	beq.n	8002d5e <_printf_i+0x162>
 8002e22:	3501      	adds	r5, #1
 8002e24:	68e3      	ldr	r3, [r4, #12]
 8002e26:	9903      	ldr	r1, [sp, #12]
 8002e28:	1a5b      	subs	r3, r3, r1
 8002e2a:	42ab      	cmp	r3, r5
 8002e2c:	dcf2      	bgt.n	8002e14 <_printf_i+0x218>
 8002e2e:	e7eb      	b.n	8002e08 <_printf_i+0x20c>
 8002e30:	2500      	movs	r5, #0
 8002e32:	f104 0619 	add.w	r6, r4, #25
 8002e36:	e7f5      	b.n	8002e24 <_printf_i+0x228>
 8002e38:	08003147 	.word	0x08003147
 8002e3c:	08003158 	.word	0x08003158

08002e40 <__sflush_r>:
 8002e40:	898a      	ldrh	r2, [r1, #12]
 8002e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e44:	4605      	mov	r5, r0
 8002e46:	0710      	lsls	r0, r2, #28
 8002e48:	460c      	mov	r4, r1
 8002e4a:	d457      	bmi.n	8002efc <__sflush_r+0xbc>
 8002e4c:	684b      	ldr	r3, [r1, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	dc04      	bgt.n	8002e5c <__sflush_r+0x1c>
 8002e52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dc01      	bgt.n	8002e5c <__sflush_r+0x1c>
 8002e58:	2000      	movs	r0, #0
 8002e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e5e:	2e00      	cmp	r6, #0
 8002e60:	d0fa      	beq.n	8002e58 <__sflush_r+0x18>
 8002e62:	2300      	movs	r3, #0
 8002e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e68:	682f      	ldr	r7, [r5, #0]
 8002e6a:	6a21      	ldr	r1, [r4, #32]
 8002e6c:	602b      	str	r3, [r5, #0]
 8002e6e:	d032      	beq.n	8002ed6 <__sflush_r+0x96>
 8002e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	075a      	lsls	r2, r3, #29
 8002e76:	d505      	bpl.n	8002e84 <__sflush_r+0x44>
 8002e78:	6863      	ldr	r3, [r4, #4]
 8002e7a:	1ac0      	subs	r0, r0, r3
 8002e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e7e:	b10b      	cbz	r3, 8002e84 <__sflush_r+0x44>
 8002e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e82:	1ac0      	subs	r0, r0, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	4602      	mov	r2, r0
 8002e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	6a21      	ldr	r1, [r4, #32]
 8002e8e:	47b0      	blx	r6
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	d106      	bne.n	8002ea4 <__sflush_r+0x64>
 8002e96:	6829      	ldr	r1, [r5, #0]
 8002e98:	291d      	cmp	r1, #29
 8002e9a:	d82b      	bhi.n	8002ef4 <__sflush_r+0xb4>
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <__sflush_r+0x100>)
 8002e9e:	410a      	asrs	r2, r1
 8002ea0:	07d6      	lsls	r6, r2, #31
 8002ea2:	d427      	bmi.n	8002ef4 <__sflush_r+0xb4>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6062      	str	r2, [r4, #4]
 8002ea8:	6922      	ldr	r2, [r4, #16]
 8002eaa:	04d9      	lsls	r1, r3, #19
 8002eac:	6022      	str	r2, [r4, #0]
 8002eae:	d504      	bpl.n	8002eba <__sflush_r+0x7a>
 8002eb0:	1c42      	adds	r2, r0, #1
 8002eb2:	d101      	bne.n	8002eb8 <__sflush_r+0x78>
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	b903      	cbnz	r3, 8002eba <__sflush_r+0x7a>
 8002eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8002eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ebc:	602f      	str	r7, [r5, #0]
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d0ca      	beq.n	8002e58 <__sflush_r+0x18>
 8002ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ec6:	4299      	cmp	r1, r3
 8002ec8:	d002      	beq.n	8002ed0 <__sflush_r+0x90>
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f7ff fbee 	bl	80026ac <_free_r>
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8002ed4:	e7c1      	b.n	8002e5a <__sflush_r+0x1a>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4628      	mov	r0, r5
 8002eda:	47b0      	blx	r6
 8002edc:	1c41      	adds	r1, r0, #1
 8002ede:	d1c8      	bne.n	8002e72 <__sflush_r+0x32>
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0c5      	beq.n	8002e72 <__sflush_r+0x32>
 8002ee6:	2b1d      	cmp	r3, #29
 8002ee8:	d001      	beq.n	8002eee <__sflush_r+0xae>
 8002eea:	2b16      	cmp	r3, #22
 8002eec:	d101      	bne.n	8002ef2 <__sflush_r+0xb2>
 8002eee:	602f      	str	r7, [r5, #0]
 8002ef0:	e7b2      	b.n	8002e58 <__sflush_r+0x18>
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	e7ae      	b.n	8002e5a <__sflush_r+0x1a>
 8002efc:	690f      	ldr	r7, [r1, #16]
 8002efe:	2f00      	cmp	r7, #0
 8002f00:	d0aa      	beq.n	8002e58 <__sflush_r+0x18>
 8002f02:	0793      	lsls	r3, r2, #30
 8002f04:	bf18      	it	ne
 8002f06:	2300      	movne	r3, #0
 8002f08:	680e      	ldr	r6, [r1, #0]
 8002f0a:	bf08      	it	eq
 8002f0c:	694b      	ldreq	r3, [r1, #20]
 8002f0e:	1bf6      	subs	r6, r6, r7
 8002f10:	600f      	str	r7, [r1, #0]
 8002f12:	608b      	str	r3, [r1, #8]
 8002f14:	2e00      	cmp	r6, #0
 8002f16:	dd9f      	ble.n	8002e58 <__sflush_r+0x18>
 8002f18:	4633      	mov	r3, r6
 8002f1a:	463a      	mov	r2, r7
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	6a21      	ldr	r1, [r4, #32]
 8002f20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002f24:	47e0      	blx	ip
 8002f26:	2800      	cmp	r0, #0
 8002f28:	dc06      	bgt.n	8002f38 <__sflush_r+0xf8>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	e790      	b.n	8002e5a <__sflush_r+0x1a>
 8002f38:	4407      	add	r7, r0
 8002f3a:	1a36      	subs	r6, r6, r0
 8002f3c:	e7ea      	b.n	8002f14 <__sflush_r+0xd4>
 8002f3e:	bf00      	nop
 8002f40:	dfbffffe 	.word	0xdfbffffe

08002f44 <_fflush_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	690b      	ldr	r3, [r1, #16]
 8002f48:	4605      	mov	r5, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	b913      	cbnz	r3, 8002f54 <_fflush_r+0x10>
 8002f4e:	2500      	movs	r5, #0
 8002f50:	4628      	mov	r0, r5
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	b118      	cbz	r0, 8002f5e <_fflush_r+0x1a>
 8002f56:	6a03      	ldr	r3, [r0, #32]
 8002f58:	b90b      	cbnz	r3, 8002f5e <_fflush_r+0x1a>
 8002f5a:	f7ff f9af 	bl	80022bc <__sinit>
 8002f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f3      	beq.n	8002f4e <_fflush_r+0xa>
 8002f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f68:	07d0      	lsls	r0, r2, #31
 8002f6a:	d404      	bmi.n	8002f76 <_fflush_r+0x32>
 8002f6c:	0599      	lsls	r1, r3, #22
 8002f6e:	d402      	bmi.n	8002f76 <_fflush_r+0x32>
 8002f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f72:	f7ff fb98 	bl	80026a6 <__retarget_lock_acquire_recursive>
 8002f76:	4628      	mov	r0, r5
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f7ff ff61 	bl	8002e40 <__sflush_r>
 8002f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f80:	4605      	mov	r5, r0
 8002f82:	07da      	lsls	r2, r3, #31
 8002f84:	d4e4      	bmi.n	8002f50 <_fflush_r+0xc>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	059b      	lsls	r3, r3, #22
 8002f8a:	d4e1      	bmi.n	8002f50 <_fflush_r+0xc>
 8002f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f8e:	f7ff fb8b 	bl	80026a8 <__retarget_lock_release_recursive>
 8002f92:	e7dd      	b.n	8002f50 <_fflush_r+0xc>

08002f94 <__swhatbuf_r>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	460c      	mov	r4, r1
 8002f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f9c:	4615      	mov	r5, r2
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	461e      	mov	r6, r3
 8002fa2:	b096      	sub	sp, #88	; 0x58
 8002fa4:	da0c      	bge.n	8002fc0 <__swhatbuf_r+0x2c>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	2100      	movs	r1, #0
 8002faa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fae:	bf0c      	ite	eq
 8002fb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002fb4:	2340      	movne	r3, #64	; 0x40
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	6031      	str	r1, [r6, #0]
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	b016      	add	sp, #88	; 0x58
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	466a      	mov	r2, sp
 8002fc2:	f000 f849 	bl	8003058 <_fstat_r>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	dbed      	blt.n	8002fa6 <__swhatbuf_r+0x12>
 8002fca:	9901      	ldr	r1, [sp, #4]
 8002fcc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002fd0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002fd4:	4259      	negs	r1, r3
 8002fd6:	4159      	adcs	r1, r3
 8002fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fdc:	e7eb      	b.n	8002fb6 <__swhatbuf_r+0x22>

08002fde <__smakebuf_r>:
 8002fde:	898b      	ldrh	r3, [r1, #12]
 8002fe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fe2:	079d      	lsls	r5, r3, #30
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	d507      	bpl.n	8002ffa <__smakebuf_r+0x1c>
 8002fea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6163      	str	r3, [r4, #20]
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	466a      	mov	r2, sp
 8002ffc:	ab01      	add	r3, sp, #4
 8002ffe:	f7ff ffc9 	bl	8002f94 <__swhatbuf_r>
 8003002:	9900      	ldr	r1, [sp, #0]
 8003004:	4605      	mov	r5, r0
 8003006:	4630      	mov	r0, r6
 8003008:	f7ff fbb8 	bl	800277c <_malloc_r>
 800300c:	b948      	cbnz	r0, 8003022 <__smakebuf_r+0x44>
 800300e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003012:	059a      	lsls	r2, r3, #22
 8003014:	d4ef      	bmi.n	8002ff6 <__smakebuf_r+0x18>
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	e7e3      	b.n	8002fea <__smakebuf_r+0xc>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	6020      	str	r0, [r4, #0]
 8003026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302a:	81a3      	strh	r3, [r4, #12]
 800302c:	9b00      	ldr	r3, [sp, #0]
 800302e:	6120      	str	r0, [r4, #16]
 8003030:	6163      	str	r3, [r4, #20]
 8003032:	9b01      	ldr	r3, [sp, #4]
 8003034:	b15b      	cbz	r3, 800304e <__smakebuf_r+0x70>
 8003036:	4630      	mov	r0, r6
 8003038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800303c:	f000 f81e 	bl	800307c <_isatty_r>
 8003040:	b128      	cbz	r0, 800304e <__smakebuf_r+0x70>
 8003042:	89a3      	ldrh	r3, [r4, #12]
 8003044:	f023 0303 	bic.w	r3, r3, #3
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	89a3      	ldrh	r3, [r4, #12]
 8003050:	431d      	orrs	r5, r3
 8003052:	81a5      	strh	r5, [r4, #12]
 8003054:	e7cf      	b.n	8002ff6 <__smakebuf_r+0x18>
	...

08003058 <_fstat_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	2300      	movs	r3, #0
 800305c:	4d06      	ldr	r5, [pc, #24]	; (8003078 <_fstat_r+0x20>)
 800305e:	4604      	mov	r4, r0
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	f7fd fe94 	bl	8000d92 <_fstat>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d102      	bne.n	8003074 <_fstat_r+0x1c>
 800306e:	682b      	ldr	r3, [r5, #0]
 8003070:	b103      	cbz	r3, 8003074 <_fstat_r+0x1c>
 8003072:	6023      	str	r3, [r4, #0]
 8003074:	bd38      	pop	{r3, r4, r5, pc}
 8003076:	bf00      	nop
 8003078:	20000210 	.word	0x20000210

0800307c <_isatty_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	2300      	movs	r3, #0
 8003080:	4d05      	ldr	r5, [pc, #20]	; (8003098 <_isatty_r+0x1c>)
 8003082:	4604      	mov	r4, r0
 8003084:	4608      	mov	r0, r1
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	f7fd fe92 	bl	8000db0 <_isatty>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d102      	bne.n	8003096 <_isatty_r+0x1a>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	b103      	cbz	r3, 8003096 <_isatty_r+0x1a>
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	20000210 	.word	0x20000210

0800309c <_sbrk_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	2300      	movs	r3, #0
 80030a0:	4d05      	ldr	r5, [pc, #20]	; (80030b8 <_sbrk_r+0x1c>)
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	f7fd fe98 	bl	8000ddc <_sbrk>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_sbrk_r+0x1a>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_sbrk_r+0x1a>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000210 	.word	0x20000210

080030bc <memchr>:
 80030bc:	4603      	mov	r3, r0
 80030be:	b510      	push	{r4, lr}
 80030c0:	b2c9      	uxtb	r1, r1
 80030c2:	4402      	add	r2, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	d101      	bne.n	80030ce <memchr+0x12>
 80030ca:	2000      	movs	r0, #0
 80030cc:	e003      	b.n	80030d6 <memchr+0x1a>
 80030ce:	7804      	ldrb	r4, [r0, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	428c      	cmp	r4, r1
 80030d4:	d1f6      	bne.n	80030c4 <memchr+0x8>
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <_init>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr

080030e4 <_fini>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	bf00      	nop
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr
