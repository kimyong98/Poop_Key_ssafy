
HTTP_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002b28  08002b28  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b28  08002b28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08002b98  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002b98  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008243  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001879  00000000  00000000  00028317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  00029b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000590  00000000  00000000  0002a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017977  00000000  00000000  0002a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009192  00000000  00000000  000421ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008400c  00000000  00000000  0004b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002284  00000000  00000000  000cf390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000d1614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ad0 	.word	0x08002ad0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002ad0 	.word	0x08002ad0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fad4 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a4 	bl	80002a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f878 	bl	8000250 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f84c 	bl	80001fc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500); // 500msec 지연
 8000164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000168:	f000 fb2a 	bl	80007c0 <HAL_Delay>
	      printf("Hello STM32F103RB\r\n");
 800016c:	4801      	ldr	r0, [pc, #4]	; (8000174 <main+0x28>)
 800016e:	f002 f921 	bl	80023b4 <puts>
	  HAL_Delay(500); // 500msec 지연
 8000172:	e7f7      	b.n	8000164 <main+0x18>
 8000174:	08002ae8 	.word	0x08002ae8

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 f9f4 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019a:	2302      	movs	r3, #2
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a2:	2310      	movs	r3, #16
 80001a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001aa:	2300      	movs	r3, #0
 80001ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 fea3 	bl	8000f04 <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c4:	f000 f8dc 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c8:	230f      	movs	r3, #15
 80001ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2102      	movs	r1, #2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 f910 	bl	8001408 <HAL_RCC_ClockConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001ee:	f000 f8c7 	bl	8000380 <Error_Handler>
  }
}
 80001f2:	bf00      	nop
 80001f4:	3740      	adds	r7, #64	; 0x40
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000200:	4b11      	ldr	r3, [pc, #68]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <MX_USART1_UART_Init+0x50>)
 8000204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000208:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800020c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000216:	2200      	movs	r2, #0
 8000218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000222:	220c      	movs	r2, #12
 8000224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <MX_USART1_UART_Init+0x4c>)
 8000234:	f001 fa76 	bl	8001724 <HAL_UART_Init>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800023e:	f000 f89f 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000084 	.word	0x20000084
 800024c:	40013800 	.word	0x40013800

08000250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <MX_USART2_UART_Init+0x4c>)
 8000256:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <MX_USART2_UART_Init+0x50>)
 8000258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <MX_USART2_UART_Init+0x4c>)
 800025c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_USART2_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_USART2_UART_Init+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_USART2_UART_Init+0x4c>)
 8000276:	220c      	movs	r2, #12
 8000278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_USART2_UART_Init+0x4c>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_USART2_UART_Init+0x4c>)
 8000288:	f001 fa4c 	bl	8001724 <HAL_UART_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000292:	f000 f875 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	200000cc 	.word	0x200000cc
 80002a0:	40004400 	.word	0x40004400

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b8:	4b2d      	ldr	r3, [pc, #180]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a2c      	ldr	r2, [pc, #176]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a26      	ldr	r2, [pc, #152]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a20      	ldr	r2, [pc, #128]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <MX_GPIO_Init+0xcc>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	603b      	str	r3, [r7, #0]
 8000316:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2120      	movs	r1, #32
 800031c:	4815      	ldr	r0, [pc, #84]	; (8000374 <MX_GPIO_Init+0xd0>)
 800031e:	f000 fdb7 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_GPIO_Init+0xd4>)
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	4811      	ldr	r0, [pc, #68]	; (800037c <MX_GPIO_Init+0xd8>)
 8000338:	f000 fc26 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800033c:	2320      	movs	r3, #32
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	2301      	movs	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2302      	movs	r3, #2
 800034a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	4808      	ldr	r0, [pc, #32]	; (8000374 <MX_GPIO_Init+0xd0>)
 8000354:	f000 fc18 	bl	8000b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	2028      	movs	r0, #40	; 0x28
 800035e:	f000 fb2a 	bl	80009b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000362:	2028      	movs	r0, #40	; 0x28
 8000364:	f000 fb43 	bl	80009ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000368:	bf00      	nop
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	10110000 	.word	0x10110000
 800037c:	40011000 	.word	0x40011000

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0318 	add.w	r3, r7, #24
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a35      	ldr	r2, [pc, #212]	; (80004e0 <HAL_UART_MspInit+0xf0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d13a      	bne.n	8000486 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000410:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a33      	ldr	r2, [pc, #204]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b2e      	ldr	r3, [pc, #184]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a2d      	ldr	r2, [pc, #180]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	613b      	str	r3, [r7, #16]
 800043e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000446:	2302      	movs	r3, #2
 8000448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0318 	add.w	r3, r7, #24
 8000452:	4619      	mov	r1, r3
 8000454:	4824      	ldr	r0, [pc, #144]	; (80004e8 <HAL_UART_MspInit+0xf8>)
 8000456:	f000 fb97 	bl	8000b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	4619      	mov	r1, r3
 800046e:	481e      	ldr	r0, [pc, #120]	; (80004e8 <HAL_UART_MspInit+0xf8>)
 8000470:	f000 fb8a 	bl	8000b88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2025      	movs	r0, #37	; 0x25
 800047a:	f000 fa9c 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800047e:	2025      	movs	r0, #37	; 0x25
 8000480:	f000 fab5 	bl	80009ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000484:	e028      	b.n	80004d8 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a18      	ldr	r2, [pc, #96]	; (80004ec <HAL_UART_MspInit+0xfc>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d123      	bne.n	80004d8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 8000496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049a:	61d3      	str	r3, [r2, #28]
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <HAL_UART_MspInit+0xf4>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004c0:	230c      	movs	r3, #12
 80004c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4619      	mov	r1, r3
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <HAL_UART_MspInit+0xf8>)
 80004d4:	f000 fb58 	bl	8000b88 <HAL_GPIO_Init>
}
 80004d8:	bf00      	nop
 80004da:	3728      	adds	r7, #40	; 0x28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40013800 	.word	0x40013800
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40004400 	.word	0x40004400

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000536:	f000 f927 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <USART1_IRQHandler+0x10>)
 8000546:	f001 f93d 	bl	80017c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000084 	.word	0x20000084

08000554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000558:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800055c:	f000 fcb0 	bl	8000ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	e00a      	b.n	800058c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000576:	f3af 8000 	nop.w
 800057a:	4601      	mov	r1, r0
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	60ba      	str	r2, [r7, #8]
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf0      	blt.n	8000576 <_read+0x12>
  }

  return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e009      	b.n	80005c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	60ba      	str	r2, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbf1      	blt.n	80005b0 <_write+0x12>
  }
  return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_close>:

int _close(int file)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fc:	605a      	str	r2, [r3, #4]
  return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <_isatty>:

int _isatty(int file)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
	...

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f001 ffd2 	bl	8002610 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20005000 	.word	0x20005000
 8000698:	00000400 	.word	0x00000400
 800069c:	20000114 	.word	0x20000114
 80006a0:	20000268 	.word	0x20000268

080006a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff fff8 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b6:	490c      	ldr	r1, [pc, #48]	; (80006e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006cc:	4c09      	ldr	r4, [pc, #36]	; (80006f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f001 ff9f 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fd35 	bl	800014c <main>
  bx lr
 80006e2:	4770      	bx	lr
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006ec:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 80006f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006f4:	20000268 	.word	0x20000268

080006f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_2_IRQHandler>
	...

080006fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_Init+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_Init+0x28>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 f947 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f808 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000718:	f7ff fe38 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f95f 	bl	8000a0a <HAL_SYSTICK_Config>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00e      	b.n	8000774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d80a      	bhi.n	8000772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 f927 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_InitTick+0x5c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <HAL_IncTick+0x20>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000118 	.word	0x20000118

080007ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000118 	.word	0x20000118

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff fff0 	bl	80007ac <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d005      	beq.n	80007e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_Delay+0x44>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e6:	bf00      	nop
 80007e8:	f7ff ffe0 	bl	80007ac <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8f7      	bhi.n	80007e8 <HAL_Delay+0x28>
  {
  }
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <__NVIC_EnableIRQ+0x34>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff90 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff2d 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff42 	bl	8000850 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff90 	bl	80008f8 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5f 	bl	80008a4 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff35 	bl	800086c <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b085      	sub	sp, #20
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d008      	beq.n	8000a4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e020      	b.n	8000a8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f022 020e 	bic.w	r2, r2, #14
 8000a5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 0201 	bic.w	r2, r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a74:	2101      	movs	r1, #1
 8000a76:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d005      	beq.n	8000abc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e051      	b.n	8000b60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 020e 	bic.w	r2, r2, #14
 8000aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0201 	bic.w	r2, r2, #1
 8000ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <HAL_DMA_Abort_IT+0xd4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d029      	beq.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_DMA_Abort_IT+0xd8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d022      	beq.n	8000b36 <HAL_DMA_Abort_IT+0x9e>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_DMA_Abort_IT+0xdc>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01a      	beq.n	8000b30 <HAL_DMA_Abort_IT+0x98>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_DMA_Abort_IT+0xe0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d012      	beq.n	8000b2a <HAL_DMA_Abort_IT+0x92>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <HAL_DMA_Abort_IT+0xe4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d00a      	beq.n	8000b24 <HAL_DMA_Abort_IT+0x8c>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <HAL_DMA_Abort_IT+0xe8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d102      	bne.n	8000b1e <HAL_DMA_Abort_IT+0x86>
 8000b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b1c:	e00e      	b.n	8000b3c <HAL_DMA_Abort_IT+0xa4>
 8000b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b22:	e00b      	b.n	8000b3c <HAL_DMA_Abort_IT+0xa4>
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	e008      	b.n	8000b3c <HAL_DMA_Abort_IT+0xa4>
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	e005      	b.n	8000b3c <HAL_DMA_Abort_IT+0xa4>
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	e002      	b.n	8000b3c <HAL_DMA_Abort_IT+0xa4>
 8000b36:	2310      	movs	r3, #16
 8000b38:	e000      	b.n	8000b3c <HAL_DMA_Abort_IT+0xa4>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_DMA_Abort_IT+0xec>)
 8000b3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2201      	movs	r2, #1
 8000b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	4798      	blx	r3
    } 
  }
  return status;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020008 	.word	0x40020008
 8000b70:	4002001c 	.word	0x4002001c
 8000b74:	40020030 	.word	0x40020030
 8000b78:	40020044 	.word	0x40020044
 8000b7c:	40020058 	.word	0x40020058
 8000b80:	4002006c 	.word	0x4002006c
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	e169      	b.n	8000e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 8158 	bne.w	8000e6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a9a      	ldr	r2, [pc, #616]	; (8000e28 <HAL_GPIO_Init+0x2a0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d05e      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bc4:	4a98      	ldr	r2, [pc, #608]	; (8000e28 <HAL_GPIO_Init+0x2a0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d875      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bca:	4a98      	ldr	r2, [pc, #608]	; (8000e2c <HAL_GPIO_Init+0x2a4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d058      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bd0:	4a96      	ldr	r2, [pc, #600]	; (8000e2c <HAL_GPIO_Init+0x2a4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d86f      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bd6:	4a96      	ldr	r2, [pc, #600]	; (8000e30 <HAL_GPIO_Init+0x2a8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d052      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bdc:	4a94      	ldr	r2, [pc, #592]	; (8000e30 <HAL_GPIO_Init+0x2a8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d869      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000be2:	4a94      	ldr	r2, [pc, #592]	; (8000e34 <HAL_GPIO_Init+0x2ac>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d04c      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000be8:	4a92      	ldr	r2, [pc, #584]	; (8000e34 <HAL_GPIO_Init+0x2ac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d863      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bee:	4a92      	ldr	r2, [pc, #584]	; (8000e38 <HAL_GPIO_Init+0x2b0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d046      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a90      	ldr	r2, [pc, #576]	; (8000e38 <HAL_GPIO_Init+0x2b0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d85d      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d82a      	bhi.n	8000c54 <HAL_GPIO_Init+0xcc>
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d859      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <HAL_GPIO_Init+0x80>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c5d 	.word	0x08000c5d
 8000c10:	08000c6f 	.word	0x08000c6f
 8000c14:	08000cb1 	.word	0x08000cb1
 8000c18:	08000cb7 	.word	0x08000cb7
 8000c1c:	08000cb7 	.word	0x08000cb7
 8000c20:	08000cb7 	.word	0x08000cb7
 8000c24:	08000cb7 	.word	0x08000cb7
 8000c28:	08000cb7 	.word	0x08000cb7
 8000c2c:	08000cb7 	.word	0x08000cb7
 8000c30:	08000cb7 	.word	0x08000cb7
 8000c34:	08000cb7 	.word	0x08000cb7
 8000c38:	08000cb7 	.word	0x08000cb7
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000cb7 	.word	0x08000cb7
 8000c44:	08000cb7 	.word	0x08000cb7
 8000c48:	08000cb7 	.word	0x08000cb7
 8000c4c:	08000c65 	.word	0x08000c65
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	4a79      	ldr	r2, [pc, #484]	; (8000e3c <HAL_GPIO_Init+0x2b4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c5a:	e02c      	b.n	8000cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e029      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e024      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	3308      	adds	r3, #8
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e01f      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e01a      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e013      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d105      	bne.n	8000ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	611a      	str	r2, [r3, #16]
          break;
 8000ca2:	e009      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	615a      	str	r2, [r3, #20]
          break;
 8000cae:	e003      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          break;
 8000cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2bff      	cmp	r3, #255	; 0xff
 8000cbc:	d801      	bhi.n	8000cc2 <HAL_GPIO_Init+0x13a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_Init+0x13e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d802      	bhi.n	8000cd4 <HAL_GPIO_Init+0x14c>
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x152>
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3b08      	subs	r3, #8
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	401a      	ands	r2, r3
 8000cec:	6a39      	ldr	r1, [r7, #32]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d08:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a4c      	ldr	r2, [pc, #304]	; (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b4a      	ldr	r3, [pc, #296]	; (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d20:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <HAL_GPIO_Init+0x2bc>)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a40      	ldr	r2, [pc, #256]	; (8000e48 <HAL_GPIO_Init+0x2c0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1ec>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a3f      	ldr	r2, [pc, #252]	; (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1e8>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3e      	ldr	r2, [pc, #248]	; (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3d      	ldr	r2, [pc, #244]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1e0>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e004      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d74:	2300      	movs	r3, #0
 8000d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d86:	492f      	ldr	r1, [pc, #188]	; (8000e44 <HAL_GPIO_Init+0x2bc>)
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	492c      	ldr	r1, [pc, #176]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	608b      	str	r3, [r1, #8]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4928      	ldr	r1, [pc, #160]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	4922      	ldr	r1, [pc, #136]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60cb      	str	r3, [r1, #12]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	491e      	ldr	r1, [pc, #120]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d006      	beq.n	8000dfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4918      	ldr	r1, [pc, #96]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4914      	ldr	r1, [pc, #80]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d021      	beq.n	8000e5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	490e      	ldr	r1, [pc, #56]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]
 8000e24:	e021      	b.n	8000e6a <HAL_GPIO_Init+0x2e2>
 8000e26:	bf00      	nop
 8000e28:	10320000 	.word	0x10320000
 8000e2c:	10310000 	.word	0x10310000
 8000e30:	10220000 	.word	0x10220000
 8000e34:	10210000 	.word	0x10210000
 8000e38:	10120000 	.word	0x10120000
 8000e3c:	10110000 	.word	0x10110000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40011400 	.word	0x40011400
 8000e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4909      	ldr	r1, [pc, #36]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f47f ae8e 	bne.w	8000b9c <HAL_GPIO_Init+0x14>
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	372c      	adds	r7, #44	; 0x2c
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	611a      	str	r2, [r3, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f806 	bl	8000ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e272      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8087 	beq.w	8001032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f24:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d00c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f30:	4b8f      	ldr	r3, [pc, #572]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d112      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5e>
 8000f3c:	4b8c      	ldr	r3, [pc, #560]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d10b      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	4b89      	ldr	r3, [pc, #548]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d06c      	beq.n	8001030 <HAL_RCC_OscConfig+0x12c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d168      	bne.n	8001030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e24c      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x76>
 8000f6c:	4b80      	ldr	r3, [pc, #512]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a7f      	ldr	r2, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e02e      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x98>
 8000f82:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7a      	ldr	r2, [pc, #488]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a77      	ldr	r2, [pc, #476]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e01d      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xbc>
 8000fa6:	4b72      	ldr	r3, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a71      	ldr	r2, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a6a      	ldr	r2, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a67      	ldr	r2, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d013      	beq.n	8001008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fbe4 	bl	80007ac <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fbe0 	bl	80007ac <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e200      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xe4>
 8001006:	e014      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fbd0 	bl	80007ac <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fbcc 	bl	80007ac <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e1ec      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x10c>
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d063      	beq.n	8001106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b08      	cmp	r3, #8
 8001054:	d11c      	bne.n	8001090 <HAL_RCC_OscConfig+0x18c>
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e1c0      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4939      	ldr	r1, [pc, #228]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e03a      	b.n	8001106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_RCC_OscConfig+0x270>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fb85 	bl	80007ac <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fb81 	bl	80007ac <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e1a1      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4927      	ldr	r1, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x270>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fb64 	bl	80007ac <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fb60 	bl	80007ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e180      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d03a      	beq.n	8001188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d019      	beq.n	800114e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_RCC_OscConfig+0x274>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001120:	f7ff fb44 	bl	80007ac <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fb40 	bl	80007ac <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e160      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 face 	bl	80016e8 <RCC_Delay>
 800114c:	e01c      	b.n	8001188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_RCC_OscConfig+0x274>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001154:	f7ff fb2a 	bl	80007ac <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115a:	e00f      	b.n	800117c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fb26 	bl	80007ac <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d908      	bls.n	800117c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e146      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	42420000 	.word	0x42420000
 8001178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e9      	bne.n	800115c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a6 	beq.w	80012e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a87      	ldr	r2, [pc, #540]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7e      	ldr	r2, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011da:	f7ff fae7 	bl	80007ac <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff fae3 	bl	80007ac <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e103      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x312>
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	e02d      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x334>
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a69      	ldr	r2, [pc, #420]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a66      	ldr	r2, [pc, #408]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	e01c      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d10c      	bne.n	800125a <HAL_RCC_OscConfig+0x356>
 8001240:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	e00b      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d015      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fa97 	bl	80007ac <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fa93 	bl	80007ac <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0b1      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0ee      	beq.n	8001282 <HAL_RCC_OscConfig+0x37e>
 80012a4:	e014      	b.n	80012d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fa81 	bl	80007ac <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fa7d 	bl	80007ac <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e09b      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ee      	bne.n	80012ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d105      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8087 	beq.w	80013fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d061      	beq.n	80013bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d146      	bne.n	800138e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fa51 	bl	80007ac <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fa4d 	bl	80007ac <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e06d      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d108      	bne.n	8001348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4921      	ldr	r1, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a19      	ldr	r1, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	430b      	orrs	r3, r1
 800135a:	491b      	ldr	r1, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fa21 	bl	80007ac <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fa1d 	bl	80007ac <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e03d      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x46a>
 800138c:	e035      	b.n	80013fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fa0a 	bl	80007ac <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fa06 	bl	80007ac <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e026      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x498>
 80013ba:	e01e      	b.n	80013fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e019      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40007000 	.word	0x40007000
 80013d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x500>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0d0      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d910      	bls.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0207 	bic.w	r2, r3, #7
 8001432:	4965      	ldr	r1, [pc, #404]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b8      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a58      	ldr	r2, [pc, #352]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800146e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	494d      	ldr	r1, [pc, #308]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d040      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d115      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07f      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e073      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06b      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4936      	ldr	r1, [pc, #216]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff f958 	bl	80007ac <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff f954 	bl	80007ac <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e053      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d210      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4922      	ldr	r1, [pc, #136]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e032      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	490e      	ldr	r1, [pc, #56]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001596:	f000 f821 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 800159a:	4602      	mov	r2, r0
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	490a      	ldr	r1, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015a8:	5ccb      	ldrb	r3, [r1, r3]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1cc>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f8b6 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08002afc 	.word	0x08002afc
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d002      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x30>
 8001606:	2b08      	cmp	r3, #8
 8001608:	d003      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x36>
 800160a:	e027      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_GetSysClockFreq+0x98>)
 800160e:	613b      	str	r3, [r7, #16]
      break;
 8001610:	e027      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_RCC_GetSysClockFreq+0x9c>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_GetSysClockFreq+0x94>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0c5b      	lsrs	r3, r3, #17
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_RCC_GetSysClockFreq+0x98>)
 800163e:	fb03 f202 	mul.w	r2, r3, r2
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e004      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	613b      	str	r3, [r7, #16]
      break;
 800165a:	e002      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_RCC_GetSysClockFreq+0x98>)
 800165e:	613b      	str	r3, [r7, #16]
      break;
 8001660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001662:	693b      	ldr	r3, [r7, #16]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	007a1200 	.word	0x007a1200
 8001678:	08002b14 	.word	0x08002b14
 800167c:	08002b24 	.word	0x08002b24
 8001680:	003d0900 	.word	0x003d0900

08001684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_RCC_GetHCLKFreq+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000000 	.word	0x20000000

08001698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800169c:	f7ff fff2 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4903      	ldr	r1, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08002b0c 	.word	0x08002b0c

080016c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c4:	f7ff ffde 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0adb      	lsrs	r3, r3, #11
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4903      	ldr	r1, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08002b0c 	.word	0x08002b0c

080016e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <RCC_Delay+0x34>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <RCC_Delay+0x38>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0a5b      	lsrs	r3, r3, #9
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001704:	bf00      	nop
  }
  while (Delay --);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f9      	bne.n	8001704 <RCC_Delay+0x1c>
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000000 	.word	0x20000000
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e042      	b.n	80017bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fe50 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fc7f 	bl	800206c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800177c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800178c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800179c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0ba      	sub	sp, #232	; 0xe8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800180a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_UART_IRQHandler+0x66>
 8001816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fb63 	bl	8001eee <UART_Receive_IT>
      return;
 8001828:	e25b      	b.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800182a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80de 	beq.w	80019f0 <HAL_UART_IRQHandler+0x22c>
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d106      	bne.n	800184e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001844:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80d1 	beq.w	80019f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800184e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_UART_IRQHandler+0xae>
 800185a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_UART_IRQHandler+0xd2>
 800187e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_UART_IRQHandler+0xf6>
 80018a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f043 0204 	orr.w	r2, r3, #4
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80018ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d011      	beq.n	80018ea <HAL_UART_IRQHandler+0x126>
 80018c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80018d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f043 0208 	orr.w	r2, r3, #8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 81f2 	beq.w	8001cd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_UART_IRQHandler+0x14e>
 8001900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 faee 	bl	8001eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_UART_IRQHandler+0x17a>
 8001936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d04f      	beq.n	80019de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f9f8 	bl	8001d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d041      	beq.n	80019d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3314      	adds	r3, #20
 8001958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800195c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001960:	e853 3f00 	ldrex	r3, [r3]
 8001964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800196c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3314      	adds	r3, #20
 800197a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800197e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800198a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800198e:	e841 2300 	strex	r3, r2, [r1]
 8001992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1d9      	bne.n	8001952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d013      	beq.n	80019ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	4a7e      	ldr	r2, [pc, #504]	; (8001ba4 <HAL_UART_IRQHandler+0x3e0>)
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f870 	bl	8000a98 <HAL_DMA_Abort_IT>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019c8:	4610      	mov	r0, r2
 80019ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019cc:	e00e      	b.n	80019ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f99c 	bl	8001d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d4:	e00a      	b.n	80019ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f998 	bl	8001d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019dc:	e006      	b.n	80019ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f994 	bl	8001d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80019ea:	e175      	b.n	8001cd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019ec:	bf00      	nop
    return;
 80019ee:	e173      	b.n	8001cd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f040 814f 	bne.w	8001c98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80019fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8148 	beq.w	8001c98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8141 	beq.w	8001c98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80b6 	beq.w	8001ba8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8145 	beq.w	8001cdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	f080 813e 	bcs.w	8001cdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	f000 8088 	beq.w	8001b84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a82:	e853 3f00 	ldrex	r3, [r3]
 8001a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	330c      	adds	r3, #12
 8001a9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001aa0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001aac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ab0:	e841 2300 	strex	r3, r2, [r1]
 8001ab4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1d9      	bne.n	8001a74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3314      	adds	r3, #20
 8001ac6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aca:	e853 3f00 	ldrex	r3, [r3]
 8001ace:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3314      	adds	r3, #20
 8001ae0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ae4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001af0:	e841 2300 	strex	r3, r2, [r1]
 8001af4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e1      	bne.n	8001ac0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3314      	adds	r3, #20
 8001b02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b06:	e853 3f00 	ldrex	r3, [r3]
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001b20:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b28:	e841 2300 	strex	r3, r2, [r1]
 8001b2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e3      	bne.n	8001afc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	330c      	adds	r3, #12
 8001b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	e853 3f00 	ldrex	r3, [r3]
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b54:	f023 0310 	bic.w	r3, r3, #16
 8001b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	330c      	adds	r3, #12
 8001b62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001b66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b6e:	e841 2300 	strex	r3, r2, [r1]
 8001b72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1e3      	bne.n	8001b42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe ff4f 	bl	8000a22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8bf 	bl	8001d1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ba0:	e09c      	b.n	8001cdc <HAL_UART_IRQHandler+0x518>
 8001ba2:	bf00      	nop
 8001ba4:	08001df9 	.word	0x08001df9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 808e 	beq.w	8001ce0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8089 	beq.w	8001ce0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	330c      	adds	r3, #12
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	e853 3f00 	ldrex	r3, [r3]
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	330c      	adds	r3, #12
 8001bee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8001bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bfa:	e841 2300 	strex	r3, r2, [r1]
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1e3      	bne.n	8001bce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	e853 3f00 	ldrex	r3, [r3]
 8001c14:	623b      	str	r3, [r7, #32]
   return(result);
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3314      	adds	r3, #20
 8001c26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c32:	e841 2300 	strex	r3, r2, [r1]
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e3      	bne.n	8001c06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	330c      	adds	r3, #12
 8001c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	e853 3f00 	ldrex	r3, [r3]
 8001c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f023 0310 	bic.w	r3, r3, #16
 8001c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c70:	61fa      	str	r2, [r7, #28]
 8001c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	e841 2300 	strex	r3, r2, [r1]
 8001c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e3      	bne.n	8001c4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f844 	bl	8001d1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c96:	e023      	b.n	8001ce0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_UART_IRQHandler+0x4f4>
 8001ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8b5 	bl	8001e20 <UART_Transmit_IT>
    return;
 8001cb6:	e014      	b.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
 8001cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8f4 	bl	8001ebe <UART_EndTransmit_IT>
    return;
 8001cd6:	e004      	b.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
    return;
 8001cd8:	bf00      	nop
 8001cda:	e002      	b.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
      return;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <HAL_UART_IRQHandler+0x51e>
      return;
 8001ce0:	bf00      	nop
  }
}
 8001ce2:	37e8      	adds	r7, #232	; 0xe8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b095      	sub	sp, #84	; 0x54
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	330c      	adds	r3, #12
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	e853 3f00 	ldrex	r3, [r3]
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d5c:	643a      	str	r2, [r7, #64]	; 0x40
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d64:	e841 2300 	strex	r3, r2, [r1]
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e5      	bne.n	8001d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3314      	adds	r3, #20
 8001d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	e853 3f00 	ldrex	r3, [r3]
 8001d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3314      	adds	r3, #20
 8001d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d98:	e841 2300 	strex	r3, r2, [r1]
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e5      	bne.n	8001d70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d119      	bne.n	8001de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	330c      	adds	r3, #12
 8001db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	e853 3f00 	ldrex	r3, [r3]
 8001dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f023 0310 	bic.w	r3, r3, #16
 8001dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dcc:	61ba      	str	r2, [r7, #24]
 8001dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	e841 2300 	strex	r3, r2, [r1]
 8001dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e5      	bne.n	8001dac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001dee:	bf00      	nop
 8001df0:	3754      	adds	r7, #84	; 0x54
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff7a 	bl	8001d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b21      	cmp	r3, #33	; 0x21
 8001e32:	d13e      	bne.n	8001eb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	d114      	bne.n	8001e68 <UART_Transmit_IT+0x48>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d110      	bne.n	8001e68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	1c9a      	adds	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	621a      	str	r2, [r3, #32]
 8001e66:	e008      	b.n	8001e7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	1c59      	adds	r1, r3, #1
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6211      	str	r1, [r2, #32]
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4619      	mov	r1, r3
 8001e88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff02 	bl	8001ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b08c      	sub	sp, #48	; 0x30
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b22      	cmp	r3, #34	; 0x22
 8001f00:	f040 80ae 	bne.w	8002060 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d117      	bne.n	8001f3e <UART_Receive_IT+0x50>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d113      	bne.n	8001f3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	1c9a      	adds	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f3c:	e026      	b.n	8001f8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f50:	d007      	beq.n	8001f62 <UART_Receive_IT+0x74>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <UART_Receive_IT+0x82>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e008      	b.n	8001f82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d15d      	bne.n	800205c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0220 	bic.w	r2, r2, #32
 8001fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d135      	bne.n	8002052 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	e853 3f00 	ldrex	r3, [r3]
 8001ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f023 0310 	bic.w	r3, r3, #16
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	330c      	adds	r3, #12
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	623a      	str	r2, [r7, #32]
 800200e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002010:	69f9      	ldr	r1, [r7, #28]
 8002012:	6a3a      	ldr	r2, [r7, #32]
 8002014:	e841 2300 	strex	r3, r2, [r1]
 8002018:	61bb      	str	r3, [r7, #24]
   return(result);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e5      	bne.n	8001fec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b10      	cmp	r3, #16
 800202c:	d10a      	bne.n	8002044 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fe67 	bl	8001d1e <HAL_UARTEx_RxEventCallback>
 8002050:	e002      	b.n	8002058 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fe51 	bl	8001cfa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e002      	b.n	8002062 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	3730      	adds	r7, #48	; 0x30
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020a6:	f023 030c 	bic.w	r3, r3, #12
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2c      	ldr	r2, [pc, #176]	; (8002180 <UART_SetConfig+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020d4:	f7ff faf4 	bl	80016c0 <HAL_RCC_GetPCLK2Freq>
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	e002      	b.n	80020e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020dc:	f7ff fadc 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 80020e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <UART_SetConfig+0x118>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	0119      	lsls	r1, r3, #4
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009a      	lsls	r2, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fbb2 f2f3 	udiv	r2, r2, r3
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <UART_SetConfig+0x118>)
 800211a:	fba3 0302 	umull	r0, r3, r3, r2
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2064      	movs	r0, #100	; 0x64
 8002122:	fb00 f303 	mul.w	r3, r0, r3
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	3332      	adds	r3, #50	; 0x32
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <UART_SetConfig+0x118>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002138:	4419      	add	r1, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <UART_SetConfig+0x118>)
 8002152:	fba3 0302 	umull	r0, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2064      	movs	r0, #100	; 0x64
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	3332      	adds	r3, #50	; 0x32
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <UART_SetConfig+0x118>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	440a      	add	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40013800 	.word	0x40013800
 8002184:	51eb851f 	.word	0x51eb851f

08002188 <std>:
 8002188:	2300      	movs	r3, #0
 800218a:	b510      	push	{r4, lr}
 800218c:	4604      	mov	r4, r0
 800218e:	e9c0 3300 	strd	r3, r3, [r0]
 8002192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002196:	6083      	str	r3, [r0, #8]
 8002198:	8181      	strh	r1, [r0, #12]
 800219a:	6643      	str	r3, [r0, #100]	; 0x64
 800219c:	81c2      	strh	r2, [r0, #14]
 800219e:	6183      	str	r3, [r0, #24]
 80021a0:	4619      	mov	r1, r3
 80021a2:	2208      	movs	r2, #8
 80021a4:	305c      	adds	r0, #92	; 0x5c
 80021a6:	f000 f9e5 	bl	8002574 <memset>
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <std+0x58>)
 80021ac:	6224      	str	r4, [r4, #32]
 80021ae:	6263      	str	r3, [r4, #36]	; 0x24
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <std+0x5c>)
 80021b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <std+0x60>)
 80021b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <std+0x64>)
 80021ba:	6323      	str	r3, [r4, #48]	; 0x30
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <std+0x68>)
 80021be:	429c      	cmp	r4, r3
 80021c0:	d006      	beq.n	80021d0 <std+0x48>
 80021c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80021c6:	4294      	cmp	r4, r2
 80021c8:	d002      	beq.n	80021d0 <std+0x48>
 80021ca:	33d0      	adds	r3, #208	; 0xd0
 80021cc:	429c      	cmp	r4, r3
 80021ce:	d105      	bne.n	80021dc <std+0x54>
 80021d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021d8:	f000 ba44 	b.w	8002664 <__retarget_lock_init_recursive>
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	bf00      	nop
 80021e0:	080023c5 	.word	0x080023c5
 80021e4:	080023e7 	.word	0x080023e7
 80021e8:	0800241f 	.word	0x0800241f
 80021ec:	08002443 	.word	0x08002443
 80021f0:	2000011c 	.word	0x2000011c

080021f4 <stdio_exit_handler>:
 80021f4:	4a02      	ldr	r2, [pc, #8]	; (8002200 <stdio_exit_handler+0xc>)
 80021f6:	4903      	ldr	r1, [pc, #12]	; (8002204 <stdio_exit_handler+0x10>)
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <stdio_exit_handler+0x14>)
 80021fa:	f000 b869 	b.w	80022d0 <_fwalk_sglue>
 80021fe:	bf00      	nop
 8002200:	2000000c 	.word	0x2000000c
 8002204:	08002959 	.word	0x08002959
 8002208:	20000018 	.word	0x20000018

0800220c <cleanup_stdio>:
 800220c:	6841      	ldr	r1, [r0, #4]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <cleanup_stdio+0x34>)
 8002210:	b510      	push	{r4, lr}
 8002212:	4299      	cmp	r1, r3
 8002214:	4604      	mov	r4, r0
 8002216:	d001      	beq.n	800221c <cleanup_stdio+0x10>
 8002218:	f000 fb9e 	bl	8002958 <_fflush_r>
 800221c:	68a1      	ldr	r1, [r4, #8]
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <cleanup_stdio+0x38>)
 8002220:	4299      	cmp	r1, r3
 8002222:	d002      	beq.n	800222a <cleanup_stdio+0x1e>
 8002224:	4620      	mov	r0, r4
 8002226:	f000 fb97 	bl	8002958 <_fflush_r>
 800222a:	68e1      	ldr	r1, [r4, #12]
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <cleanup_stdio+0x3c>)
 800222e:	4299      	cmp	r1, r3
 8002230:	d004      	beq.n	800223c <cleanup_stdio+0x30>
 8002232:	4620      	mov	r0, r4
 8002234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002238:	f000 bb8e 	b.w	8002958 <_fflush_r>
 800223c:	bd10      	pop	{r4, pc}
 800223e:	bf00      	nop
 8002240:	2000011c 	.word	0x2000011c
 8002244:	20000184 	.word	0x20000184
 8002248:	200001ec 	.word	0x200001ec

0800224c <global_stdio_init.part.0>:
 800224c:	b510      	push	{r4, lr}
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <global_stdio_init.part.0+0x30>)
 8002250:	4c0b      	ldr	r4, [pc, #44]	; (8002280 <global_stdio_init.part.0+0x34>)
 8002252:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <global_stdio_init.part.0+0x38>)
 8002254:	4620      	mov	r0, r4
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	2104      	movs	r1, #4
 800225a:	2200      	movs	r2, #0
 800225c:	f7ff ff94 	bl	8002188 <std>
 8002260:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002264:	2201      	movs	r2, #1
 8002266:	2109      	movs	r1, #9
 8002268:	f7ff ff8e 	bl	8002188 <std>
 800226c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002270:	2202      	movs	r2, #2
 8002272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002276:	2112      	movs	r1, #18
 8002278:	f7ff bf86 	b.w	8002188 <std>
 800227c:	20000254 	.word	0x20000254
 8002280:	2000011c 	.word	0x2000011c
 8002284:	080021f5 	.word	0x080021f5

08002288 <__sfp_lock_acquire>:
 8002288:	4801      	ldr	r0, [pc, #4]	; (8002290 <__sfp_lock_acquire+0x8>)
 800228a:	f000 b9ec 	b.w	8002666 <__retarget_lock_acquire_recursive>
 800228e:	bf00      	nop
 8002290:	2000025d 	.word	0x2000025d

08002294 <__sfp_lock_release>:
 8002294:	4801      	ldr	r0, [pc, #4]	; (800229c <__sfp_lock_release+0x8>)
 8002296:	f000 b9e7 	b.w	8002668 <__retarget_lock_release_recursive>
 800229a:	bf00      	nop
 800229c:	2000025d 	.word	0x2000025d

080022a0 <__sinit>:
 80022a0:	b510      	push	{r4, lr}
 80022a2:	4604      	mov	r4, r0
 80022a4:	f7ff fff0 	bl	8002288 <__sfp_lock_acquire>
 80022a8:	6a23      	ldr	r3, [r4, #32]
 80022aa:	b11b      	cbz	r3, 80022b4 <__sinit+0x14>
 80022ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b0:	f7ff bff0 	b.w	8002294 <__sfp_lock_release>
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__sinit+0x28>)
 80022b6:	6223      	str	r3, [r4, #32]
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__sinit+0x2c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f5      	bne.n	80022ac <__sinit+0xc>
 80022c0:	f7ff ffc4 	bl	800224c <global_stdio_init.part.0>
 80022c4:	e7f2      	b.n	80022ac <__sinit+0xc>
 80022c6:	bf00      	nop
 80022c8:	0800220d 	.word	0x0800220d
 80022cc:	20000254 	.word	0x20000254

080022d0 <_fwalk_sglue>:
 80022d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d4:	4607      	mov	r7, r0
 80022d6:	4688      	mov	r8, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	2600      	movs	r6, #0
 80022dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022e0:	f1b9 0901 	subs.w	r9, r9, #1
 80022e4:	d505      	bpl.n	80022f2 <_fwalk_sglue+0x22>
 80022e6:	6824      	ldr	r4, [r4, #0]
 80022e8:	2c00      	cmp	r4, #0
 80022ea:	d1f7      	bne.n	80022dc <_fwalk_sglue+0xc>
 80022ec:	4630      	mov	r0, r6
 80022ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f2:	89ab      	ldrh	r3, [r5, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d907      	bls.n	8002308 <_fwalk_sglue+0x38>
 80022f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022fc:	3301      	adds	r3, #1
 80022fe:	d003      	beq.n	8002308 <_fwalk_sglue+0x38>
 8002300:	4629      	mov	r1, r5
 8002302:	4638      	mov	r0, r7
 8002304:	47c0      	blx	r8
 8002306:	4306      	orrs	r6, r0
 8002308:	3568      	adds	r5, #104	; 0x68
 800230a:	e7e9      	b.n	80022e0 <_fwalk_sglue+0x10>

0800230c <_puts_r>:
 800230c:	6a03      	ldr	r3, [r0, #32]
 800230e:	b570      	push	{r4, r5, r6, lr}
 8002310:	4605      	mov	r5, r0
 8002312:	460e      	mov	r6, r1
 8002314:	6884      	ldr	r4, [r0, #8]
 8002316:	b90b      	cbnz	r3, 800231c <_puts_r+0x10>
 8002318:	f7ff ffc2 	bl	80022a0 <__sinit>
 800231c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800231e:	07db      	lsls	r3, r3, #31
 8002320:	d405      	bmi.n	800232e <_puts_r+0x22>
 8002322:	89a3      	ldrh	r3, [r4, #12]
 8002324:	0598      	lsls	r0, r3, #22
 8002326:	d402      	bmi.n	800232e <_puts_r+0x22>
 8002328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800232a:	f000 f99c 	bl	8002666 <__retarget_lock_acquire_recursive>
 800232e:	89a3      	ldrh	r3, [r4, #12]
 8002330:	0719      	lsls	r1, r3, #28
 8002332:	d513      	bpl.n	800235c <_puts_r+0x50>
 8002334:	6923      	ldr	r3, [r4, #16]
 8002336:	b18b      	cbz	r3, 800235c <_puts_r+0x50>
 8002338:	3e01      	subs	r6, #1
 800233a:	68a3      	ldr	r3, [r4, #8]
 800233c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002340:	3b01      	subs	r3, #1
 8002342:	60a3      	str	r3, [r4, #8]
 8002344:	b9e9      	cbnz	r1, 8002382 <_puts_r+0x76>
 8002346:	2b00      	cmp	r3, #0
 8002348:	da2e      	bge.n	80023a8 <_puts_r+0x9c>
 800234a:	4622      	mov	r2, r4
 800234c:	210a      	movs	r1, #10
 800234e:	4628      	mov	r0, r5
 8002350:	f000 f87b 	bl	800244a <__swbuf_r>
 8002354:	3001      	adds	r0, #1
 8002356:	d007      	beq.n	8002368 <_puts_r+0x5c>
 8002358:	250a      	movs	r5, #10
 800235a:	e007      	b.n	800236c <_puts_r+0x60>
 800235c:	4621      	mov	r1, r4
 800235e:	4628      	mov	r0, r5
 8002360:	f000 f8b0 	bl	80024c4 <__swsetup_r>
 8002364:	2800      	cmp	r0, #0
 8002366:	d0e7      	beq.n	8002338 <_puts_r+0x2c>
 8002368:	f04f 35ff 	mov.w	r5, #4294967295
 800236c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800236e:	07da      	lsls	r2, r3, #31
 8002370:	d405      	bmi.n	800237e <_puts_r+0x72>
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	059b      	lsls	r3, r3, #22
 8002376:	d402      	bmi.n	800237e <_puts_r+0x72>
 8002378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800237a:	f000 f975 	bl	8002668 <__retarget_lock_release_recursive>
 800237e:	4628      	mov	r0, r5
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	2b00      	cmp	r3, #0
 8002384:	da04      	bge.n	8002390 <_puts_r+0x84>
 8002386:	69a2      	ldr	r2, [r4, #24]
 8002388:	429a      	cmp	r2, r3
 800238a:	dc06      	bgt.n	800239a <_puts_r+0x8e>
 800238c:	290a      	cmp	r1, #10
 800238e:	d004      	beq.n	800239a <_puts_r+0x8e>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	6022      	str	r2, [r4, #0]
 8002396:	7019      	strb	r1, [r3, #0]
 8002398:	e7cf      	b.n	800233a <_puts_r+0x2e>
 800239a:	4622      	mov	r2, r4
 800239c:	4628      	mov	r0, r5
 800239e:	f000 f854 	bl	800244a <__swbuf_r>
 80023a2:	3001      	adds	r0, #1
 80023a4:	d1c9      	bne.n	800233a <_puts_r+0x2e>
 80023a6:	e7df      	b.n	8002368 <_puts_r+0x5c>
 80023a8:	250a      	movs	r5, #10
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	6022      	str	r2, [r4, #0]
 80023b0:	701d      	strb	r5, [r3, #0]
 80023b2:	e7db      	b.n	800236c <_puts_r+0x60>

080023b4 <puts>:
 80023b4:	4b02      	ldr	r3, [pc, #8]	; (80023c0 <puts+0xc>)
 80023b6:	4601      	mov	r1, r0
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	f7ff bfa7 	b.w	800230c <_puts_r>
 80023be:	bf00      	nop
 80023c0:	20000064 	.word	0x20000064

080023c4 <__sread>:
 80023c4:	b510      	push	{r4, lr}
 80023c6:	460c      	mov	r4, r1
 80023c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023cc:	f000 f8fc 	bl	80025c8 <_read_r>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	bfab      	itete	ge
 80023d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023d6:	89a3      	ldrhlt	r3, [r4, #12]
 80023d8:	181b      	addge	r3, r3, r0
 80023da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023de:	bfac      	ite	ge
 80023e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80023e2:	81a3      	strhlt	r3, [r4, #12]
 80023e4:	bd10      	pop	{r4, pc}

080023e6 <__swrite>:
 80023e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ea:	461f      	mov	r7, r3
 80023ec:	898b      	ldrh	r3, [r1, #12]
 80023ee:	4605      	mov	r5, r0
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	460c      	mov	r4, r1
 80023f4:	4616      	mov	r6, r2
 80023f6:	d505      	bpl.n	8002404 <__swrite+0x1e>
 80023f8:	2302      	movs	r3, #2
 80023fa:	2200      	movs	r2, #0
 80023fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002400:	f000 f8d0 	bl	80025a4 <_lseek_r>
 8002404:	89a3      	ldrh	r3, [r4, #12]
 8002406:	4632      	mov	r2, r6
 8002408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800240c:	81a3      	strh	r3, [r4, #12]
 800240e:	4628      	mov	r0, r5
 8002410:	463b      	mov	r3, r7
 8002412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800241a:	f000 b8e7 	b.w	80025ec <_write_r>

0800241e <__sseek>:
 800241e:	b510      	push	{r4, lr}
 8002420:	460c      	mov	r4, r1
 8002422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002426:	f000 f8bd 	bl	80025a4 <_lseek_r>
 800242a:	1c43      	adds	r3, r0, #1
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	bf15      	itete	ne
 8002430:	6560      	strne	r0, [r4, #84]	; 0x54
 8002432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800243a:	81a3      	strheq	r3, [r4, #12]
 800243c:	bf18      	it	ne
 800243e:	81a3      	strhne	r3, [r4, #12]
 8002440:	bd10      	pop	{r4, pc}

08002442 <__sclose>:
 8002442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002446:	f000 b89d 	b.w	8002584 <_close_r>

0800244a <__swbuf_r>:
 800244a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244c:	460e      	mov	r6, r1
 800244e:	4614      	mov	r4, r2
 8002450:	4605      	mov	r5, r0
 8002452:	b118      	cbz	r0, 800245c <__swbuf_r+0x12>
 8002454:	6a03      	ldr	r3, [r0, #32]
 8002456:	b90b      	cbnz	r3, 800245c <__swbuf_r+0x12>
 8002458:	f7ff ff22 	bl	80022a0 <__sinit>
 800245c:	69a3      	ldr	r3, [r4, #24]
 800245e:	60a3      	str	r3, [r4, #8]
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	071a      	lsls	r2, r3, #28
 8002464:	d525      	bpl.n	80024b2 <__swbuf_r+0x68>
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	b31b      	cbz	r3, 80024b2 <__swbuf_r+0x68>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	6922      	ldr	r2, [r4, #16]
 800246e:	b2f6      	uxtb	r6, r6
 8002470:	1a98      	subs	r0, r3, r2
 8002472:	6963      	ldr	r3, [r4, #20]
 8002474:	4637      	mov	r7, r6
 8002476:	4283      	cmp	r3, r0
 8002478:	dc04      	bgt.n	8002484 <__swbuf_r+0x3a>
 800247a:	4621      	mov	r1, r4
 800247c:	4628      	mov	r0, r5
 800247e:	f000 fa6b 	bl	8002958 <_fflush_r>
 8002482:	b9e0      	cbnz	r0, 80024be <__swbuf_r+0x74>
 8002484:	68a3      	ldr	r3, [r4, #8]
 8002486:	3b01      	subs	r3, #1
 8002488:	60a3      	str	r3, [r4, #8]
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	6022      	str	r2, [r4, #0]
 8002490:	701e      	strb	r6, [r3, #0]
 8002492:	6962      	ldr	r2, [r4, #20]
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	429a      	cmp	r2, r3
 8002498:	d004      	beq.n	80024a4 <__swbuf_r+0x5a>
 800249a:	89a3      	ldrh	r3, [r4, #12]
 800249c:	07db      	lsls	r3, r3, #31
 800249e:	d506      	bpl.n	80024ae <__swbuf_r+0x64>
 80024a0:	2e0a      	cmp	r6, #10
 80024a2:	d104      	bne.n	80024ae <__swbuf_r+0x64>
 80024a4:	4621      	mov	r1, r4
 80024a6:	4628      	mov	r0, r5
 80024a8:	f000 fa56 	bl	8002958 <_fflush_r>
 80024ac:	b938      	cbnz	r0, 80024be <__swbuf_r+0x74>
 80024ae:	4638      	mov	r0, r7
 80024b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b2:	4621      	mov	r1, r4
 80024b4:	4628      	mov	r0, r5
 80024b6:	f000 f805 	bl	80024c4 <__swsetup_r>
 80024ba:	2800      	cmp	r0, #0
 80024bc:	d0d5      	beq.n	800246a <__swbuf_r+0x20>
 80024be:	f04f 37ff 	mov.w	r7, #4294967295
 80024c2:	e7f4      	b.n	80024ae <__swbuf_r+0x64>

080024c4 <__swsetup_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <__swsetup_r+0xac>)
 80024c8:	4605      	mov	r5, r0
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	460c      	mov	r4, r1
 80024ce:	b118      	cbz	r0, 80024d8 <__swsetup_r+0x14>
 80024d0:	6a03      	ldr	r3, [r0, #32]
 80024d2:	b90b      	cbnz	r3, 80024d8 <__swsetup_r+0x14>
 80024d4:	f7ff fee4 	bl	80022a0 <__sinit>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024de:	0718      	lsls	r0, r3, #28
 80024e0:	d422      	bmi.n	8002528 <__swsetup_r+0x64>
 80024e2:	06d9      	lsls	r1, r3, #27
 80024e4:	d407      	bmi.n	80024f6 <__swsetup_r+0x32>
 80024e6:	2309      	movs	r3, #9
 80024e8:	602b      	str	r3, [r5, #0]
 80024ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024ee:	f04f 30ff 	mov.w	r0, #4294967295
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	e034      	b.n	8002560 <__swsetup_r+0x9c>
 80024f6:	0758      	lsls	r0, r3, #29
 80024f8:	d512      	bpl.n	8002520 <__swsetup_r+0x5c>
 80024fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024fc:	b141      	cbz	r1, 8002510 <__swsetup_r+0x4c>
 80024fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002502:	4299      	cmp	r1, r3
 8002504:	d002      	beq.n	800250c <__swsetup_r+0x48>
 8002506:	4628      	mov	r0, r5
 8002508:	f000 f8b0 	bl	800266c <_free_r>
 800250c:	2300      	movs	r3, #0
 800250e:	6363      	str	r3, [r4, #52]	; 0x34
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002516:	81a3      	strh	r3, [r4, #12]
 8002518:	2300      	movs	r3, #0
 800251a:	6063      	str	r3, [r4, #4]
 800251c:	6923      	ldr	r3, [r4, #16]
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	89a3      	ldrh	r3, [r4, #12]
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	81a3      	strh	r3, [r4, #12]
 8002528:	6923      	ldr	r3, [r4, #16]
 800252a:	b94b      	cbnz	r3, 8002540 <__swsetup_r+0x7c>
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d003      	beq.n	8002540 <__swsetup_r+0x7c>
 8002538:	4621      	mov	r1, r4
 800253a:	4628      	mov	r0, r5
 800253c:	f000 fa59 	bl	80029f2 <__smakebuf_r>
 8002540:	89a0      	ldrh	r0, [r4, #12]
 8002542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002546:	f010 0301 	ands.w	r3, r0, #1
 800254a:	d00a      	beq.n	8002562 <__swsetup_r+0x9e>
 800254c:	2300      	movs	r3, #0
 800254e:	60a3      	str	r3, [r4, #8]
 8002550:	6963      	ldr	r3, [r4, #20]
 8002552:	425b      	negs	r3, r3
 8002554:	61a3      	str	r3, [r4, #24]
 8002556:	6923      	ldr	r3, [r4, #16]
 8002558:	b943      	cbnz	r3, 800256c <__swsetup_r+0xa8>
 800255a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800255e:	d1c4      	bne.n	80024ea <__swsetup_r+0x26>
 8002560:	bd38      	pop	{r3, r4, r5, pc}
 8002562:	0781      	lsls	r1, r0, #30
 8002564:	bf58      	it	pl
 8002566:	6963      	ldrpl	r3, [r4, #20]
 8002568:	60a3      	str	r3, [r4, #8]
 800256a:	e7f4      	b.n	8002556 <__swsetup_r+0x92>
 800256c:	2000      	movs	r0, #0
 800256e:	e7f7      	b.n	8002560 <__swsetup_r+0x9c>
 8002570:	20000064 	.word	0x20000064

08002574 <memset>:
 8002574:	4603      	mov	r3, r0
 8002576:	4402      	add	r2, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	f803 1b01 	strb.w	r1, [r3], #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <_close_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	2300      	movs	r3, #0
 8002588:	4d05      	ldr	r5, [pc, #20]	; (80025a0 <_close_r+0x1c>)
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	602b      	str	r3, [r5, #0]
 8002590:	f7fe f821 	bl	80005d6 <_close>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_close_r+0x1a>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	b103      	cbz	r3, 800259e <_close_r+0x1a>
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	20000258 	.word	0x20000258

080025a4 <_lseek_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4604      	mov	r4, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	2200      	movs	r2, #0
 80025ae:	4d05      	ldr	r5, [pc, #20]	; (80025c4 <_lseek_r+0x20>)
 80025b0:	602a      	str	r2, [r5, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7fe f833 	bl	800061e <_lseek>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	d102      	bne.n	80025c2 <_lseek_r+0x1e>
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	b103      	cbz	r3, 80025c2 <_lseek_r+0x1e>
 80025c0:	6023      	str	r3, [r4, #0]
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
 80025c4:	20000258 	.word	0x20000258

080025c8 <_read_r>:
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4604      	mov	r4, r0
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	2200      	movs	r2, #0
 80025d2:	4d05      	ldr	r5, [pc, #20]	; (80025e8 <_read_r+0x20>)
 80025d4:	602a      	str	r2, [r5, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f7fd ffc4 	bl	8000564 <_read>
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d102      	bne.n	80025e6 <_read_r+0x1e>
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	b103      	cbz	r3, 80025e6 <_read_r+0x1e>
 80025e4:	6023      	str	r3, [r4, #0]
 80025e6:	bd38      	pop	{r3, r4, r5, pc}
 80025e8:	20000258 	.word	0x20000258

080025ec <_write_r>:
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	2200      	movs	r2, #0
 80025f6:	4d05      	ldr	r5, [pc, #20]	; (800260c <_write_r+0x20>)
 80025f8:	602a      	str	r2, [r5, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f7fd ffcf 	bl	800059e <_write>
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	d102      	bne.n	800260a <_write_r+0x1e>
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	b103      	cbz	r3, 800260a <_write_r+0x1e>
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	20000258 	.word	0x20000258

08002610 <__errno>:
 8002610:	4b01      	ldr	r3, [pc, #4]	; (8002618 <__errno+0x8>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000064 	.word	0x20000064

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	2600      	movs	r6, #0
 8002620:	4d0c      	ldr	r5, [pc, #48]	; (8002654 <__libc_init_array+0x38>)
 8002622:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002624:	1b64      	subs	r4, r4, r5
 8002626:	10a4      	asrs	r4, r4, #2
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	f000 fa50 	bl	8002ad0 <_init>
 8002630:	2600      	movs	r6, #0
 8002632:	4d0a      	ldr	r5, [pc, #40]	; (800265c <__libc_init_array+0x40>)
 8002634:	4c0a      	ldr	r4, [pc, #40]	; (8002660 <__libc_init_array+0x44>)
 8002636:	1b64      	subs	r4, r4, r5
 8002638:	10a4      	asrs	r4, r4, #2
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	4798      	blx	r3
 8002646:	3601      	adds	r6, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	4798      	blx	r3
 8002650:	3601      	adds	r6, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	08002b28 	.word	0x08002b28
 8002658:	08002b28 	.word	0x08002b28
 800265c:	08002b28 	.word	0x08002b28
 8002660:	08002b2c 	.word	0x08002b2c

08002664 <__retarget_lock_init_recursive>:
 8002664:	4770      	bx	lr

08002666 <__retarget_lock_acquire_recursive>:
 8002666:	4770      	bx	lr

08002668 <__retarget_lock_release_recursive>:
 8002668:	4770      	bx	lr
	...

0800266c <_free_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4605      	mov	r5, r0
 8002670:	2900      	cmp	r1, #0
 8002672:	d040      	beq.n	80026f6 <_free_r+0x8a>
 8002674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002678:	1f0c      	subs	r4, r1, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	bfb8      	it	lt
 800267e:	18e4      	addlt	r4, r4, r3
 8002680:	f000 f8dc 	bl	800283c <__malloc_lock>
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <_free_r+0x8c>)
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	b933      	cbnz	r3, 8002698 <_free_r+0x2c>
 800268a:	6063      	str	r3, [r4, #4]
 800268c:	6014      	str	r4, [r2, #0]
 800268e:	4628      	mov	r0, r5
 8002690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002694:	f000 b8d8 	b.w	8002848 <__malloc_unlock>
 8002698:	42a3      	cmp	r3, r4
 800269a:	d908      	bls.n	80026ae <_free_r+0x42>
 800269c:	6820      	ldr	r0, [r4, #0]
 800269e:	1821      	adds	r1, r4, r0
 80026a0:	428b      	cmp	r3, r1
 80026a2:	bf01      	itttt	eq
 80026a4:	6819      	ldreq	r1, [r3, #0]
 80026a6:	685b      	ldreq	r3, [r3, #4]
 80026a8:	1809      	addeq	r1, r1, r0
 80026aa:	6021      	streq	r1, [r4, #0]
 80026ac:	e7ed      	b.n	800268a <_free_r+0x1e>
 80026ae:	461a      	mov	r2, r3
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b10b      	cbz	r3, 80026b8 <_free_r+0x4c>
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	d9fa      	bls.n	80026ae <_free_r+0x42>
 80026b8:	6811      	ldr	r1, [r2, #0]
 80026ba:	1850      	adds	r0, r2, r1
 80026bc:	42a0      	cmp	r0, r4
 80026be:	d10b      	bne.n	80026d8 <_free_r+0x6c>
 80026c0:	6820      	ldr	r0, [r4, #0]
 80026c2:	4401      	add	r1, r0
 80026c4:	1850      	adds	r0, r2, r1
 80026c6:	4283      	cmp	r3, r0
 80026c8:	6011      	str	r1, [r2, #0]
 80026ca:	d1e0      	bne.n	800268e <_free_r+0x22>
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4408      	add	r0, r1
 80026d2:	6010      	str	r0, [r2, #0]
 80026d4:	6053      	str	r3, [r2, #4]
 80026d6:	e7da      	b.n	800268e <_free_r+0x22>
 80026d8:	d902      	bls.n	80026e0 <_free_r+0x74>
 80026da:	230c      	movs	r3, #12
 80026dc:	602b      	str	r3, [r5, #0]
 80026de:	e7d6      	b.n	800268e <_free_r+0x22>
 80026e0:	6820      	ldr	r0, [r4, #0]
 80026e2:	1821      	adds	r1, r4, r0
 80026e4:	428b      	cmp	r3, r1
 80026e6:	bf01      	itttt	eq
 80026e8:	6819      	ldreq	r1, [r3, #0]
 80026ea:	685b      	ldreq	r3, [r3, #4]
 80026ec:	1809      	addeq	r1, r1, r0
 80026ee:	6021      	streq	r1, [r4, #0]
 80026f0:	6063      	str	r3, [r4, #4]
 80026f2:	6054      	str	r4, [r2, #4]
 80026f4:	e7cb      	b.n	800268e <_free_r+0x22>
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000260 	.word	0x20000260

080026fc <sbrk_aligned>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	4e0e      	ldr	r6, [pc, #56]	; (8002738 <sbrk_aligned+0x3c>)
 8002700:	460c      	mov	r4, r1
 8002702:	6831      	ldr	r1, [r6, #0]
 8002704:	4605      	mov	r5, r0
 8002706:	b911      	cbnz	r1, 800270e <sbrk_aligned+0x12>
 8002708:	f000 f9d2 	bl	8002ab0 <_sbrk_r>
 800270c:	6030      	str	r0, [r6, #0]
 800270e:	4621      	mov	r1, r4
 8002710:	4628      	mov	r0, r5
 8002712:	f000 f9cd 	bl	8002ab0 <_sbrk_r>
 8002716:	1c43      	adds	r3, r0, #1
 8002718:	d00a      	beq.n	8002730 <sbrk_aligned+0x34>
 800271a:	1cc4      	adds	r4, r0, #3
 800271c:	f024 0403 	bic.w	r4, r4, #3
 8002720:	42a0      	cmp	r0, r4
 8002722:	d007      	beq.n	8002734 <sbrk_aligned+0x38>
 8002724:	1a21      	subs	r1, r4, r0
 8002726:	4628      	mov	r0, r5
 8002728:	f000 f9c2 	bl	8002ab0 <_sbrk_r>
 800272c:	3001      	adds	r0, #1
 800272e:	d101      	bne.n	8002734 <sbrk_aligned+0x38>
 8002730:	f04f 34ff 	mov.w	r4, #4294967295
 8002734:	4620      	mov	r0, r4
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	20000264 	.word	0x20000264

0800273c <_malloc_r>:
 800273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002740:	1ccd      	adds	r5, r1, #3
 8002742:	f025 0503 	bic.w	r5, r5, #3
 8002746:	3508      	adds	r5, #8
 8002748:	2d0c      	cmp	r5, #12
 800274a:	bf38      	it	cc
 800274c:	250c      	movcc	r5, #12
 800274e:	2d00      	cmp	r5, #0
 8002750:	4607      	mov	r7, r0
 8002752:	db01      	blt.n	8002758 <_malloc_r+0x1c>
 8002754:	42a9      	cmp	r1, r5
 8002756:	d905      	bls.n	8002764 <_malloc_r+0x28>
 8002758:	230c      	movs	r3, #12
 800275a:	2600      	movs	r6, #0
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4630      	mov	r0, r6
 8002760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002764:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002838 <_malloc_r+0xfc>
 8002768:	f000 f868 	bl	800283c <__malloc_lock>
 800276c:	f8d8 3000 	ldr.w	r3, [r8]
 8002770:	461c      	mov	r4, r3
 8002772:	bb5c      	cbnz	r4, 80027cc <_malloc_r+0x90>
 8002774:	4629      	mov	r1, r5
 8002776:	4638      	mov	r0, r7
 8002778:	f7ff ffc0 	bl	80026fc <sbrk_aligned>
 800277c:	1c43      	adds	r3, r0, #1
 800277e:	4604      	mov	r4, r0
 8002780:	d155      	bne.n	800282e <_malloc_r+0xf2>
 8002782:	f8d8 4000 	ldr.w	r4, [r8]
 8002786:	4626      	mov	r6, r4
 8002788:	2e00      	cmp	r6, #0
 800278a:	d145      	bne.n	8002818 <_malloc_r+0xdc>
 800278c:	2c00      	cmp	r4, #0
 800278e:	d048      	beq.n	8002822 <_malloc_r+0xe6>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	4631      	mov	r1, r6
 8002794:	4638      	mov	r0, r7
 8002796:	eb04 0903 	add.w	r9, r4, r3
 800279a:	f000 f989 	bl	8002ab0 <_sbrk_r>
 800279e:	4581      	cmp	r9, r0
 80027a0:	d13f      	bne.n	8002822 <_malloc_r+0xe6>
 80027a2:	6821      	ldr	r1, [r4, #0]
 80027a4:	4638      	mov	r0, r7
 80027a6:	1a6d      	subs	r5, r5, r1
 80027a8:	4629      	mov	r1, r5
 80027aa:	f7ff ffa7 	bl	80026fc <sbrk_aligned>
 80027ae:	3001      	adds	r0, #1
 80027b0:	d037      	beq.n	8002822 <_malloc_r+0xe6>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	442b      	add	r3, r5
 80027b6:	6023      	str	r3, [r4, #0]
 80027b8:	f8d8 3000 	ldr.w	r3, [r8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d038      	beq.n	8002832 <_malloc_r+0xf6>
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	42a2      	cmp	r2, r4
 80027c4:	d12b      	bne.n	800281e <_malloc_r+0xe2>
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	e00f      	b.n	80027ec <_malloc_r+0xb0>
 80027cc:	6822      	ldr	r2, [r4, #0]
 80027ce:	1b52      	subs	r2, r2, r5
 80027d0:	d41f      	bmi.n	8002812 <_malloc_r+0xd6>
 80027d2:	2a0b      	cmp	r2, #11
 80027d4:	d917      	bls.n	8002806 <_malloc_r+0xca>
 80027d6:	1961      	adds	r1, r4, r5
 80027d8:	42a3      	cmp	r3, r4
 80027da:	6025      	str	r5, [r4, #0]
 80027dc:	bf18      	it	ne
 80027de:	6059      	strne	r1, [r3, #4]
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	bf08      	it	eq
 80027e4:	f8c8 1000 	streq.w	r1, [r8]
 80027e8:	5162      	str	r2, [r4, r5]
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	4638      	mov	r0, r7
 80027ee:	f104 060b 	add.w	r6, r4, #11
 80027f2:	f000 f829 	bl	8002848 <__malloc_unlock>
 80027f6:	f026 0607 	bic.w	r6, r6, #7
 80027fa:	1d23      	adds	r3, r4, #4
 80027fc:	1af2      	subs	r2, r6, r3
 80027fe:	d0ae      	beq.n	800275e <_malloc_r+0x22>
 8002800:	1b9b      	subs	r3, r3, r6
 8002802:	50a3      	str	r3, [r4, r2]
 8002804:	e7ab      	b.n	800275e <_malloc_r+0x22>
 8002806:	42a3      	cmp	r3, r4
 8002808:	6862      	ldr	r2, [r4, #4]
 800280a:	d1dd      	bne.n	80027c8 <_malloc_r+0x8c>
 800280c:	f8c8 2000 	str.w	r2, [r8]
 8002810:	e7ec      	b.n	80027ec <_malloc_r+0xb0>
 8002812:	4623      	mov	r3, r4
 8002814:	6864      	ldr	r4, [r4, #4]
 8002816:	e7ac      	b.n	8002772 <_malloc_r+0x36>
 8002818:	4634      	mov	r4, r6
 800281a:	6876      	ldr	r6, [r6, #4]
 800281c:	e7b4      	b.n	8002788 <_malloc_r+0x4c>
 800281e:	4613      	mov	r3, r2
 8002820:	e7cc      	b.n	80027bc <_malloc_r+0x80>
 8002822:	230c      	movs	r3, #12
 8002824:	4638      	mov	r0, r7
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	f000 f80e 	bl	8002848 <__malloc_unlock>
 800282c:	e797      	b.n	800275e <_malloc_r+0x22>
 800282e:	6025      	str	r5, [r4, #0]
 8002830:	e7dc      	b.n	80027ec <_malloc_r+0xb0>
 8002832:	605b      	str	r3, [r3, #4]
 8002834:	deff      	udf	#255	; 0xff
 8002836:	bf00      	nop
 8002838:	20000260 	.word	0x20000260

0800283c <__malloc_lock>:
 800283c:	4801      	ldr	r0, [pc, #4]	; (8002844 <__malloc_lock+0x8>)
 800283e:	f7ff bf12 	b.w	8002666 <__retarget_lock_acquire_recursive>
 8002842:	bf00      	nop
 8002844:	2000025c 	.word	0x2000025c

08002848 <__malloc_unlock>:
 8002848:	4801      	ldr	r0, [pc, #4]	; (8002850 <__malloc_unlock+0x8>)
 800284a:	f7ff bf0d 	b.w	8002668 <__retarget_lock_release_recursive>
 800284e:	bf00      	nop
 8002850:	2000025c 	.word	0x2000025c

08002854 <__sflush_r>:
 8002854:	898a      	ldrh	r2, [r1, #12]
 8002856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002858:	4605      	mov	r5, r0
 800285a:	0710      	lsls	r0, r2, #28
 800285c:	460c      	mov	r4, r1
 800285e:	d457      	bmi.n	8002910 <__sflush_r+0xbc>
 8002860:	684b      	ldr	r3, [r1, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	dc04      	bgt.n	8002870 <__sflush_r+0x1c>
 8002866:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	dc01      	bgt.n	8002870 <__sflush_r+0x1c>
 800286c:	2000      	movs	r0, #0
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002872:	2e00      	cmp	r6, #0
 8002874:	d0fa      	beq.n	800286c <__sflush_r+0x18>
 8002876:	2300      	movs	r3, #0
 8002878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800287c:	682f      	ldr	r7, [r5, #0]
 800287e:	6a21      	ldr	r1, [r4, #32]
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	d032      	beq.n	80028ea <__sflush_r+0x96>
 8002884:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	075a      	lsls	r2, r3, #29
 800288a:	d505      	bpl.n	8002898 <__sflush_r+0x44>
 800288c:	6863      	ldr	r3, [r4, #4]
 800288e:	1ac0      	subs	r0, r0, r3
 8002890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002892:	b10b      	cbz	r3, 8002898 <__sflush_r+0x44>
 8002894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002896:	1ac0      	subs	r0, r0, r3
 8002898:	2300      	movs	r3, #0
 800289a:	4602      	mov	r2, r0
 800289c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289e:	4628      	mov	r0, r5
 80028a0:	6a21      	ldr	r1, [r4, #32]
 80028a2:	47b0      	blx	r6
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	d106      	bne.n	80028b8 <__sflush_r+0x64>
 80028aa:	6829      	ldr	r1, [r5, #0]
 80028ac:	291d      	cmp	r1, #29
 80028ae:	d82b      	bhi.n	8002908 <__sflush_r+0xb4>
 80028b0:	4a28      	ldr	r2, [pc, #160]	; (8002954 <__sflush_r+0x100>)
 80028b2:	410a      	asrs	r2, r1
 80028b4:	07d6      	lsls	r6, r2, #31
 80028b6:	d427      	bmi.n	8002908 <__sflush_r+0xb4>
 80028b8:	2200      	movs	r2, #0
 80028ba:	6062      	str	r2, [r4, #4]
 80028bc:	6922      	ldr	r2, [r4, #16]
 80028be:	04d9      	lsls	r1, r3, #19
 80028c0:	6022      	str	r2, [r4, #0]
 80028c2:	d504      	bpl.n	80028ce <__sflush_r+0x7a>
 80028c4:	1c42      	adds	r2, r0, #1
 80028c6:	d101      	bne.n	80028cc <__sflush_r+0x78>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	b903      	cbnz	r3, 80028ce <__sflush_r+0x7a>
 80028cc:	6560      	str	r0, [r4, #84]	; 0x54
 80028ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028d0:	602f      	str	r7, [r5, #0]
 80028d2:	2900      	cmp	r1, #0
 80028d4:	d0ca      	beq.n	800286c <__sflush_r+0x18>
 80028d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028da:	4299      	cmp	r1, r3
 80028dc:	d002      	beq.n	80028e4 <__sflush_r+0x90>
 80028de:	4628      	mov	r0, r5
 80028e0:	f7ff fec4 	bl	800266c <_free_r>
 80028e4:	2000      	movs	r0, #0
 80028e6:	6360      	str	r0, [r4, #52]	; 0x34
 80028e8:	e7c1      	b.n	800286e <__sflush_r+0x1a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	4628      	mov	r0, r5
 80028ee:	47b0      	blx	r6
 80028f0:	1c41      	adds	r1, r0, #1
 80028f2:	d1c8      	bne.n	8002886 <__sflush_r+0x32>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0c5      	beq.n	8002886 <__sflush_r+0x32>
 80028fa:	2b1d      	cmp	r3, #29
 80028fc:	d001      	beq.n	8002902 <__sflush_r+0xae>
 80028fe:	2b16      	cmp	r3, #22
 8002900:	d101      	bne.n	8002906 <__sflush_r+0xb2>
 8002902:	602f      	str	r7, [r5, #0]
 8002904:	e7b2      	b.n	800286c <__sflush_r+0x18>
 8002906:	89a3      	ldrh	r3, [r4, #12]
 8002908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290c:	81a3      	strh	r3, [r4, #12]
 800290e:	e7ae      	b.n	800286e <__sflush_r+0x1a>
 8002910:	690f      	ldr	r7, [r1, #16]
 8002912:	2f00      	cmp	r7, #0
 8002914:	d0aa      	beq.n	800286c <__sflush_r+0x18>
 8002916:	0793      	lsls	r3, r2, #30
 8002918:	bf18      	it	ne
 800291a:	2300      	movne	r3, #0
 800291c:	680e      	ldr	r6, [r1, #0]
 800291e:	bf08      	it	eq
 8002920:	694b      	ldreq	r3, [r1, #20]
 8002922:	1bf6      	subs	r6, r6, r7
 8002924:	600f      	str	r7, [r1, #0]
 8002926:	608b      	str	r3, [r1, #8]
 8002928:	2e00      	cmp	r6, #0
 800292a:	dd9f      	ble.n	800286c <__sflush_r+0x18>
 800292c:	4633      	mov	r3, r6
 800292e:	463a      	mov	r2, r7
 8002930:	4628      	mov	r0, r5
 8002932:	6a21      	ldr	r1, [r4, #32]
 8002934:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002938:	47e0      	blx	ip
 800293a:	2800      	cmp	r0, #0
 800293c:	dc06      	bgt.n	800294c <__sflush_r+0xf8>
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002948:	81a3      	strh	r3, [r4, #12]
 800294a:	e790      	b.n	800286e <__sflush_r+0x1a>
 800294c:	4407      	add	r7, r0
 800294e:	1a36      	subs	r6, r6, r0
 8002950:	e7ea      	b.n	8002928 <__sflush_r+0xd4>
 8002952:	bf00      	nop
 8002954:	dfbffffe 	.word	0xdfbffffe

08002958 <_fflush_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	690b      	ldr	r3, [r1, #16]
 800295c:	4605      	mov	r5, r0
 800295e:	460c      	mov	r4, r1
 8002960:	b913      	cbnz	r3, 8002968 <_fflush_r+0x10>
 8002962:	2500      	movs	r5, #0
 8002964:	4628      	mov	r0, r5
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	b118      	cbz	r0, 8002972 <_fflush_r+0x1a>
 800296a:	6a03      	ldr	r3, [r0, #32]
 800296c:	b90b      	cbnz	r3, 8002972 <_fflush_r+0x1a>
 800296e:	f7ff fc97 	bl	80022a0 <__sinit>
 8002972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f3      	beq.n	8002962 <_fflush_r+0xa>
 800297a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800297c:	07d0      	lsls	r0, r2, #31
 800297e:	d404      	bmi.n	800298a <_fflush_r+0x32>
 8002980:	0599      	lsls	r1, r3, #22
 8002982:	d402      	bmi.n	800298a <_fflush_r+0x32>
 8002984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002986:	f7ff fe6e 	bl	8002666 <__retarget_lock_acquire_recursive>
 800298a:	4628      	mov	r0, r5
 800298c:	4621      	mov	r1, r4
 800298e:	f7ff ff61 	bl	8002854 <__sflush_r>
 8002992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002994:	4605      	mov	r5, r0
 8002996:	07da      	lsls	r2, r3, #31
 8002998:	d4e4      	bmi.n	8002964 <_fflush_r+0xc>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	059b      	lsls	r3, r3, #22
 800299e:	d4e1      	bmi.n	8002964 <_fflush_r+0xc>
 80029a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029a2:	f7ff fe61 	bl	8002668 <__retarget_lock_release_recursive>
 80029a6:	e7dd      	b.n	8002964 <_fflush_r+0xc>

080029a8 <__swhatbuf_r>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	460c      	mov	r4, r1
 80029ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b0:	4615      	mov	r5, r2
 80029b2:	2900      	cmp	r1, #0
 80029b4:	461e      	mov	r6, r3
 80029b6:	b096      	sub	sp, #88	; 0x58
 80029b8:	da0c      	bge.n	80029d4 <__swhatbuf_r+0x2c>
 80029ba:	89a3      	ldrh	r3, [r4, #12]
 80029bc:	2100      	movs	r1, #0
 80029be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029c2:	bf0c      	ite	eq
 80029c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80029c8:	2340      	movne	r3, #64	; 0x40
 80029ca:	2000      	movs	r0, #0
 80029cc:	6031      	str	r1, [r6, #0]
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	b016      	add	sp, #88	; 0x58
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	466a      	mov	r2, sp
 80029d6:	f000 f849 	bl	8002a6c <_fstat_r>
 80029da:	2800      	cmp	r0, #0
 80029dc:	dbed      	blt.n	80029ba <__swhatbuf_r+0x12>
 80029de:	9901      	ldr	r1, [sp, #4]
 80029e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80029e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80029e8:	4259      	negs	r1, r3
 80029ea:	4159      	adcs	r1, r3
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	e7eb      	b.n	80029ca <__swhatbuf_r+0x22>

080029f2 <__smakebuf_r>:
 80029f2:	898b      	ldrh	r3, [r1, #12]
 80029f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029f6:	079d      	lsls	r5, r3, #30
 80029f8:	4606      	mov	r6, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	d507      	bpl.n	8002a0e <__smakebuf_r+0x1c>
 80029fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a02:	6023      	str	r3, [r4, #0]
 8002a04:	6123      	str	r3, [r4, #16]
 8002a06:	2301      	movs	r3, #1
 8002a08:	6163      	str	r3, [r4, #20]
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd70      	pop	{r4, r5, r6, pc}
 8002a0e:	466a      	mov	r2, sp
 8002a10:	ab01      	add	r3, sp, #4
 8002a12:	f7ff ffc9 	bl	80029a8 <__swhatbuf_r>
 8002a16:	9900      	ldr	r1, [sp, #0]
 8002a18:	4605      	mov	r5, r0
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f7ff fe8e 	bl	800273c <_malloc_r>
 8002a20:	b948      	cbnz	r0, 8002a36 <__smakebuf_r+0x44>
 8002a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a26:	059a      	lsls	r2, r3, #22
 8002a28:	d4ef      	bmi.n	8002a0a <__smakebuf_r+0x18>
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	81a3      	strh	r3, [r4, #12]
 8002a34:	e7e3      	b.n	80029fe <__smakebuf_r+0xc>
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	6020      	str	r0, [r4, #0]
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	9b00      	ldr	r3, [sp, #0]
 8002a42:	6120      	str	r0, [r4, #16]
 8002a44:	6163      	str	r3, [r4, #20]
 8002a46:	9b01      	ldr	r3, [sp, #4]
 8002a48:	b15b      	cbz	r3, 8002a62 <__smakebuf_r+0x70>
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a50:	f000 f81e 	bl	8002a90 <_isatty_r>
 8002a54:	b128      	cbz	r0, 8002a62 <__smakebuf_r+0x70>
 8002a56:	89a3      	ldrh	r3, [r4, #12]
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	81a3      	strh	r3, [r4, #12]
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	431d      	orrs	r5, r3
 8002a66:	81a5      	strh	r5, [r4, #12]
 8002a68:	e7cf      	b.n	8002a0a <__smakebuf_r+0x18>
	...

08002a6c <_fstat_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	2300      	movs	r3, #0
 8002a70:	4d06      	ldr	r5, [pc, #24]	; (8002a8c <_fstat_r+0x20>)
 8002a72:	4604      	mov	r4, r0
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	602b      	str	r3, [r5, #0]
 8002a7a:	f7fd fdb7 	bl	80005ec <_fstat>
 8002a7e:	1c43      	adds	r3, r0, #1
 8002a80:	d102      	bne.n	8002a88 <_fstat_r+0x1c>
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	b103      	cbz	r3, 8002a88 <_fstat_r+0x1c>
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000258 	.word	0x20000258

08002a90 <_isatty_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	2300      	movs	r3, #0
 8002a94:	4d05      	ldr	r5, [pc, #20]	; (8002aac <_isatty_r+0x1c>)
 8002a96:	4604      	mov	r4, r0
 8002a98:	4608      	mov	r0, r1
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	f7fd fdb5 	bl	800060a <_isatty>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d102      	bne.n	8002aaa <_isatty_r+0x1a>
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	b103      	cbz	r3, 8002aaa <_isatty_r+0x1a>
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	bd38      	pop	{r3, r4, r5, pc}
 8002aac:	20000258 	.word	0x20000258

08002ab0 <_sbrk_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4d05      	ldr	r5, [pc, #20]	; (8002acc <_sbrk_r+0x1c>)
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	f7fd fdbc 	bl	8000638 <_sbrk>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d102      	bne.n	8002aca <_sbrk_r+0x1a>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	b103      	cbz	r3, 8002aca <_sbrk_r+0x1a>
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	20000258 	.word	0x20000258

08002ad0 <_init>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr

08002adc <_fini>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr
