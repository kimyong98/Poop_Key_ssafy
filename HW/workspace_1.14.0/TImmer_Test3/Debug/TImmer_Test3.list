
TImmer_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800315c  0800315c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800315c  0800315c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  080031cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080031cc  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bba7  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd9  00000000  00000000  0002bc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000988  00000000  00000000  0002e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184e6  00000000  00000000  0002ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3a9  00000000  00000000  000472fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bef2  00000000  00000000  000546a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a90  00000000  00000000  000e059c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080030d4 	.word	0x080030d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080030d4 	.word	0x080030d4

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 fef9 	bl	8001f54 <HAL_UART_Transmit>
  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000cc 	.word	0x200000cc

08000170 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t overflows = 0U;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a06      	ldr	r2, [pc, #24]	; (8000198 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d104      	bne.n	800018c <HAL_TIM_PeriodElapsedCallback+0x1c>
		overflows++;
 8000182:	4b06      	ldr	r3, [pc, #24]	; (800019c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	3301      	adds	r3, #1
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800018a:	6013      	str	r3, [r2, #0]
	}
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	40012c00 	.word	0x40012c00
 800019c:	20000114 	.word	0x20000114

080001a0 <GetMicroSec>:


uint32_t GetMicroSec(void){
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
	uint32_t count = __HAL_TIM_GET_COUNTER(&htim1);
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <GetMicroSec+0x44>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ac:	603b      	str	r3, [r7, #0]
	uint32_t overflow = overflows;
 80001ae:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <GetMicroSec+0x48>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	607b      	str	r3, [r7, #4]
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) && (count < 0x8000)) {
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <GetMicroSec+0x44>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	691b      	ldr	r3, [r3, #16]
 80001ba:	f003 0301 	and.w	r3, r3, #1
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d106      	bne.n	80001d0 <GetMicroSec+0x30>
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001c8:	d202      	bcs.n	80001d0 <GetMicroSec+0x30>
	        overflow++;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	3301      	adds	r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
	}

	return(overflow << 16) + count;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	041a      	lsls	r2, r3, #16
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	4413      	add	r3, r2
}
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000084 	.word	0x20000084
 80001e8:	20000114 	.word	0x20000114

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f000 faff 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f825 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f8d9 	bl	80003b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001fe:	f000 f8ad 	bl	800035c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000202:	f000 f85b 	bl	80002bc <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Init(&htim1);
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <main+0x50>)
 8000208:	f001 fa56 	bl	80016b8 <HAL_TIM_Base_Init>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <main+0x50>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2200      	movs	r2, #0
 8000212:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim1);
 8000214:	4809      	ldr	r0, [pc, #36]	; (800023c <main+0x50>)
 8000216:	f001 fa9f 	bl	8001758 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t start = GetMicroSec();
 800021a:	f7ff ffc1 	bl	80001a0 <GetMicroSec>
 800021e:	6078      	str	r0, [r7, #4]
	  HAL_Delay(100);
 8000220:	2064      	movs	r0, #100	; 0x64
 8000222:	f000 fb49 	bl	80008b8 <HAL_Delay>
	  uint32_t end = GetMicroSec();
 8000226:	f7ff ffbb 	bl	80001a0 <GetMicroSec>
 800022a:	6038      	str	r0, [r7, #0]
	  printf("\r\n aaa : %lu \r\n", end - start);
 800022c:	683a      	ldr	r2, [r7, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	4619      	mov	r1, r3
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <main+0x54>)
 8000236:	f002 f8cf 	bl	80023d8 <iprintf>
  {
 800023a:	e7ee      	b.n	800021a <main+0x2e>
 800023c:	20000084 	.word	0x20000084
 8000240:	080030ec 	.word	0x080030ec

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 f915 	bl	8002482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000272:	2300      	movs	r3, #0
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fe0c 	bl	8000e98 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000286:	f000 f901 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 f87a 	bl	800139c <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ae:	f000 f8ed 	bl	800048c <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	; 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <MX_TIM1_Init+0x98>)
 80002da:	4a1f      	ldr	r2, [pc, #124]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <MX_TIM1_Init+0x98>)
 80002e0:	2207      	movs	r2, #7
 80002e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_TIM1_Init+0x98>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <MX_TIM1_Init+0x98>)
 80002ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_TIM1_Init+0x98>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <MX_TIM1_Init+0x98>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_TIM1_Init+0x98>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000304:	4813      	ldr	r0, [pc, #76]	; (8000354 <MX_TIM1_Init+0x98>)
 8000306:	f001 f9d7 	bl	80016b8 <HAL_TIM_Base_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000310:	f000 f8bc 	bl	800048c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	4619      	mov	r1, r3
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <MX_TIM1_Init+0x98>)
 8000322:	f001 fb73 	bl	8001a0c <HAL_TIM_ConfigClockSource>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800032c:	f000 f8ae 	bl	800048c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000338:	463b      	mov	r3, r7
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_TIM1_Init+0x98>)
 800033e:	f001 fd49 	bl	8001dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000348:	f000 f8a0 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000084 	.word	0x20000084
 8000358:	40012c00 	.word	0x40012c00

0800035c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_USART2_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000394:	f001 fd8e 	bl	8001eb4 <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 f875 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000cc 	.word	0x200000cc
 80003ac:	40004400 	.word	0x40004400

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a2c      	ldr	r2, [pc, #176]	; (800047c <MX_GPIO_Init+0xcc>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b2a      	ldr	r3, [pc, #168]	; (800047c <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0310 	and.w	r3, r3, #16
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003dc:	4b27      	ldr	r3, [pc, #156]	; (800047c <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a26      	ldr	r2, [pc, #152]	; (800047c <MX_GPIO_Init+0xcc>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b24      	ldr	r3, [pc, #144]	; (800047c <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0320 	and.w	r3, r3, #32
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a20      	ldr	r2, [pc, #128]	; (800047c <MX_GPIO_Init+0xcc>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <MX_GPIO_Init+0xcc>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4815      	ldr	r0, [pc, #84]	; (8000480 <MX_GPIO_Init+0xd0>)
 800042a:	f000 fcfb 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_GPIO_Init+0xd4>)
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <MX_GPIO_Init+0xd8>)
 8000444:	f000 fb6a 	bl	8000b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000448:	2320      	movs	r3, #32
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4808      	ldr	r0, [pc, #32]	; (8000480 <MX_GPIO_Init+0xd0>)
 8000460:	f000 fb5c 	bl	8000b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2028      	movs	r0, #40	; 0x28
 800046a:	f000 fb20 	bl	8000aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046e:	2028      	movs	r0, #40	; 0x28
 8000470:	f000 fb39 	bl	8000ae6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	10110000 	.word	0x10110000
 8000488:	40011000 	.word	0x40011000

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <HAL_MspInit+0x5c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x5c>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_MspInit+0x60>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_MspInit+0x60>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_TIM_Base_MspInit+0x54>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d11b      	bne.n	8000546 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_TIM_Base_MspInit+0x58>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <HAL_TIM_Base_MspInit+0x58>)
 8000514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_TIM_Base_MspInit+0x58>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2019      	movs	r0, #25
 800052c:	f000 fabf 	bl	8000aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000530:	2019      	movs	r0, #25
 8000532:	f000 fad8 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	201b      	movs	r0, #27
 800053c:	f000 fab7 	bl	8000aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000540:	201b      	movs	r0, #27
 8000542:	f000 fad0 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40012c00 	.word	0x40012c00
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <HAL_UART_MspInit+0x70>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d123      	bne.n	80005c0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_UART_MspInit+0x74>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <HAL_UART_MspInit+0x74>)
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	61d3      	str	r3, [r2, #28]
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_UART_MspInit+0x74>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_UART_MspInit+0x74>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <HAL_UART_MspInit+0x74>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_UART_MspInit+0x74>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a8:	230c      	movs	r3, #12
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_UART_MspInit+0x78>)
 80005bc:	f000 faae 	bl	8000b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40004400 	.word	0x40004400
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010800 	.word	0x40010800

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <MemManage_Handler+0x4>

080005e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f931 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <TIM1_UP_IRQHandler+0x10>)
 800062a:	f001 f8e7 	bl	80017fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000084 	.word	0x20000084

08000638 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <TIM1_CC_IRQHandler+0x10>)
 800063e:	f001 f8dd 	bl	80017fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000084 	.word	0x20000084

0800064c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000650:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000654:	f000 fbfe 	bl	8000e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e00a      	b.n	8000684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800066e:	f3af 8000 	nop.w
 8000672:	4601      	mov	r1, r0
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf0      	blt.n	800066e <_read+0x12>
  }

  return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b086      	sub	sp, #24
 800069a:	af00      	add	r7, sp, #0
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	e009      	b.n	80006bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	60ba      	str	r2, [r7, #8]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd4b 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf1      	blt.n	80006a8 <_write+0x12>
  }
  return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_close>:

int _close(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f4:	605a      	str	r2, [r3, #4]
  return 0;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <_isatty>:

int _isatty(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000716:	b480      	push	{r7}
 8000718:	b085      	sub	sp, #20
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
	...

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f001 fede 	bl	8002520 <__errno>
 8000764:	4603      	mov	r3, r0
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20005000 	.word	0x20005000
 8000790:	00000400 	.word	0x00000400
 8000794:	20000118 	.word	0x20000118
 8000798:	20000270 	.word	0x20000270

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff fff8 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ae:	490c      	ldr	r1, [pc, #48]	; (80007e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c4:	4c09      	ldr	r4, [pc, #36]	; (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f001 feab 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fd09 	bl	80001ec <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007e4:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 80007e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007ec:	2000026c 	.word	0x2000026c

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f947 	bl	8000a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f808 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fe42 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x54>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x58>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	fbb3 f3f1 	udiv	r3, r3, r1
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f95f 	bl	8000b02 <HAL_SYSTICK_Config>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e00e      	b.n	800086c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d80a      	bhi.n	800086a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f000 f927 	bl	8000aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_InitTick+0x5c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x20>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000011c 	.word	0x2000011c

080008a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	2000011c 	.word	0x2000011c

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff fff0 	bl	80008a4 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffe0 	bl	80008a4 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4906      	ldr	r1, [pc, #24]	; (8000998 <__NVIC_EnableIRQ+0x34>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a64:	d301      	bcc.n	8000a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00f      	b.n	8000a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <SysTick_Config+0x40>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a72:	210f      	movs	r1, #15
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f7ff ff90 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SysTick_Config+0x40>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x40>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff2d 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac0:	f7ff ff42 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f7ff ff90 	bl	80009f0 <NVIC_EncodePriority>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff5f 	bl	800099c <__NVIC_SetPriority>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff35 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ffa2 	bl	8000a54 <SysTick_Config>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b08b      	sub	sp, #44	; 0x2c
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2e:	e169      	b.n	8000e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b30:	2201      	movs	r2, #1
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	f040 8158 	bne.w	8000dfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	4a9a      	ldr	r2, [pc, #616]	; (8000dbc <HAL_GPIO_Init+0x2a0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d05e      	beq.n	8000c16 <HAL_GPIO_Init+0xfa>
 8000b58:	4a98      	ldr	r2, [pc, #608]	; (8000dbc <HAL_GPIO_Init+0x2a0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d875      	bhi.n	8000c4a <HAL_GPIO_Init+0x12e>
 8000b5e:	4a98      	ldr	r2, [pc, #608]	; (8000dc0 <HAL_GPIO_Init+0x2a4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d058      	beq.n	8000c16 <HAL_GPIO_Init+0xfa>
 8000b64:	4a96      	ldr	r2, [pc, #600]	; (8000dc0 <HAL_GPIO_Init+0x2a4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d86f      	bhi.n	8000c4a <HAL_GPIO_Init+0x12e>
 8000b6a:	4a96      	ldr	r2, [pc, #600]	; (8000dc4 <HAL_GPIO_Init+0x2a8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d052      	beq.n	8000c16 <HAL_GPIO_Init+0xfa>
 8000b70:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <HAL_GPIO_Init+0x2a8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d869      	bhi.n	8000c4a <HAL_GPIO_Init+0x12e>
 8000b76:	4a94      	ldr	r2, [pc, #592]	; (8000dc8 <HAL_GPIO_Init+0x2ac>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d04c      	beq.n	8000c16 <HAL_GPIO_Init+0xfa>
 8000b7c:	4a92      	ldr	r2, [pc, #584]	; (8000dc8 <HAL_GPIO_Init+0x2ac>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d863      	bhi.n	8000c4a <HAL_GPIO_Init+0x12e>
 8000b82:	4a92      	ldr	r2, [pc, #584]	; (8000dcc <HAL_GPIO_Init+0x2b0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d046      	beq.n	8000c16 <HAL_GPIO_Init+0xfa>
 8000b88:	4a90      	ldr	r2, [pc, #576]	; (8000dcc <HAL_GPIO_Init+0x2b0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d85d      	bhi.n	8000c4a <HAL_GPIO_Init+0x12e>
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d82a      	bhi.n	8000be8 <HAL_GPIO_Init+0xcc>
 8000b92:	2b12      	cmp	r3, #18
 8000b94:	d859      	bhi.n	8000c4a <HAL_GPIO_Init+0x12e>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <HAL_GPIO_Init+0x80>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000c17 	.word	0x08000c17
 8000ba0:	08000bf1 	.word	0x08000bf1
 8000ba4:	08000c03 	.word	0x08000c03
 8000ba8:	08000c45 	.word	0x08000c45
 8000bac:	08000c4b 	.word	0x08000c4b
 8000bb0:	08000c4b 	.word	0x08000c4b
 8000bb4:	08000c4b 	.word	0x08000c4b
 8000bb8:	08000c4b 	.word	0x08000c4b
 8000bbc:	08000c4b 	.word	0x08000c4b
 8000bc0:	08000c4b 	.word	0x08000c4b
 8000bc4:	08000c4b 	.word	0x08000c4b
 8000bc8:	08000c4b 	.word	0x08000c4b
 8000bcc:	08000c4b 	.word	0x08000c4b
 8000bd0:	08000c4b 	.word	0x08000c4b
 8000bd4:	08000c4b 	.word	0x08000c4b
 8000bd8:	08000c4b 	.word	0x08000c4b
 8000bdc:	08000c4b 	.word	0x08000c4b
 8000be0:	08000bf9 	.word	0x08000bf9
 8000be4:	08000c0d 	.word	0x08000c0d
 8000be8:	4a79      	ldr	r2, [pc, #484]	; (8000dd0 <HAL_GPIO_Init+0x2b4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d013      	beq.n	8000c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bee:	e02c      	b.n	8000c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e029      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	623b      	str	r3, [r7, #32]
          break;
 8000c00:	e024      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	3308      	adds	r3, #8
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e01f      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	330c      	adds	r3, #12
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e01a      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e013      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d105      	bne.n	8000c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	611a      	str	r2, [r3, #16]
          break;
 8000c36:	e009      	b.n	8000c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	615a      	str	r2, [r3, #20]
          break;
 8000c42:	e003      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x130>
          break;
 8000c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d801      	bhi.n	8000c56 <HAL_GPIO_Init+0x13a>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	e001      	b.n	8000c5a <HAL_GPIO_Init+0x13e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2bff      	cmp	r3, #255	; 0xff
 8000c60:	d802      	bhi.n	8000c68 <HAL_GPIO_Init+0x14c>
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	e002      	b.n	8000c6e <HAL_GPIO_Init+0x152>
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	3b08      	subs	r3, #8
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	210f      	movs	r1, #15
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	6a39      	ldr	r1, [r7, #32]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 80b1 	beq.w	8000dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9c:	4b4d      	ldr	r3, [pc, #308]	; (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <HAL_GPIO_Init+0x2b8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb4:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <HAL_GPIO_Init+0x2bc>)
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <HAL_GPIO_Init+0x2c0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1ec>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3f      	ldr	r2, [pc, #252]	; (8000de0 <HAL_GPIO_Init+0x2c4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1e8>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <HAL_GPIO_Init+0x2c8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1e4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3d      	ldr	r2, [pc, #244]	; (8000de8 <HAL_GPIO_Init+0x2cc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1e0>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e006      	b.n	8000d0a <HAL_GPIO_Init+0x1ee>
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	e004      	b.n	8000d0a <HAL_GPIO_Init+0x1ee>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x1ee>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <HAL_GPIO_Init+0x1ee>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0c:	f002 0203 	and.w	r2, r2, #3
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	4093      	lsls	r3, r2
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1a:	492f      	ldr	r1, [pc, #188]	; (8000dd8 <HAL_GPIO_Init+0x2bc>)
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	492c      	ldr	r1, [pc, #176]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	608b      	str	r3, [r1, #8]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4928      	ldr	r1, [pc, #160]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	4922      	ldr	r1, [pc, #136]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60cb      	str	r3, [r1, #12]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	491e      	ldr	r1, [pc, #120]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4918      	ldr	r1, [pc, #96]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4914      	ldr	r1, [pc, #80]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d021      	beq.n	8000df0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	490e      	ldr	r1, [pc, #56]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
 8000db8:	e021      	b.n	8000dfe <HAL_GPIO_Init+0x2e2>
 8000dba:	bf00      	nop
 8000dbc:	10320000 	.word	0x10320000
 8000dc0:	10310000 	.word	0x10310000
 8000dc4:	10220000 	.word	0x10220000
 8000dc8:	10210000 	.word	0x10210000
 8000dcc:	10120000 	.word	0x10120000
 8000dd0:	10110000 	.word	0x10110000
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40011400 	.word	0x40011400
 8000dec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_GPIO_Init+0x304>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4909      	ldr	r1, [pc, #36]	; (8000e20 <HAL_GPIO_Init+0x304>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	3301      	adds	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f47f ae8e 	bne.w	8000b30 <HAL_GPIO_Init+0x14>
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	372c      	adds	r7, #44	; 0x2c
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40010400 	.word	0x40010400

08000e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
 8000e30:	4613      	mov	r3, r2
 8000e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e34:	787b      	ldrb	r3, [r7, #1]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e40:	e003      	b.n	8000e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	041a      	lsls	r2, r3, #16
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	611a      	str	r2, [r3, #16]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f806 	bl	8000e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e272      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8087 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4b8f      	ldr	r3, [pc, #572]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
 8000ed0:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d168      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e24c      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x76>
 8000f00:	4b80      	ldr	r3, [pc, #512]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e02e      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000f16:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7a      	ldr	r2, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b78      	ldr	r3, [pc, #480]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0xbc>
 8000f3a:	4b72      	ldr	r3, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a71      	ldr	r2, [pc, #452]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a67      	ldr	r2, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc96 	bl	80008a4 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fc92 	bl	80008a4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e200      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe4>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fc82 	bl	80008a4 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fc7e 	bl	80008a4 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1ec      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x10c>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1c0      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4939      	ldr	r1, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fc37 	bl	80008a4 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc33 	bl	80008a4 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1a1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc16 	bl	80008a4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fc12 	bl	80008a4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e180      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03a      	beq.n	800111c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fbf6 	bl	80008a4 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fbf2 	bl	80008a4 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e160      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 face 	bl	800167c <RCC_Delay>
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fbdc 	bl	80008a4 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fbd8 	bl	80008a4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d908      	bls.n	8001110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e146      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e9      	bne.n	80010f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a6 	beq.w	8001276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b8b      	ldr	r3, [pc, #556]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b85      	ldr	r3, [pc, #532]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b82      	ldr	r3, [pc, #520]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116e:	f7ff fb99 	bl	80008a4 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001176:	f7ff fb95 	bl	80008a4 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e103      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x312>
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e02d      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x334>
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a69      	ldr	r2, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a66      	ldr	r2, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x356>
 80011d4:	4b61      	ldr	r3, [pc, #388]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a60      	ldr	r2, [pc, #384]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	4b5e      	ldr	r3, [pc, #376]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a5d      	ldr	r2, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	4b58      	ldr	r3, [pc, #352]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a57      	ldr	r2, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb49 	bl	80008a4 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fb45 	bl	80008a4 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0b1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x37e>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb33 	bl	80008a4 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fb2f 	bl	80008a4 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e09b      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d061      	beq.n	8001350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d146      	bne.n	8001322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb03 	bl	80008a4 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff faff 	bl	80008a4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e06d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4921      	ldr	r1, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a19      	ldr	r1, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	430b      	orrs	r3, r1
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fad3 	bl	80008a4 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff facf 	bl	80008a4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e03d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x46a>
 8001320:	e035      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fabc 	bl	80008a4 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fab8 	bl	80008a4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e026      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x498>
 800134e:	e01e      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e019      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x500>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	429a      	cmp	r2, r3
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d0      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d910      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0207 	bic.w	r2, r3, #7
 80013c6:	4965      	ldr	r1, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800141a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d040      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d115      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e073      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f023 0203 	bic.w	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4936      	ldr	r1, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff fa0a 	bl	80008a4 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	e00a      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fa06 	bl	80008a4 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e053      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 020c 	and.w	r2, r3, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1eb      	bne.n	8001494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d210      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1cc>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f968 	bl	8000820 <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	080030fc 	.word	0x080030fc
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_GetSysClockFreq+0x94>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d002      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x30>
 800159a:	2b08      	cmp	r3, #8
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x36>
 800159e:	e027      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_RCC_GetSysClockFreq+0x98>)
 80015a2:	613b      	str	r3, [r7, #16]
      break;
 80015a4:	e027      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0x94>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	0c5b      	lsrs	r3, r3, #17
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	fb03 f202 	mul.w	r2, r3, r2
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e004      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	613b      	str	r3, [r7, #16]
      break;
 80015ee:	e002      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_GetSysClockFreq+0x98>)
 80015f2:	613b      	str	r3, [r7, #16]
      break;
 80015f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f6:	693b      	ldr	r3, [r7, #16]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	007a1200 	.word	0x007a1200
 800160c:	08003114 	.word	0x08003114
 8001610:	08003124 	.word	0x08003124
 8001614:	003d0900 	.word	0x003d0900

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_RCC_GetHCLKFreq+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000000 	.word	0x20000000

0800162c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001630:	f7ff fff2 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	4903      	ldr	r1, [pc, #12]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	0800310c 	.word	0x0800310c

08001654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001658:	f7ff ffde 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	0adb      	lsrs	r3, r3, #11
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	4903      	ldr	r1, [pc, #12]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	0800310c 	.word	0x0800310c

0800167c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <RCC_Delay+0x34>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <RCC_Delay+0x38>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0a5b      	lsrs	r3, r3, #9
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001698:	bf00      	nop
  }
  while (Delay --);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	60fa      	str	r2, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <RCC_Delay+0x1c>
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000000 	.word	0x20000000
 80016b4:	10624dd3 	.word	0x10624dd3

080016b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e041      	b.n	800174e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7fe ff0c 	bl	80004fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3304      	adds	r3, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f000 fa74 	bl	8001be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d001      	beq.n	8001770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e03a      	b.n	80017e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_TIM_Base_Start_IT+0x98>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00e      	beq.n	80017b0 <HAL_TIM_Base_Start_IT+0x58>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179a:	d009      	beq.n	80017b0 <HAL_TIM_Base_Start_IT+0x58>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d004      	beq.n	80017b0 <HAL_TIM_Base_Start_IT+0x58>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d111      	bne.n	80017d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d010      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d2:	e007      	b.n	80017e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40012c00 	.word	0x40012c00
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40000800 	.word	0x40000800

080017fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	d122      	bne.n	8001858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b02      	cmp	r3, #2
 800181e:	d11b      	bne.n	8001858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0202 	mvn.w	r2, #2
 8001828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f9b4 	bl	8001bac <HAL_TIM_IC_CaptureCallback>
 8001844:	e005      	b.n	8001852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f9a7 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f9b6 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b04      	cmp	r3, #4
 8001864:	d122      	bne.n	80018ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b04      	cmp	r3, #4
 8001872:	d11b      	bne.n	80018ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0204 	mvn.w	r2, #4
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f98a 	bl	8001bac <HAL_TIM_IC_CaptureCallback>
 8001898:	e005      	b.n	80018a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f97d 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f98c 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d122      	bne.n	8001900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d11b      	bne.n	8001900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0208 	mvn.w	r2, #8
 80018d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2204      	movs	r2, #4
 80018d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f960 	bl	8001bac <HAL_TIM_IC_CaptureCallback>
 80018ec:	e005      	b.n	80018fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f953 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f962 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b10      	cmp	r3, #16
 800190c:	d122      	bne.n	8001954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b10      	cmp	r3, #16
 800191a:	d11b      	bne.n	8001954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0210 	mvn.w	r2, #16
 8001924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2208      	movs	r2, #8
 800192a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f936 	bl	8001bac <HAL_TIM_IC_CaptureCallback>
 8001940:	e005      	b.n	800194e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f929 	bl	8001b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f938 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10e      	bne.n	8001980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0201 	mvn.w	r2, #1
 8001978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fbf8 	bl	8000170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	2b80      	cmp	r3, #128	; 0x80
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d107      	bne.n	80019ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fa7b 	bl	8001ea2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	2b40      	cmp	r3, #64	; 0x40
 80019b8:	d10e      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c4:	2b40      	cmp	r3, #64	; 0x40
 80019c6:	d107      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8fc 	bl	8001bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d10e      	bne.n	8001a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d107      	bne.n	8001a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f06f 0220 	mvn.w	r2, #32
 80019fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fa46 	bl	8001e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_TIM_ConfigClockSource+0x1c>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e0b4      	b.n	8001b92 <HAL_TIM_ConfigClockSource+0x186>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a60:	d03e      	beq.n	8001ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8001a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a66:	f200 8087 	bhi.w	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6e:	f000 8086 	beq.w	8001b7e <HAL_TIM_ConfigClockSource+0x172>
 8001a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a76:	d87f      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001a78:	2b70      	cmp	r3, #112	; 0x70
 8001a7a:	d01a      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8001a7c:	2b70      	cmp	r3, #112	; 0x70
 8001a7e:	d87b      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001a80:	2b60      	cmp	r3, #96	; 0x60
 8001a82:	d050      	beq.n	8001b26 <HAL_TIM_ConfigClockSource+0x11a>
 8001a84:	2b60      	cmp	r3, #96	; 0x60
 8001a86:	d877      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001a88:	2b50      	cmp	r3, #80	; 0x50
 8001a8a:	d03c      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0xfa>
 8001a8c:	2b50      	cmp	r3, #80	; 0x50
 8001a8e:	d873      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d058      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x13a>
 8001a94:	2b40      	cmp	r3, #64	; 0x40
 8001a96:	d86f      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001a98:	2b30      	cmp	r3, #48	; 0x30
 8001a9a:	d064      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x15a>
 8001a9c:	2b30      	cmp	r3, #48	; 0x30
 8001a9e:	d86b      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d060      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x15a>
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	d867      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05c      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x15a>
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d05a      	beq.n	8001b66 <HAL_TIM_ConfigClockSource+0x15a>
 8001ab0:	e062      	b.n	8001b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ac2:	f000 f968 	bl	8001d96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	609a      	str	r2, [r3, #8]
      break;
 8001ade:	e04f      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001af0:	f000 f951 	bl	8001d96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b02:	609a      	str	r2, [r3, #8]
      break;
 8001b04:	e03c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b12:	461a      	mov	r2, r3
 8001b14:	f000 f8c8 	bl	8001ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2150      	movs	r1, #80	; 0x50
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f91f 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 8001b24:	e02c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b32:	461a      	mov	r2, r3
 8001b34:	f000 f8e6 	bl	8001d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2160      	movs	r1, #96	; 0x60
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f90f 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 8001b44:	e01c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b52:	461a      	mov	r2, r3
 8001b54:	f000 f8a8 	bl	8001ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f8ff 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 8001b64:	e00c      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f000 f8f6 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 8001b76:	e003      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b7c:	e000      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
	...

08001be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <TIM_Base_SetConfig+0xb8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00b      	beq.n	8001c14 <TIM_Base_SetConfig+0x30>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d007      	beq.n	8001c14 <TIM_Base_SetConfig+0x30>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <TIM_Base_SetConfig+0xbc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d003      	beq.n	8001c14 <TIM_Base_SetConfig+0x30>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <TIM_Base_SetConfig+0xc0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d108      	bne.n	8001c26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <TIM_Base_SetConfig+0xb8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00b      	beq.n	8001c46 <TIM_Base_SetConfig+0x62>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d007      	beq.n	8001c46 <TIM_Base_SetConfig+0x62>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <TIM_Base_SetConfig+0xbc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d003      	beq.n	8001c46 <TIM_Base_SetConfig+0x62>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <TIM_Base_SetConfig+0xc0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d108      	bne.n	8001c58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <TIM_Base_SetConfig+0xb8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d103      	bne.n	8001c8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	615a      	str	r2, [r3, #20]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f023 0201 	bic.w	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f023 030a 	bic.w	r3, r3, #10
 8001ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	621a      	str	r2, [r3, #32]
}
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	f023 0210 	bic.w	r2, r3, #16
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	031b      	lsls	r3, r3, #12
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	621a      	str	r2, [r3, #32]
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f043 0307 	orr.w	r3, r3, #7
 8001d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b087      	sub	sp, #28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001db0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	021a      	lsls	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	609a      	str	r2, [r3, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e046      	b.n	8001e7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00e      	beq.n	8001e4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d009      	beq.n	8001e4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10c      	bne.n	8001e68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800

08001e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e042      	b.n	8001f4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fb3c 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f91d 	bl	8002138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d16d      	bne.n	8002050 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_UART_Transmit+0x2c>
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e066      	b.n	8002052 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2221      	movs	r2, #33	; 0x21
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f92:	f7fe fc87 	bl	80008a4 <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	88fa      	ldrh	r2, [r7, #6]
 8001f9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	88fa      	ldrh	r2, [r7, #6]
 8001fa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fac:	d108      	bne.n	8001fc0 <HAL_UART_Transmit+0x6c>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d104      	bne.n	8001fc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e003      	b.n	8001fc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fc8:	e02a      	b.n	8002020 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f840 	bl	800205a <UART_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e036      	b.n	8002052 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10b      	bne.n	8002002 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	e007      	b.n	8002012 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1cf      	bne.n	8001fca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	2140      	movs	r1, #64	; 0x40
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f810 	bl	800205a <UART_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e006      	b.n	8002052 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b090      	sub	sp, #64	; 0x40
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800206a:	e050      	b.n	800210e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d04c      	beq.n	800210e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <UART_WaitOnFlagUntilTimeout+0x30>
 800207a:	f7fe fc13 	bl	80008a4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002086:	429a      	cmp	r2, r3
 8002088:	d241      	bcs.n	800210e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	330c      	adds	r3, #12
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	330c      	adds	r3, #12
 80020a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020aa:	637a      	str	r2, [r7, #52]	; 0x34
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b2:	e841 2300 	strex	r3, r2, [r1]
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e5      	bne.n	800208a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3314      	adds	r3, #20
 80020c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	e853 3f00 	ldrex	r3, [r3]
 80020cc:	613b      	str	r3, [r7, #16]
   return(result);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3314      	adds	r3, #20
 80020dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020de:	623a      	str	r2, [r7, #32]
 80020e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e2:	69f9      	ldr	r1, [r7, #28]
 80020e4:	6a3a      	ldr	r2, [r7, #32]
 80020e6:	e841 2300 	strex	r3, r2, [r1]
 80020ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e5      	bne.n	80020be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e00f      	b.n	800212e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4013      	ands	r3, r2
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	429a      	cmp	r2, r3
 800212a:	d09f      	beq.n	800206c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3740      	adds	r7, #64	; 0x40
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002172:	f023 030c 	bic.w	r3, r3, #12
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	430b      	orrs	r3, r1
 800217e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2c      	ldr	r2, [pc, #176]	; (800224c <UART_SetConfig+0x114>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021a0:	f7ff fa58 	bl	8001654 <HAL_RCC_GetPCLK2Freq>
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	e002      	b.n	80021ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021a8:	f7ff fa40 	bl	800162c <HAL_RCC_GetPCLK1Freq>
 80021ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009a      	lsls	r2, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <UART_SetConfig+0x118>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	0119      	lsls	r1, r3, #4
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <UART_SetConfig+0x118>)
 80021e6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2064      	movs	r0, #100	; 0x64
 80021ee:	fb00 f303 	mul.w	r3, r0, r3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	3332      	adds	r3, #50	; 0x32
 80021f8:	4a15      	ldr	r2, [pc, #84]	; (8002250 <UART_SetConfig+0x118>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002204:	4419      	add	r1, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fbb2 f2f3 	udiv	r2, r2, r3
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <UART_SetConfig+0x118>)
 800221e:	fba3 0302 	umull	r0, r3, r3, r2
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2064      	movs	r0, #100	; 0x64
 8002226:	fb00 f303 	mul.w	r3, r0, r3
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	3332      	adds	r3, #50	; 0x32
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <UART_SetConfig+0x118>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	440a      	add	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40013800 	.word	0x40013800
 8002250:	51eb851f 	.word	0x51eb851f

08002254 <std>:
 8002254:	2300      	movs	r3, #0
 8002256:	b510      	push	{r4, lr}
 8002258:	4604      	mov	r4, r0
 800225a:	e9c0 3300 	strd	r3, r3, [r0]
 800225e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002262:	6083      	str	r3, [r0, #8]
 8002264:	8181      	strh	r1, [r0, #12]
 8002266:	6643      	str	r3, [r0, #100]	; 0x64
 8002268:	81c2      	strh	r2, [r0, #14]
 800226a:	6183      	str	r3, [r0, #24]
 800226c:	4619      	mov	r1, r3
 800226e:	2208      	movs	r2, #8
 8002270:	305c      	adds	r0, #92	; 0x5c
 8002272:	f000 f906 	bl	8002482 <memset>
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <std+0x58>)
 8002278:	6224      	str	r4, [r4, #32]
 800227a:	6263      	str	r3, [r4, #36]	; 0x24
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <std+0x5c>)
 800227e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <std+0x60>)
 8002282:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <std+0x64>)
 8002286:	6323      	str	r3, [r4, #48]	; 0x30
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <std+0x68>)
 800228a:	429c      	cmp	r4, r3
 800228c:	d006      	beq.n	800229c <std+0x48>
 800228e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002292:	4294      	cmp	r4, r2
 8002294:	d002      	beq.n	800229c <std+0x48>
 8002296:	33d0      	adds	r3, #208	; 0xd0
 8002298:	429c      	cmp	r4, r3
 800229a:	d105      	bne.n	80022a8 <std+0x54>
 800229c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a4:	f000 b966 	b.w	8002574 <__retarget_lock_init_recursive>
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	bf00      	nop
 80022ac:	080023fd 	.word	0x080023fd
 80022b0:	0800241f 	.word	0x0800241f
 80022b4:	08002457 	.word	0x08002457
 80022b8:	0800247b 	.word	0x0800247b
 80022bc:	20000120 	.word	0x20000120

080022c0 <stdio_exit_handler>:
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <stdio_exit_handler+0xc>)
 80022c2:	4903      	ldr	r1, [pc, #12]	; (80022d0 <stdio_exit_handler+0x10>)
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <stdio_exit_handler+0x14>)
 80022c6:	f000 b869 	b.w	800239c <_fwalk_sglue>
 80022ca:	bf00      	nop
 80022cc:	2000000c 	.word	0x2000000c
 80022d0:	08002e15 	.word	0x08002e15
 80022d4:	20000018 	.word	0x20000018

080022d8 <cleanup_stdio>:
 80022d8:	6841      	ldr	r1, [r0, #4]
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <cleanup_stdio+0x34>)
 80022dc:	b510      	push	{r4, lr}
 80022de:	4299      	cmp	r1, r3
 80022e0:	4604      	mov	r4, r0
 80022e2:	d001      	beq.n	80022e8 <cleanup_stdio+0x10>
 80022e4:	f000 fd96 	bl	8002e14 <_fflush_r>
 80022e8:	68a1      	ldr	r1, [r4, #8]
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <cleanup_stdio+0x38>)
 80022ec:	4299      	cmp	r1, r3
 80022ee:	d002      	beq.n	80022f6 <cleanup_stdio+0x1e>
 80022f0:	4620      	mov	r0, r4
 80022f2:	f000 fd8f 	bl	8002e14 <_fflush_r>
 80022f6:	68e1      	ldr	r1, [r4, #12]
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <cleanup_stdio+0x3c>)
 80022fa:	4299      	cmp	r1, r3
 80022fc:	d004      	beq.n	8002308 <cleanup_stdio+0x30>
 80022fe:	4620      	mov	r0, r4
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002304:	f000 bd86 	b.w	8002e14 <_fflush_r>
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	20000120 	.word	0x20000120
 8002310:	20000188 	.word	0x20000188
 8002314:	200001f0 	.word	0x200001f0

08002318 <global_stdio_init.part.0>:
 8002318:	b510      	push	{r4, lr}
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <global_stdio_init.part.0+0x30>)
 800231c:	4c0b      	ldr	r4, [pc, #44]	; (800234c <global_stdio_init.part.0+0x34>)
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <global_stdio_init.part.0+0x38>)
 8002320:	4620      	mov	r0, r4
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	2104      	movs	r1, #4
 8002326:	2200      	movs	r2, #0
 8002328:	f7ff ff94 	bl	8002254 <std>
 800232c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002330:	2201      	movs	r2, #1
 8002332:	2109      	movs	r1, #9
 8002334:	f7ff ff8e 	bl	8002254 <std>
 8002338:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800233c:	2202      	movs	r2, #2
 800233e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002342:	2112      	movs	r1, #18
 8002344:	f7ff bf86 	b.w	8002254 <std>
 8002348:	20000258 	.word	0x20000258
 800234c:	20000120 	.word	0x20000120
 8002350:	080022c1 	.word	0x080022c1

08002354 <__sfp_lock_acquire>:
 8002354:	4801      	ldr	r0, [pc, #4]	; (800235c <__sfp_lock_acquire+0x8>)
 8002356:	f000 b90e 	b.w	8002576 <__retarget_lock_acquire_recursive>
 800235a:	bf00      	nop
 800235c:	20000261 	.word	0x20000261

08002360 <__sfp_lock_release>:
 8002360:	4801      	ldr	r0, [pc, #4]	; (8002368 <__sfp_lock_release+0x8>)
 8002362:	f000 b909 	b.w	8002578 <__retarget_lock_release_recursive>
 8002366:	bf00      	nop
 8002368:	20000261 	.word	0x20000261

0800236c <__sinit>:
 800236c:	b510      	push	{r4, lr}
 800236e:	4604      	mov	r4, r0
 8002370:	f7ff fff0 	bl	8002354 <__sfp_lock_acquire>
 8002374:	6a23      	ldr	r3, [r4, #32]
 8002376:	b11b      	cbz	r3, 8002380 <__sinit+0x14>
 8002378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800237c:	f7ff bff0 	b.w	8002360 <__sfp_lock_release>
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__sinit+0x28>)
 8002382:	6223      	str	r3, [r4, #32]
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__sinit+0x2c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f5      	bne.n	8002378 <__sinit+0xc>
 800238c:	f7ff ffc4 	bl	8002318 <global_stdio_init.part.0>
 8002390:	e7f2      	b.n	8002378 <__sinit+0xc>
 8002392:	bf00      	nop
 8002394:	080022d9 	.word	0x080022d9
 8002398:	20000258 	.word	0x20000258

0800239c <_fwalk_sglue>:
 800239c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023a0:	4607      	mov	r7, r0
 80023a2:	4688      	mov	r8, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	2600      	movs	r6, #0
 80023a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023ac:	f1b9 0901 	subs.w	r9, r9, #1
 80023b0:	d505      	bpl.n	80023be <_fwalk_sglue+0x22>
 80023b2:	6824      	ldr	r4, [r4, #0]
 80023b4:	2c00      	cmp	r4, #0
 80023b6:	d1f7      	bne.n	80023a8 <_fwalk_sglue+0xc>
 80023b8:	4630      	mov	r0, r6
 80023ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023be:	89ab      	ldrh	r3, [r5, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d907      	bls.n	80023d4 <_fwalk_sglue+0x38>
 80023c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023c8:	3301      	adds	r3, #1
 80023ca:	d003      	beq.n	80023d4 <_fwalk_sglue+0x38>
 80023cc:	4629      	mov	r1, r5
 80023ce:	4638      	mov	r0, r7
 80023d0:	47c0      	blx	r8
 80023d2:	4306      	orrs	r6, r0
 80023d4:	3568      	adds	r5, #104	; 0x68
 80023d6:	e7e9      	b.n	80023ac <_fwalk_sglue+0x10>

080023d8 <iprintf>:
 80023d8:	b40f      	push	{r0, r1, r2, r3}
 80023da:	b507      	push	{r0, r1, r2, lr}
 80023dc:	4906      	ldr	r1, [pc, #24]	; (80023f8 <iprintf+0x20>)
 80023de:	ab04      	add	r3, sp, #16
 80023e0:	6808      	ldr	r0, [r1, #0]
 80023e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80023e6:	6881      	ldr	r1, [r0, #8]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	f000 f9e3 	bl	80027b4 <_vfiprintf_r>
 80023ee:	b003      	add	sp, #12
 80023f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80023f4:	b004      	add	sp, #16
 80023f6:	4770      	bx	lr
 80023f8:	20000064 	.word	0x20000064

080023fc <__sread>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	460c      	mov	r4, r1
 8002400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002404:	f000 f868 	bl	80024d8 <_read_r>
 8002408:	2800      	cmp	r0, #0
 800240a:	bfab      	itete	ge
 800240c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800240e:	89a3      	ldrhlt	r3, [r4, #12]
 8002410:	181b      	addge	r3, r3, r0
 8002412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002416:	bfac      	ite	ge
 8002418:	6563      	strge	r3, [r4, #84]	; 0x54
 800241a:	81a3      	strhlt	r3, [r4, #12]
 800241c:	bd10      	pop	{r4, pc}

0800241e <__swrite>:
 800241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002422:	461f      	mov	r7, r3
 8002424:	898b      	ldrh	r3, [r1, #12]
 8002426:	4605      	mov	r5, r0
 8002428:	05db      	lsls	r3, r3, #23
 800242a:	460c      	mov	r4, r1
 800242c:	4616      	mov	r6, r2
 800242e:	d505      	bpl.n	800243c <__swrite+0x1e>
 8002430:	2302      	movs	r3, #2
 8002432:	2200      	movs	r2, #0
 8002434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002438:	f000 f83c 	bl	80024b4 <_lseek_r>
 800243c:	89a3      	ldrh	r3, [r4, #12]
 800243e:	4632      	mov	r2, r6
 8002440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	4628      	mov	r0, r5
 8002448:	463b      	mov	r3, r7
 800244a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800244e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002452:	f000 b853 	b.w	80024fc <_write_r>

08002456 <__sseek>:
 8002456:	b510      	push	{r4, lr}
 8002458:	460c      	mov	r4, r1
 800245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245e:	f000 f829 	bl	80024b4 <_lseek_r>
 8002462:	1c43      	adds	r3, r0, #1
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	bf15      	itete	ne
 8002468:	6560      	strne	r0, [r4, #84]	; 0x54
 800246a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800246e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002472:	81a3      	strheq	r3, [r4, #12]
 8002474:	bf18      	it	ne
 8002476:	81a3      	strhne	r3, [r4, #12]
 8002478:	bd10      	pop	{r4, pc}

0800247a <__sclose>:
 800247a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247e:	f000 b809 	b.w	8002494 <_close_r>

08002482 <memset>:
 8002482:	4603      	mov	r3, r0
 8002484:	4402      	add	r2, r0
 8002486:	4293      	cmp	r3, r2
 8002488:	d100      	bne.n	800248c <memset+0xa>
 800248a:	4770      	bx	lr
 800248c:	f803 1b01 	strb.w	r1, [r3], #1
 8002490:	e7f9      	b.n	8002486 <memset+0x4>
	...

08002494 <_close_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	2300      	movs	r3, #0
 8002498:	4d05      	ldr	r5, [pc, #20]	; (80024b0 <_close_r+0x1c>)
 800249a:	4604      	mov	r4, r0
 800249c:	4608      	mov	r0, r1
 800249e:	602b      	str	r3, [r5, #0]
 80024a0:	f7fe f915 	bl	80006ce <_close>
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	d102      	bne.n	80024ae <_close_r+0x1a>
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	b103      	cbz	r3, 80024ae <_close_r+0x1a>
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
 80024b0:	2000025c 	.word	0x2000025c

080024b4 <_lseek_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	2200      	movs	r2, #0
 80024be:	4d05      	ldr	r5, [pc, #20]	; (80024d4 <_lseek_r+0x20>)
 80024c0:	602a      	str	r2, [r5, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f7fe f927 	bl	8000716 <_lseek>
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	d102      	bne.n	80024d2 <_lseek_r+0x1e>
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	b103      	cbz	r3, 80024d2 <_lseek_r+0x1e>
 80024d0:	6023      	str	r3, [r4, #0]
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	2000025c 	.word	0x2000025c

080024d8 <_read_r>:
 80024d8:	b538      	push	{r3, r4, r5, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	2200      	movs	r2, #0
 80024e2:	4d05      	ldr	r5, [pc, #20]	; (80024f8 <_read_r+0x20>)
 80024e4:	602a      	str	r2, [r5, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f7fe f8b8 	bl	800065c <_read>
 80024ec:	1c43      	adds	r3, r0, #1
 80024ee:	d102      	bne.n	80024f6 <_read_r+0x1e>
 80024f0:	682b      	ldr	r3, [r5, #0]
 80024f2:	b103      	cbz	r3, 80024f6 <_read_r+0x1e>
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	2000025c 	.word	0x2000025c

080024fc <_write_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	2200      	movs	r2, #0
 8002506:	4d05      	ldr	r5, [pc, #20]	; (800251c <_write_r+0x20>)
 8002508:	602a      	str	r2, [r5, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	f7fe f8c3 	bl	8000696 <_write>
 8002510:	1c43      	adds	r3, r0, #1
 8002512:	d102      	bne.n	800251a <_write_r+0x1e>
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	b103      	cbz	r3, 800251a <_write_r+0x1e>
 8002518:	6023      	str	r3, [r4, #0]
 800251a:	bd38      	pop	{r3, r4, r5, pc}
 800251c:	2000025c 	.word	0x2000025c

08002520 <__errno>:
 8002520:	4b01      	ldr	r3, [pc, #4]	; (8002528 <__errno+0x8>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000064 	.word	0x20000064

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	2600      	movs	r6, #0
 8002530:	4d0c      	ldr	r5, [pc, #48]	; (8002564 <__libc_init_array+0x38>)
 8002532:	4c0d      	ldr	r4, [pc, #52]	; (8002568 <__libc_init_array+0x3c>)
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	f000 fdca 	bl	80030d4 <_init>
 8002540:	2600      	movs	r6, #0
 8002542:	4d0a      	ldr	r5, [pc, #40]	; (800256c <__libc_init_array+0x40>)
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <__libc_init_array+0x44>)
 8002546:	1b64      	subs	r4, r4, r5
 8002548:	10a4      	asrs	r4, r4, #2
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	0800315c 	.word	0x0800315c
 8002568:	0800315c 	.word	0x0800315c
 800256c:	0800315c 	.word	0x0800315c
 8002570:	08003160 	.word	0x08003160

08002574 <__retarget_lock_init_recursive>:
 8002574:	4770      	bx	lr

08002576 <__retarget_lock_acquire_recursive>:
 8002576:	4770      	bx	lr

08002578 <__retarget_lock_release_recursive>:
 8002578:	4770      	bx	lr
	...

0800257c <_free_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4605      	mov	r5, r0
 8002580:	2900      	cmp	r1, #0
 8002582:	d040      	beq.n	8002606 <_free_r+0x8a>
 8002584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002588:	1f0c      	subs	r4, r1, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	bfb8      	it	lt
 800258e:	18e4      	addlt	r4, r4, r3
 8002590:	f000 f8dc 	bl	800274c <__malloc_lock>
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <_free_r+0x8c>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	b933      	cbnz	r3, 80025a8 <_free_r+0x2c>
 800259a:	6063      	str	r3, [r4, #4]
 800259c:	6014      	str	r4, [r2, #0]
 800259e:	4628      	mov	r0, r5
 80025a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025a4:	f000 b8d8 	b.w	8002758 <__malloc_unlock>
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	d908      	bls.n	80025be <_free_r+0x42>
 80025ac:	6820      	ldr	r0, [r4, #0]
 80025ae:	1821      	adds	r1, r4, r0
 80025b0:	428b      	cmp	r3, r1
 80025b2:	bf01      	itttt	eq
 80025b4:	6819      	ldreq	r1, [r3, #0]
 80025b6:	685b      	ldreq	r3, [r3, #4]
 80025b8:	1809      	addeq	r1, r1, r0
 80025ba:	6021      	streq	r1, [r4, #0]
 80025bc:	e7ed      	b.n	800259a <_free_r+0x1e>
 80025be:	461a      	mov	r2, r3
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	b10b      	cbz	r3, 80025c8 <_free_r+0x4c>
 80025c4:	42a3      	cmp	r3, r4
 80025c6:	d9fa      	bls.n	80025be <_free_r+0x42>
 80025c8:	6811      	ldr	r1, [r2, #0]
 80025ca:	1850      	adds	r0, r2, r1
 80025cc:	42a0      	cmp	r0, r4
 80025ce:	d10b      	bne.n	80025e8 <_free_r+0x6c>
 80025d0:	6820      	ldr	r0, [r4, #0]
 80025d2:	4401      	add	r1, r0
 80025d4:	1850      	adds	r0, r2, r1
 80025d6:	4283      	cmp	r3, r0
 80025d8:	6011      	str	r1, [r2, #0]
 80025da:	d1e0      	bne.n	800259e <_free_r+0x22>
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4408      	add	r0, r1
 80025e2:	6010      	str	r0, [r2, #0]
 80025e4:	6053      	str	r3, [r2, #4]
 80025e6:	e7da      	b.n	800259e <_free_r+0x22>
 80025e8:	d902      	bls.n	80025f0 <_free_r+0x74>
 80025ea:	230c      	movs	r3, #12
 80025ec:	602b      	str	r3, [r5, #0]
 80025ee:	e7d6      	b.n	800259e <_free_r+0x22>
 80025f0:	6820      	ldr	r0, [r4, #0]
 80025f2:	1821      	adds	r1, r4, r0
 80025f4:	428b      	cmp	r3, r1
 80025f6:	bf01      	itttt	eq
 80025f8:	6819      	ldreq	r1, [r3, #0]
 80025fa:	685b      	ldreq	r3, [r3, #4]
 80025fc:	1809      	addeq	r1, r1, r0
 80025fe:	6021      	streq	r1, [r4, #0]
 8002600:	6063      	str	r3, [r4, #4]
 8002602:	6054      	str	r4, [r2, #4]
 8002604:	e7cb      	b.n	800259e <_free_r+0x22>
 8002606:	bd38      	pop	{r3, r4, r5, pc}
 8002608:	20000264 	.word	0x20000264

0800260c <sbrk_aligned>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	4e0e      	ldr	r6, [pc, #56]	; (8002648 <sbrk_aligned+0x3c>)
 8002610:	460c      	mov	r4, r1
 8002612:	6831      	ldr	r1, [r6, #0]
 8002614:	4605      	mov	r5, r0
 8002616:	b911      	cbnz	r1, 800261e <sbrk_aligned+0x12>
 8002618:	f000 fcba 	bl	8002f90 <_sbrk_r>
 800261c:	6030      	str	r0, [r6, #0]
 800261e:	4621      	mov	r1, r4
 8002620:	4628      	mov	r0, r5
 8002622:	f000 fcb5 	bl	8002f90 <_sbrk_r>
 8002626:	1c43      	adds	r3, r0, #1
 8002628:	d00a      	beq.n	8002640 <sbrk_aligned+0x34>
 800262a:	1cc4      	adds	r4, r0, #3
 800262c:	f024 0403 	bic.w	r4, r4, #3
 8002630:	42a0      	cmp	r0, r4
 8002632:	d007      	beq.n	8002644 <sbrk_aligned+0x38>
 8002634:	1a21      	subs	r1, r4, r0
 8002636:	4628      	mov	r0, r5
 8002638:	f000 fcaa 	bl	8002f90 <_sbrk_r>
 800263c:	3001      	adds	r0, #1
 800263e:	d101      	bne.n	8002644 <sbrk_aligned+0x38>
 8002640:	f04f 34ff 	mov.w	r4, #4294967295
 8002644:	4620      	mov	r0, r4
 8002646:	bd70      	pop	{r4, r5, r6, pc}
 8002648:	20000268 	.word	0x20000268

0800264c <_malloc_r>:
 800264c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002650:	1ccd      	adds	r5, r1, #3
 8002652:	f025 0503 	bic.w	r5, r5, #3
 8002656:	3508      	adds	r5, #8
 8002658:	2d0c      	cmp	r5, #12
 800265a:	bf38      	it	cc
 800265c:	250c      	movcc	r5, #12
 800265e:	2d00      	cmp	r5, #0
 8002660:	4607      	mov	r7, r0
 8002662:	db01      	blt.n	8002668 <_malloc_r+0x1c>
 8002664:	42a9      	cmp	r1, r5
 8002666:	d905      	bls.n	8002674 <_malloc_r+0x28>
 8002668:	230c      	movs	r3, #12
 800266a:	2600      	movs	r6, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4630      	mov	r0, r6
 8002670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002674:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002748 <_malloc_r+0xfc>
 8002678:	f000 f868 	bl	800274c <__malloc_lock>
 800267c:	f8d8 3000 	ldr.w	r3, [r8]
 8002680:	461c      	mov	r4, r3
 8002682:	bb5c      	cbnz	r4, 80026dc <_malloc_r+0x90>
 8002684:	4629      	mov	r1, r5
 8002686:	4638      	mov	r0, r7
 8002688:	f7ff ffc0 	bl	800260c <sbrk_aligned>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	4604      	mov	r4, r0
 8002690:	d155      	bne.n	800273e <_malloc_r+0xf2>
 8002692:	f8d8 4000 	ldr.w	r4, [r8]
 8002696:	4626      	mov	r6, r4
 8002698:	2e00      	cmp	r6, #0
 800269a:	d145      	bne.n	8002728 <_malloc_r+0xdc>
 800269c:	2c00      	cmp	r4, #0
 800269e:	d048      	beq.n	8002732 <_malloc_r+0xe6>
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	4631      	mov	r1, r6
 80026a4:	4638      	mov	r0, r7
 80026a6:	eb04 0903 	add.w	r9, r4, r3
 80026aa:	f000 fc71 	bl	8002f90 <_sbrk_r>
 80026ae:	4581      	cmp	r9, r0
 80026b0:	d13f      	bne.n	8002732 <_malloc_r+0xe6>
 80026b2:	6821      	ldr	r1, [r4, #0]
 80026b4:	4638      	mov	r0, r7
 80026b6:	1a6d      	subs	r5, r5, r1
 80026b8:	4629      	mov	r1, r5
 80026ba:	f7ff ffa7 	bl	800260c <sbrk_aligned>
 80026be:	3001      	adds	r0, #1
 80026c0:	d037      	beq.n	8002732 <_malloc_r+0xe6>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	442b      	add	r3, r5
 80026c6:	6023      	str	r3, [r4, #0]
 80026c8:	f8d8 3000 	ldr.w	r3, [r8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d038      	beq.n	8002742 <_malloc_r+0xf6>
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	42a2      	cmp	r2, r4
 80026d4:	d12b      	bne.n	800272e <_malloc_r+0xe2>
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	e00f      	b.n	80026fc <_malloc_r+0xb0>
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	1b52      	subs	r2, r2, r5
 80026e0:	d41f      	bmi.n	8002722 <_malloc_r+0xd6>
 80026e2:	2a0b      	cmp	r2, #11
 80026e4:	d917      	bls.n	8002716 <_malloc_r+0xca>
 80026e6:	1961      	adds	r1, r4, r5
 80026e8:	42a3      	cmp	r3, r4
 80026ea:	6025      	str	r5, [r4, #0]
 80026ec:	bf18      	it	ne
 80026ee:	6059      	strne	r1, [r3, #4]
 80026f0:	6863      	ldr	r3, [r4, #4]
 80026f2:	bf08      	it	eq
 80026f4:	f8c8 1000 	streq.w	r1, [r8]
 80026f8:	5162      	str	r2, [r4, r5]
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	4638      	mov	r0, r7
 80026fe:	f104 060b 	add.w	r6, r4, #11
 8002702:	f000 f829 	bl	8002758 <__malloc_unlock>
 8002706:	f026 0607 	bic.w	r6, r6, #7
 800270a:	1d23      	adds	r3, r4, #4
 800270c:	1af2      	subs	r2, r6, r3
 800270e:	d0ae      	beq.n	800266e <_malloc_r+0x22>
 8002710:	1b9b      	subs	r3, r3, r6
 8002712:	50a3      	str	r3, [r4, r2]
 8002714:	e7ab      	b.n	800266e <_malloc_r+0x22>
 8002716:	42a3      	cmp	r3, r4
 8002718:	6862      	ldr	r2, [r4, #4]
 800271a:	d1dd      	bne.n	80026d8 <_malloc_r+0x8c>
 800271c:	f8c8 2000 	str.w	r2, [r8]
 8002720:	e7ec      	b.n	80026fc <_malloc_r+0xb0>
 8002722:	4623      	mov	r3, r4
 8002724:	6864      	ldr	r4, [r4, #4]
 8002726:	e7ac      	b.n	8002682 <_malloc_r+0x36>
 8002728:	4634      	mov	r4, r6
 800272a:	6876      	ldr	r6, [r6, #4]
 800272c:	e7b4      	b.n	8002698 <_malloc_r+0x4c>
 800272e:	4613      	mov	r3, r2
 8002730:	e7cc      	b.n	80026cc <_malloc_r+0x80>
 8002732:	230c      	movs	r3, #12
 8002734:	4638      	mov	r0, r7
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	f000 f80e 	bl	8002758 <__malloc_unlock>
 800273c:	e797      	b.n	800266e <_malloc_r+0x22>
 800273e:	6025      	str	r5, [r4, #0]
 8002740:	e7dc      	b.n	80026fc <_malloc_r+0xb0>
 8002742:	605b      	str	r3, [r3, #4]
 8002744:	deff      	udf	#255	; 0xff
 8002746:	bf00      	nop
 8002748:	20000264 	.word	0x20000264

0800274c <__malloc_lock>:
 800274c:	4801      	ldr	r0, [pc, #4]	; (8002754 <__malloc_lock+0x8>)
 800274e:	f7ff bf12 	b.w	8002576 <__retarget_lock_acquire_recursive>
 8002752:	bf00      	nop
 8002754:	20000260 	.word	0x20000260

08002758 <__malloc_unlock>:
 8002758:	4801      	ldr	r0, [pc, #4]	; (8002760 <__malloc_unlock+0x8>)
 800275a:	f7ff bf0d 	b.w	8002578 <__retarget_lock_release_recursive>
 800275e:	bf00      	nop
 8002760:	20000260 	.word	0x20000260

08002764 <__sfputc_r>:
 8002764:	6893      	ldr	r3, [r2, #8]
 8002766:	b410      	push	{r4}
 8002768:	3b01      	subs	r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	da07      	bge.n	8002780 <__sfputc_r+0x1c>
 8002770:	6994      	ldr	r4, [r2, #24]
 8002772:	42a3      	cmp	r3, r4
 8002774:	db01      	blt.n	800277a <__sfputc_r+0x16>
 8002776:	290a      	cmp	r1, #10
 8002778:	d102      	bne.n	8002780 <__sfputc_r+0x1c>
 800277a:	bc10      	pop	{r4}
 800277c:	f000 bb72 	b.w	8002e64 <__swbuf_r>
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	1c58      	adds	r0, r3, #1
 8002784:	6010      	str	r0, [r2, #0]
 8002786:	7019      	strb	r1, [r3, #0]
 8002788:	4608      	mov	r0, r1
 800278a:	bc10      	pop	{r4}
 800278c:	4770      	bx	lr

0800278e <__sfputs_r>:
 800278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002790:	4606      	mov	r6, r0
 8002792:	460f      	mov	r7, r1
 8002794:	4614      	mov	r4, r2
 8002796:	18d5      	adds	r5, r2, r3
 8002798:	42ac      	cmp	r4, r5
 800279a:	d101      	bne.n	80027a0 <__sfputs_r+0x12>
 800279c:	2000      	movs	r0, #0
 800279e:	e007      	b.n	80027b0 <__sfputs_r+0x22>
 80027a0:	463a      	mov	r2, r7
 80027a2:	4630      	mov	r0, r6
 80027a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027a8:	f7ff ffdc 	bl	8002764 <__sfputc_r>
 80027ac:	1c43      	adds	r3, r0, #1
 80027ae:	d1f3      	bne.n	8002798 <__sfputs_r+0xa>
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027b4 <_vfiprintf_r>:
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	460d      	mov	r5, r1
 80027ba:	4614      	mov	r4, r2
 80027bc:	4698      	mov	r8, r3
 80027be:	4606      	mov	r6, r0
 80027c0:	b09d      	sub	sp, #116	; 0x74
 80027c2:	b118      	cbz	r0, 80027cc <_vfiprintf_r+0x18>
 80027c4:	6a03      	ldr	r3, [r0, #32]
 80027c6:	b90b      	cbnz	r3, 80027cc <_vfiprintf_r+0x18>
 80027c8:	f7ff fdd0 	bl	800236c <__sinit>
 80027cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027ce:	07d9      	lsls	r1, r3, #31
 80027d0:	d405      	bmi.n	80027de <_vfiprintf_r+0x2a>
 80027d2:	89ab      	ldrh	r3, [r5, #12]
 80027d4:	059a      	lsls	r2, r3, #22
 80027d6:	d402      	bmi.n	80027de <_vfiprintf_r+0x2a>
 80027d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027da:	f7ff fecc 	bl	8002576 <__retarget_lock_acquire_recursive>
 80027de:	89ab      	ldrh	r3, [r5, #12]
 80027e0:	071b      	lsls	r3, r3, #28
 80027e2:	d501      	bpl.n	80027e8 <_vfiprintf_r+0x34>
 80027e4:	692b      	ldr	r3, [r5, #16]
 80027e6:	b99b      	cbnz	r3, 8002810 <_vfiprintf_r+0x5c>
 80027e8:	4629      	mov	r1, r5
 80027ea:	4630      	mov	r0, r6
 80027ec:	f000 fb78 	bl	8002ee0 <__swsetup_r>
 80027f0:	b170      	cbz	r0, 8002810 <_vfiprintf_r+0x5c>
 80027f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f4:	07dc      	lsls	r4, r3, #31
 80027f6:	d504      	bpl.n	8002802 <_vfiprintf_r+0x4e>
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	b01d      	add	sp, #116	; 0x74
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002802:	89ab      	ldrh	r3, [r5, #12]
 8002804:	0598      	lsls	r0, r3, #22
 8002806:	d4f7      	bmi.n	80027f8 <_vfiprintf_r+0x44>
 8002808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800280a:	f7ff feb5 	bl	8002578 <__retarget_lock_release_recursive>
 800280e:	e7f3      	b.n	80027f8 <_vfiprintf_r+0x44>
 8002810:	2300      	movs	r3, #0
 8002812:	9309      	str	r3, [sp, #36]	; 0x24
 8002814:	2320      	movs	r3, #32
 8002816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800281a:	2330      	movs	r3, #48	; 0x30
 800281c:	f04f 0901 	mov.w	r9, #1
 8002820:	f8cd 800c 	str.w	r8, [sp, #12]
 8002824:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80029d4 <_vfiprintf_r+0x220>
 8002828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800282c:	4623      	mov	r3, r4
 800282e:	469a      	mov	sl, r3
 8002830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002834:	b10a      	cbz	r2, 800283a <_vfiprintf_r+0x86>
 8002836:	2a25      	cmp	r2, #37	; 0x25
 8002838:	d1f9      	bne.n	800282e <_vfiprintf_r+0x7a>
 800283a:	ebba 0b04 	subs.w	fp, sl, r4
 800283e:	d00b      	beq.n	8002858 <_vfiprintf_r+0xa4>
 8002840:	465b      	mov	r3, fp
 8002842:	4622      	mov	r2, r4
 8002844:	4629      	mov	r1, r5
 8002846:	4630      	mov	r0, r6
 8002848:	f7ff ffa1 	bl	800278e <__sfputs_r>
 800284c:	3001      	adds	r0, #1
 800284e:	f000 80a9 	beq.w	80029a4 <_vfiprintf_r+0x1f0>
 8002852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002854:	445a      	add	r2, fp
 8002856:	9209      	str	r2, [sp, #36]	; 0x24
 8002858:	f89a 3000 	ldrb.w	r3, [sl]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a1 	beq.w	80029a4 <_vfiprintf_r+0x1f0>
 8002862:	2300      	movs	r3, #0
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800286c:	f10a 0a01 	add.w	sl, sl, #1
 8002870:	9304      	str	r3, [sp, #16]
 8002872:	9307      	str	r3, [sp, #28]
 8002874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002878:	931a      	str	r3, [sp, #104]	; 0x68
 800287a:	4654      	mov	r4, sl
 800287c:	2205      	movs	r2, #5
 800287e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002882:	4854      	ldr	r0, [pc, #336]	; (80029d4 <_vfiprintf_r+0x220>)
 8002884:	f000 fb94 	bl	8002fb0 <memchr>
 8002888:	9a04      	ldr	r2, [sp, #16]
 800288a:	b9d8      	cbnz	r0, 80028c4 <_vfiprintf_r+0x110>
 800288c:	06d1      	lsls	r1, r2, #27
 800288e:	bf44      	itt	mi
 8002890:	2320      	movmi	r3, #32
 8002892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002896:	0713      	lsls	r3, r2, #28
 8002898:	bf44      	itt	mi
 800289a:	232b      	movmi	r3, #43	; 0x2b
 800289c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028a0:	f89a 3000 	ldrb.w	r3, [sl]
 80028a4:	2b2a      	cmp	r3, #42	; 0x2a
 80028a6:	d015      	beq.n	80028d4 <_vfiprintf_r+0x120>
 80028a8:	4654      	mov	r4, sl
 80028aa:	2000      	movs	r0, #0
 80028ac:	f04f 0c0a 	mov.w	ip, #10
 80028b0:	9a07      	ldr	r2, [sp, #28]
 80028b2:	4621      	mov	r1, r4
 80028b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b8:	3b30      	subs	r3, #48	; 0x30
 80028ba:	2b09      	cmp	r3, #9
 80028bc:	d94d      	bls.n	800295a <_vfiprintf_r+0x1a6>
 80028be:	b1b0      	cbz	r0, 80028ee <_vfiprintf_r+0x13a>
 80028c0:	9207      	str	r2, [sp, #28]
 80028c2:	e014      	b.n	80028ee <_vfiprintf_r+0x13a>
 80028c4:	eba0 0308 	sub.w	r3, r0, r8
 80028c8:	fa09 f303 	lsl.w	r3, r9, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	46a2      	mov	sl, r4
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	e7d2      	b.n	800287a <_vfiprintf_r+0xc6>
 80028d4:	9b03      	ldr	r3, [sp, #12]
 80028d6:	1d19      	adds	r1, r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	9103      	str	r1, [sp, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bfbb      	ittet	lt
 80028e0:	425b      	neglt	r3, r3
 80028e2:	f042 0202 	orrlt.w	r2, r2, #2
 80028e6:	9307      	strge	r3, [sp, #28]
 80028e8:	9307      	strlt	r3, [sp, #28]
 80028ea:	bfb8      	it	lt
 80028ec:	9204      	strlt	r2, [sp, #16]
 80028ee:	7823      	ldrb	r3, [r4, #0]
 80028f0:	2b2e      	cmp	r3, #46	; 0x2e
 80028f2:	d10c      	bne.n	800290e <_vfiprintf_r+0x15a>
 80028f4:	7863      	ldrb	r3, [r4, #1]
 80028f6:	2b2a      	cmp	r3, #42	; 0x2a
 80028f8:	d134      	bne.n	8002964 <_vfiprintf_r+0x1b0>
 80028fa:	9b03      	ldr	r3, [sp, #12]
 80028fc:	3402      	adds	r4, #2
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	9203      	str	r2, [sp, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	bfb8      	it	lt
 8002908:	f04f 33ff 	movlt.w	r3, #4294967295
 800290c:	9305      	str	r3, [sp, #20]
 800290e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029d8 <_vfiprintf_r+0x224>
 8002912:	2203      	movs	r2, #3
 8002914:	4650      	mov	r0, sl
 8002916:	7821      	ldrb	r1, [r4, #0]
 8002918:	f000 fb4a 	bl	8002fb0 <memchr>
 800291c:	b138      	cbz	r0, 800292e <_vfiprintf_r+0x17a>
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	9b04      	ldr	r3, [sp, #16]
 8002922:	eba0 000a 	sub.w	r0, r0, sl
 8002926:	4082      	lsls	r2, r0
 8002928:	4313      	orrs	r3, r2
 800292a:	3401      	adds	r4, #1
 800292c:	9304      	str	r3, [sp, #16]
 800292e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002932:	2206      	movs	r2, #6
 8002934:	4829      	ldr	r0, [pc, #164]	; (80029dc <_vfiprintf_r+0x228>)
 8002936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800293a:	f000 fb39 	bl	8002fb0 <memchr>
 800293e:	2800      	cmp	r0, #0
 8002940:	d03f      	beq.n	80029c2 <_vfiprintf_r+0x20e>
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <_vfiprintf_r+0x22c>)
 8002944:	bb1b      	cbnz	r3, 800298e <_vfiprintf_r+0x1da>
 8002946:	9b03      	ldr	r3, [sp, #12]
 8002948:	3307      	adds	r3, #7
 800294a:	f023 0307 	bic.w	r3, r3, #7
 800294e:	3308      	adds	r3, #8
 8002950:	9303      	str	r3, [sp, #12]
 8002952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002954:	443b      	add	r3, r7
 8002956:	9309      	str	r3, [sp, #36]	; 0x24
 8002958:	e768      	b.n	800282c <_vfiprintf_r+0x78>
 800295a:	460c      	mov	r4, r1
 800295c:	2001      	movs	r0, #1
 800295e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002962:	e7a6      	b.n	80028b2 <_vfiprintf_r+0xfe>
 8002964:	2300      	movs	r3, #0
 8002966:	f04f 0c0a 	mov.w	ip, #10
 800296a:	4619      	mov	r1, r3
 800296c:	3401      	adds	r4, #1
 800296e:	9305      	str	r3, [sp, #20]
 8002970:	4620      	mov	r0, r4
 8002972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002976:	3a30      	subs	r2, #48	; 0x30
 8002978:	2a09      	cmp	r2, #9
 800297a:	d903      	bls.n	8002984 <_vfiprintf_r+0x1d0>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0c6      	beq.n	800290e <_vfiprintf_r+0x15a>
 8002980:	9105      	str	r1, [sp, #20]
 8002982:	e7c4      	b.n	800290e <_vfiprintf_r+0x15a>
 8002984:	4604      	mov	r4, r0
 8002986:	2301      	movs	r3, #1
 8002988:	fb0c 2101 	mla	r1, ip, r1, r2
 800298c:	e7f0      	b.n	8002970 <_vfiprintf_r+0x1bc>
 800298e:	ab03      	add	r3, sp, #12
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	462a      	mov	r2, r5
 8002994:	4630      	mov	r0, r6
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <_vfiprintf_r+0x230>)
 8002998:	a904      	add	r1, sp, #16
 800299a:	f3af 8000 	nop.w
 800299e:	4607      	mov	r7, r0
 80029a0:	1c78      	adds	r0, r7, #1
 80029a2:	d1d6      	bne.n	8002952 <_vfiprintf_r+0x19e>
 80029a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029a6:	07d9      	lsls	r1, r3, #31
 80029a8:	d405      	bmi.n	80029b6 <_vfiprintf_r+0x202>
 80029aa:	89ab      	ldrh	r3, [r5, #12]
 80029ac:	059a      	lsls	r2, r3, #22
 80029ae:	d402      	bmi.n	80029b6 <_vfiprintf_r+0x202>
 80029b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029b2:	f7ff fde1 	bl	8002578 <__retarget_lock_release_recursive>
 80029b6:	89ab      	ldrh	r3, [r5, #12]
 80029b8:	065b      	lsls	r3, r3, #25
 80029ba:	f53f af1d 	bmi.w	80027f8 <_vfiprintf_r+0x44>
 80029be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029c0:	e71c      	b.n	80027fc <_vfiprintf_r+0x48>
 80029c2:	ab03      	add	r3, sp, #12
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	462a      	mov	r2, r5
 80029c8:	4630      	mov	r0, r6
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_vfiprintf_r+0x230>)
 80029cc:	a904      	add	r1, sp, #16
 80029ce:	f000 f87d 	bl	8002acc <_printf_i>
 80029d2:	e7e4      	b.n	800299e <_vfiprintf_r+0x1ea>
 80029d4:	08003126 	.word	0x08003126
 80029d8:	0800312c 	.word	0x0800312c
 80029dc:	08003130 	.word	0x08003130
 80029e0:	00000000 	.word	0x00000000
 80029e4:	0800278f 	.word	0x0800278f

080029e8 <_printf_common>:
 80029e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ec:	4616      	mov	r6, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	688a      	ldr	r2, [r1, #8]
 80029f2:	690b      	ldr	r3, [r1, #16]
 80029f4:	4607      	mov	r7, r0
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bfb8      	it	lt
 80029fa:	4613      	movlt	r3, r2
 80029fc:	6033      	str	r3, [r6, #0]
 80029fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a02:	460c      	mov	r4, r1
 8002a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a08:	b10a      	cbz	r2, 8002a0e <_printf_common+0x26>
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	6033      	str	r3, [r6, #0]
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	0699      	lsls	r1, r3, #26
 8002a12:	bf42      	ittt	mi
 8002a14:	6833      	ldrmi	r3, [r6, #0]
 8002a16:	3302      	addmi	r3, #2
 8002a18:	6033      	strmi	r3, [r6, #0]
 8002a1a:	6825      	ldr	r5, [r4, #0]
 8002a1c:	f015 0506 	ands.w	r5, r5, #6
 8002a20:	d106      	bne.n	8002a30 <_printf_common+0x48>
 8002a22:	f104 0a19 	add.w	sl, r4, #25
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	6832      	ldr	r2, [r6, #0]
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	dc2b      	bgt.n	8002a88 <_printf_common+0xa0>
 8002a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a34:	1e13      	subs	r3, r2, #0
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	bf18      	it	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	0692      	lsls	r2, r2, #26
 8002a3e:	d430      	bmi.n	8002aa2 <_printf_common+0xba>
 8002a40:	4649      	mov	r1, r9
 8002a42:	4638      	mov	r0, r7
 8002a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a48:	47c0      	blx	r8
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	d023      	beq.n	8002a96 <_printf_common+0xae>
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	6922      	ldr	r2, [r4, #16]
 8002a52:	f003 0306 	and.w	r3, r3, #6
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf14      	ite	ne
 8002a5a:	2500      	movne	r5, #0
 8002a5c:	6833      	ldreq	r3, [r6, #0]
 8002a5e:	f04f 0600 	mov.w	r6, #0
 8002a62:	bf08      	it	eq
 8002a64:	68e5      	ldreq	r5, [r4, #12]
 8002a66:	f104 041a 	add.w	r4, r4, #26
 8002a6a:	bf08      	it	eq
 8002a6c:	1aed      	subeq	r5, r5, r3
 8002a6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a72:	bf08      	it	eq
 8002a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	bfc4      	itt	gt
 8002a7c:	1a9b      	subgt	r3, r3, r2
 8002a7e:	18ed      	addgt	r5, r5, r3
 8002a80:	42b5      	cmp	r5, r6
 8002a82:	d11a      	bne.n	8002aba <_printf_common+0xd2>
 8002a84:	2000      	movs	r0, #0
 8002a86:	e008      	b.n	8002a9a <_printf_common+0xb2>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	4652      	mov	r2, sl
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	4638      	mov	r0, r7
 8002a90:	47c0      	blx	r8
 8002a92:	3001      	adds	r0, #1
 8002a94:	d103      	bne.n	8002a9e <_printf_common+0xb6>
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9e:	3501      	adds	r5, #1
 8002aa0:	e7c1      	b.n	8002a26 <_printf_common+0x3e>
 8002aa2:	2030      	movs	r0, #48	; 0x30
 8002aa4:	18e1      	adds	r1, r4, r3
 8002aa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ab0:	4422      	add	r2, r4
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ab8:	e7c2      	b.n	8002a40 <_printf_common+0x58>
 8002aba:	2301      	movs	r3, #1
 8002abc:	4622      	mov	r2, r4
 8002abe:	4649      	mov	r1, r9
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	47c0      	blx	r8
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	d0e6      	beq.n	8002a96 <_printf_common+0xae>
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7d9      	b.n	8002a80 <_printf_common+0x98>

08002acc <_printf_i>:
 8002acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad0:	7e0f      	ldrb	r7, [r1, #24]
 8002ad2:	4691      	mov	r9, r2
 8002ad4:	2f78      	cmp	r7, #120	; 0x78
 8002ad6:	4680      	mov	r8, r0
 8002ad8:	460c      	mov	r4, r1
 8002ada:	469a      	mov	sl, r3
 8002adc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ae2:	d807      	bhi.n	8002af4 <_printf_i+0x28>
 8002ae4:	2f62      	cmp	r7, #98	; 0x62
 8002ae6:	d80a      	bhi.n	8002afe <_printf_i+0x32>
 8002ae8:	2f00      	cmp	r7, #0
 8002aea:	f000 80d5 	beq.w	8002c98 <_printf_i+0x1cc>
 8002aee:	2f58      	cmp	r7, #88	; 0x58
 8002af0:	f000 80c1 	beq.w	8002c76 <_printf_i+0x1aa>
 8002af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002afc:	e03a      	b.n	8002b74 <_printf_i+0xa8>
 8002afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b02:	2b15      	cmp	r3, #21
 8002b04:	d8f6      	bhi.n	8002af4 <_printf_i+0x28>
 8002b06:	a101      	add	r1, pc, #4	; (adr r1, 8002b0c <_printf_i+0x40>)
 8002b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b0c:	08002b65 	.word	0x08002b65
 8002b10:	08002b79 	.word	0x08002b79
 8002b14:	08002af5 	.word	0x08002af5
 8002b18:	08002af5 	.word	0x08002af5
 8002b1c:	08002af5 	.word	0x08002af5
 8002b20:	08002af5 	.word	0x08002af5
 8002b24:	08002b79 	.word	0x08002b79
 8002b28:	08002af5 	.word	0x08002af5
 8002b2c:	08002af5 	.word	0x08002af5
 8002b30:	08002af5 	.word	0x08002af5
 8002b34:	08002af5 	.word	0x08002af5
 8002b38:	08002c7f 	.word	0x08002c7f
 8002b3c:	08002ba5 	.word	0x08002ba5
 8002b40:	08002c39 	.word	0x08002c39
 8002b44:	08002af5 	.word	0x08002af5
 8002b48:	08002af5 	.word	0x08002af5
 8002b4c:	08002ca1 	.word	0x08002ca1
 8002b50:	08002af5 	.word	0x08002af5
 8002b54:	08002ba5 	.word	0x08002ba5
 8002b58:	08002af5 	.word	0x08002af5
 8002b5c:	08002af5 	.word	0x08002af5
 8002b60:	08002c41 	.word	0x08002c41
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	1d1a      	adds	r2, r3, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	602a      	str	r2, [r5, #0]
 8002b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0a0      	b.n	8002cba <_printf_i+0x1ee>
 8002b78:	6820      	ldr	r0, [r4, #0]
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	0607      	lsls	r7, r0, #24
 8002b7e:	f103 0104 	add.w	r1, r3, #4
 8002b82:	6029      	str	r1, [r5, #0]
 8002b84:	d501      	bpl.n	8002b8a <_printf_i+0xbe>
 8002b86:	681e      	ldr	r6, [r3, #0]
 8002b88:	e003      	b.n	8002b92 <_printf_i+0xc6>
 8002b8a:	0646      	lsls	r6, r0, #25
 8002b8c:	d5fb      	bpl.n	8002b86 <_printf_i+0xba>
 8002b8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	da03      	bge.n	8002b9e <_printf_i+0xd2>
 8002b96:	232d      	movs	r3, #45	; 0x2d
 8002b98:	4276      	negs	r6, r6
 8002b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	4859      	ldr	r0, [pc, #356]	; (8002d08 <_printf_i+0x23c>)
 8002ba2:	e012      	b.n	8002bca <_printf_i+0xfe>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	1d19      	adds	r1, r3, #4
 8002baa:	6029      	str	r1, [r5, #0]
 8002bac:	0605      	lsls	r5, r0, #24
 8002bae:	d501      	bpl.n	8002bb4 <_printf_i+0xe8>
 8002bb0:	681e      	ldr	r6, [r3, #0]
 8002bb2:	e002      	b.n	8002bba <_printf_i+0xee>
 8002bb4:	0641      	lsls	r1, r0, #25
 8002bb6:	d5fb      	bpl.n	8002bb0 <_printf_i+0xe4>
 8002bb8:	881e      	ldrh	r6, [r3, #0]
 8002bba:	2f6f      	cmp	r7, #111	; 0x6f
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2308      	moveq	r3, #8
 8002bc0:	230a      	movne	r3, #10
 8002bc2:	4851      	ldr	r0, [pc, #324]	; (8002d08 <_printf_i+0x23c>)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bca:	6865      	ldr	r5, [r4, #4]
 8002bcc:	2d00      	cmp	r5, #0
 8002bce:	bfa8      	it	ge
 8002bd0:	6821      	ldrge	r1, [r4, #0]
 8002bd2:	60a5      	str	r5, [r4, #8]
 8002bd4:	bfa4      	itt	ge
 8002bd6:	f021 0104 	bicge.w	r1, r1, #4
 8002bda:	6021      	strge	r1, [r4, #0]
 8002bdc:	b90e      	cbnz	r6, 8002be2 <_printf_i+0x116>
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d04b      	beq.n	8002c7a <_printf_i+0x1ae>
 8002be2:	4615      	mov	r5, r2
 8002be4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002be8:	fb03 6711 	mls	r7, r3, r1, r6
 8002bec:	5dc7      	ldrb	r7, [r0, r7]
 8002bee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bf2:	4637      	mov	r7, r6
 8002bf4:	42bb      	cmp	r3, r7
 8002bf6:	460e      	mov	r6, r1
 8002bf8:	d9f4      	bls.n	8002be4 <_printf_i+0x118>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d10b      	bne.n	8002c16 <_printf_i+0x14a>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	07de      	lsls	r6, r3, #31
 8002c02:	d508      	bpl.n	8002c16 <_printf_i+0x14a>
 8002c04:	6923      	ldr	r3, [r4, #16]
 8002c06:	6861      	ldr	r1, [r4, #4]
 8002c08:	4299      	cmp	r1, r3
 8002c0a:	bfde      	ittt	le
 8002c0c:	2330      	movle	r3, #48	; 0x30
 8002c0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c16:	1b52      	subs	r2, r2, r5
 8002c18:	6122      	str	r2, [r4, #16]
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	4640      	mov	r0, r8
 8002c20:	f8cd a000 	str.w	sl, [sp]
 8002c24:	aa03      	add	r2, sp, #12
 8002c26:	f7ff fedf 	bl	80029e8 <_printf_common>
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d14a      	bne.n	8002cc4 <_printf_i+0x1f8>
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	b004      	add	sp, #16
 8002c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	6023      	str	r3, [r4, #0]
 8002c40:	2778      	movs	r7, #120	; 0x78
 8002c42:	4832      	ldr	r0, [pc, #200]	; (8002d0c <_printf_i+0x240>)
 8002c44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	6829      	ldr	r1, [r5, #0]
 8002c4c:	061f      	lsls	r7, r3, #24
 8002c4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c52:	d402      	bmi.n	8002c5a <_printf_i+0x18e>
 8002c54:	065f      	lsls	r7, r3, #25
 8002c56:	bf48      	it	mi
 8002c58:	b2b6      	uxthmi	r6, r6
 8002c5a:	07df      	lsls	r7, r3, #31
 8002c5c:	bf48      	it	mi
 8002c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c62:	6029      	str	r1, [r5, #0]
 8002c64:	bf48      	it	mi
 8002c66:	6023      	strmi	r3, [r4, #0]
 8002c68:	b91e      	cbnz	r6, 8002c72 <_printf_i+0x1a6>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	f023 0320 	bic.w	r3, r3, #32
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	2310      	movs	r3, #16
 8002c74:	e7a6      	b.n	8002bc4 <_printf_i+0xf8>
 8002c76:	4824      	ldr	r0, [pc, #144]	; (8002d08 <_printf_i+0x23c>)
 8002c78:	e7e4      	b.n	8002c44 <_printf_i+0x178>
 8002c7a:	4615      	mov	r5, r2
 8002c7c:	e7bd      	b.n	8002bfa <_printf_i+0x12e>
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	6826      	ldr	r6, [r4, #0]
 8002c82:	1d18      	adds	r0, r3, #4
 8002c84:	6961      	ldr	r1, [r4, #20]
 8002c86:	6028      	str	r0, [r5, #0]
 8002c88:	0635      	lsls	r5, r6, #24
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	d501      	bpl.n	8002c92 <_printf_i+0x1c6>
 8002c8e:	6019      	str	r1, [r3, #0]
 8002c90:	e002      	b.n	8002c98 <_printf_i+0x1cc>
 8002c92:	0670      	lsls	r0, r6, #25
 8002c94:	d5fb      	bpl.n	8002c8e <_printf_i+0x1c2>
 8002c96:	8019      	strh	r1, [r3, #0]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	4615      	mov	r5, r2
 8002c9c:	6123      	str	r3, [r4, #16]
 8002c9e:	e7bc      	b.n	8002c1a <_printf_i+0x14e>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	1d1a      	adds	r2, r3, #4
 8002ca6:	602a      	str	r2, [r5, #0]
 8002ca8:	681d      	ldr	r5, [r3, #0]
 8002caa:	6862      	ldr	r2, [r4, #4]
 8002cac:	4628      	mov	r0, r5
 8002cae:	f000 f97f 	bl	8002fb0 <memchr>
 8002cb2:	b108      	cbz	r0, 8002cb8 <_printf_i+0x1ec>
 8002cb4:	1b40      	subs	r0, r0, r5
 8002cb6:	6060      	str	r0, [r4, #4]
 8002cb8:	6863      	ldr	r3, [r4, #4]
 8002cba:	6123      	str	r3, [r4, #16]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc2:	e7aa      	b.n	8002c1a <_printf_i+0x14e>
 8002cc4:	462a      	mov	r2, r5
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	4640      	mov	r0, r8
 8002cca:	6923      	ldr	r3, [r4, #16]
 8002ccc:	47d0      	blx	sl
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d0ad      	beq.n	8002c2e <_printf_i+0x162>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	079b      	lsls	r3, r3, #30
 8002cd6:	d413      	bmi.n	8002d00 <_printf_i+0x234>
 8002cd8:	68e0      	ldr	r0, [r4, #12]
 8002cda:	9b03      	ldr	r3, [sp, #12]
 8002cdc:	4298      	cmp	r0, r3
 8002cde:	bfb8      	it	lt
 8002ce0:	4618      	movlt	r0, r3
 8002ce2:	e7a6      	b.n	8002c32 <_printf_i+0x166>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	4649      	mov	r1, r9
 8002cea:	4640      	mov	r0, r8
 8002cec:	47d0      	blx	sl
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d09d      	beq.n	8002c2e <_printf_i+0x162>
 8002cf2:	3501      	adds	r5, #1
 8002cf4:	68e3      	ldr	r3, [r4, #12]
 8002cf6:	9903      	ldr	r1, [sp, #12]
 8002cf8:	1a5b      	subs	r3, r3, r1
 8002cfa:	42ab      	cmp	r3, r5
 8002cfc:	dcf2      	bgt.n	8002ce4 <_printf_i+0x218>
 8002cfe:	e7eb      	b.n	8002cd8 <_printf_i+0x20c>
 8002d00:	2500      	movs	r5, #0
 8002d02:	f104 0619 	add.w	r6, r4, #25
 8002d06:	e7f5      	b.n	8002cf4 <_printf_i+0x228>
 8002d08:	08003137 	.word	0x08003137
 8002d0c:	08003148 	.word	0x08003148

08002d10 <__sflush_r>:
 8002d10:	898a      	ldrh	r2, [r1, #12]
 8002d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d14:	4605      	mov	r5, r0
 8002d16:	0710      	lsls	r0, r2, #28
 8002d18:	460c      	mov	r4, r1
 8002d1a:	d457      	bmi.n	8002dcc <__sflush_r+0xbc>
 8002d1c:	684b      	ldr	r3, [r1, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dc04      	bgt.n	8002d2c <__sflush_r+0x1c>
 8002d22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dc01      	bgt.n	8002d2c <__sflush_r+0x1c>
 8002d28:	2000      	movs	r0, #0
 8002d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d2e:	2e00      	cmp	r6, #0
 8002d30:	d0fa      	beq.n	8002d28 <__sflush_r+0x18>
 8002d32:	2300      	movs	r3, #0
 8002d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d38:	682f      	ldr	r7, [r5, #0]
 8002d3a:	6a21      	ldr	r1, [r4, #32]
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	d032      	beq.n	8002da6 <__sflush_r+0x96>
 8002d40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d42:	89a3      	ldrh	r3, [r4, #12]
 8002d44:	075a      	lsls	r2, r3, #29
 8002d46:	d505      	bpl.n	8002d54 <__sflush_r+0x44>
 8002d48:	6863      	ldr	r3, [r4, #4]
 8002d4a:	1ac0      	subs	r0, r0, r3
 8002d4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d4e:	b10b      	cbz	r3, 8002d54 <__sflush_r+0x44>
 8002d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d52:	1ac0      	subs	r0, r0, r3
 8002d54:	2300      	movs	r3, #0
 8002d56:	4602      	mov	r2, r0
 8002d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	6a21      	ldr	r1, [r4, #32]
 8002d5e:	47b0      	blx	r6
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	d106      	bne.n	8002d74 <__sflush_r+0x64>
 8002d66:	6829      	ldr	r1, [r5, #0]
 8002d68:	291d      	cmp	r1, #29
 8002d6a:	d82b      	bhi.n	8002dc4 <__sflush_r+0xb4>
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <__sflush_r+0x100>)
 8002d6e:	410a      	asrs	r2, r1
 8002d70:	07d6      	lsls	r6, r2, #31
 8002d72:	d427      	bmi.n	8002dc4 <__sflush_r+0xb4>
 8002d74:	2200      	movs	r2, #0
 8002d76:	6062      	str	r2, [r4, #4]
 8002d78:	6922      	ldr	r2, [r4, #16]
 8002d7a:	04d9      	lsls	r1, r3, #19
 8002d7c:	6022      	str	r2, [r4, #0]
 8002d7e:	d504      	bpl.n	8002d8a <__sflush_r+0x7a>
 8002d80:	1c42      	adds	r2, r0, #1
 8002d82:	d101      	bne.n	8002d88 <__sflush_r+0x78>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	b903      	cbnz	r3, 8002d8a <__sflush_r+0x7a>
 8002d88:	6560      	str	r0, [r4, #84]	; 0x54
 8002d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d8c:	602f      	str	r7, [r5, #0]
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	d0ca      	beq.n	8002d28 <__sflush_r+0x18>
 8002d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d96:	4299      	cmp	r1, r3
 8002d98:	d002      	beq.n	8002da0 <__sflush_r+0x90>
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f7ff fbee 	bl	800257c <_free_r>
 8002da0:	2000      	movs	r0, #0
 8002da2:	6360      	str	r0, [r4, #52]	; 0x34
 8002da4:	e7c1      	b.n	8002d2a <__sflush_r+0x1a>
 8002da6:	2301      	movs	r3, #1
 8002da8:	4628      	mov	r0, r5
 8002daa:	47b0      	blx	r6
 8002dac:	1c41      	adds	r1, r0, #1
 8002dae:	d1c8      	bne.n	8002d42 <__sflush_r+0x32>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0c5      	beq.n	8002d42 <__sflush_r+0x32>
 8002db6:	2b1d      	cmp	r3, #29
 8002db8:	d001      	beq.n	8002dbe <__sflush_r+0xae>
 8002dba:	2b16      	cmp	r3, #22
 8002dbc:	d101      	bne.n	8002dc2 <__sflush_r+0xb2>
 8002dbe:	602f      	str	r7, [r5, #0]
 8002dc0:	e7b2      	b.n	8002d28 <__sflush_r+0x18>
 8002dc2:	89a3      	ldrh	r3, [r4, #12]
 8002dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc8:	81a3      	strh	r3, [r4, #12]
 8002dca:	e7ae      	b.n	8002d2a <__sflush_r+0x1a>
 8002dcc:	690f      	ldr	r7, [r1, #16]
 8002dce:	2f00      	cmp	r7, #0
 8002dd0:	d0aa      	beq.n	8002d28 <__sflush_r+0x18>
 8002dd2:	0793      	lsls	r3, r2, #30
 8002dd4:	bf18      	it	ne
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	680e      	ldr	r6, [r1, #0]
 8002dda:	bf08      	it	eq
 8002ddc:	694b      	ldreq	r3, [r1, #20]
 8002dde:	1bf6      	subs	r6, r6, r7
 8002de0:	600f      	str	r7, [r1, #0]
 8002de2:	608b      	str	r3, [r1, #8]
 8002de4:	2e00      	cmp	r6, #0
 8002de6:	dd9f      	ble.n	8002d28 <__sflush_r+0x18>
 8002de8:	4633      	mov	r3, r6
 8002dea:	463a      	mov	r2, r7
 8002dec:	4628      	mov	r0, r5
 8002dee:	6a21      	ldr	r1, [r4, #32]
 8002df0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002df4:	47e0      	blx	ip
 8002df6:	2800      	cmp	r0, #0
 8002df8:	dc06      	bgt.n	8002e08 <__sflush_r+0xf8>
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e04:	81a3      	strh	r3, [r4, #12]
 8002e06:	e790      	b.n	8002d2a <__sflush_r+0x1a>
 8002e08:	4407      	add	r7, r0
 8002e0a:	1a36      	subs	r6, r6, r0
 8002e0c:	e7ea      	b.n	8002de4 <__sflush_r+0xd4>
 8002e0e:	bf00      	nop
 8002e10:	dfbffffe 	.word	0xdfbffffe

08002e14 <_fflush_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	690b      	ldr	r3, [r1, #16]
 8002e18:	4605      	mov	r5, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	b913      	cbnz	r3, 8002e24 <_fflush_r+0x10>
 8002e1e:	2500      	movs	r5, #0
 8002e20:	4628      	mov	r0, r5
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	b118      	cbz	r0, 8002e2e <_fflush_r+0x1a>
 8002e26:	6a03      	ldr	r3, [r0, #32]
 8002e28:	b90b      	cbnz	r3, 8002e2e <_fflush_r+0x1a>
 8002e2a:	f7ff fa9f 	bl	800236c <__sinit>
 8002e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f3      	beq.n	8002e1e <_fflush_r+0xa>
 8002e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e38:	07d0      	lsls	r0, r2, #31
 8002e3a:	d404      	bmi.n	8002e46 <_fflush_r+0x32>
 8002e3c:	0599      	lsls	r1, r3, #22
 8002e3e:	d402      	bmi.n	8002e46 <_fflush_r+0x32>
 8002e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e42:	f7ff fb98 	bl	8002576 <__retarget_lock_acquire_recursive>
 8002e46:	4628      	mov	r0, r5
 8002e48:	4621      	mov	r1, r4
 8002e4a:	f7ff ff61 	bl	8002d10 <__sflush_r>
 8002e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e50:	4605      	mov	r5, r0
 8002e52:	07da      	lsls	r2, r3, #31
 8002e54:	d4e4      	bmi.n	8002e20 <_fflush_r+0xc>
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	059b      	lsls	r3, r3, #22
 8002e5a:	d4e1      	bmi.n	8002e20 <_fflush_r+0xc>
 8002e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e5e:	f7ff fb8b 	bl	8002578 <__retarget_lock_release_recursive>
 8002e62:	e7dd      	b.n	8002e20 <_fflush_r+0xc>

08002e64 <__swbuf_r>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	460e      	mov	r6, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	b118      	cbz	r0, 8002e76 <__swbuf_r+0x12>
 8002e6e:	6a03      	ldr	r3, [r0, #32]
 8002e70:	b90b      	cbnz	r3, 8002e76 <__swbuf_r+0x12>
 8002e72:	f7ff fa7b 	bl	800236c <__sinit>
 8002e76:	69a3      	ldr	r3, [r4, #24]
 8002e78:	60a3      	str	r3, [r4, #8]
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	071a      	lsls	r2, r3, #28
 8002e7e:	d525      	bpl.n	8002ecc <__swbuf_r+0x68>
 8002e80:	6923      	ldr	r3, [r4, #16]
 8002e82:	b31b      	cbz	r3, 8002ecc <__swbuf_r+0x68>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	6922      	ldr	r2, [r4, #16]
 8002e88:	b2f6      	uxtb	r6, r6
 8002e8a:	1a98      	subs	r0, r3, r2
 8002e8c:	6963      	ldr	r3, [r4, #20]
 8002e8e:	4637      	mov	r7, r6
 8002e90:	4283      	cmp	r3, r0
 8002e92:	dc04      	bgt.n	8002e9e <__swbuf_r+0x3a>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	f7ff ffbc 	bl	8002e14 <_fflush_r>
 8002e9c:	b9e0      	cbnz	r0, 8002ed8 <__swbuf_r+0x74>
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60a3      	str	r3, [r4, #8]
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	6022      	str	r2, [r4, #0]
 8002eaa:	701e      	strb	r6, [r3, #0]
 8002eac:	6962      	ldr	r2, [r4, #20]
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d004      	beq.n	8002ebe <__swbuf_r+0x5a>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	07db      	lsls	r3, r3, #31
 8002eb8:	d506      	bpl.n	8002ec8 <__swbuf_r+0x64>
 8002eba:	2e0a      	cmp	r6, #10
 8002ebc:	d104      	bne.n	8002ec8 <__swbuf_r+0x64>
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f7ff ffa7 	bl	8002e14 <_fflush_r>
 8002ec6:	b938      	cbnz	r0, 8002ed8 <__swbuf_r+0x74>
 8002ec8:	4638      	mov	r0, r7
 8002eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 f806 	bl	8002ee0 <__swsetup_r>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d0d5      	beq.n	8002e84 <__swbuf_r+0x20>
 8002ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8002edc:	e7f4      	b.n	8002ec8 <__swbuf_r+0x64>
	...

08002ee0 <__swsetup_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <__swsetup_r+0xac>)
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	460c      	mov	r4, r1
 8002eea:	b118      	cbz	r0, 8002ef4 <__swsetup_r+0x14>
 8002eec:	6a03      	ldr	r3, [r0, #32]
 8002eee:	b90b      	cbnz	r3, 8002ef4 <__swsetup_r+0x14>
 8002ef0:	f7ff fa3c 	bl	800236c <__sinit>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002efa:	0718      	lsls	r0, r3, #28
 8002efc:	d422      	bmi.n	8002f44 <__swsetup_r+0x64>
 8002efe:	06d9      	lsls	r1, r3, #27
 8002f00:	d407      	bmi.n	8002f12 <__swsetup_r+0x32>
 8002f02:	2309      	movs	r3, #9
 8002f04:	602b      	str	r3, [r5, #0]
 8002f06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0e:	81a3      	strh	r3, [r4, #12]
 8002f10:	e034      	b.n	8002f7c <__swsetup_r+0x9c>
 8002f12:	0758      	lsls	r0, r3, #29
 8002f14:	d512      	bpl.n	8002f3c <__swsetup_r+0x5c>
 8002f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f18:	b141      	cbz	r1, 8002f2c <__swsetup_r+0x4c>
 8002f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f1e:	4299      	cmp	r1, r3
 8002f20:	d002      	beq.n	8002f28 <__swsetup_r+0x48>
 8002f22:	4628      	mov	r0, r5
 8002f24:	f7ff fb2a 	bl	800257c <_free_r>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f32:	81a3      	strh	r3, [r4, #12]
 8002f34:	2300      	movs	r3, #0
 8002f36:	6063      	str	r3, [r4, #4]
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	81a3      	strh	r3, [r4, #12]
 8002f44:	6923      	ldr	r3, [r4, #16]
 8002f46:	b94b      	cbnz	r3, 8002f5c <__swsetup_r+0x7c>
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f52:	d003      	beq.n	8002f5c <__swsetup_r+0x7c>
 8002f54:	4621      	mov	r1, r4
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 f85d 	bl	8003016 <__smakebuf_r>
 8002f5c:	89a0      	ldrh	r0, [r4, #12]
 8002f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f62:	f010 0301 	ands.w	r3, r0, #1
 8002f66:	d00a      	beq.n	8002f7e <__swsetup_r+0x9e>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60a3      	str	r3, [r4, #8]
 8002f6c:	6963      	ldr	r3, [r4, #20]
 8002f6e:	425b      	negs	r3, r3
 8002f70:	61a3      	str	r3, [r4, #24]
 8002f72:	6923      	ldr	r3, [r4, #16]
 8002f74:	b943      	cbnz	r3, 8002f88 <__swsetup_r+0xa8>
 8002f76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f7a:	d1c4      	bne.n	8002f06 <__swsetup_r+0x26>
 8002f7c:	bd38      	pop	{r3, r4, r5, pc}
 8002f7e:	0781      	lsls	r1, r0, #30
 8002f80:	bf58      	it	pl
 8002f82:	6963      	ldrpl	r3, [r4, #20]
 8002f84:	60a3      	str	r3, [r4, #8]
 8002f86:	e7f4      	b.n	8002f72 <__swsetup_r+0x92>
 8002f88:	2000      	movs	r0, #0
 8002f8a:	e7f7      	b.n	8002f7c <__swsetup_r+0x9c>
 8002f8c:	20000064 	.word	0x20000064

08002f90 <_sbrk_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	2300      	movs	r3, #0
 8002f94:	4d05      	ldr	r5, [pc, #20]	; (8002fac <_sbrk_r+0x1c>)
 8002f96:	4604      	mov	r4, r0
 8002f98:	4608      	mov	r0, r1
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	f7fd fbc8 	bl	8000730 <_sbrk>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_sbrk_r+0x1a>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_sbrk_r+0x1a>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	2000025c 	.word	0x2000025c

08002fb0 <memchr>:
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	b2c9      	uxtb	r1, r1
 8002fb6:	4402      	add	r2, r0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	d101      	bne.n	8002fc2 <memchr+0x12>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e003      	b.n	8002fca <memchr+0x1a>
 8002fc2:	7804      	ldrb	r4, [r0, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	428c      	cmp	r4, r1
 8002fc8:	d1f6      	bne.n	8002fb8 <memchr+0x8>
 8002fca:	bd10      	pop	{r4, pc}

08002fcc <__swhatbuf_r>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	460c      	mov	r4, r1
 8002fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	461e      	mov	r6, r3
 8002fda:	b096      	sub	sp, #88	; 0x58
 8002fdc:	da0c      	bge.n	8002ff8 <__swhatbuf_r+0x2c>
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fe6:	bf0c      	ite	eq
 8002fe8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002fec:	2340      	movne	r3, #64	; 0x40
 8002fee:	2000      	movs	r0, #0
 8002ff0:	6031      	str	r1, [r6, #0]
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	b016      	add	sp, #88	; 0x58
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	466a      	mov	r2, sp
 8002ffa:	f000 f849 	bl	8003090 <_fstat_r>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	dbed      	blt.n	8002fde <__swhatbuf_r+0x12>
 8003002:	9901      	ldr	r1, [sp, #4]
 8003004:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003008:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800300c:	4259      	negs	r1, r3
 800300e:	4159      	adcs	r1, r3
 8003010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003014:	e7eb      	b.n	8002fee <__swhatbuf_r+0x22>

08003016 <__smakebuf_r>:
 8003016:	898b      	ldrh	r3, [r1, #12]
 8003018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800301a:	079d      	lsls	r5, r3, #30
 800301c:	4606      	mov	r6, r0
 800301e:	460c      	mov	r4, r1
 8003020:	d507      	bpl.n	8003032 <__smakebuf_r+0x1c>
 8003022:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	6123      	str	r3, [r4, #16]
 800302a:	2301      	movs	r3, #1
 800302c:	6163      	str	r3, [r4, #20]
 800302e:	b002      	add	sp, #8
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	466a      	mov	r2, sp
 8003034:	ab01      	add	r3, sp, #4
 8003036:	f7ff ffc9 	bl	8002fcc <__swhatbuf_r>
 800303a:	9900      	ldr	r1, [sp, #0]
 800303c:	4605      	mov	r5, r0
 800303e:	4630      	mov	r0, r6
 8003040:	f7ff fb04 	bl	800264c <_malloc_r>
 8003044:	b948      	cbnz	r0, 800305a <__smakebuf_r+0x44>
 8003046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304a:	059a      	lsls	r2, r3, #22
 800304c:	d4ef      	bmi.n	800302e <__smakebuf_r+0x18>
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	e7e3      	b.n	8003022 <__smakebuf_r+0xc>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	6020      	str	r0, [r4, #0]
 800305e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	9b00      	ldr	r3, [sp, #0]
 8003066:	6120      	str	r0, [r4, #16]
 8003068:	6163      	str	r3, [r4, #20]
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	b15b      	cbz	r3, 8003086 <__smakebuf_r+0x70>
 800306e:	4630      	mov	r0, r6
 8003070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003074:	f000 f81e 	bl	80030b4 <_isatty_r>
 8003078:	b128      	cbz	r0, 8003086 <__smakebuf_r+0x70>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f023 0303 	bic.w	r3, r3, #3
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	431d      	orrs	r5, r3
 800308a:	81a5      	strh	r5, [r4, #12]
 800308c:	e7cf      	b.n	800302e <__smakebuf_r+0x18>
	...

08003090 <_fstat_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	2300      	movs	r3, #0
 8003094:	4d06      	ldr	r5, [pc, #24]	; (80030b0 <_fstat_r+0x20>)
 8003096:	4604      	mov	r4, r0
 8003098:	4608      	mov	r0, r1
 800309a:	4611      	mov	r1, r2
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	f7fd fb21 	bl	80006e4 <_fstat>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d102      	bne.n	80030ac <_fstat_r+0x1c>
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	b103      	cbz	r3, 80030ac <_fstat_r+0x1c>
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	bd38      	pop	{r3, r4, r5, pc}
 80030ae:	bf00      	nop
 80030b0:	2000025c 	.word	0x2000025c

080030b4 <_isatty_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d05      	ldr	r5, [pc, #20]	; (80030d0 <_isatty_r+0x1c>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	f7fd fb1f 	bl	8000702 <_isatty>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_isatty_r+0x1a>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_isatty_r+0x1a>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	2000025c 	.word	0x2000025c

080030d4 <_init>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr

080030e0 <_fini>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr
