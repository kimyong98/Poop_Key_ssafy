
DigitalRead_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08005050  08005050  00015050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005414  08005414  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005414  08005414  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005414  08005414  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800541c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  080055f0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080055f0  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e44  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb7  00000000  00000000  0002a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000794  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181e5  00000000  00000000  0002cda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d434  00000000  00000000  00044f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086279  00000000  00000000  000523bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037b0  00000000  00000000  000d8638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dbde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005034 	.word	0x08005034

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005034 	.word	0x08005034

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2120      	movs	r1, #32
 8000b00:	4822      	ldr	r0, [pc, #136]	; (8000b8c <MX_GPIO_Init+0x104>)
 8000b02:	f000 fe26 	bl	8001752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <MX_GPIO_Init+0x108>)
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <MX_GPIO_Init+0x10c>)
 8000b1c:	f000 fc7e 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b20:	2320      	movs	r3, #32
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4619      	mov	r1, r3
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <MX_GPIO_Init+0x104>)
 8000b38:	f000 fc70 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480e      	ldr	r0, [pc, #56]	; (8000b8c <MX_GPIO_Init+0x104>)
 8000b52:	f000 fc63 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b56:	2320      	movs	r3, #32
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_GPIO_Init+0x110>)
 8000b6a:	f000 fc57 	bl	800141c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2028      	movs	r0, #40	; 0x28
 8000b74:	f000 fc1b 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b78:	2028      	movs	r0, #40	; 0x28
 8000b7a:	f000 fc34 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	10110000 	.word	0x10110000
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_I2C1_Init+0x50>)
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MX_I2C1_Init+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_I2C1_Init+0x50>)
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x58>)
 8000baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bda:	f000 fdf5 	bl	80017c8 <HAL_I2C_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be4:	f000 f8cb 	bl	8000d7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001f0 	.word	0x200001f0
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	000186a0 	.word	0x000186a0

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <HAL_I2C_MspInit+0x90>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d132      	bne.n	8000c7e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_I2C_MspInit+0x94>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_I2C_MspInit+0x94>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_I2C_MspInit+0x94>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c36:	2312      	movs	r3, #18
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <HAL_I2C_MspInit+0x98>)
 8000c46:	f000 fbe9 	bl	800141c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_I2C_MspInit+0x9c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <HAL_I2C_MspInit+0x9c>)
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_I2C_MspInit+0x94>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0x94>)
 8000c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_I2C_MspInit+0x94>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40010000 	.word	0x40010000

08000c98 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ca0:	1d39      	adds	r1, r7, #4
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <__io_putchar+0x20>)
 8000caa:	f001 fb31 	bl	8002310 <HAL_UART_Transmit>
  return ch;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000248 	.word	0x20000248

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc2:	f000 fa17 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc6:	f000 f81f 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f7ff fedd 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cce:	f000 f983 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cd2:	f7ff ff63 	bl	8000b9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t is_horizon = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  is_horizon = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
	  is_horizon = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <main+0x40>)
 8000cde:	f000 fd21 	bl	8001724 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	607b      	str	r3, [r7, #4]
	  printf("Digital Read test\r\n");
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <main+0x44>)
 8000ce8:	f002 fa18 	bl	800311c <puts>
	  printf("is_horizon : %lu\r\n", is_horizon);
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <main+0x48>)
 8000cf0:	f002 f9ae 	bl	8003050 <iprintf>

	  HAL_Delay(100);
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f000 fa5f 	bl	80011b8 <HAL_Delay>
	  is_horizon = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000cfa:	e7ee      	b.n	8000cda <main+0x1e>
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	08005050 	.word	0x08005050
 8000d04:	08005064 	.word	0x08005064

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b090      	sub	sp, #64	; 0x40
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	2228      	movs	r2, #40	; 0x28
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fae0 	bl	80032dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2310      	movs	r3, #16
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fe86 	bl	8001a50 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f818 	bl	8000d7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f8f4 	bl	8001f54 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d72:	f000 f804 	bl	8000d7e <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3740      	adds	r7, #64	; 0x40
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d82:	b672      	cpsid	i
}
 8000d84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <Error_Handler+0x8>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_MspInit+0x5c>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_MspInit+0x5c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x5c>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x5c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_MspInit+0x60>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_MspInit+0x60>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f9a5 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e42:	f000 fc9f 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  return 1;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <_kill>:

int _kill(int pid, int sig)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e62:	f002 fa8d 	bl	8003380 <__errno>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2216      	movs	r2, #22
 8000e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_exit>:

void _exit (int status)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ffe7 	bl	8000e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e8a:	e7fe      	b.n	8000e8a <_exit+0x12>

08000e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e00a      	b.n	8000eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e9e:	f3af 8000 	nop.w
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf0      	blt.n	8000e9e <_read+0x12>
  }

  return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e009      	b.n	8000eec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fed9 	bl	8000c98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf1      	blt.n	8000ed8 <_write+0x12>
  }
  return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_close>:

int _close(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f24:	605a      	str	r2, [r3, #4]
  return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <_isatty>:

int _isatty(int file)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f002 f9f6 	bl	8003380 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20005000 	.word	0x20005000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	20000244 	.word	0x20000244
 8000fc8:	200003e0 	.word	0x200003e0

08000fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_USART2_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8001010:	f001 f92e 	bl	8002270 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f7ff feb0 	bl	8000d7e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000248 	.word	0x20000248
 8001028:	40004400 	.word	0x40004400

0800102c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_UART_MspInit+0x70>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d123      	bne.n	8001094 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_UART_MspInit+0x74>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_UART_MspInit+0x74>)
 8001052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001056:	61d3      	str	r3, [r2, #28]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_UART_MspInit+0x74>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_UART_MspInit+0x74>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_UART_MspInit+0x74>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_UART_MspInit+0x74>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800107c:	230c      	movs	r3, #12
 800107e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_UART_MspInit+0x78>)
 8001090:	f000 f9c4 	bl	800141c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40004400 	.word	0x40004400
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010800 	.word	0x40010800

080010a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a8:	f7ff ff90 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ae:	490c      	ldr	r1, [pc, #48]	; (80010e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c4:	4c09      	ldr	r4, [pc, #36]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d2:	f002 f95b 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff fdf1 	bl	8000cbc <main>
  bx lr
 80010da:	4770      	bx	lr
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010e4:	0800541c 	.word	0x0800541c
  ldr r2, =_sbss
 80010e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80010ec:	200003e0 	.word	0x200003e0

080010f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_2_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x28>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x28>)
 80010fe:	f043 0310 	orr.w	r3, r3, #16
 8001102:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f947 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fe3a 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f95f 	bl	8001402 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f927 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <HAL_IncTick+0x20>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000290 	.word	0x20000290

080011a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000290 	.word	0x20000290

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff fff0 	bl	80011a4 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffe0 	bl	80011a4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <__NVIC_EnableIRQ+0x34>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff90 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff2d 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff42 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff90 	bl	80012f0 <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5f 	bl	800129c <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff35 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e169      	b.n	8001704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001430:	2201      	movs	r2, #1
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 8158 	bne.w	80016fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a9a      	ldr	r2, [pc, #616]	; (80016bc <HAL_GPIO_Init+0x2a0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d05e      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001458:	4a98      	ldr	r2, [pc, #608]	; (80016bc <HAL_GPIO_Init+0x2a0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d875      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800145e:	4a98      	ldr	r2, [pc, #608]	; (80016c0 <HAL_GPIO_Init+0x2a4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d058      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001464:	4a96      	ldr	r2, [pc, #600]	; (80016c0 <HAL_GPIO_Init+0x2a4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d86f      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800146a:	4a96      	ldr	r2, [pc, #600]	; (80016c4 <HAL_GPIO_Init+0x2a8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d052      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001470:	4a94      	ldr	r2, [pc, #592]	; (80016c4 <HAL_GPIO_Init+0x2a8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d869      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001476:	4a94      	ldr	r2, [pc, #592]	; (80016c8 <HAL_GPIO_Init+0x2ac>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d04c      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 800147c:	4a92      	ldr	r2, [pc, #584]	; (80016c8 <HAL_GPIO_Init+0x2ac>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d863      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001482:	4a92      	ldr	r2, [pc, #584]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d046      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001488:	4a90      	ldr	r2, [pc, #576]	; (80016cc <HAL_GPIO_Init+0x2b0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d85d      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d82a      	bhi.n	80014e8 <HAL_GPIO_Init+0xcc>
 8001492:	2b12      	cmp	r3, #18
 8001494:	d859      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_GPIO_Init+0x80>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	08001517 	.word	0x08001517
 80014a0:	080014f1 	.word	0x080014f1
 80014a4:	08001503 	.word	0x08001503
 80014a8:	08001545 	.word	0x08001545
 80014ac:	0800154b 	.word	0x0800154b
 80014b0:	0800154b 	.word	0x0800154b
 80014b4:	0800154b 	.word	0x0800154b
 80014b8:	0800154b 	.word	0x0800154b
 80014bc:	0800154b 	.word	0x0800154b
 80014c0:	0800154b 	.word	0x0800154b
 80014c4:	0800154b 	.word	0x0800154b
 80014c8:	0800154b 	.word	0x0800154b
 80014cc:	0800154b 	.word	0x0800154b
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	0800154b 	.word	0x0800154b
 80014d8:	0800154b 	.word	0x0800154b
 80014dc:	0800154b 	.word	0x0800154b
 80014e0:	080014f9 	.word	0x080014f9
 80014e4:	0800150d 	.word	0x0800150d
 80014e8:	4a79      	ldr	r2, [pc, #484]	; (80016d0 <HAL_GPIO_Init+0x2b4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ee:	e02c      	b.n	800154a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e029      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	3304      	adds	r3, #4
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e024      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	3308      	adds	r3, #8
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e01f      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	330c      	adds	r3, #12
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e01a      	b.n	800154c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151e:	2304      	movs	r3, #4
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e013      	b.n	800154c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	611a      	str	r2, [r3, #16]
          break;
 8001536:	e009      	b.n	800154c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	615a      	str	r2, [r3, #20]
          break;
 8001542:	e003      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x130>
          break;
 800154a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	; 0xff
 8001550:	d801      	bhi.n	8001556 <HAL_GPIO_Init+0x13a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	e001      	b.n	800155a <HAL_GPIO_Init+0x13e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d802      	bhi.n	8001568 <HAL_GPIO_Init+0x14c>
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x152>
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	3b08      	subs	r3, #8
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	210f      	movs	r1, #15
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	6a39      	ldr	r1, [r7, #32]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	431a      	orrs	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80b1 	beq.w	80016fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159c:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <HAL_GPIO_Init+0x2b8>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x2b8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <HAL_GPIO_Init+0x2b8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b4:	4a48      	ldr	r2, [pc, #288]	; (80016d8 <HAL_GPIO_Init+0x2bc>)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a40      	ldr	r2, [pc, #256]	; (80016dc <HAL_GPIO_Init+0x2c0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d013      	beq.n	8001608 <HAL_GPIO_Init+0x1ec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <HAL_GPIO_Init+0x2c4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00d      	beq.n	8001604 <HAL_GPIO_Init+0x1e8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a3e      	ldr	r2, [pc, #248]	; (80016e4 <HAL_GPIO_Init+0x2c8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d007      	beq.n	8001600 <HAL_GPIO_Init+0x1e4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3d      	ldr	r2, [pc, #244]	; (80016e8 <HAL_GPIO_Init+0x2cc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_GPIO_Init+0x1e0>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e006      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e004      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001600:	2302      	movs	r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001608:	2300      	movs	r3, #0
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800161a:	492f      	ldr	r1, [pc, #188]	; (80016d8 <HAL_GPIO_Init+0x2bc>)
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	492c      	ldr	r1, [pc, #176]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	4928      	ldr	r1, [pc, #160]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 800164c:	4013      	ands	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4922      	ldr	r1, [pc, #136]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	491e      	ldr	r1, [pc, #120]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 8001674:	4013      	ands	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4918      	ldr	r1, [pc, #96]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	4914      	ldr	r1, [pc, #80]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 800169c:	4013      	ands	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d021      	beq.n	80016f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	490e      	ldr	r1, [pc, #56]	; (80016ec <HAL_GPIO_Init+0x2d0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e021      	b.n	80016fe <HAL_GPIO_Init+0x2e2>
 80016ba:	bf00      	nop
 80016bc:	10320000 	.word	0x10320000
 80016c0:	10310000 	.word	0x10310000
 80016c4:	10220000 	.word	0x10220000
 80016c8:	10210000 	.word	0x10210000
 80016cc:	10120000 	.word	0x10120000
 80016d0:	10110000 	.word	0x10110000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40010800 	.word	0x40010800
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40011400 	.word	0x40011400
 80016ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_GPIO_Init+0x304>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4909      	ldr	r1, [pc, #36]	; (8001720 <HAL_GPIO_Init+0x304>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3301      	adds	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f ae8e 	bne.w	8001430 <HAL_GPIO_Init+0x14>
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	372c      	adds	r7, #44	; 0x2c
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e001      	b.n	8001746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001768:	887a      	ldrh	r2, [r7, #2]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800176e:	e003      	b.n	8001778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	041a      	lsls	r2, r3, #16
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	611a      	str	r2, [r3, #16]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f806 	bl	80017b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e12b      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fa02 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800182c:	f000 fcda 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a81      	ldr	r2, [pc, #516]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d807      	bhi.n	800184c <HAL_I2C_Init+0x84>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a80      	ldr	r2, [pc, #512]	; (8001a40 <HAL_I2C_Init+0x278>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e006      	b.n	800185a <HAL_I2C_Init+0x92>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a7d      	ldr	r2, [pc, #500]	; (8001a44 <HAL_I2C_Init+0x27c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_I2C_Init+0x280>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a6a      	ldr	r2, [pc, #424]	; (8001a3c <HAL_I2C_Init+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d802      	bhi.n	800189c <HAL_I2C_Init+0xd4>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	e009      	b.n	80018b0 <HAL_I2C_Init+0xe8>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_I2C_Init+0x284>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	495c      	ldr	r1, [pc, #368]	; (8001a3c <HAL_I2C_Init+0x274>)
 80018cc:	428b      	cmp	r3, r1
 80018ce:	d819      	bhi.n	8001904 <HAL_I2C_Init+0x13c>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fbb1 f3f3 	udiv	r3, r1, r3
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_I2C_Init+0x138>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e59      	subs	r1, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	e051      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001900:	2304      	movs	r3, #4
 8001902:	e04f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <HAL_I2C_Init+0x168>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e012      	b.n	8001956 <HAL_I2C_Init+0x18e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x196>
 800195a:	2301      	movs	r3, #1
 800195c:	e022      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10e      	bne.n	8001984 <HAL_I2C_Init+0x1bc>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e58      	subs	r0, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	fbb0 f3f3 	udiv	r3, r0, r3
 8001978:	3301      	adds	r3, #1
 800197a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6809      	ldr	r1, [r1, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6911      	ldr	r1, [r2, #16]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	000186a0 	.word	0x000186a0
 8001a40:	001e847f 	.word	0x001e847f
 8001a44:	003d08ff 	.word	0x003d08ff
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	10624dd3 	.word	0x10624dd3

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e272      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8087 	beq.w	8001b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a70:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d112      	bne.n	8001aae <HAL_RCC_OscConfig+0x5e>
 8001a88:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d10b      	bne.n	8001aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d06c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x12c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d168      	bne.n	8001b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e24c      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x76>
 8001ab8:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a7f      	ldr	r2, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e02e      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x98>
 8001ace:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7a      	ldr	r2, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0xbc>
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a71      	ldr	r2, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb3a 	bl	80011a4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fb36 	bl	80011a4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e200      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe4>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb26 	bl	80011a4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fb22 	bl	80011a4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1ec      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x10c>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8a:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b96:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x18c>
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x176>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1c0      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4939      	ldr	r1, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fadb 	bl	80011a4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff fad7 	bl	80011a4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1a1      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4927      	ldr	r1, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff faba 	bl	80011a4 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff fab6 	bl	80011a4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e180      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03a      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fa9a 	bl	80011a4 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff fa96 	bl	80011a4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e160      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 face 	bl	8002234 <RCC_Delay>
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fa80 	bl	80011a4 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	e00f      	b.n	8001cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fa7c 	bl	80011a4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d908      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e146      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	42420000 	.word	0x42420000
 8001cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4b92      	ldr	r3, [pc, #584]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e9      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a6 	beq.w	8001e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b8b      	ldr	r3, [pc, #556]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a87      	ldr	r2, [pc, #540]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fa3d 	bl	80011a4 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff fa39 	bl	80011a4 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e103      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x312>
 8001d54:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e02d      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x334>
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a69      	ldr	r2, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a66      	ldr	r2, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	e01c      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x356>
 8001d8c:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e00b      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a5a      	ldr	r2, [pc, #360]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d015      	beq.n	8001df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f9ed 	bl	80011a4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff f9e9 	bl	80011a4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0b1      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ee      	beq.n	8001dce <HAL_RCC_OscConfig+0x37e>
 8001df0:	e014      	b.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff f9d7 	bl	80011a4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff f9d3 	bl	80011a4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e09b      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d105      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a3b      	ldr	r2, [pc, #236]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8087 	beq.w	8001f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d061      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d146      	bne.n	8001eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7ff f9a7 	bl	80011a4 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff f9a3 	bl	80011a4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e06d      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4921      	ldr	r1, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a19      	ldr	r1, [r3, #32]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	491b      	ldr	r1, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f977 	bl	80011a4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff f973 	bl	80011a4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e03d      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x46a>
 8001ed8:	e035      	b.n	8001f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f960 	bl	80011a4 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f95c 	bl	80011a4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e026      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x498>
 8001f06:	e01e      	b.n	8001f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e019      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_OscConfig+0x500>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0d0      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d910      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4965      	ldr	r1, [pc, #404]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0b8      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a58      	ldr	r2, [pc, #352]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	494d      	ldr	r1, [pc, #308]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d040      	beq.n	8002074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d115      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07f      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e073      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06b      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4936      	ldr	r1, [pc, #216]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002044:	f7ff f8ae 	bl	80011a4 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7ff f8aa 	bl	80011a4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e053      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 020c 	and.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	429a      	cmp	r2, r3
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d210      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4922      	ldr	r1, [pc, #136]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e032      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4916      	ldr	r1, [pc, #88]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	490e      	ldr	r1, [pc, #56]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e2:	f000 f821 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	490a      	ldr	r1, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	5ccb      	ldrb	r3, [r1, r3]
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1cc>)
 80020fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1d0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f80c 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
 800211c:	08005078 	.word	0x08005078
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x30>
 8002152:	2b08      	cmp	r3, #8
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x36>
 8002156:	e027      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	613b      	str	r3, [r7, #16]
      break;
 800215c:	e027      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d010      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	0c5b      	lsrs	r3, r3, #17
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800218a:	fb03 f202 	mul.w	r2, r3, r2
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e004      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	613b      	str	r3, [r7, #16]
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021aa:	613b      	str	r3, [r7, #16]
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	693b      	ldr	r3, [r7, #16]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	007a1200 	.word	0x007a1200
 80021c4:	08005090 	.word	0x08005090
 80021c8:	080050a0 	.word	0x080050a0
 80021cc:	003d0900 	.word	0x003d0900

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000000 	.word	0x20000000

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e8:	f7ff fff2 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08005088 	.word	0x08005088

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff ffde 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08005088 	.word	0x08005088

08002234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RCC_Delay+0x34>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <RCC_Delay+0x38>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0a5b      	lsrs	r3, r3, #9
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002250:	bf00      	nop
  }
  while (Delay --);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	60fa      	str	r2, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <RCC_Delay+0x1c>
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e042      	b.n	8002308 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fec8 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f91d 	bl	80024f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b20      	cmp	r3, #32
 800232e:	d16d      	bne.n	800240c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_UART_Transmit+0x2c>
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e066      	b.n	800240e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2221      	movs	r2, #33	; 0x21
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800234e:	f7fe ff29 	bl	80011a4 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	88fa      	ldrh	r2, [r7, #6]
 8002358:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	88fa      	ldrh	r2, [r7, #6]
 800235e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002368:	d108      	bne.n	800237c <HAL_UART_Transmit+0x6c>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	e003      	b.n	8002384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002384:	e02a      	b.n	80023dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f840 	bl	8002416 <UART_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e036      	b.n	800240e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10b      	bne.n	80023be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	3302      	adds	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	e007      	b.n	80023ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1cf      	bne.n	8002386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2140      	movs	r1, #64	; 0x40
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f810 	bl	8002416 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e006      	b.n	800240e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b090      	sub	sp, #64	; 0x40
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002426:	e050      	b.n	80024ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d04c      	beq.n	80024ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <UART_WaitOnFlagUntilTimeout+0x30>
 8002436:	f7fe feb5 	bl	80011a4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002442:	429a      	cmp	r2, r3
 8002444:	d241      	bcs.n	80024ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002466:	637a      	str	r2, [r7, #52]	; 0x34
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800246e:	e841 2300 	strex	r3, r2, [r1]
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e5      	bne.n	8002446 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3314      	adds	r3, #20
 8002480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	613b      	str	r3, [r7, #16]
   return(result);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3314      	adds	r3, #20
 8002498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800249a:	623a      	str	r2, [r7, #32]
 800249c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249e:	69f9      	ldr	r1, [r7, #28]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e5      	bne.n	800247a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e00f      	b.n	80024ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4013      	ands	r3, r2
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d09f      	beq.n	8002428 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3740      	adds	r7, #64	; 0x40
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800252e:	f023 030c 	bic.w	r3, r3, #12
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	430b      	orrs	r3, r1
 800253a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <UART_SetConfig+0x114>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800255c:	f7ff fe56 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	e002      	b.n	800256a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002564:	f7ff fe3e 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8002568:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009a      	lsls	r2, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <UART_SetConfig+0x118>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	0119      	lsls	r1, r3, #4
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <UART_SetConfig+0x118>)
 80025a2:	fba3 0302 	umull	r0, r3, r3, r2
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	fb00 f303 	mul.w	r3, r0, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	3332      	adds	r3, #50	; 0x32
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <UART_SetConfig+0x118>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c0:	4419      	add	r1, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	009a      	lsls	r2, r3, #2
 80025cc:	441a      	add	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <UART_SetConfig+0x118>)
 80025da:	fba3 0302 	umull	r0, r3, r3, r2
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2064      	movs	r0, #100	; 0x64
 80025e2:	fb00 f303 	mul.w	r3, r0, r3
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	3332      	adds	r3, #50	; 0x32
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <UART_SetConfig+0x118>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	f003 020f 	and.w	r2, r3, #15
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	440a      	add	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40013800 	.word	0x40013800
 800260c:	51eb851f 	.word	0x51eb851f

08002610 <__cvt>:
 8002610:	2b00      	cmp	r3, #0
 8002612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002616:	461f      	mov	r7, r3
 8002618:	bfbb      	ittet	lt
 800261a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800261e:	461f      	movlt	r7, r3
 8002620:	2300      	movge	r3, #0
 8002622:	232d      	movlt	r3, #45	; 0x2d
 8002624:	b088      	sub	sp, #32
 8002626:	4614      	mov	r4, r2
 8002628:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800262a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800262c:	7013      	strb	r3, [r2, #0]
 800262e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002630:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002634:	f023 0820 	bic.w	r8, r3, #32
 8002638:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800263c:	d005      	beq.n	800264a <__cvt+0x3a>
 800263e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002642:	d100      	bne.n	8002646 <__cvt+0x36>
 8002644:	3501      	adds	r5, #1
 8002646:	2302      	movs	r3, #2
 8002648:	e000      	b.n	800264c <__cvt+0x3c>
 800264a:	2303      	movs	r3, #3
 800264c:	aa07      	add	r2, sp, #28
 800264e:	9204      	str	r2, [sp, #16]
 8002650:	aa06      	add	r2, sp, #24
 8002652:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002656:	e9cd 3500 	strd	r3, r5, [sp]
 800265a:	4622      	mov	r2, r4
 800265c:	463b      	mov	r3, r7
 800265e:	f000 ff53 	bl	8003508 <_dtoa_r>
 8002662:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002666:	4606      	mov	r6, r0
 8002668:	d102      	bne.n	8002670 <__cvt+0x60>
 800266a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800266c:	07db      	lsls	r3, r3, #31
 800266e:	d522      	bpl.n	80026b6 <__cvt+0xa6>
 8002670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002674:	eb06 0905 	add.w	r9, r6, r5
 8002678:	d110      	bne.n	800269c <__cvt+0x8c>
 800267a:	7833      	ldrb	r3, [r6, #0]
 800267c:	2b30      	cmp	r3, #48	; 0x30
 800267e:	d10a      	bne.n	8002696 <__cvt+0x86>
 8002680:	2200      	movs	r2, #0
 8002682:	2300      	movs	r3, #0
 8002684:	4620      	mov	r0, r4
 8002686:	4639      	mov	r1, r7
 8002688:	f7fe f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800268c:	b918      	cbnz	r0, 8002696 <__cvt+0x86>
 800268e:	f1c5 0501 	rsb	r5, r5, #1
 8002692:	f8ca 5000 	str.w	r5, [sl]
 8002696:	f8da 3000 	ldr.w	r3, [sl]
 800269a:	4499      	add	r9, r3
 800269c:	2200      	movs	r2, #0
 800269e:	2300      	movs	r3, #0
 80026a0:	4620      	mov	r0, r4
 80026a2:	4639      	mov	r1, r7
 80026a4:	f7fe f980 	bl	80009a8 <__aeabi_dcmpeq>
 80026a8:	b108      	cbz	r0, 80026ae <__cvt+0x9e>
 80026aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80026ae:	2230      	movs	r2, #48	; 0x30
 80026b0:	9b07      	ldr	r3, [sp, #28]
 80026b2:	454b      	cmp	r3, r9
 80026b4:	d307      	bcc.n	80026c6 <__cvt+0xb6>
 80026b6:	4630      	mov	r0, r6
 80026b8:	9b07      	ldr	r3, [sp, #28]
 80026ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80026bc:	1b9b      	subs	r3, r3, r6
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	b008      	add	sp, #32
 80026c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	9107      	str	r1, [sp, #28]
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e7f0      	b.n	80026b0 <__cvt+0xa0>

080026ce <__exponent>:
 80026ce:	4603      	mov	r3, r0
 80026d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026d2:	2900      	cmp	r1, #0
 80026d4:	f803 2b02 	strb.w	r2, [r3], #2
 80026d8:	bfb6      	itet	lt
 80026da:	222d      	movlt	r2, #45	; 0x2d
 80026dc:	222b      	movge	r2, #43	; 0x2b
 80026de:	4249      	neglt	r1, r1
 80026e0:	2909      	cmp	r1, #9
 80026e2:	7042      	strb	r2, [r0, #1]
 80026e4:	dd2a      	ble.n	800273c <__exponent+0x6e>
 80026e6:	f10d 0207 	add.w	r2, sp, #7
 80026ea:	4617      	mov	r7, r2
 80026ec:	260a      	movs	r6, #10
 80026ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80026f2:	4694      	mov	ip, r2
 80026f4:	fb06 1415 	mls	r4, r6, r5, r1
 80026f8:	3430      	adds	r4, #48	; 0x30
 80026fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80026fe:	460c      	mov	r4, r1
 8002700:	2c63      	cmp	r4, #99	; 0x63
 8002702:	4629      	mov	r1, r5
 8002704:	f102 32ff 	add.w	r2, r2, #4294967295
 8002708:	dcf1      	bgt.n	80026ee <__exponent+0x20>
 800270a:	3130      	adds	r1, #48	; 0x30
 800270c:	f1ac 0402 	sub.w	r4, ip, #2
 8002710:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002714:	4622      	mov	r2, r4
 8002716:	1c41      	adds	r1, r0, #1
 8002718:	42ba      	cmp	r2, r7
 800271a:	d30a      	bcc.n	8002732 <__exponent+0x64>
 800271c:	f10d 0209 	add.w	r2, sp, #9
 8002720:	eba2 020c 	sub.w	r2, r2, ip
 8002724:	42bc      	cmp	r4, r7
 8002726:	bf88      	it	hi
 8002728:	2200      	movhi	r2, #0
 800272a:	4413      	add	r3, r2
 800272c:	1a18      	subs	r0, r3, r0
 800272e:	b003      	add	sp, #12
 8002730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002732:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002736:	f801 5f01 	strb.w	r5, [r1, #1]!
 800273a:	e7ed      	b.n	8002718 <__exponent+0x4a>
 800273c:	2330      	movs	r3, #48	; 0x30
 800273e:	3130      	adds	r1, #48	; 0x30
 8002740:	7083      	strb	r3, [r0, #2]
 8002742:	70c1      	strb	r1, [r0, #3]
 8002744:	1d03      	adds	r3, r0, #4
 8002746:	e7f1      	b.n	800272c <__exponent+0x5e>

08002748 <_printf_float>:
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	b091      	sub	sp, #68	; 0x44
 800274e:	460c      	mov	r4, r1
 8002750:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002754:	4616      	mov	r6, r2
 8002756:	461f      	mov	r7, r3
 8002758:	4605      	mov	r5, r0
 800275a:	f000 fdc7 	bl	80032ec <_localeconv_r>
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	9309      	str	r3, [sp, #36]	; 0x24
 8002764:	f7fd fcf4 	bl	8000150 <strlen>
 8002768:	2300      	movs	r3, #0
 800276a:	930e      	str	r3, [sp, #56]	; 0x38
 800276c:	f8d8 3000 	ldr.w	r3, [r8]
 8002770:	900a      	str	r0, [sp, #40]	; 0x28
 8002772:	3307      	adds	r3, #7
 8002774:	f023 0307 	bic.w	r3, r3, #7
 8002778:	f103 0208 	add.w	r2, r3, #8
 800277c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002780:	f8d4 b000 	ldr.w	fp, [r4]
 8002784:	f8c8 2000 	str.w	r2, [r8]
 8002788:	e9d3 a800 	ldrd	sl, r8, [r3]
 800278c:	4652      	mov	r2, sl
 800278e:	4643      	mov	r3, r8
 8002790:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002794:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8002798:	930b      	str	r3, [sp, #44]	; 0x2c
 800279a:	f04f 32ff 	mov.w	r2, #4294967295
 800279e:	4650      	mov	r0, sl
 80027a0:	4b9c      	ldr	r3, [pc, #624]	; (8002a14 <_printf_float+0x2cc>)
 80027a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027a4:	f7fe f932 	bl	8000a0c <__aeabi_dcmpun>
 80027a8:	bb70      	cbnz	r0, 8002808 <_printf_float+0xc0>
 80027aa:	f04f 32ff 	mov.w	r2, #4294967295
 80027ae:	4650      	mov	r0, sl
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <_printf_float+0x2cc>)
 80027b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027b4:	f7fe f90c 	bl	80009d0 <__aeabi_dcmple>
 80027b8:	bb30      	cbnz	r0, 8002808 <_printf_float+0xc0>
 80027ba:	2200      	movs	r2, #0
 80027bc:	2300      	movs	r3, #0
 80027be:	4650      	mov	r0, sl
 80027c0:	4641      	mov	r1, r8
 80027c2:	f7fe f8fb 	bl	80009bc <__aeabi_dcmplt>
 80027c6:	b110      	cbz	r0, 80027ce <_printf_float+0x86>
 80027c8:	232d      	movs	r3, #45	; 0x2d
 80027ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ce:	4a92      	ldr	r2, [pc, #584]	; (8002a18 <_printf_float+0x2d0>)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <_printf_float+0x2d4>)
 80027d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80027d6:	bf94      	ite	ls
 80027d8:	4690      	movls	r8, r2
 80027da:	4698      	movhi	r8, r3
 80027dc:	2303      	movs	r3, #3
 80027de:	f04f 0a00 	mov.w	sl, #0
 80027e2:	6123      	str	r3, [r4, #16]
 80027e4:	f02b 0304 	bic.w	r3, fp, #4
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	4633      	mov	r3, r6
 80027ec:	4621      	mov	r1, r4
 80027ee:	4628      	mov	r0, r5
 80027f0:	9700      	str	r7, [sp, #0]
 80027f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80027f4:	f000 f9d6 	bl	8002ba4 <_printf_common>
 80027f8:	3001      	adds	r0, #1
 80027fa:	f040 8090 	bne.w	800291e <_printf_float+0x1d6>
 80027fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002802:	b011      	add	sp, #68	; 0x44
 8002804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002808:	4652      	mov	r2, sl
 800280a:	4643      	mov	r3, r8
 800280c:	4650      	mov	r0, sl
 800280e:	4641      	mov	r1, r8
 8002810:	f7fe f8fc 	bl	8000a0c <__aeabi_dcmpun>
 8002814:	b148      	cbz	r0, 800282a <_printf_float+0xe2>
 8002816:	f1b8 0f00 	cmp.w	r8, #0
 800281a:	bfb8      	it	lt
 800281c:	232d      	movlt	r3, #45	; 0x2d
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <_printf_float+0x2d8>)
 8002820:	bfb8      	it	lt
 8002822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <_printf_float+0x2dc>)
 8002828:	e7d3      	b.n	80027d2 <_printf_float+0x8a>
 800282a:	6863      	ldr	r3, [r4, #4]
 800282c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	d142      	bne.n	80028ba <_printf_float+0x172>
 8002834:	2306      	movs	r3, #6
 8002836:	6063      	str	r3, [r4, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	9206      	str	r2, [sp, #24]
 800283c:	aa0e      	add	r2, sp, #56	; 0x38
 800283e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002842:	aa0d      	add	r2, sp, #52	; 0x34
 8002844:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002848:	9203      	str	r2, [sp, #12]
 800284a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800284e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002852:	6023      	str	r3, [r4, #0]
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	4652      	mov	r2, sl
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4628      	mov	r0, r5
 800285c:	4643      	mov	r3, r8
 800285e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002860:	f7ff fed6 	bl	8002610 <__cvt>
 8002864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002866:	4680      	mov	r8, r0
 8002868:	2947      	cmp	r1, #71	; 0x47
 800286a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800286c:	d108      	bne.n	8002880 <_printf_float+0x138>
 800286e:	1cc8      	adds	r0, r1, #3
 8002870:	db02      	blt.n	8002878 <_printf_float+0x130>
 8002872:	6863      	ldr	r3, [r4, #4]
 8002874:	4299      	cmp	r1, r3
 8002876:	dd40      	ble.n	80028fa <_printf_float+0x1b2>
 8002878:	f1a9 0902 	sub.w	r9, r9, #2
 800287c:	fa5f f989 	uxtb.w	r9, r9
 8002880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002884:	d81f      	bhi.n	80028c6 <_printf_float+0x17e>
 8002886:	464a      	mov	r2, r9
 8002888:	3901      	subs	r1, #1
 800288a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800288e:	910d      	str	r1, [sp, #52]	; 0x34
 8002890:	f7ff ff1d 	bl	80026ce <__exponent>
 8002894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002896:	4682      	mov	sl, r0
 8002898:	1813      	adds	r3, r2, r0
 800289a:	2a01      	cmp	r2, #1
 800289c:	6123      	str	r3, [r4, #16]
 800289e:	dc02      	bgt.n	80028a6 <_printf_float+0x15e>
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	07d2      	lsls	r2, r2, #31
 80028a4:	d501      	bpl.n	80028aa <_printf_float+0x162>
 80028a6:	3301      	adds	r3, #1
 80028a8:	6123      	str	r3, [r4, #16]
 80028aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d09b      	beq.n	80027ea <_printf_float+0xa2>
 80028b2:	232d      	movs	r3, #45	; 0x2d
 80028b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028b8:	e797      	b.n	80027ea <_printf_float+0xa2>
 80028ba:	2947      	cmp	r1, #71	; 0x47
 80028bc:	d1bc      	bne.n	8002838 <_printf_float+0xf0>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ba      	bne.n	8002838 <_printf_float+0xf0>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e7b7      	b.n	8002836 <_printf_float+0xee>
 80028c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80028ca:	d118      	bne.n	80028fe <_printf_float+0x1b6>
 80028cc:	2900      	cmp	r1, #0
 80028ce:	6863      	ldr	r3, [r4, #4]
 80028d0:	dd0b      	ble.n	80028ea <_printf_float+0x1a2>
 80028d2:	6121      	str	r1, [r4, #16]
 80028d4:	b913      	cbnz	r3, 80028dc <_printf_float+0x194>
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	07d0      	lsls	r0, r2, #31
 80028da:	d502      	bpl.n	80028e2 <_printf_float+0x19a>
 80028dc:	3301      	adds	r3, #1
 80028de:	440b      	add	r3, r1
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	f04f 0a00 	mov.w	sl, #0
 80028e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80028e8:	e7df      	b.n	80028aa <_printf_float+0x162>
 80028ea:	b913      	cbnz	r3, 80028f2 <_printf_float+0x1aa>
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	07d2      	lsls	r2, r2, #31
 80028f0:	d501      	bpl.n	80028f6 <_printf_float+0x1ae>
 80028f2:	3302      	adds	r3, #2
 80028f4:	e7f4      	b.n	80028e0 <_printf_float+0x198>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e7f2      	b.n	80028e0 <_printf_float+0x198>
 80028fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80028fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002900:	4299      	cmp	r1, r3
 8002902:	db05      	blt.n	8002910 <_printf_float+0x1c8>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	6121      	str	r1, [r4, #16]
 8002908:	07d8      	lsls	r0, r3, #31
 800290a:	d5ea      	bpl.n	80028e2 <_printf_float+0x19a>
 800290c:	1c4b      	adds	r3, r1, #1
 800290e:	e7e7      	b.n	80028e0 <_printf_float+0x198>
 8002910:	2900      	cmp	r1, #0
 8002912:	bfcc      	ite	gt
 8002914:	2201      	movgt	r2, #1
 8002916:	f1c1 0202 	rsble	r2, r1, #2
 800291a:	4413      	add	r3, r2
 800291c:	e7e0      	b.n	80028e0 <_printf_float+0x198>
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	055a      	lsls	r2, r3, #21
 8002922:	d407      	bmi.n	8002934 <_printf_float+0x1ec>
 8002924:	6923      	ldr	r3, [r4, #16]
 8002926:	4642      	mov	r2, r8
 8002928:	4631      	mov	r1, r6
 800292a:	4628      	mov	r0, r5
 800292c:	47b8      	blx	r7
 800292e:	3001      	adds	r0, #1
 8002930:	d12b      	bne.n	800298a <_printf_float+0x242>
 8002932:	e764      	b.n	80027fe <_printf_float+0xb6>
 8002934:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002938:	f240 80dd 	bls.w	8002af6 <_printf_float+0x3ae>
 800293c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002940:	2200      	movs	r2, #0
 8002942:	2300      	movs	r3, #0
 8002944:	f7fe f830 	bl	80009a8 <__aeabi_dcmpeq>
 8002948:	2800      	cmp	r0, #0
 800294a:	d033      	beq.n	80029b4 <_printf_float+0x26c>
 800294c:	2301      	movs	r3, #1
 800294e:	4631      	mov	r1, r6
 8002950:	4628      	mov	r0, r5
 8002952:	4a35      	ldr	r2, [pc, #212]	; (8002a28 <_printf_float+0x2e0>)
 8002954:	47b8      	blx	r7
 8002956:	3001      	adds	r0, #1
 8002958:	f43f af51 	beq.w	80027fe <_printf_float+0xb6>
 800295c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002960:	429a      	cmp	r2, r3
 8002962:	db02      	blt.n	800296a <_printf_float+0x222>
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	07d8      	lsls	r0, r3, #31
 8002968:	d50f      	bpl.n	800298a <_printf_float+0x242>
 800296a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800296e:	4631      	mov	r1, r6
 8002970:	4628      	mov	r0, r5
 8002972:	47b8      	blx	r7
 8002974:	3001      	adds	r0, #1
 8002976:	f43f af42 	beq.w	80027fe <_printf_float+0xb6>
 800297a:	f04f 0800 	mov.w	r8, #0
 800297e:	f104 091a 	add.w	r9, r4, #26
 8002982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002984:	3b01      	subs	r3, #1
 8002986:	4543      	cmp	r3, r8
 8002988:	dc09      	bgt.n	800299e <_printf_float+0x256>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	079b      	lsls	r3, r3, #30
 800298e:	f100 8104 	bmi.w	8002b9a <_printf_float+0x452>
 8002992:	68e0      	ldr	r0, [r4, #12]
 8002994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002996:	4298      	cmp	r0, r3
 8002998:	bfb8      	it	lt
 800299a:	4618      	movlt	r0, r3
 800299c:	e731      	b.n	8002802 <_printf_float+0xba>
 800299e:	2301      	movs	r3, #1
 80029a0:	464a      	mov	r2, r9
 80029a2:	4631      	mov	r1, r6
 80029a4:	4628      	mov	r0, r5
 80029a6:	47b8      	blx	r7
 80029a8:	3001      	adds	r0, #1
 80029aa:	f43f af28 	beq.w	80027fe <_printf_float+0xb6>
 80029ae:	f108 0801 	add.w	r8, r8, #1
 80029b2:	e7e6      	b.n	8002982 <_printf_float+0x23a>
 80029b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	dc38      	bgt.n	8002a2c <_printf_float+0x2e4>
 80029ba:	2301      	movs	r3, #1
 80029bc:	4631      	mov	r1, r6
 80029be:	4628      	mov	r0, r5
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <_printf_float+0x2e0>)
 80029c2:	47b8      	blx	r7
 80029c4:	3001      	adds	r0, #1
 80029c6:	f43f af1a 	beq.w	80027fe <_printf_float+0xb6>
 80029ca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80029ce:	4313      	orrs	r3, r2
 80029d0:	d102      	bne.n	80029d8 <_printf_float+0x290>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	07d9      	lsls	r1, r3, #31
 80029d6:	d5d8      	bpl.n	800298a <_printf_float+0x242>
 80029d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029dc:	4631      	mov	r1, r6
 80029de:	4628      	mov	r0, r5
 80029e0:	47b8      	blx	r7
 80029e2:	3001      	adds	r0, #1
 80029e4:	f43f af0b 	beq.w	80027fe <_printf_float+0xb6>
 80029e8:	f04f 0900 	mov.w	r9, #0
 80029ec:	f104 0a1a 	add.w	sl, r4, #26
 80029f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029f2:	425b      	negs	r3, r3
 80029f4:	454b      	cmp	r3, r9
 80029f6:	dc01      	bgt.n	80029fc <_printf_float+0x2b4>
 80029f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029fa:	e794      	b.n	8002926 <_printf_float+0x1de>
 80029fc:	2301      	movs	r3, #1
 80029fe:	4652      	mov	r2, sl
 8002a00:	4631      	mov	r1, r6
 8002a02:	4628      	mov	r0, r5
 8002a04:	47b8      	blx	r7
 8002a06:	3001      	adds	r0, #1
 8002a08:	f43f aef9 	beq.w	80027fe <_printf_float+0xb6>
 8002a0c:	f109 0901 	add.w	r9, r9, #1
 8002a10:	e7ee      	b.n	80029f0 <_printf_float+0x2a8>
 8002a12:	bf00      	nop
 8002a14:	7fefffff 	.word	0x7fefffff
 8002a18:	080050a2 	.word	0x080050a2
 8002a1c:	080050a6 	.word	0x080050a6
 8002a20:	080050aa 	.word	0x080050aa
 8002a24:	080050ae 	.word	0x080050ae
 8002a28:	080050b2 	.word	0x080050b2
 8002a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a30:	429a      	cmp	r2, r3
 8002a32:	bfa8      	it	ge
 8002a34:	461a      	movge	r2, r3
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	4691      	mov	r9, r2
 8002a3a:	dc37      	bgt.n	8002aac <_printf_float+0x364>
 8002a3c:	f04f 0b00 	mov.w	fp, #0
 8002a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002a44:	f104 021a 	add.w	r2, r4, #26
 8002a48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002a4c:	ebaa 0309 	sub.w	r3, sl, r9
 8002a50:	455b      	cmp	r3, fp
 8002a52:	dc33      	bgt.n	8002abc <_printf_float+0x374>
 8002a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	db3b      	blt.n	8002ad4 <_printf_float+0x38c>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	07da      	lsls	r2, r3, #31
 8002a60:	d438      	bmi.n	8002ad4 <_printf_float+0x38c>
 8002a62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002a66:	eba2 0903 	sub.w	r9, r2, r3
 8002a6a:	eba2 020a 	sub.w	r2, r2, sl
 8002a6e:	4591      	cmp	r9, r2
 8002a70:	bfa8      	it	ge
 8002a72:	4691      	movge	r9, r2
 8002a74:	f1b9 0f00 	cmp.w	r9, #0
 8002a78:	dc34      	bgt.n	8002ae4 <_printf_float+0x39c>
 8002a7a:	f04f 0800 	mov.w	r8, #0
 8002a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002a82:	f104 0a1a 	add.w	sl, r4, #26
 8002a86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	eba3 0309 	sub.w	r3, r3, r9
 8002a90:	4543      	cmp	r3, r8
 8002a92:	f77f af7a 	ble.w	800298a <_printf_float+0x242>
 8002a96:	2301      	movs	r3, #1
 8002a98:	4652      	mov	r2, sl
 8002a9a:	4631      	mov	r1, r6
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	47b8      	blx	r7
 8002aa0:	3001      	adds	r0, #1
 8002aa2:	f43f aeac 	beq.w	80027fe <_printf_float+0xb6>
 8002aa6:	f108 0801 	add.w	r8, r8, #1
 8002aaa:	e7ec      	b.n	8002a86 <_printf_float+0x33e>
 8002aac:	4613      	mov	r3, r2
 8002aae:	4631      	mov	r1, r6
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	47b8      	blx	r7
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d1c0      	bne.n	8002a3c <_printf_float+0x2f4>
 8002aba:	e6a0      	b.n	80027fe <_printf_float+0xb6>
 8002abc:	2301      	movs	r3, #1
 8002abe:	4631      	mov	r1, r6
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ac4:	47b8      	blx	r7
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	f43f ae99 	beq.w	80027fe <_printf_float+0xb6>
 8002acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ace:	f10b 0b01 	add.w	fp, fp, #1
 8002ad2:	e7b9      	b.n	8002a48 <_printf_float+0x300>
 8002ad4:	4631      	mov	r1, r6
 8002ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ada:	4628      	mov	r0, r5
 8002adc:	47b8      	blx	r7
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d1bf      	bne.n	8002a62 <_printf_float+0x31a>
 8002ae2:	e68c      	b.n	80027fe <_printf_float+0xb6>
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	4628      	mov	r0, r5
 8002aea:	eb08 020a 	add.w	r2, r8, sl
 8002aee:	47b8      	blx	r7
 8002af0:	3001      	adds	r0, #1
 8002af2:	d1c2      	bne.n	8002a7a <_printf_float+0x332>
 8002af4:	e683      	b.n	80027fe <_printf_float+0xb6>
 8002af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002af8:	2a01      	cmp	r2, #1
 8002afa:	dc01      	bgt.n	8002b00 <_printf_float+0x3b8>
 8002afc:	07db      	lsls	r3, r3, #31
 8002afe:	d539      	bpl.n	8002b74 <_printf_float+0x42c>
 8002b00:	2301      	movs	r3, #1
 8002b02:	4642      	mov	r2, r8
 8002b04:	4631      	mov	r1, r6
 8002b06:	4628      	mov	r0, r5
 8002b08:	47b8      	blx	r7
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	f43f ae77 	beq.w	80027fe <_printf_float+0xb6>
 8002b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b14:	4631      	mov	r1, r6
 8002b16:	4628      	mov	r0, r5
 8002b18:	47b8      	blx	r7
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	f43f ae6f 	beq.w	80027fe <_printf_float+0xb6>
 8002b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b24:	2200      	movs	r2, #0
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8002b2c:	f7fd ff3c 	bl	80009a8 <__aeabi_dcmpeq>
 8002b30:	b9d8      	cbnz	r0, 8002b6a <_printf_float+0x422>
 8002b32:	f109 33ff 	add.w	r3, r9, #4294967295
 8002b36:	f108 0201 	add.w	r2, r8, #1
 8002b3a:	4631      	mov	r1, r6
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	47b8      	blx	r7
 8002b40:	3001      	adds	r0, #1
 8002b42:	d10e      	bne.n	8002b62 <_printf_float+0x41a>
 8002b44:	e65b      	b.n	80027fe <_printf_float+0xb6>
 8002b46:	2301      	movs	r3, #1
 8002b48:	464a      	mov	r2, r9
 8002b4a:	4631      	mov	r1, r6
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	47b8      	blx	r7
 8002b50:	3001      	adds	r0, #1
 8002b52:	f43f ae54 	beq.w	80027fe <_printf_float+0xb6>
 8002b56:	f108 0801 	add.w	r8, r8, #1
 8002b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	4543      	cmp	r3, r8
 8002b60:	dcf1      	bgt.n	8002b46 <_printf_float+0x3fe>
 8002b62:	4653      	mov	r3, sl
 8002b64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002b68:	e6de      	b.n	8002928 <_printf_float+0x1e0>
 8002b6a:	f04f 0800 	mov.w	r8, #0
 8002b6e:	f104 091a 	add.w	r9, r4, #26
 8002b72:	e7f2      	b.n	8002b5a <_printf_float+0x412>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4642      	mov	r2, r8
 8002b78:	e7df      	b.n	8002b3a <_printf_float+0x3f2>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	464a      	mov	r2, r9
 8002b7e:	4631      	mov	r1, r6
 8002b80:	4628      	mov	r0, r5
 8002b82:	47b8      	blx	r7
 8002b84:	3001      	adds	r0, #1
 8002b86:	f43f ae3a 	beq.w	80027fe <_printf_float+0xb6>
 8002b8a:	f108 0801 	add.w	r8, r8, #1
 8002b8e:	68e3      	ldr	r3, [r4, #12]
 8002b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	4543      	cmp	r3, r8
 8002b96:	dcf0      	bgt.n	8002b7a <_printf_float+0x432>
 8002b98:	e6fb      	b.n	8002992 <_printf_float+0x24a>
 8002b9a:	f04f 0800 	mov.w	r8, #0
 8002b9e:	f104 0919 	add.w	r9, r4, #25
 8002ba2:	e7f4      	b.n	8002b8e <_printf_float+0x446>

08002ba4 <_printf_common>:
 8002ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba8:	4616      	mov	r6, r2
 8002baa:	4699      	mov	r9, r3
 8002bac:	688a      	ldr	r2, [r1, #8]
 8002bae:	690b      	ldr	r3, [r1, #16]
 8002bb0:	4607      	mov	r7, r0
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	bfb8      	it	lt
 8002bb6:	4613      	movlt	r3, r2
 8002bb8:	6033      	str	r3, [r6, #0]
 8002bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bc4:	b10a      	cbz	r2, 8002bca <_printf_common+0x26>
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	6033      	str	r3, [r6, #0]
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	0699      	lsls	r1, r3, #26
 8002bce:	bf42      	ittt	mi
 8002bd0:	6833      	ldrmi	r3, [r6, #0]
 8002bd2:	3302      	addmi	r3, #2
 8002bd4:	6033      	strmi	r3, [r6, #0]
 8002bd6:	6825      	ldr	r5, [r4, #0]
 8002bd8:	f015 0506 	ands.w	r5, r5, #6
 8002bdc:	d106      	bne.n	8002bec <_printf_common+0x48>
 8002bde:	f104 0a19 	add.w	sl, r4, #25
 8002be2:	68e3      	ldr	r3, [r4, #12]
 8002be4:	6832      	ldr	r2, [r6, #0]
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	dc2b      	bgt.n	8002c44 <_printf_common+0xa0>
 8002bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bf0:	1e13      	subs	r3, r2, #0
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	bf18      	it	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	0692      	lsls	r2, r2, #26
 8002bfa:	d430      	bmi.n	8002c5e <_printf_common+0xba>
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c04:	47c0      	blx	r8
 8002c06:	3001      	adds	r0, #1
 8002c08:	d023      	beq.n	8002c52 <_printf_common+0xae>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	6922      	ldr	r2, [r4, #16]
 8002c0e:	f003 0306 	and.w	r3, r3, #6
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf14      	ite	ne
 8002c16:	2500      	movne	r5, #0
 8002c18:	6833      	ldreq	r3, [r6, #0]
 8002c1a:	f04f 0600 	mov.w	r6, #0
 8002c1e:	bf08      	it	eq
 8002c20:	68e5      	ldreq	r5, [r4, #12]
 8002c22:	f104 041a 	add.w	r4, r4, #26
 8002c26:	bf08      	it	eq
 8002c28:	1aed      	subeq	r5, r5, r3
 8002c2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c2e:	bf08      	it	eq
 8002c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bfc4      	itt	gt
 8002c38:	1a9b      	subgt	r3, r3, r2
 8002c3a:	18ed      	addgt	r5, r5, r3
 8002c3c:	42b5      	cmp	r5, r6
 8002c3e:	d11a      	bne.n	8002c76 <_printf_common+0xd2>
 8002c40:	2000      	movs	r0, #0
 8002c42:	e008      	b.n	8002c56 <_printf_common+0xb2>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4652      	mov	r2, sl
 8002c48:	4649      	mov	r1, r9
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	47c0      	blx	r8
 8002c4e:	3001      	adds	r0, #1
 8002c50:	d103      	bne.n	8002c5a <_printf_common+0xb6>
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295
 8002c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5a:	3501      	adds	r5, #1
 8002c5c:	e7c1      	b.n	8002be2 <_printf_common+0x3e>
 8002c5e:	2030      	movs	r0, #48	; 0x30
 8002c60:	18e1      	adds	r1, r4, r3
 8002c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c6c:	4422      	add	r2, r4
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c74:	e7c2      	b.n	8002bfc <_printf_common+0x58>
 8002c76:	2301      	movs	r3, #1
 8002c78:	4622      	mov	r2, r4
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	47c0      	blx	r8
 8002c80:	3001      	adds	r0, #1
 8002c82:	d0e6      	beq.n	8002c52 <_printf_common+0xae>
 8002c84:	3601      	adds	r6, #1
 8002c86:	e7d9      	b.n	8002c3c <_printf_common+0x98>

08002c88 <_printf_i>:
 8002c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c8c:	7e0f      	ldrb	r7, [r1, #24]
 8002c8e:	4691      	mov	r9, r2
 8002c90:	2f78      	cmp	r7, #120	; 0x78
 8002c92:	4680      	mov	r8, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	469a      	mov	sl, r3
 8002c98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c9e:	d807      	bhi.n	8002cb0 <_printf_i+0x28>
 8002ca0:	2f62      	cmp	r7, #98	; 0x62
 8002ca2:	d80a      	bhi.n	8002cba <_printf_i+0x32>
 8002ca4:	2f00      	cmp	r7, #0
 8002ca6:	f000 80d5 	beq.w	8002e54 <_printf_i+0x1cc>
 8002caa:	2f58      	cmp	r7, #88	; 0x58
 8002cac:	f000 80c1 	beq.w	8002e32 <_printf_i+0x1aa>
 8002cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cb8:	e03a      	b.n	8002d30 <_printf_i+0xa8>
 8002cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cbe:	2b15      	cmp	r3, #21
 8002cc0:	d8f6      	bhi.n	8002cb0 <_printf_i+0x28>
 8002cc2:	a101      	add	r1, pc, #4	; (adr r1, 8002cc8 <_printf_i+0x40>)
 8002cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002cb1 	.word	0x08002cb1
 8002cd4:	08002cb1 	.word	0x08002cb1
 8002cd8:	08002cb1 	.word	0x08002cb1
 8002cdc:	08002cb1 	.word	0x08002cb1
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002cb1 	.word	0x08002cb1
 8002ce8:	08002cb1 	.word	0x08002cb1
 8002cec:	08002cb1 	.word	0x08002cb1
 8002cf0:	08002cb1 	.word	0x08002cb1
 8002cf4:	08002e3b 	.word	0x08002e3b
 8002cf8:	08002d61 	.word	0x08002d61
 8002cfc:	08002df5 	.word	0x08002df5
 8002d00:	08002cb1 	.word	0x08002cb1
 8002d04:	08002cb1 	.word	0x08002cb1
 8002d08:	08002e5d 	.word	0x08002e5d
 8002d0c:	08002cb1 	.word	0x08002cb1
 8002d10:	08002d61 	.word	0x08002d61
 8002d14:	08002cb1 	.word	0x08002cb1
 8002d18:	08002cb1 	.word	0x08002cb1
 8002d1c:	08002dfd 	.word	0x08002dfd
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	602a      	str	r2, [r5, #0]
 8002d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0a0      	b.n	8002e76 <_printf_i+0x1ee>
 8002d34:	6820      	ldr	r0, [r4, #0]
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	0607      	lsls	r7, r0, #24
 8002d3a:	f103 0104 	add.w	r1, r3, #4
 8002d3e:	6029      	str	r1, [r5, #0]
 8002d40:	d501      	bpl.n	8002d46 <_printf_i+0xbe>
 8002d42:	681e      	ldr	r6, [r3, #0]
 8002d44:	e003      	b.n	8002d4e <_printf_i+0xc6>
 8002d46:	0646      	lsls	r6, r0, #25
 8002d48:	d5fb      	bpl.n	8002d42 <_printf_i+0xba>
 8002d4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d4e:	2e00      	cmp	r6, #0
 8002d50:	da03      	bge.n	8002d5a <_printf_i+0xd2>
 8002d52:	232d      	movs	r3, #45	; 0x2d
 8002d54:	4276      	negs	r6, r6
 8002d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	4859      	ldr	r0, [pc, #356]	; (8002ec4 <_printf_i+0x23c>)
 8002d5e:	e012      	b.n	8002d86 <_printf_i+0xfe>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	6820      	ldr	r0, [r4, #0]
 8002d64:	1d19      	adds	r1, r3, #4
 8002d66:	6029      	str	r1, [r5, #0]
 8002d68:	0605      	lsls	r5, r0, #24
 8002d6a:	d501      	bpl.n	8002d70 <_printf_i+0xe8>
 8002d6c:	681e      	ldr	r6, [r3, #0]
 8002d6e:	e002      	b.n	8002d76 <_printf_i+0xee>
 8002d70:	0641      	lsls	r1, r0, #25
 8002d72:	d5fb      	bpl.n	8002d6c <_printf_i+0xe4>
 8002d74:	881e      	ldrh	r6, [r3, #0]
 8002d76:	2f6f      	cmp	r7, #111	; 0x6f
 8002d78:	bf0c      	ite	eq
 8002d7a:	2308      	moveq	r3, #8
 8002d7c:	230a      	movne	r3, #10
 8002d7e:	4851      	ldr	r0, [pc, #324]	; (8002ec4 <_printf_i+0x23c>)
 8002d80:	2100      	movs	r1, #0
 8002d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d86:	6865      	ldr	r5, [r4, #4]
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	bfa8      	it	ge
 8002d8c:	6821      	ldrge	r1, [r4, #0]
 8002d8e:	60a5      	str	r5, [r4, #8]
 8002d90:	bfa4      	itt	ge
 8002d92:	f021 0104 	bicge.w	r1, r1, #4
 8002d96:	6021      	strge	r1, [r4, #0]
 8002d98:	b90e      	cbnz	r6, 8002d9e <_printf_i+0x116>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d04b      	beq.n	8002e36 <_printf_i+0x1ae>
 8002d9e:	4615      	mov	r5, r2
 8002da0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002da4:	fb03 6711 	mls	r7, r3, r1, r6
 8002da8:	5dc7      	ldrb	r7, [r0, r7]
 8002daa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002dae:	4637      	mov	r7, r6
 8002db0:	42bb      	cmp	r3, r7
 8002db2:	460e      	mov	r6, r1
 8002db4:	d9f4      	bls.n	8002da0 <_printf_i+0x118>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d10b      	bne.n	8002dd2 <_printf_i+0x14a>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	07de      	lsls	r6, r3, #31
 8002dbe:	d508      	bpl.n	8002dd2 <_printf_i+0x14a>
 8002dc0:	6923      	ldr	r3, [r4, #16]
 8002dc2:	6861      	ldr	r1, [r4, #4]
 8002dc4:	4299      	cmp	r1, r3
 8002dc6:	bfde      	ittt	le
 8002dc8:	2330      	movle	r3, #48	; 0x30
 8002dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dd2:	1b52      	subs	r2, r2, r5
 8002dd4:	6122      	str	r2, [r4, #16]
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	4621      	mov	r1, r4
 8002dda:	4640      	mov	r0, r8
 8002ddc:	f8cd a000 	str.w	sl, [sp]
 8002de0:	aa03      	add	r2, sp, #12
 8002de2:	f7ff fedf 	bl	8002ba4 <_printf_common>
 8002de6:	3001      	adds	r0, #1
 8002de8:	d14a      	bne.n	8002e80 <_printf_i+0x1f8>
 8002dea:	f04f 30ff 	mov.w	r0, #4294967295
 8002dee:	b004      	add	sp, #16
 8002df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	2778      	movs	r7, #120	; 0x78
 8002dfe:	4832      	ldr	r0, [pc, #200]	; (8002ec8 <_printf_i+0x240>)
 8002e00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	6829      	ldr	r1, [r5, #0]
 8002e08:	061f      	lsls	r7, r3, #24
 8002e0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e0e:	d402      	bmi.n	8002e16 <_printf_i+0x18e>
 8002e10:	065f      	lsls	r7, r3, #25
 8002e12:	bf48      	it	mi
 8002e14:	b2b6      	uxthmi	r6, r6
 8002e16:	07df      	lsls	r7, r3, #31
 8002e18:	bf48      	it	mi
 8002e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8002e1e:	6029      	str	r1, [r5, #0]
 8002e20:	bf48      	it	mi
 8002e22:	6023      	strmi	r3, [r4, #0]
 8002e24:	b91e      	cbnz	r6, 8002e2e <_printf_i+0x1a6>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	f023 0320 	bic.w	r3, r3, #32
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	2310      	movs	r3, #16
 8002e30:	e7a6      	b.n	8002d80 <_printf_i+0xf8>
 8002e32:	4824      	ldr	r0, [pc, #144]	; (8002ec4 <_printf_i+0x23c>)
 8002e34:	e7e4      	b.n	8002e00 <_printf_i+0x178>
 8002e36:	4615      	mov	r5, r2
 8002e38:	e7bd      	b.n	8002db6 <_printf_i+0x12e>
 8002e3a:	682b      	ldr	r3, [r5, #0]
 8002e3c:	6826      	ldr	r6, [r4, #0]
 8002e3e:	1d18      	adds	r0, r3, #4
 8002e40:	6961      	ldr	r1, [r4, #20]
 8002e42:	6028      	str	r0, [r5, #0]
 8002e44:	0635      	lsls	r5, r6, #24
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	d501      	bpl.n	8002e4e <_printf_i+0x1c6>
 8002e4a:	6019      	str	r1, [r3, #0]
 8002e4c:	e002      	b.n	8002e54 <_printf_i+0x1cc>
 8002e4e:	0670      	lsls	r0, r6, #25
 8002e50:	d5fb      	bpl.n	8002e4a <_printf_i+0x1c2>
 8002e52:	8019      	strh	r1, [r3, #0]
 8002e54:	2300      	movs	r3, #0
 8002e56:	4615      	mov	r5, r2
 8002e58:	6123      	str	r3, [r4, #16]
 8002e5a:	e7bc      	b.n	8002dd6 <_printf_i+0x14e>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	2100      	movs	r1, #0
 8002e60:	1d1a      	adds	r2, r3, #4
 8002e62:	602a      	str	r2, [r5, #0]
 8002e64:	681d      	ldr	r5, [r3, #0]
 8002e66:	6862      	ldr	r2, [r4, #4]
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 fab6 	bl	80033da <memchr>
 8002e6e:	b108      	cbz	r0, 8002e74 <_printf_i+0x1ec>
 8002e70:	1b40      	subs	r0, r0, r5
 8002e72:	6060      	str	r0, [r4, #4]
 8002e74:	6863      	ldr	r3, [r4, #4]
 8002e76:	6123      	str	r3, [r4, #16]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e7e:	e7aa      	b.n	8002dd6 <_printf_i+0x14e>
 8002e80:	462a      	mov	r2, r5
 8002e82:	4649      	mov	r1, r9
 8002e84:	4640      	mov	r0, r8
 8002e86:	6923      	ldr	r3, [r4, #16]
 8002e88:	47d0      	blx	sl
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d0ad      	beq.n	8002dea <_printf_i+0x162>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	079b      	lsls	r3, r3, #30
 8002e92:	d413      	bmi.n	8002ebc <_printf_i+0x234>
 8002e94:	68e0      	ldr	r0, [r4, #12]
 8002e96:	9b03      	ldr	r3, [sp, #12]
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	bfb8      	it	lt
 8002e9c:	4618      	movlt	r0, r3
 8002e9e:	e7a6      	b.n	8002dee <_printf_i+0x166>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	4632      	mov	r2, r6
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	47d0      	blx	sl
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d09d      	beq.n	8002dea <_printf_i+0x162>
 8002eae:	3501      	adds	r5, #1
 8002eb0:	68e3      	ldr	r3, [r4, #12]
 8002eb2:	9903      	ldr	r1, [sp, #12]
 8002eb4:	1a5b      	subs	r3, r3, r1
 8002eb6:	42ab      	cmp	r3, r5
 8002eb8:	dcf2      	bgt.n	8002ea0 <_printf_i+0x218>
 8002eba:	e7eb      	b.n	8002e94 <_printf_i+0x20c>
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	f104 0619 	add.w	r6, r4, #25
 8002ec2:	e7f5      	b.n	8002eb0 <_printf_i+0x228>
 8002ec4:	080050b4 	.word	0x080050b4
 8002ec8:	080050c5 	.word	0x080050c5

08002ecc <std>:
 8002ecc:	2300      	movs	r3, #0
 8002ece:	b510      	push	{r4, lr}
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eda:	6083      	str	r3, [r0, #8]
 8002edc:	8181      	strh	r1, [r0, #12]
 8002ede:	6643      	str	r3, [r0, #100]	; 0x64
 8002ee0:	81c2      	strh	r2, [r0, #14]
 8002ee2:	6183      	str	r3, [r0, #24]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	305c      	adds	r0, #92	; 0x5c
 8002eea:	f000 f9f7 	bl	80032dc <memset>
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <std+0x58>)
 8002ef0:	6224      	str	r4, [r4, #32]
 8002ef2:	6263      	str	r3, [r4, #36]	; 0x24
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <std+0x5c>)
 8002ef6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <std+0x60>)
 8002efa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <std+0x64>)
 8002efe:	6323      	str	r3, [r4, #48]	; 0x30
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <std+0x68>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	d006      	beq.n	8002f14 <std+0x48>
 8002f06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f0a:	4294      	cmp	r4, r2
 8002f0c:	d002      	beq.n	8002f14 <std+0x48>
 8002f0e:	33d0      	adds	r3, #208	; 0xd0
 8002f10:	429c      	cmp	r4, r3
 8002f12:	d105      	bne.n	8002f20 <std+0x54>
 8002f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1c:	f000 ba5a 	b.w	80033d4 <__retarget_lock_init_recursive>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	bf00      	nop
 8002f24:	0800312d 	.word	0x0800312d
 8002f28:	0800314f 	.word	0x0800314f
 8002f2c:	08003187 	.word	0x08003187
 8002f30:	080031ab 	.word	0x080031ab
 8002f34:	20000294 	.word	0x20000294

08002f38 <stdio_exit_handler>:
 8002f38:	4a02      	ldr	r2, [pc, #8]	; (8002f44 <stdio_exit_handler+0xc>)
 8002f3a:	4903      	ldr	r1, [pc, #12]	; (8002f48 <stdio_exit_handler+0x10>)
 8002f3c:	4803      	ldr	r0, [pc, #12]	; (8002f4c <stdio_exit_handler+0x14>)
 8002f3e:	f000 b869 	b.w	8003014 <_fwalk_sglue>
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	08004d41 	.word	0x08004d41
 8002f4c:	20000018 	.word	0x20000018

08002f50 <cleanup_stdio>:
 8002f50:	6841      	ldr	r1, [r0, #4]
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <cleanup_stdio+0x34>)
 8002f54:	b510      	push	{r4, lr}
 8002f56:	4299      	cmp	r1, r3
 8002f58:	4604      	mov	r4, r0
 8002f5a:	d001      	beq.n	8002f60 <cleanup_stdio+0x10>
 8002f5c:	f001 fef0 	bl	8004d40 <_fflush_r>
 8002f60:	68a1      	ldr	r1, [r4, #8]
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <cleanup_stdio+0x38>)
 8002f64:	4299      	cmp	r1, r3
 8002f66:	d002      	beq.n	8002f6e <cleanup_stdio+0x1e>
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f001 fee9 	bl	8004d40 <_fflush_r>
 8002f6e:	68e1      	ldr	r1, [r4, #12]
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <cleanup_stdio+0x3c>)
 8002f72:	4299      	cmp	r1, r3
 8002f74:	d004      	beq.n	8002f80 <cleanup_stdio+0x30>
 8002f76:	4620      	mov	r0, r4
 8002f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f7c:	f001 bee0 	b.w	8004d40 <_fflush_r>
 8002f80:	bd10      	pop	{r4, pc}
 8002f82:	bf00      	nop
 8002f84:	20000294 	.word	0x20000294
 8002f88:	200002fc 	.word	0x200002fc
 8002f8c:	20000364 	.word	0x20000364

08002f90 <global_stdio_init.part.0>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <global_stdio_init.part.0+0x30>)
 8002f94:	4c0b      	ldr	r4, [pc, #44]	; (8002fc4 <global_stdio_init.part.0+0x34>)
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <global_stdio_init.part.0+0x38>)
 8002f98:	4620      	mov	r0, r4
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f7ff ff94 	bl	8002ecc <std>
 8002fa4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2109      	movs	r1, #9
 8002fac:	f7ff ff8e 	bl	8002ecc <std>
 8002fb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fba:	2112      	movs	r1, #18
 8002fbc:	f7ff bf86 	b.w	8002ecc <std>
 8002fc0:	200003cc 	.word	0x200003cc
 8002fc4:	20000294 	.word	0x20000294
 8002fc8:	08002f39 	.word	0x08002f39

08002fcc <__sfp_lock_acquire>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	; (8002fd4 <__sfp_lock_acquire+0x8>)
 8002fce:	f000 ba02 	b.w	80033d6 <__retarget_lock_acquire_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	200003d5 	.word	0x200003d5

08002fd8 <__sfp_lock_release>:
 8002fd8:	4801      	ldr	r0, [pc, #4]	; (8002fe0 <__sfp_lock_release+0x8>)
 8002fda:	f000 b9fd 	b.w	80033d8 <__retarget_lock_release_recursive>
 8002fde:	bf00      	nop
 8002fe0:	200003d5 	.word	0x200003d5

08002fe4 <__sinit>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	f7ff fff0 	bl	8002fcc <__sfp_lock_acquire>
 8002fec:	6a23      	ldr	r3, [r4, #32]
 8002fee:	b11b      	cbz	r3, 8002ff8 <__sinit+0x14>
 8002ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff4:	f7ff bff0 	b.w	8002fd8 <__sfp_lock_release>
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__sinit+0x28>)
 8002ffa:	6223      	str	r3, [r4, #32]
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__sinit+0x2c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f5      	bne.n	8002ff0 <__sinit+0xc>
 8003004:	f7ff ffc4 	bl	8002f90 <global_stdio_init.part.0>
 8003008:	e7f2      	b.n	8002ff0 <__sinit+0xc>
 800300a:	bf00      	nop
 800300c:	08002f51 	.word	0x08002f51
 8003010:	200003cc 	.word	0x200003cc

08003014 <_fwalk_sglue>:
 8003014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003018:	4607      	mov	r7, r0
 800301a:	4688      	mov	r8, r1
 800301c:	4614      	mov	r4, r2
 800301e:	2600      	movs	r6, #0
 8003020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003024:	f1b9 0901 	subs.w	r9, r9, #1
 8003028:	d505      	bpl.n	8003036 <_fwalk_sglue+0x22>
 800302a:	6824      	ldr	r4, [r4, #0]
 800302c:	2c00      	cmp	r4, #0
 800302e:	d1f7      	bne.n	8003020 <_fwalk_sglue+0xc>
 8003030:	4630      	mov	r0, r6
 8003032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003036:	89ab      	ldrh	r3, [r5, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d907      	bls.n	800304c <_fwalk_sglue+0x38>
 800303c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003040:	3301      	adds	r3, #1
 8003042:	d003      	beq.n	800304c <_fwalk_sglue+0x38>
 8003044:	4629      	mov	r1, r5
 8003046:	4638      	mov	r0, r7
 8003048:	47c0      	blx	r8
 800304a:	4306      	orrs	r6, r0
 800304c:	3568      	adds	r5, #104	; 0x68
 800304e:	e7e9      	b.n	8003024 <_fwalk_sglue+0x10>

08003050 <iprintf>:
 8003050:	b40f      	push	{r0, r1, r2, r3}
 8003052:	b507      	push	{r0, r1, r2, lr}
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <iprintf+0x20>)
 8003056:	ab04      	add	r3, sp, #16
 8003058:	6808      	ldr	r0, [r1, #0]
 800305a:	f853 2b04 	ldr.w	r2, [r3], #4
 800305e:	6881      	ldr	r1, [r0, #8]
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	f001 fcd1 	bl	8004a08 <_vfiprintf_r>
 8003066:	b003      	add	sp, #12
 8003068:	f85d eb04 	ldr.w	lr, [sp], #4
 800306c:	b004      	add	sp, #16
 800306e:	4770      	bx	lr
 8003070:	20000064 	.word	0x20000064

08003074 <_puts_r>:
 8003074:	6a03      	ldr	r3, [r0, #32]
 8003076:	b570      	push	{r4, r5, r6, lr}
 8003078:	4605      	mov	r5, r0
 800307a:	460e      	mov	r6, r1
 800307c:	6884      	ldr	r4, [r0, #8]
 800307e:	b90b      	cbnz	r3, 8003084 <_puts_r+0x10>
 8003080:	f7ff ffb0 	bl	8002fe4 <__sinit>
 8003084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003086:	07db      	lsls	r3, r3, #31
 8003088:	d405      	bmi.n	8003096 <_puts_r+0x22>
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	0598      	lsls	r0, r3, #22
 800308e:	d402      	bmi.n	8003096 <_puts_r+0x22>
 8003090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003092:	f000 f9a0 	bl	80033d6 <__retarget_lock_acquire_recursive>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	0719      	lsls	r1, r3, #28
 800309a:	d513      	bpl.n	80030c4 <_puts_r+0x50>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b18b      	cbz	r3, 80030c4 <_puts_r+0x50>
 80030a0:	3e01      	subs	r6, #1
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	b9e9      	cbnz	r1, 80030ea <_puts_r+0x76>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da2e      	bge.n	8003110 <_puts_r+0x9c>
 80030b2:	4622      	mov	r2, r4
 80030b4:	210a      	movs	r1, #10
 80030b6:	4628      	mov	r0, r5
 80030b8:	f000 f87b 	bl	80031b2 <__swbuf_r>
 80030bc:	3001      	adds	r0, #1
 80030be:	d007      	beq.n	80030d0 <_puts_r+0x5c>
 80030c0:	250a      	movs	r5, #10
 80030c2:	e007      	b.n	80030d4 <_puts_r+0x60>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f8b0 	bl	800322c <__swsetup_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d0e7      	beq.n	80030a0 <_puts_r+0x2c>
 80030d0:	f04f 35ff 	mov.w	r5, #4294967295
 80030d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030d6:	07da      	lsls	r2, r3, #31
 80030d8:	d405      	bmi.n	80030e6 <_puts_r+0x72>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	059b      	lsls	r3, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_puts_r+0x72>
 80030e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e2:	f000 f979 	bl	80033d8 <__retarget_lock_release_recursive>
 80030e6:	4628      	mov	r0, r5
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da04      	bge.n	80030f8 <_puts_r+0x84>
 80030ee:	69a2      	ldr	r2, [r4, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	dc06      	bgt.n	8003102 <_puts_r+0x8e>
 80030f4:	290a      	cmp	r1, #10
 80030f6:	d004      	beq.n	8003102 <_puts_r+0x8e>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	7019      	strb	r1, [r3, #0]
 8003100:	e7cf      	b.n	80030a2 <_puts_r+0x2e>
 8003102:	4622      	mov	r2, r4
 8003104:	4628      	mov	r0, r5
 8003106:	f000 f854 	bl	80031b2 <__swbuf_r>
 800310a:	3001      	adds	r0, #1
 800310c:	d1c9      	bne.n	80030a2 <_puts_r+0x2e>
 800310e:	e7df      	b.n	80030d0 <_puts_r+0x5c>
 8003110:	250a      	movs	r5, #10
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	6022      	str	r2, [r4, #0]
 8003118:	701d      	strb	r5, [r3, #0]
 800311a:	e7db      	b.n	80030d4 <_puts_r+0x60>

0800311c <puts>:
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <puts+0xc>)
 800311e:	4601      	mov	r1, r0
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	f7ff bfa7 	b.w	8003074 <_puts_r>
 8003126:	bf00      	nop
 8003128:	20000064 	.word	0x20000064

0800312c <__sread>:
 800312c:	b510      	push	{r4, lr}
 800312e:	460c      	mov	r4, r1
 8003130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003134:	f000 f900 	bl	8003338 <_read_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	bfab      	itete	ge
 800313c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800313e:	89a3      	ldrhlt	r3, [r4, #12]
 8003140:	181b      	addge	r3, r3, r0
 8003142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003146:	bfac      	ite	ge
 8003148:	6563      	strge	r3, [r4, #84]	; 0x54
 800314a:	81a3      	strhlt	r3, [r4, #12]
 800314c:	bd10      	pop	{r4, pc}

0800314e <__swrite>:
 800314e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003152:	461f      	mov	r7, r3
 8003154:	898b      	ldrh	r3, [r1, #12]
 8003156:	4605      	mov	r5, r0
 8003158:	05db      	lsls	r3, r3, #23
 800315a:	460c      	mov	r4, r1
 800315c:	4616      	mov	r6, r2
 800315e:	d505      	bpl.n	800316c <__swrite+0x1e>
 8003160:	2302      	movs	r3, #2
 8003162:	2200      	movs	r2, #0
 8003164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003168:	f000 f8d4 	bl	8003314 <_lseek_r>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	4632      	mov	r2, r6
 8003170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003174:	81a3      	strh	r3, [r4, #12]
 8003176:	4628      	mov	r0, r5
 8003178:	463b      	mov	r3, r7
 800317a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800317e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003182:	f000 b8eb 	b.w	800335c <_write_r>

08003186 <__sseek>:
 8003186:	b510      	push	{r4, lr}
 8003188:	460c      	mov	r4, r1
 800318a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318e:	f000 f8c1 	bl	8003314 <_lseek_r>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	bf15      	itete	ne
 8003198:	6560      	strne	r0, [r4, #84]	; 0x54
 800319a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800319e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031a2:	81a3      	strheq	r3, [r4, #12]
 80031a4:	bf18      	it	ne
 80031a6:	81a3      	strhne	r3, [r4, #12]
 80031a8:	bd10      	pop	{r4, pc}

080031aa <__sclose>:
 80031aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ae:	f000 b8a1 	b.w	80032f4 <_close_r>

080031b2 <__swbuf_r>:
 80031b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b4:	460e      	mov	r6, r1
 80031b6:	4614      	mov	r4, r2
 80031b8:	4605      	mov	r5, r0
 80031ba:	b118      	cbz	r0, 80031c4 <__swbuf_r+0x12>
 80031bc:	6a03      	ldr	r3, [r0, #32]
 80031be:	b90b      	cbnz	r3, 80031c4 <__swbuf_r+0x12>
 80031c0:	f7ff ff10 	bl	8002fe4 <__sinit>
 80031c4:	69a3      	ldr	r3, [r4, #24]
 80031c6:	60a3      	str	r3, [r4, #8]
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	071a      	lsls	r2, r3, #28
 80031cc:	d525      	bpl.n	800321a <__swbuf_r+0x68>
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	b31b      	cbz	r3, 800321a <__swbuf_r+0x68>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	6922      	ldr	r2, [r4, #16]
 80031d6:	b2f6      	uxtb	r6, r6
 80031d8:	1a98      	subs	r0, r3, r2
 80031da:	6963      	ldr	r3, [r4, #20]
 80031dc:	4637      	mov	r7, r6
 80031de:	4283      	cmp	r3, r0
 80031e0:	dc04      	bgt.n	80031ec <__swbuf_r+0x3a>
 80031e2:	4621      	mov	r1, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f001 fdab 	bl	8004d40 <_fflush_r>
 80031ea:	b9e0      	cbnz	r0, 8003226 <__swbuf_r+0x74>
 80031ec:	68a3      	ldr	r3, [r4, #8]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60a3      	str	r3, [r4, #8]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	6022      	str	r2, [r4, #0]
 80031f8:	701e      	strb	r6, [r3, #0]
 80031fa:	6962      	ldr	r2, [r4, #20]
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	429a      	cmp	r2, r3
 8003200:	d004      	beq.n	800320c <__swbuf_r+0x5a>
 8003202:	89a3      	ldrh	r3, [r4, #12]
 8003204:	07db      	lsls	r3, r3, #31
 8003206:	d506      	bpl.n	8003216 <__swbuf_r+0x64>
 8003208:	2e0a      	cmp	r6, #10
 800320a:	d104      	bne.n	8003216 <__swbuf_r+0x64>
 800320c:	4621      	mov	r1, r4
 800320e:	4628      	mov	r0, r5
 8003210:	f001 fd96 	bl	8004d40 <_fflush_r>
 8003214:	b938      	cbnz	r0, 8003226 <__swbuf_r+0x74>
 8003216:	4638      	mov	r0, r7
 8003218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800321a:	4621      	mov	r1, r4
 800321c:	4628      	mov	r0, r5
 800321e:	f000 f805 	bl	800322c <__swsetup_r>
 8003222:	2800      	cmp	r0, #0
 8003224:	d0d5      	beq.n	80031d2 <__swbuf_r+0x20>
 8003226:	f04f 37ff 	mov.w	r7, #4294967295
 800322a:	e7f4      	b.n	8003216 <__swbuf_r+0x64>

0800322c <__swsetup_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <__swsetup_r+0xac>)
 8003230:	4605      	mov	r5, r0
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	460c      	mov	r4, r1
 8003236:	b118      	cbz	r0, 8003240 <__swsetup_r+0x14>
 8003238:	6a03      	ldr	r3, [r0, #32]
 800323a:	b90b      	cbnz	r3, 8003240 <__swsetup_r+0x14>
 800323c:	f7ff fed2 	bl	8002fe4 <__sinit>
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003246:	0718      	lsls	r0, r3, #28
 8003248:	d422      	bmi.n	8003290 <__swsetup_r+0x64>
 800324a:	06d9      	lsls	r1, r3, #27
 800324c:	d407      	bmi.n	800325e <__swsetup_r+0x32>
 800324e:	2309      	movs	r3, #9
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003256:	f04f 30ff 	mov.w	r0, #4294967295
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	e034      	b.n	80032c8 <__swsetup_r+0x9c>
 800325e:	0758      	lsls	r0, r3, #29
 8003260:	d512      	bpl.n	8003288 <__swsetup_r+0x5c>
 8003262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003264:	b141      	cbz	r1, 8003278 <__swsetup_r+0x4c>
 8003266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800326a:	4299      	cmp	r1, r3
 800326c:	d002      	beq.n	8003274 <__swsetup_r+0x48>
 800326e:	4628      	mov	r0, r5
 8003270:	f000 ff2e 	bl	80040d0 <_free_r>
 8003274:	2300      	movs	r3, #0
 8003276:	6363      	str	r3, [r4, #52]	; 0x34
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	2300      	movs	r3, #0
 8003282:	6063      	str	r3, [r4, #4]
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f043 0308 	orr.w	r3, r3, #8
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	6923      	ldr	r3, [r4, #16]
 8003292:	b94b      	cbnz	r3, 80032a8 <__swsetup_r+0x7c>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800329a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329e:	d003      	beq.n	80032a8 <__swsetup_r+0x7c>
 80032a0:	4621      	mov	r1, r4
 80032a2:	4628      	mov	r0, r5
 80032a4:	f001 fd99 	bl	8004dda <__smakebuf_r>
 80032a8:	89a0      	ldrh	r0, [r4, #12]
 80032aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032ae:	f010 0301 	ands.w	r3, r0, #1
 80032b2:	d00a      	beq.n	80032ca <__swsetup_r+0x9e>
 80032b4:	2300      	movs	r3, #0
 80032b6:	60a3      	str	r3, [r4, #8]
 80032b8:	6963      	ldr	r3, [r4, #20]
 80032ba:	425b      	negs	r3, r3
 80032bc:	61a3      	str	r3, [r4, #24]
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	b943      	cbnz	r3, 80032d4 <__swsetup_r+0xa8>
 80032c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032c6:	d1c4      	bne.n	8003252 <__swsetup_r+0x26>
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
 80032ca:	0781      	lsls	r1, r0, #30
 80032cc:	bf58      	it	pl
 80032ce:	6963      	ldrpl	r3, [r4, #20]
 80032d0:	60a3      	str	r3, [r4, #8]
 80032d2:	e7f4      	b.n	80032be <__swsetup_r+0x92>
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7f7      	b.n	80032c8 <__swsetup_r+0x9c>
 80032d8:	20000064 	.word	0x20000064

080032dc <memset>:
 80032dc:	4603      	mov	r3, r0
 80032de:	4402      	add	r2, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <_localeconv_r>:
 80032ec:	4800      	ldr	r0, [pc, #0]	; (80032f0 <_localeconv_r+0x4>)
 80032ee:	4770      	bx	lr
 80032f0:	20000158 	.word	0x20000158

080032f4 <_close_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	2300      	movs	r3, #0
 80032f8:	4d05      	ldr	r5, [pc, #20]	; (8003310 <_close_r+0x1c>)
 80032fa:	4604      	mov	r4, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	f7fd fdfd 	bl	8000efe <_close>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d102      	bne.n	800330e <_close_r+0x1a>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	b103      	cbz	r3, 800330e <_close_r+0x1a>
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	200003d0 	.word	0x200003d0

08003314 <_lseek_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4604      	mov	r4, r0
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	2200      	movs	r2, #0
 800331e:	4d05      	ldr	r5, [pc, #20]	; (8003334 <_lseek_r+0x20>)
 8003320:	602a      	str	r2, [r5, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f7fd fe0f 	bl	8000f46 <_lseek>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d102      	bne.n	8003332 <_lseek_r+0x1e>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	b103      	cbz	r3, 8003332 <_lseek_r+0x1e>
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	200003d0 	.word	0x200003d0

08003338 <_read_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	2200      	movs	r2, #0
 8003342:	4d05      	ldr	r5, [pc, #20]	; (8003358 <_read_r+0x20>)
 8003344:	602a      	str	r2, [r5, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	f7fd fda0 	bl	8000e8c <_read>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_read_r+0x1e>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_read_r+0x1e>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	200003d0 	.word	0x200003d0

0800335c <_write_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	2200      	movs	r2, #0
 8003366:	4d05      	ldr	r5, [pc, #20]	; (800337c <_write_r+0x20>)
 8003368:	602a      	str	r2, [r5, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7fd fdab 	bl	8000ec6 <_write>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_write_r+0x1e>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	b103      	cbz	r3, 800337a <_write_r+0x1e>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	200003d0 	.word	0x200003d0

08003380 <__errno>:
 8003380:	4b01      	ldr	r3, [pc, #4]	; (8003388 <__errno+0x8>)
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000064 	.word	0x20000064

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	2600      	movs	r6, #0
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <__libc_init_array+0x38>)
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <__libc_init_array+0x3c>)
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	f001 fe4a 	bl	8005034 <_init>
 80033a0:	2600      	movs	r6, #0
 80033a2:	4d0a      	ldr	r5, [pc, #40]	; (80033cc <__libc_init_array+0x40>)
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <__libc_init_array+0x44>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	08005414 	.word	0x08005414
 80033c8:	08005414 	.word	0x08005414
 80033cc:	08005414 	.word	0x08005414
 80033d0:	08005418 	.word	0x08005418

080033d4 <__retarget_lock_init_recursive>:
 80033d4:	4770      	bx	lr

080033d6 <__retarget_lock_acquire_recursive>:
 80033d6:	4770      	bx	lr

080033d8 <__retarget_lock_release_recursive>:
 80033d8:	4770      	bx	lr

080033da <memchr>:
 80033da:	4603      	mov	r3, r0
 80033dc:	b510      	push	{r4, lr}
 80033de:	b2c9      	uxtb	r1, r1
 80033e0:	4402      	add	r2, r0
 80033e2:	4293      	cmp	r3, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	d101      	bne.n	80033ec <memchr+0x12>
 80033e8:	2000      	movs	r0, #0
 80033ea:	e003      	b.n	80033f4 <memchr+0x1a>
 80033ec:	7804      	ldrb	r4, [r0, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	428c      	cmp	r4, r1
 80033f2:	d1f6      	bne.n	80033e2 <memchr+0x8>
 80033f4:	bd10      	pop	{r4, pc}

080033f6 <quorem>:
 80033f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fa:	6903      	ldr	r3, [r0, #16]
 80033fc:	690c      	ldr	r4, [r1, #16]
 80033fe:	4607      	mov	r7, r0
 8003400:	42a3      	cmp	r3, r4
 8003402:	db7f      	blt.n	8003504 <quorem+0x10e>
 8003404:	3c01      	subs	r4, #1
 8003406:	f100 0514 	add.w	r5, r0, #20
 800340a:	f101 0814 	add.w	r8, r1, #20
 800340e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800341c:	3301      	adds	r3, #1
 800341e:	429a      	cmp	r2, r3
 8003420:	fbb2 f6f3 	udiv	r6, r2, r3
 8003424:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003428:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800342c:	d331      	bcc.n	8003492 <quorem+0x9c>
 800342e:	f04f 0e00 	mov.w	lr, #0
 8003432:	4640      	mov	r0, r8
 8003434:	46ac      	mov	ip, r5
 8003436:	46f2      	mov	sl, lr
 8003438:	f850 2b04 	ldr.w	r2, [r0], #4
 800343c:	b293      	uxth	r3, r2
 800343e:	fb06 e303 	mla	r3, r6, r3, lr
 8003442:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003446:	0c1a      	lsrs	r2, r3, #16
 8003448:	b29b      	uxth	r3, r3
 800344a:	fb06 220e 	mla	r2, r6, lr, r2
 800344e:	ebaa 0303 	sub.w	r3, sl, r3
 8003452:	f8dc a000 	ldr.w	sl, [ip]
 8003456:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800345a:	fa1f fa8a 	uxth.w	sl, sl
 800345e:	4453      	add	r3, sl
 8003460:	f8dc a000 	ldr.w	sl, [ip]
 8003464:	b292      	uxth	r2, r2
 8003466:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800346a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800346e:	b29b      	uxth	r3, r3
 8003470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003474:	4581      	cmp	r9, r0
 8003476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800347a:	f84c 3b04 	str.w	r3, [ip], #4
 800347e:	d2db      	bcs.n	8003438 <quorem+0x42>
 8003480:	f855 300b 	ldr.w	r3, [r5, fp]
 8003484:	b92b      	cbnz	r3, 8003492 <quorem+0x9c>
 8003486:	9b01      	ldr	r3, [sp, #4]
 8003488:	3b04      	subs	r3, #4
 800348a:	429d      	cmp	r5, r3
 800348c:	461a      	mov	r2, r3
 800348e:	d32d      	bcc.n	80034ec <quorem+0xf6>
 8003490:	613c      	str	r4, [r7, #16]
 8003492:	4638      	mov	r0, r7
 8003494:	f001 f992 	bl	80047bc <__mcmp>
 8003498:	2800      	cmp	r0, #0
 800349a:	db23      	blt.n	80034e4 <quorem+0xee>
 800349c:	4629      	mov	r1, r5
 800349e:	2000      	movs	r0, #0
 80034a0:	3601      	adds	r6, #1
 80034a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80034a6:	f8d1 c000 	ldr.w	ip, [r1]
 80034aa:	b293      	uxth	r3, r2
 80034ac:	1ac3      	subs	r3, r0, r3
 80034ae:	0c12      	lsrs	r2, r2, #16
 80034b0:	fa1f f08c 	uxth.w	r0, ip
 80034b4:	4403      	add	r3, r0
 80034b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80034ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034be:	b29b      	uxth	r3, r3
 80034c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034c4:	45c1      	cmp	r9, r8
 80034c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80034ca:	f841 3b04 	str.w	r3, [r1], #4
 80034ce:	d2e8      	bcs.n	80034a2 <quorem+0xac>
 80034d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80034d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80034d8:	b922      	cbnz	r2, 80034e4 <quorem+0xee>
 80034da:	3b04      	subs	r3, #4
 80034dc:	429d      	cmp	r5, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	d30a      	bcc.n	80034f8 <quorem+0x102>
 80034e2:	613c      	str	r4, [r7, #16]
 80034e4:	4630      	mov	r0, r6
 80034e6:	b003      	add	sp, #12
 80034e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	3b04      	subs	r3, #4
 80034f0:	2a00      	cmp	r2, #0
 80034f2:	d1cd      	bne.n	8003490 <quorem+0x9a>
 80034f4:	3c01      	subs	r4, #1
 80034f6:	e7c8      	b.n	800348a <quorem+0x94>
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	3b04      	subs	r3, #4
 80034fc:	2a00      	cmp	r2, #0
 80034fe:	d1f0      	bne.n	80034e2 <quorem+0xec>
 8003500:	3c01      	subs	r4, #1
 8003502:	e7eb      	b.n	80034dc <quorem+0xe6>
 8003504:	2000      	movs	r0, #0
 8003506:	e7ee      	b.n	80034e6 <quorem+0xf0>

08003508 <_dtoa_r>:
 8003508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350c:	4616      	mov	r6, r2
 800350e:	461f      	mov	r7, r3
 8003510:	69c4      	ldr	r4, [r0, #28]
 8003512:	b099      	sub	sp, #100	; 0x64
 8003514:	4605      	mov	r5, r0
 8003516:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800351a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800351e:	b974      	cbnz	r4, 800353e <_dtoa_r+0x36>
 8003520:	2010      	movs	r0, #16
 8003522:	f000 fe1d 	bl	8004160 <malloc>
 8003526:	4602      	mov	r2, r0
 8003528:	61e8      	str	r0, [r5, #28]
 800352a:	b920      	cbnz	r0, 8003536 <_dtoa_r+0x2e>
 800352c:	21ef      	movs	r1, #239	; 0xef
 800352e:	4bac      	ldr	r3, [pc, #688]	; (80037e0 <_dtoa_r+0x2d8>)
 8003530:	48ac      	ldr	r0, [pc, #688]	; (80037e4 <_dtoa_r+0x2dc>)
 8003532:	f001 fccf 	bl	8004ed4 <__assert_func>
 8003536:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800353a:	6004      	str	r4, [r0, #0]
 800353c:	60c4      	str	r4, [r0, #12]
 800353e:	69eb      	ldr	r3, [r5, #28]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	b151      	cbz	r1, 800355a <_dtoa_r+0x52>
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	2301      	movs	r3, #1
 8003548:	4093      	lsls	r3, r2
 800354a:	604a      	str	r2, [r1, #4]
 800354c:	608b      	str	r3, [r1, #8]
 800354e:	4628      	mov	r0, r5
 8003550:	f000 fefa 	bl	8004348 <_Bfree>
 8003554:	2200      	movs	r2, #0
 8003556:	69eb      	ldr	r3, [r5, #28]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	1e3b      	subs	r3, r7, #0
 800355c:	bfaf      	iteee	ge
 800355e:	2300      	movge	r3, #0
 8003560:	2201      	movlt	r2, #1
 8003562:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003566:	9305      	strlt	r3, [sp, #20]
 8003568:	bfa8      	it	ge
 800356a:	f8c8 3000 	strge.w	r3, [r8]
 800356e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003572:	4b9d      	ldr	r3, [pc, #628]	; (80037e8 <_dtoa_r+0x2e0>)
 8003574:	bfb8      	it	lt
 8003576:	f8c8 2000 	strlt.w	r2, [r8]
 800357a:	ea33 0309 	bics.w	r3, r3, r9
 800357e:	d119      	bne.n	80035b4 <_dtoa_r+0xac>
 8003580:	f242 730f 	movw	r3, #9999	; 0x270f
 8003584:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800358c:	4333      	orrs	r3, r6
 800358e:	f000 8589 	beq.w	80040a4 <_dtoa_r+0xb9c>
 8003592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003594:	b953      	cbnz	r3, 80035ac <_dtoa_r+0xa4>
 8003596:	4b95      	ldr	r3, [pc, #596]	; (80037ec <_dtoa_r+0x2e4>)
 8003598:	e023      	b.n	80035e2 <_dtoa_r+0xda>
 800359a:	4b95      	ldr	r3, [pc, #596]	; (80037f0 <_dtoa_r+0x2e8>)
 800359c:	9303      	str	r3, [sp, #12]
 800359e:	3308      	adds	r3, #8
 80035a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	9803      	ldr	r0, [sp, #12]
 80035a6:	b019      	add	sp, #100	; 0x64
 80035a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ac:	4b8f      	ldr	r3, [pc, #572]	; (80037ec <_dtoa_r+0x2e4>)
 80035ae:	9303      	str	r3, [sp, #12]
 80035b0:	3303      	adds	r3, #3
 80035b2:	e7f5      	b.n	80035a0 <_dtoa_r+0x98>
 80035b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80035b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80035bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	2300      	movs	r3, #0
 80035c4:	f7fd f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80035c8:	4680      	mov	r8, r0
 80035ca:	b160      	cbz	r0, 80035e6 <_dtoa_r+0xde>
 80035cc:	2301      	movs	r3, #1
 80035ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8562 	beq.w	800409e <_dtoa_r+0xb96>
 80035da:	4b86      	ldr	r3, [pc, #536]	; (80037f4 <_dtoa_r+0x2ec>)
 80035dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	9303      	str	r3, [sp, #12]
 80035e4:	e7de      	b.n	80035a4 <_dtoa_r+0x9c>
 80035e6:	ab16      	add	r3, sp, #88	; 0x58
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	ab17      	add	r3, sp, #92	; 0x5c
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	4628      	mov	r0, r5
 80035f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80035f4:	f001 f98a 	bl	800490c <__d2b>
 80035f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80035fc:	4682      	mov	sl, r0
 80035fe:	2c00      	cmp	r4, #0
 8003600:	d07e      	beq.n	8003700 <_dtoa_r+0x1f8>
 8003602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003608:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800360c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003610:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003614:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003618:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800361c:	4619      	mov	r1, r3
 800361e:	2200      	movs	r2, #0
 8003620:	4b75      	ldr	r3, [pc, #468]	; (80037f8 <_dtoa_r+0x2f0>)
 8003622:	f7fc fda1 	bl	8000168 <__aeabi_dsub>
 8003626:	a368      	add	r3, pc, #416	; (adr r3, 80037c8 <_dtoa_r+0x2c0>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fc ff54 	bl	80004d8 <__aeabi_dmul>
 8003630:	a367      	add	r3, pc, #412	; (adr r3, 80037d0 <_dtoa_r+0x2c8>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f7fc fd99 	bl	800016c <__adddf3>
 800363a:	4606      	mov	r6, r0
 800363c:	4620      	mov	r0, r4
 800363e:	460f      	mov	r7, r1
 8003640:	f7fc fee0 	bl	8000404 <__aeabi_i2d>
 8003644:	a364      	add	r3, pc, #400	; (adr r3, 80037d8 <_dtoa_r+0x2d0>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f7fc ff45 	bl	80004d8 <__aeabi_dmul>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4630      	mov	r0, r6
 8003654:	4639      	mov	r1, r7
 8003656:	f7fc fd89 	bl	800016c <__adddf3>
 800365a:	4606      	mov	r6, r0
 800365c:	460f      	mov	r7, r1
 800365e:	f7fd f9eb 	bl	8000a38 <__aeabi_d2iz>
 8003662:	2200      	movs	r2, #0
 8003664:	4683      	mov	fp, r0
 8003666:	2300      	movs	r3, #0
 8003668:	4630      	mov	r0, r6
 800366a:	4639      	mov	r1, r7
 800366c:	f7fd f9a6 	bl	80009bc <__aeabi_dcmplt>
 8003670:	b148      	cbz	r0, 8003686 <_dtoa_r+0x17e>
 8003672:	4658      	mov	r0, fp
 8003674:	f7fc fec6 	bl	8000404 <__aeabi_i2d>
 8003678:	4632      	mov	r2, r6
 800367a:	463b      	mov	r3, r7
 800367c:	f7fd f994 	bl	80009a8 <__aeabi_dcmpeq>
 8003680:	b908      	cbnz	r0, 8003686 <_dtoa_r+0x17e>
 8003682:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003686:	f1bb 0f16 	cmp.w	fp, #22
 800368a:	d857      	bhi.n	800373c <_dtoa_r+0x234>
 800368c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003690:	4b5a      	ldr	r3, [pc, #360]	; (80037fc <_dtoa_r+0x2f4>)
 8003692:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fd f98f 	bl	80009bc <__aeabi_dcmplt>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d04e      	beq.n	8003740 <_dtoa_r+0x238>
 80036a2:	2300      	movs	r3, #0
 80036a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80036aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80036ac:	1b1b      	subs	r3, r3, r4
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	bf46      	itte	mi
 80036b2:	f1c3 0901 	rsbmi	r9, r3, #1
 80036b6:	2300      	movmi	r3, #0
 80036b8:	f04f 0900 	movpl.w	r9, #0
 80036bc:	9209      	str	r2, [sp, #36]	; 0x24
 80036be:	bf48      	it	mi
 80036c0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80036c2:	f1bb 0f00 	cmp.w	fp, #0
 80036c6:	db3d      	blt.n	8003744 <_dtoa_r+0x23c>
 80036c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80036ce:	445b      	add	r3, fp
 80036d0:	9309      	str	r3, [sp, #36]	; 0x24
 80036d2:	2300      	movs	r3, #0
 80036d4:	930a      	str	r3, [sp, #40]	; 0x28
 80036d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036d8:	2b09      	cmp	r3, #9
 80036da:	d867      	bhi.n	80037ac <_dtoa_r+0x2a4>
 80036dc:	2b05      	cmp	r3, #5
 80036de:	bfc4      	itt	gt
 80036e0:	3b04      	subgt	r3, #4
 80036e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80036e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036e6:	bfc8      	it	gt
 80036e8:	2400      	movgt	r4, #0
 80036ea:	f1a3 0302 	sub.w	r3, r3, #2
 80036ee:	bfd8      	it	le
 80036f0:	2401      	movle	r4, #1
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	f200 8086 	bhi.w	8003804 <_dtoa_r+0x2fc>
 80036f8:	e8df f003 	tbb	[pc, r3]
 80036fc:	5637392c 	.word	0x5637392c
 8003700:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003704:	441c      	add	r4, r3
 8003706:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800370a:	2b20      	cmp	r3, #32
 800370c:	bfc1      	itttt	gt
 800370e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003712:	fa09 f903 	lslgt.w	r9, r9, r3
 8003716:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800371a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800371e:	bfd6      	itet	le
 8003720:	f1c3 0320 	rsble	r3, r3, #32
 8003724:	ea49 0003 	orrgt.w	r0, r9, r3
 8003728:	fa06 f003 	lslle.w	r0, r6, r3
 800372c:	f7fc fe5a 	bl	80003e4 <__aeabi_ui2d>
 8003730:	2201      	movs	r2, #1
 8003732:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003736:	3c01      	subs	r4, #1
 8003738:	9213      	str	r2, [sp, #76]	; 0x4c
 800373a:	e76f      	b.n	800361c <_dtoa_r+0x114>
 800373c:	2301      	movs	r3, #1
 800373e:	e7b3      	b.n	80036a8 <_dtoa_r+0x1a0>
 8003740:	900f      	str	r0, [sp, #60]	; 0x3c
 8003742:	e7b2      	b.n	80036aa <_dtoa_r+0x1a2>
 8003744:	f1cb 0300 	rsb	r3, fp, #0
 8003748:	930a      	str	r3, [sp, #40]	; 0x28
 800374a:	2300      	movs	r3, #0
 800374c:	eba9 090b 	sub.w	r9, r9, fp
 8003750:	930e      	str	r3, [sp, #56]	; 0x38
 8003752:	e7c0      	b.n	80036d6 <_dtoa_r+0x1ce>
 8003754:	2300      	movs	r3, #0
 8003756:	930b      	str	r3, [sp, #44]	; 0x2c
 8003758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800375a:	2b00      	cmp	r3, #0
 800375c:	dc55      	bgt.n	800380a <_dtoa_r+0x302>
 800375e:	2301      	movs	r3, #1
 8003760:	461a      	mov	r2, r3
 8003762:	9306      	str	r3, [sp, #24]
 8003764:	9308      	str	r3, [sp, #32]
 8003766:	9223      	str	r2, [sp, #140]	; 0x8c
 8003768:	e00b      	b.n	8003782 <_dtoa_r+0x27a>
 800376a:	2301      	movs	r3, #1
 800376c:	e7f3      	b.n	8003756 <_dtoa_r+0x24e>
 800376e:	2300      	movs	r3, #0
 8003770:	930b      	str	r3, [sp, #44]	; 0x2c
 8003772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003774:	445b      	add	r3, fp
 8003776:	9306      	str	r3, [sp, #24]
 8003778:	3301      	adds	r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	9308      	str	r3, [sp, #32]
 800377e:	bfb8      	it	lt
 8003780:	2301      	movlt	r3, #1
 8003782:	2100      	movs	r1, #0
 8003784:	2204      	movs	r2, #4
 8003786:	69e8      	ldr	r0, [r5, #28]
 8003788:	f102 0614 	add.w	r6, r2, #20
 800378c:	429e      	cmp	r6, r3
 800378e:	d940      	bls.n	8003812 <_dtoa_r+0x30a>
 8003790:	6041      	str	r1, [r0, #4]
 8003792:	4628      	mov	r0, r5
 8003794:	f000 fd98 	bl	80042c8 <_Balloc>
 8003798:	9003      	str	r0, [sp, #12]
 800379a:	2800      	cmp	r0, #0
 800379c:	d13c      	bne.n	8003818 <_dtoa_r+0x310>
 800379e:	4602      	mov	r2, r0
 80037a0:	f240 11af 	movw	r1, #431	; 0x1af
 80037a4:	4b16      	ldr	r3, [pc, #88]	; (8003800 <_dtoa_r+0x2f8>)
 80037a6:	e6c3      	b.n	8003530 <_dtoa_r+0x28>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e7e1      	b.n	8003770 <_dtoa_r+0x268>
 80037ac:	2401      	movs	r4, #1
 80037ae:	2300      	movs	r3, #0
 80037b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80037b2:	9322      	str	r3, [sp, #136]	; 0x88
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	2200      	movs	r2, #0
 80037ba:	9306      	str	r3, [sp, #24]
 80037bc:	9308      	str	r3, [sp, #32]
 80037be:	2312      	movs	r3, #18
 80037c0:	e7d1      	b.n	8003766 <_dtoa_r+0x25e>
 80037c2:	bf00      	nop
 80037c4:	f3af 8000 	nop.w
 80037c8:	636f4361 	.word	0x636f4361
 80037cc:	3fd287a7 	.word	0x3fd287a7
 80037d0:	8b60c8b3 	.word	0x8b60c8b3
 80037d4:	3fc68a28 	.word	0x3fc68a28
 80037d8:	509f79fb 	.word	0x509f79fb
 80037dc:	3fd34413 	.word	0x3fd34413
 80037e0:	080050e3 	.word	0x080050e3
 80037e4:	080050fa 	.word	0x080050fa
 80037e8:	7ff00000 	.word	0x7ff00000
 80037ec:	080050df 	.word	0x080050df
 80037f0:	080050d6 	.word	0x080050d6
 80037f4:	080050b3 	.word	0x080050b3
 80037f8:	3ff80000 	.word	0x3ff80000
 80037fc:	080051e8 	.word	0x080051e8
 8003800:	08005152 	.word	0x08005152
 8003804:	2301      	movs	r3, #1
 8003806:	930b      	str	r3, [sp, #44]	; 0x2c
 8003808:	e7d4      	b.n	80037b4 <_dtoa_r+0x2ac>
 800380a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800380c:	9306      	str	r3, [sp, #24]
 800380e:	9308      	str	r3, [sp, #32]
 8003810:	e7b7      	b.n	8003782 <_dtoa_r+0x27a>
 8003812:	3101      	adds	r1, #1
 8003814:	0052      	lsls	r2, r2, #1
 8003816:	e7b7      	b.n	8003788 <_dtoa_r+0x280>
 8003818:	69eb      	ldr	r3, [r5, #28]
 800381a:	9a03      	ldr	r2, [sp, #12]
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	9b08      	ldr	r3, [sp, #32]
 8003820:	2b0e      	cmp	r3, #14
 8003822:	f200 80a8 	bhi.w	8003976 <_dtoa_r+0x46e>
 8003826:	2c00      	cmp	r4, #0
 8003828:	f000 80a5 	beq.w	8003976 <_dtoa_r+0x46e>
 800382c:	f1bb 0f00 	cmp.w	fp, #0
 8003830:	dd34      	ble.n	800389c <_dtoa_r+0x394>
 8003832:	4b9a      	ldr	r3, [pc, #616]	; (8003a9c <_dtoa_r+0x594>)
 8003834:	f00b 020f 	and.w	r2, fp, #15
 8003838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800383c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003844:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003848:	ea4f 142b 	mov.w	r4, fp, asr #4
 800384c:	d016      	beq.n	800387c <_dtoa_r+0x374>
 800384e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003852:	4b93      	ldr	r3, [pc, #588]	; (8003aa0 <_dtoa_r+0x598>)
 8003854:	2703      	movs	r7, #3
 8003856:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800385a:	f7fc ff67 	bl	800072c <__aeabi_ddiv>
 800385e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003862:	f004 040f 	and.w	r4, r4, #15
 8003866:	4e8e      	ldr	r6, [pc, #568]	; (8003aa0 <_dtoa_r+0x598>)
 8003868:	b954      	cbnz	r4, 8003880 <_dtoa_r+0x378>
 800386a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800386e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003872:	f7fc ff5b 	bl	800072c <__aeabi_ddiv>
 8003876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800387a:	e029      	b.n	80038d0 <_dtoa_r+0x3c8>
 800387c:	2702      	movs	r7, #2
 800387e:	e7f2      	b.n	8003866 <_dtoa_r+0x35e>
 8003880:	07e1      	lsls	r1, r4, #31
 8003882:	d508      	bpl.n	8003896 <_dtoa_r+0x38e>
 8003884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003888:	e9d6 2300 	ldrd	r2, r3, [r6]
 800388c:	f7fc fe24 	bl	80004d8 <__aeabi_dmul>
 8003890:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003894:	3701      	adds	r7, #1
 8003896:	1064      	asrs	r4, r4, #1
 8003898:	3608      	adds	r6, #8
 800389a:	e7e5      	b.n	8003868 <_dtoa_r+0x360>
 800389c:	f000 80a5 	beq.w	80039ea <_dtoa_r+0x4e2>
 80038a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038a4:	f1cb 0400 	rsb	r4, fp, #0
 80038a8:	4b7c      	ldr	r3, [pc, #496]	; (8003a9c <_dtoa_r+0x594>)
 80038aa:	f004 020f 	and.w	r2, r4, #15
 80038ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f7fc fe0f 	bl	80004d8 <__aeabi_dmul>
 80038ba:	2702      	movs	r7, #2
 80038bc:	2300      	movs	r3, #0
 80038be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038c2:	4e77      	ldr	r6, [pc, #476]	; (8003aa0 <_dtoa_r+0x598>)
 80038c4:	1124      	asrs	r4, r4, #4
 80038c6:	2c00      	cmp	r4, #0
 80038c8:	f040 8084 	bne.w	80039d4 <_dtoa_r+0x4cc>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1d2      	bne.n	8003876 <_dtoa_r+0x36e>
 80038d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80038d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80038d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8087 	beq.w	80039ee <_dtoa_r+0x4e6>
 80038e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038e4:	2200      	movs	r2, #0
 80038e6:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <_dtoa_r+0x59c>)
 80038e8:	f7fd f868 	bl	80009bc <__aeabi_dcmplt>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d07e      	beq.n	80039ee <_dtoa_r+0x4e6>
 80038f0:	9b08      	ldr	r3, [sp, #32]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d07b      	beq.n	80039ee <_dtoa_r+0x4e6>
 80038f6:	9b06      	ldr	r3, [sp, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	dd38      	ble.n	800396e <_dtoa_r+0x466>
 80038fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003900:	2200      	movs	r2, #0
 8003902:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <_dtoa_r+0x5a0>)
 8003904:	f7fc fde8 	bl	80004d8 <__aeabi_dmul>
 8003908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800390c:	9c06      	ldr	r4, [sp, #24]
 800390e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8003912:	3701      	adds	r7, #1
 8003914:	4638      	mov	r0, r7
 8003916:	f7fc fd75 	bl	8000404 <__aeabi_i2d>
 800391a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800391e:	f7fc fddb 	bl	80004d8 <__aeabi_dmul>
 8003922:	2200      	movs	r2, #0
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <_dtoa_r+0x5a4>)
 8003926:	f7fc fc21 	bl	800016c <__adddf3>
 800392a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800392e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003932:	9611      	str	r6, [sp, #68]	; 0x44
 8003934:	2c00      	cmp	r4, #0
 8003936:	d15d      	bne.n	80039f4 <_dtoa_r+0x4ec>
 8003938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800393c:	2200      	movs	r2, #0
 800393e:	4b5c      	ldr	r3, [pc, #368]	; (8003ab0 <_dtoa_r+0x5a8>)
 8003940:	f7fc fc12 	bl	8000168 <__aeabi_dsub>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800394c:	4633      	mov	r3, r6
 800394e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003950:	f7fd f852 	bl	80009f8 <__aeabi_dcmpgt>
 8003954:	2800      	cmp	r0, #0
 8003956:	f040 8295 	bne.w	8003e84 <_dtoa_r+0x97c>
 800395a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800395e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003960:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003964:	f7fd f82a 	bl	80009bc <__aeabi_dcmplt>
 8003968:	2800      	cmp	r0, #0
 800396a:	f040 8289 	bne.w	8003e80 <_dtoa_r+0x978>
 800396e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003972:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003976:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003978:	2b00      	cmp	r3, #0
 800397a:	f2c0 8151 	blt.w	8003c20 <_dtoa_r+0x718>
 800397e:	f1bb 0f0e 	cmp.w	fp, #14
 8003982:	f300 814d 	bgt.w	8003c20 <_dtoa_r+0x718>
 8003986:	4b45      	ldr	r3, [pc, #276]	; (8003a9c <_dtoa_r+0x594>)
 8003988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800398c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003990:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003994:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003996:	2b00      	cmp	r3, #0
 8003998:	f280 80da 	bge.w	8003b50 <_dtoa_r+0x648>
 800399c:	9b08      	ldr	r3, [sp, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f300 80d6 	bgt.w	8003b50 <_dtoa_r+0x648>
 80039a4:	f040 826b 	bne.w	8003e7e <_dtoa_r+0x976>
 80039a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039ac:	2200      	movs	r2, #0
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <_dtoa_r+0x5a8>)
 80039b0:	f7fc fd92 	bl	80004d8 <__aeabi_dmul>
 80039b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039b8:	f7fd f814 	bl	80009e4 <__aeabi_dcmpge>
 80039bc:	9c08      	ldr	r4, [sp, #32]
 80039be:	4626      	mov	r6, r4
 80039c0:	2800      	cmp	r0, #0
 80039c2:	f040 8241 	bne.w	8003e48 <_dtoa_r+0x940>
 80039c6:	2331      	movs	r3, #49	; 0x31
 80039c8:	9f03      	ldr	r7, [sp, #12]
 80039ca:	f10b 0b01 	add.w	fp, fp, #1
 80039ce:	f807 3b01 	strb.w	r3, [r7], #1
 80039d2:	e23d      	b.n	8003e50 <_dtoa_r+0x948>
 80039d4:	07e2      	lsls	r2, r4, #31
 80039d6:	d505      	bpl.n	80039e4 <_dtoa_r+0x4dc>
 80039d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039dc:	f7fc fd7c 	bl	80004d8 <__aeabi_dmul>
 80039e0:	2301      	movs	r3, #1
 80039e2:	3701      	adds	r7, #1
 80039e4:	1064      	asrs	r4, r4, #1
 80039e6:	3608      	adds	r6, #8
 80039e8:	e76d      	b.n	80038c6 <_dtoa_r+0x3be>
 80039ea:	2702      	movs	r7, #2
 80039ec:	e770      	b.n	80038d0 <_dtoa_r+0x3c8>
 80039ee:	46d8      	mov	r8, fp
 80039f0:	9c08      	ldr	r4, [sp, #32]
 80039f2:	e78f      	b.n	8003914 <_dtoa_r+0x40c>
 80039f4:	9903      	ldr	r1, [sp, #12]
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <_dtoa_r+0x594>)
 80039f8:	4421      	add	r1, r4
 80039fa:	9112      	str	r1, [sp, #72]	; 0x48
 80039fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a02:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003a06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a0a:	2900      	cmp	r1, #0
 8003a0c:	d054      	beq.n	8003ab8 <_dtoa_r+0x5b0>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	4928      	ldr	r1, [pc, #160]	; (8003ab4 <_dtoa_r+0x5ac>)
 8003a12:	f7fc fe8b 	bl	800072c <__aeabi_ddiv>
 8003a16:	463b      	mov	r3, r7
 8003a18:	4632      	mov	r2, r6
 8003a1a:	f7fc fba5 	bl	8000168 <__aeabi_dsub>
 8003a1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a22:	9f03      	ldr	r7, [sp, #12]
 8003a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a28:	f7fd f806 	bl	8000a38 <__aeabi_d2iz>
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	f7fc fce9 	bl	8000404 <__aeabi_i2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a3a:	f7fc fb95 	bl	8000168 <__aeabi_dsub>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	3430      	adds	r4, #48	; 0x30
 8003a44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a4c:	f807 4b01 	strb.w	r4, [r7], #1
 8003a50:	f7fc ffb4 	bl	80009bc <__aeabi_dcmplt>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d173      	bne.n	8003b40 <_dtoa_r+0x638>
 8003a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	4911      	ldr	r1, [pc, #68]	; (8003aa4 <_dtoa_r+0x59c>)
 8003a60:	f7fc fb82 	bl	8000168 <__aeabi_dsub>
 8003a64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a68:	f7fc ffa8 	bl	80009bc <__aeabi_dcmplt>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f040 80b6 	bne.w	8003bde <_dtoa_r+0x6d6>
 8003a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a74:	429f      	cmp	r7, r3
 8003a76:	f43f af7a 	beq.w	800396e <_dtoa_r+0x466>
 8003a7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <_dtoa_r+0x5a0>)
 8003a82:	f7fc fd29 	bl	80004d8 <__aeabi_dmul>
 8003a86:	2200      	movs	r2, #0
 8003a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <_dtoa_r+0x5a0>)
 8003a92:	f7fc fd21 	bl	80004d8 <__aeabi_dmul>
 8003a96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a9a:	e7c3      	b.n	8003a24 <_dtoa_r+0x51c>
 8003a9c:	080051e8 	.word	0x080051e8
 8003aa0:	080051c0 	.word	0x080051c0
 8003aa4:	3ff00000 	.word	0x3ff00000
 8003aa8:	40240000 	.word	0x40240000
 8003aac:	401c0000 	.word	0x401c0000
 8003ab0:	40140000 	.word	0x40140000
 8003ab4:	3fe00000 	.word	0x3fe00000
 8003ab8:	4630      	mov	r0, r6
 8003aba:	4639      	mov	r1, r7
 8003abc:	f7fc fd0c 	bl	80004d8 <__aeabi_dmul>
 8003ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ac6:	9c03      	ldr	r4, [sp, #12]
 8003ac8:	9314      	str	r3, [sp, #80]	; 0x50
 8003aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ace:	f7fc ffb3 	bl	8000a38 <__aeabi_d2iz>
 8003ad2:	9015      	str	r0, [sp, #84]	; 0x54
 8003ad4:	f7fc fc96 	bl	8000404 <__aeabi_i2d>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ae0:	f7fc fb42 	bl	8000168 <__aeabi_dsub>
 8003ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	3330      	adds	r3, #48	; 0x30
 8003aea:	f804 3b01 	strb.w	r3, [r4], #1
 8003aee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003af0:	460f      	mov	r7, r1
 8003af2:	429c      	cmp	r4, r3
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	d124      	bne.n	8003b44 <_dtoa_r+0x63c>
 8003afa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003afe:	4baf      	ldr	r3, [pc, #700]	; (8003dbc <_dtoa_r+0x8b4>)
 8003b00:	f7fc fb34 	bl	800016c <__adddf3>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4630      	mov	r0, r6
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	f7fc ff74 	bl	80009f8 <__aeabi_dcmpgt>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d163      	bne.n	8003bdc <_dtoa_r+0x6d4>
 8003b14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b18:	2000      	movs	r0, #0
 8003b1a:	49a8      	ldr	r1, [pc, #672]	; (8003dbc <_dtoa_r+0x8b4>)
 8003b1c:	f7fc fb24 	bl	8000168 <__aeabi_dsub>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4630      	mov	r0, r6
 8003b26:	4639      	mov	r1, r7
 8003b28:	f7fc ff48 	bl	80009bc <__aeabi_dcmplt>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f43f af1e 	beq.w	800396e <_dtoa_r+0x466>
 8003b32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003b34:	1e7b      	subs	r3, r7, #1
 8003b36:	9314      	str	r3, [sp, #80]	; 0x50
 8003b38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003b3c:	2b30      	cmp	r3, #48	; 0x30
 8003b3e:	d0f8      	beq.n	8003b32 <_dtoa_r+0x62a>
 8003b40:	46c3      	mov	fp, r8
 8003b42:	e03b      	b.n	8003bbc <_dtoa_r+0x6b4>
 8003b44:	4b9e      	ldr	r3, [pc, #632]	; (8003dc0 <_dtoa_r+0x8b8>)
 8003b46:	f7fc fcc7 	bl	80004d8 <__aeabi_dmul>
 8003b4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b4e:	e7bc      	b.n	8003aca <_dtoa_r+0x5c2>
 8003b50:	9f03      	ldr	r7, [sp, #12]
 8003b52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003b56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	f7fc fde5 	bl	800072c <__aeabi_ddiv>
 8003b62:	f7fc ff69 	bl	8000a38 <__aeabi_d2iz>
 8003b66:	4604      	mov	r4, r0
 8003b68:	f7fc fc4c 	bl	8000404 <__aeabi_i2d>
 8003b6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b70:	f7fc fcb2 	bl	80004d8 <__aeabi_dmul>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4640      	mov	r0, r8
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	f7fc faf4 	bl	8000168 <__aeabi_dsub>
 8003b80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003b84:	f807 6b01 	strb.w	r6, [r7], #1
 8003b88:	9e03      	ldr	r6, [sp, #12]
 8003b8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003b8e:	1bbe      	subs	r6, r7, r6
 8003b90:	45b4      	cmp	ip, r6
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	d136      	bne.n	8003c06 <_dtoa_r+0x6fe>
 8003b98:	f7fc fae8 	bl	800016c <__adddf3>
 8003b9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	4689      	mov	r9, r1
 8003ba4:	f7fc ff28 	bl	80009f8 <__aeabi_dcmpgt>
 8003ba8:	bb58      	cbnz	r0, 8003c02 <_dtoa_r+0x6fa>
 8003baa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bae:	4640      	mov	r0, r8
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	f7fc fef9 	bl	80009a8 <__aeabi_dcmpeq>
 8003bb6:	b108      	cbz	r0, 8003bbc <_dtoa_r+0x6b4>
 8003bb8:	07e3      	lsls	r3, r4, #31
 8003bba:	d422      	bmi.n	8003c02 <_dtoa_r+0x6fa>
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 fbc2 	bl	8004348 <_Bfree>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003bc8:	703b      	strb	r3, [r7, #0]
 8003bca:	f10b 0301 	add.w	r3, fp, #1
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f43f ace6 	beq.w	80035a4 <_dtoa_r+0x9c>
 8003bd8:	601f      	str	r7, [r3, #0]
 8003bda:	e4e3      	b.n	80035a4 <_dtoa_r+0x9c>
 8003bdc:	4627      	mov	r7, r4
 8003bde:	463b      	mov	r3, r7
 8003be0:	461f      	mov	r7, r3
 8003be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003be6:	2a39      	cmp	r2, #57	; 0x39
 8003be8:	d107      	bne.n	8003bfa <_dtoa_r+0x6f2>
 8003bea:	9a03      	ldr	r2, [sp, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1f7      	bne.n	8003be0 <_dtoa_r+0x6d8>
 8003bf0:	2230      	movs	r2, #48	; 0x30
 8003bf2:	9903      	ldr	r1, [sp, #12]
 8003bf4:	f108 0801 	add.w	r8, r8, #1
 8003bf8:	700a      	strb	r2, [r1, #0]
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	3201      	adds	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e79e      	b.n	8003b40 <_dtoa_r+0x638>
 8003c02:	46d8      	mov	r8, fp
 8003c04:	e7eb      	b.n	8003bde <_dtoa_r+0x6d6>
 8003c06:	2200      	movs	r2, #0
 8003c08:	4b6d      	ldr	r3, [pc, #436]	; (8003dc0 <_dtoa_r+0x8b8>)
 8003c0a:	f7fc fc65 	bl	80004d8 <__aeabi_dmul>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2300      	movs	r3, #0
 8003c12:	4680      	mov	r8, r0
 8003c14:	4689      	mov	r9, r1
 8003c16:	f7fc fec7 	bl	80009a8 <__aeabi_dcmpeq>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d09b      	beq.n	8003b56 <_dtoa_r+0x64e>
 8003c1e:	e7cd      	b.n	8003bbc <_dtoa_r+0x6b4>
 8003c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	f000 80c4 	beq.w	8003db0 <_dtoa_r+0x8a8>
 8003c28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c2a:	2a01      	cmp	r2, #1
 8003c2c:	f300 80a8 	bgt.w	8003d80 <_dtoa_r+0x878>
 8003c30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	f000 80a0 	beq.w	8003d78 <_dtoa_r+0x870>
 8003c38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c3c:	464f      	mov	r7, r9
 8003c3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c42:	2101      	movs	r1, #1
 8003c44:	441a      	add	r2, r3
 8003c46:	4628      	mov	r0, r5
 8003c48:	4499      	add	r9, r3
 8003c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c4c:	f000 fc32 	bl	80044b4 <__i2b>
 8003c50:	4606      	mov	r6, r0
 8003c52:	b15f      	cbz	r7, 8003c6c <_dtoa_r+0x764>
 8003c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	dd08      	ble.n	8003c6c <_dtoa_r+0x764>
 8003c5a:	42bb      	cmp	r3, r7
 8003c5c:	bfa8      	it	ge
 8003c5e:	463b      	movge	r3, r7
 8003c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c62:	eba9 0903 	sub.w	r9, r9, r3
 8003c66:	1aff      	subs	r7, r7, r3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c6e:	b1f3      	cbz	r3, 8003cae <_dtoa_r+0x7a6>
 8003c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a0 	beq.w	8003db8 <_dtoa_r+0x8b0>
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	dd10      	ble.n	8003c9e <_dtoa_r+0x796>
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	4622      	mov	r2, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 fcd5 	bl	8004630 <__pow5mult>
 8003c86:	4652      	mov	r2, sl
 8003c88:	4601      	mov	r1, r0
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 fc27 	bl	80044e0 <__multiply>
 8003c92:	4680      	mov	r8, r0
 8003c94:	4651      	mov	r1, sl
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 fb56 	bl	8004348 <_Bfree>
 8003c9c:	46c2      	mov	sl, r8
 8003c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ca0:	1b1a      	subs	r2, r3, r4
 8003ca2:	d004      	beq.n	8003cae <_dtoa_r+0x7a6>
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 fcc2 	bl	8004630 <__pow5mult>
 8003cac:	4682      	mov	sl, r0
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 fbff 	bl	80044b4 <__i2b>
 8003cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cb8:	4604      	mov	r4, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f340 8082 	ble.w	8003dc4 <_dtoa_r+0x8bc>
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f000 fcb3 	bl	8004630 <__pow5mult>
 8003cca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ccc:	4604      	mov	r4, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	dd7b      	ble.n	8003dca <_dtoa_r+0x8c2>
 8003cd2:	f04f 0800 	mov.w	r8, #0
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cdc:	6918      	ldr	r0, [r3, #16]
 8003cde:	f000 fb9b 	bl	8004418 <__hi0bits>
 8003ce2:	f1c0 0020 	rsb	r0, r0, #32
 8003ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce8:	4418      	add	r0, r3
 8003cea:	f010 001f 	ands.w	r0, r0, #31
 8003cee:	f000 8092 	beq.w	8003e16 <_dtoa_r+0x90e>
 8003cf2:	f1c0 0320 	rsb	r3, r0, #32
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	f340 8085 	ble.w	8003e06 <_dtoa_r+0x8fe>
 8003cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cfe:	f1c0 001c 	rsb	r0, r0, #28
 8003d02:	4403      	add	r3, r0
 8003d04:	4481      	add	r9, r0
 8003d06:	4407      	add	r7, r0
 8003d08:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0a:	f1b9 0f00 	cmp.w	r9, #0
 8003d0e:	dd05      	ble.n	8003d1c <_dtoa_r+0x814>
 8003d10:	4651      	mov	r1, sl
 8003d12:	464a      	mov	r2, r9
 8003d14:	4628      	mov	r0, r5
 8003d16:	f000 fce5 	bl	80046e4 <__lshift>
 8003d1a:	4682      	mov	sl, r0
 8003d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	dd05      	ble.n	8003d2e <_dtoa_r+0x826>
 8003d22:	4621      	mov	r1, r4
 8003d24:	461a      	mov	r2, r3
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 fcdc 	bl	80046e4 <__lshift>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d072      	beq.n	8003e1a <_dtoa_r+0x912>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4650      	mov	r0, sl
 8003d38:	f000 fd40 	bl	80047bc <__mcmp>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	da6c      	bge.n	8003e1a <_dtoa_r+0x912>
 8003d40:	2300      	movs	r3, #0
 8003d42:	4651      	mov	r1, sl
 8003d44:	220a      	movs	r2, #10
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 fb20 	bl	800438c <__multadd>
 8003d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d4e:	4682      	mov	sl, r0
 8003d50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 81ac 	beq.w	80040b2 <_dtoa_r+0xbaa>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	220a      	movs	r2, #10
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fb13 	bl	800438c <__multadd>
 8003d66:	9b06      	ldr	r3, [sp, #24]
 8003d68:	4606      	mov	r6, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f300 8093 	bgt.w	8003e96 <_dtoa_r+0x98e>
 8003d70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	dc59      	bgt.n	8003e2a <_dtoa_r+0x922>
 8003d76:	e08e      	b.n	8003e96 <_dtoa_r+0x98e>
 8003d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d7e:	e75d      	b.n	8003c3c <_dtoa_r+0x734>
 8003d80:	9b08      	ldr	r3, [sp, #32]
 8003d82:	1e5c      	subs	r4, r3, #1
 8003d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	bfbf      	itttt	lt
 8003d8a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003d8c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8003d8e:	1ae3      	sublt	r3, r4, r3
 8003d90:	18d2      	addlt	r2, r2, r3
 8003d92:	bfa8      	it	ge
 8003d94:	1b1c      	subge	r4, r3, r4
 8003d96:	9b08      	ldr	r3, [sp, #32]
 8003d98:	bfbe      	ittt	lt
 8003d9a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003d9c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8003d9e:	2400      	movlt	r4, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bfb5      	itete	lt
 8003da4:	eba9 0703 	sublt.w	r7, r9, r3
 8003da8:	464f      	movge	r7, r9
 8003daa:	2300      	movlt	r3, #0
 8003dac:	9b08      	ldrge	r3, [sp, #32]
 8003dae:	e747      	b.n	8003c40 <_dtoa_r+0x738>
 8003db0:	464f      	mov	r7, r9
 8003db2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003db4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003db6:	e74c      	b.n	8003c52 <_dtoa_r+0x74a>
 8003db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dba:	e773      	b.n	8003ca4 <_dtoa_r+0x79c>
 8003dbc:	3fe00000 	.word	0x3fe00000
 8003dc0:	40240000 	.word	0x40240000
 8003dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	dc18      	bgt.n	8003dfc <_dtoa_r+0x8f4>
 8003dca:	9b04      	ldr	r3, [sp, #16]
 8003dcc:	b9b3      	cbnz	r3, 8003dfc <_dtoa_r+0x8f4>
 8003dce:	9b05      	ldr	r3, [sp, #20]
 8003dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd4:	b993      	cbnz	r3, 8003dfc <_dtoa_r+0x8f4>
 8003dd6:	9b05      	ldr	r3, [sp, #20]
 8003dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ddc:	0d1b      	lsrs	r3, r3, #20
 8003dde:	051b      	lsls	r3, r3, #20
 8003de0:	b17b      	cbz	r3, 8003e02 <_dtoa_r+0x8fa>
 8003de2:	f04f 0801 	mov.w	r8, #1
 8003de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de8:	f109 0901 	add.w	r9, r9, #1
 8003dec:	3301      	adds	r3, #1
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f47f af6f 	bne.w	8003cd6 <_dtoa_r+0x7ce>
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e774      	b.n	8003ce6 <_dtoa_r+0x7de>
 8003dfc:	f04f 0800 	mov.w	r8, #0
 8003e00:	e7f6      	b.n	8003df0 <_dtoa_r+0x8e8>
 8003e02:	4698      	mov	r8, r3
 8003e04:	e7f4      	b.n	8003df0 <_dtoa_r+0x8e8>
 8003e06:	d080      	beq.n	8003d0a <_dtoa_r+0x802>
 8003e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e0a:	331c      	adds	r3, #28
 8003e0c:	441a      	add	r2, r3
 8003e0e:	4499      	add	r9, r3
 8003e10:	441f      	add	r7, r3
 8003e12:	9209      	str	r2, [sp, #36]	; 0x24
 8003e14:	e779      	b.n	8003d0a <_dtoa_r+0x802>
 8003e16:	4603      	mov	r3, r0
 8003e18:	e7f6      	b.n	8003e08 <_dtoa_r+0x900>
 8003e1a:	9b08      	ldr	r3, [sp, #32]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	dc34      	bgt.n	8003e8a <_dtoa_r+0x982>
 8003e20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	dd31      	ble.n	8003e8a <_dtoa_r+0x982>
 8003e26:	9b08      	ldr	r3, [sp, #32]
 8003e28:	9306      	str	r3, [sp, #24]
 8003e2a:	9b06      	ldr	r3, [sp, #24]
 8003e2c:	b963      	cbnz	r3, 8003e48 <_dtoa_r+0x940>
 8003e2e:	4621      	mov	r1, r4
 8003e30:	2205      	movs	r2, #5
 8003e32:	4628      	mov	r0, r5
 8003e34:	f000 faaa 	bl	800438c <__multadd>
 8003e38:	4601      	mov	r1, r0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	f000 fcbd 	bl	80047bc <__mcmp>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	f73f adbf 	bgt.w	80039c6 <_dtoa_r+0x4be>
 8003e48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e4a:	9f03      	ldr	r7, [sp, #12]
 8003e4c:	ea6f 0b03 	mvn.w	fp, r3
 8003e50:	f04f 0800 	mov.w	r8, #0
 8003e54:	4621      	mov	r1, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 fa76 	bl	8004348 <_Bfree>
 8003e5c:	2e00      	cmp	r6, #0
 8003e5e:	f43f aead 	beq.w	8003bbc <_dtoa_r+0x6b4>
 8003e62:	f1b8 0f00 	cmp.w	r8, #0
 8003e66:	d005      	beq.n	8003e74 <_dtoa_r+0x96c>
 8003e68:	45b0      	cmp	r8, r6
 8003e6a:	d003      	beq.n	8003e74 <_dtoa_r+0x96c>
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 fa6a 	bl	8004348 <_Bfree>
 8003e74:	4631      	mov	r1, r6
 8003e76:	4628      	mov	r0, r5
 8003e78:	f000 fa66 	bl	8004348 <_Bfree>
 8003e7c:	e69e      	b.n	8003bbc <_dtoa_r+0x6b4>
 8003e7e:	2400      	movs	r4, #0
 8003e80:	4626      	mov	r6, r4
 8003e82:	e7e1      	b.n	8003e48 <_dtoa_r+0x940>
 8003e84:	46c3      	mov	fp, r8
 8003e86:	4626      	mov	r6, r4
 8003e88:	e59d      	b.n	80039c6 <_dtoa_r+0x4be>
 8003e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80c8 	beq.w	8004022 <_dtoa_r+0xb1a>
 8003e92:	9b08      	ldr	r3, [sp, #32]
 8003e94:	9306      	str	r3, [sp, #24]
 8003e96:	2f00      	cmp	r7, #0
 8003e98:	dd05      	ble.n	8003ea6 <_dtoa_r+0x99e>
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	463a      	mov	r2, r7
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 fc20 	bl	80046e4 <__lshift>
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	f1b8 0f00 	cmp.w	r8, #0
 8003eaa:	d05b      	beq.n	8003f64 <_dtoa_r+0xa5c>
 8003eac:	4628      	mov	r0, r5
 8003eae:	6871      	ldr	r1, [r6, #4]
 8003eb0:	f000 fa0a 	bl	80042c8 <_Balloc>
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	b928      	cbnz	r0, 8003ec4 <_dtoa_r+0x9bc>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003ebe:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <_dtoa_r+0xbbc>)
 8003ec0:	f7ff bb36 	b.w	8003530 <_dtoa_r+0x28>
 8003ec4:	6932      	ldr	r2, [r6, #16]
 8003ec6:	f106 010c 	add.w	r1, r6, #12
 8003eca:	3202      	adds	r2, #2
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	300c      	adds	r0, #12
 8003ed0:	f000 fff2 	bl	8004eb8 <memcpy>
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 fc03 	bl	80046e4 <__lshift>
 8003ede:	46b0      	mov	r8, r6
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	9b03      	ldr	r3, [sp, #12]
 8003ee4:	9a03      	ldr	r2, [sp, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	9308      	str	r3, [sp, #32]
 8003eea:	9b06      	ldr	r3, [sp, #24]
 8003eec:	4413      	add	r3, r2
 8003eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ef0:	9b04      	ldr	r3, [sp, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ef8:	9b08      	ldr	r3, [sp, #32]
 8003efa:	4621      	mov	r1, r4
 8003efc:	3b01      	subs	r3, #1
 8003efe:	4650      	mov	r0, sl
 8003f00:	9304      	str	r3, [sp, #16]
 8003f02:	f7ff fa78 	bl	80033f6 <quorem>
 8003f06:	4641      	mov	r1, r8
 8003f08:	9006      	str	r0, [sp, #24]
 8003f0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003f0e:	4650      	mov	r0, sl
 8003f10:	f000 fc54 	bl	80047bc <__mcmp>
 8003f14:	4632      	mov	r2, r6
 8003f16:	9009      	str	r0, [sp, #36]	; 0x24
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 fc6a 	bl	80047f4 <__mdiff>
 8003f20:	68c2      	ldr	r2, [r0, #12]
 8003f22:	4607      	mov	r7, r0
 8003f24:	bb02      	cbnz	r2, 8003f68 <_dtoa_r+0xa60>
 8003f26:	4601      	mov	r1, r0
 8003f28:	4650      	mov	r0, sl
 8003f2a:	f000 fc47 	bl	80047bc <__mcmp>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4639      	mov	r1, r7
 8003f32:	4628      	mov	r0, r5
 8003f34:	920c      	str	r2, [sp, #48]	; 0x30
 8003f36:	f000 fa07 	bl	8004348 <_Bfree>
 8003f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f3e:	9f08      	ldr	r7, [sp, #32]
 8003f40:	ea43 0102 	orr.w	r1, r3, r2
 8003f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f46:	4319      	orrs	r1, r3
 8003f48:	d110      	bne.n	8003f6c <_dtoa_r+0xa64>
 8003f4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f4e:	d029      	beq.n	8003fa4 <_dtoa_r+0xa9c>
 8003f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	dd02      	ble.n	8003f5c <_dtoa_r+0xa54>
 8003f56:	9b06      	ldr	r3, [sp, #24]
 8003f58:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003f5c:	9b04      	ldr	r3, [sp, #16]
 8003f5e:	f883 9000 	strb.w	r9, [r3]
 8003f62:	e777      	b.n	8003e54 <_dtoa_r+0x94c>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e7ba      	b.n	8003ede <_dtoa_r+0x9d6>
 8003f68:	2201      	movs	r2, #1
 8003f6a:	e7e1      	b.n	8003f30 <_dtoa_r+0xa28>
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db04      	blt.n	8003f7c <_dtoa_r+0xa74>
 8003f72:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003f74:	430b      	orrs	r3, r1
 8003f76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	d120      	bne.n	8003fbe <_dtoa_r+0xab6>
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	dded      	ble.n	8003f5c <_dtoa_r+0xa54>
 8003f80:	4651      	mov	r1, sl
 8003f82:	2201      	movs	r2, #1
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 fbad 	bl	80046e4 <__lshift>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4682      	mov	sl, r0
 8003f8e:	f000 fc15 	bl	80047bc <__mcmp>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	dc03      	bgt.n	8003f9e <_dtoa_r+0xa96>
 8003f96:	d1e1      	bne.n	8003f5c <_dtoa_r+0xa54>
 8003f98:	f019 0f01 	tst.w	r9, #1
 8003f9c:	d0de      	beq.n	8003f5c <_dtoa_r+0xa54>
 8003f9e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fa2:	d1d8      	bne.n	8003f56 <_dtoa_r+0xa4e>
 8003fa4:	2339      	movs	r3, #57	; 0x39
 8003fa6:	9a04      	ldr	r2, [sp, #16]
 8003fa8:	7013      	strb	r3, [r2, #0]
 8003faa:	463b      	mov	r3, r7
 8003fac:	461f      	mov	r7, r3
 8003fae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	2a39      	cmp	r2, #57	; 0x39
 8003fb6:	d06b      	beq.n	8004090 <_dtoa_r+0xb88>
 8003fb8:	3201      	adds	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e74a      	b.n	8003e54 <_dtoa_r+0x94c>
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	dd07      	ble.n	8003fd2 <_dtoa_r+0xaca>
 8003fc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fc6:	d0ed      	beq.n	8003fa4 <_dtoa_r+0xa9c>
 8003fc8:	9a04      	ldr	r2, [sp, #16]
 8003fca:	f109 0301 	add.w	r3, r9, #1
 8003fce:	7013      	strb	r3, [r2, #0]
 8003fd0:	e740      	b.n	8003e54 <_dtoa_r+0x94c>
 8003fd2:	9b08      	ldr	r3, [sp, #32]
 8003fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fd6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d042      	beq.n	8004064 <_dtoa_r+0xb5c>
 8003fde:	4651      	mov	r1, sl
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	220a      	movs	r2, #10
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f9d1 	bl	800438c <__multadd>
 8003fea:	45b0      	cmp	r8, r6
 8003fec:	4682      	mov	sl, r0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f04f 020a 	mov.w	r2, #10
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	d107      	bne.n	800400c <_dtoa_r+0xb04>
 8003ffc:	f000 f9c6 	bl	800438c <__multadd>
 8004000:	4680      	mov	r8, r0
 8004002:	4606      	mov	r6, r0
 8004004:	9b08      	ldr	r3, [sp, #32]
 8004006:	3301      	adds	r3, #1
 8004008:	9308      	str	r3, [sp, #32]
 800400a:	e775      	b.n	8003ef8 <_dtoa_r+0x9f0>
 800400c:	f000 f9be 	bl	800438c <__multadd>
 8004010:	4631      	mov	r1, r6
 8004012:	4680      	mov	r8, r0
 8004014:	2300      	movs	r3, #0
 8004016:	220a      	movs	r2, #10
 8004018:	4628      	mov	r0, r5
 800401a:	f000 f9b7 	bl	800438c <__multadd>
 800401e:	4606      	mov	r6, r0
 8004020:	e7f0      	b.n	8004004 <_dtoa_r+0xafc>
 8004022:	9b08      	ldr	r3, [sp, #32]
 8004024:	9306      	str	r3, [sp, #24]
 8004026:	9f03      	ldr	r7, [sp, #12]
 8004028:	4621      	mov	r1, r4
 800402a:	4650      	mov	r0, sl
 800402c:	f7ff f9e3 	bl	80033f6 <quorem>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004036:	f807 9b01 	strb.w	r9, [r7], #1
 800403a:	1afa      	subs	r2, r7, r3
 800403c:	9b06      	ldr	r3, [sp, #24]
 800403e:	4293      	cmp	r3, r2
 8004040:	dd07      	ble.n	8004052 <_dtoa_r+0xb4a>
 8004042:	4651      	mov	r1, sl
 8004044:	2300      	movs	r3, #0
 8004046:	220a      	movs	r2, #10
 8004048:	4628      	mov	r0, r5
 800404a:	f000 f99f 	bl	800438c <__multadd>
 800404e:	4682      	mov	sl, r0
 8004050:	e7ea      	b.n	8004028 <_dtoa_r+0xb20>
 8004052:	9b06      	ldr	r3, [sp, #24]
 8004054:	f04f 0800 	mov.w	r8, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	bfcc      	ite	gt
 800405c:	461f      	movgt	r7, r3
 800405e:	2701      	movle	r7, #1
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	441f      	add	r7, r3
 8004064:	4651      	mov	r1, sl
 8004066:	2201      	movs	r2, #1
 8004068:	4628      	mov	r0, r5
 800406a:	f000 fb3b 	bl	80046e4 <__lshift>
 800406e:	4621      	mov	r1, r4
 8004070:	4682      	mov	sl, r0
 8004072:	f000 fba3 	bl	80047bc <__mcmp>
 8004076:	2800      	cmp	r0, #0
 8004078:	dc97      	bgt.n	8003faa <_dtoa_r+0xaa2>
 800407a:	d102      	bne.n	8004082 <_dtoa_r+0xb7a>
 800407c:	f019 0f01 	tst.w	r9, #1
 8004080:	d193      	bne.n	8003faa <_dtoa_r+0xaa2>
 8004082:	463b      	mov	r3, r7
 8004084:	461f      	mov	r7, r3
 8004086:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800408a:	2a30      	cmp	r2, #48	; 0x30
 800408c:	d0fa      	beq.n	8004084 <_dtoa_r+0xb7c>
 800408e:	e6e1      	b.n	8003e54 <_dtoa_r+0x94c>
 8004090:	9a03      	ldr	r2, [sp, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d18a      	bne.n	8003fac <_dtoa_r+0xaa4>
 8004096:	2331      	movs	r3, #49	; 0x31
 8004098:	f10b 0b01 	add.w	fp, fp, #1
 800409c:	e797      	b.n	8003fce <_dtoa_r+0xac6>
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <_dtoa_r+0xbc0>)
 80040a0:	f7ff ba9f 	b.w	80035e2 <_dtoa_r+0xda>
 80040a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f47f aa77 	bne.w	800359a <_dtoa_r+0x92>
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <_dtoa_r+0xbc4>)
 80040ae:	f7ff ba98 	b.w	80035e2 <_dtoa_r+0xda>
 80040b2:	9b06      	ldr	r3, [sp, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dcb6      	bgt.n	8004026 <_dtoa_r+0xb1e>
 80040b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	f73f aeb5 	bgt.w	8003e2a <_dtoa_r+0x922>
 80040c0:	e7b1      	b.n	8004026 <_dtoa_r+0xb1e>
 80040c2:	bf00      	nop
 80040c4:	08005152 	.word	0x08005152
 80040c8:	080050b2 	.word	0x080050b2
 80040cc:	080050d6 	.word	0x080050d6

080040d0 <_free_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4605      	mov	r5, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d040      	beq.n	800415a <_free_r+0x8a>
 80040d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040dc:	1f0c      	subs	r4, r1, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfb8      	it	lt
 80040e2:	18e4      	addlt	r4, r4, r3
 80040e4:	f000 f8e4 	bl	80042b0 <__malloc_lock>
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <_free_r+0x8c>)
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	b933      	cbnz	r3, 80040fc <_free_r+0x2c>
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6014      	str	r4, [r2, #0]
 80040f2:	4628      	mov	r0, r5
 80040f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f8:	f000 b8e0 	b.w	80042bc <__malloc_unlock>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x42>
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	1821      	adds	r1, r4, r0
 8004104:	428b      	cmp	r3, r1
 8004106:	bf01      	itttt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	1809      	addeq	r1, r1, r0
 800410e:	6021      	streq	r1, [r4, #0]
 8004110:	e7ed      	b.n	80040ee <_free_r+0x1e>
 8004112:	461a      	mov	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b10b      	cbz	r3, 800411c <_free_r+0x4c>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d9fa      	bls.n	8004112 <_free_r+0x42>
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	1850      	adds	r0, r2, r1
 8004120:	42a0      	cmp	r0, r4
 8004122:	d10b      	bne.n	800413c <_free_r+0x6c>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	4401      	add	r1, r0
 8004128:	1850      	adds	r0, r2, r1
 800412a:	4283      	cmp	r3, r0
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	d1e0      	bne.n	80040f2 <_free_r+0x22>
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4408      	add	r0, r1
 8004136:	6010      	str	r0, [r2, #0]
 8004138:	6053      	str	r3, [r2, #4]
 800413a:	e7da      	b.n	80040f2 <_free_r+0x22>
 800413c:	d902      	bls.n	8004144 <_free_r+0x74>
 800413e:	230c      	movs	r3, #12
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	e7d6      	b.n	80040f2 <_free_r+0x22>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	1821      	adds	r1, r4, r0
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1809      	addeq	r1, r1, r0
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	6054      	str	r4, [r2, #4]
 8004158:	e7cb      	b.n	80040f2 <_free_r+0x22>
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	200003d8 	.word	0x200003d8

08004160 <malloc>:
 8004160:	4b02      	ldr	r3, [pc, #8]	; (800416c <malloc+0xc>)
 8004162:	4601      	mov	r1, r0
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	f000 b823 	b.w	80041b0 <_malloc_r>
 800416a:	bf00      	nop
 800416c:	20000064 	.word	0x20000064

08004170 <sbrk_aligned>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	4e0e      	ldr	r6, [pc, #56]	; (80041ac <sbrk_aligned+0x3c>)
 8004174:	460c      	mov	r4, r1
 8004176:	6831      	ldr	r1, [r6, #0]
 8004178:	4605      	mov	r5, r0
 800417a:	b911      	cbnz	r1, 8004182 <sbrk_aligned+0x12>
 800417c:	f000 fe8c 	bl	8004e98 <_sbrk_r>
 8004180:	6030      	str	r0, [r6, #0]
 8004182:	4621      	mov	r1, r4
 8004184:	4628      	mov	r0, r5
 8004186:	f000 fe87 	bl	8004e98 <_sbrk_r>
 800418a:	1c43      	adds	r3, r0, #1
 800418c:	d00a      	beq.n	80041a4 <sbrk_aligned+0x34>
 800418e:	1cc4      	adds	r4, r0, #3
 8004190:	f024 0403 	bic.w	r4, r4, #3
 8004194:	42a0      	cmp	r0, r4
 8004196:	d007      	beq.n	80041a8 <sbrk_aligned+0x38>
 8004198:	1a21      	subs	r1, r4, r0
 800419a:	4628      	mov	r0, r5
 800419c:	f000 fe7c 	bl	8004e98 <_sbrk_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d101      	bne.n	80041a8 <sbrk_aligned+0x38>
 80041a4:	f04f 34ff 	mov.w	r4, #4294967295
 80041a8:	4620      	mov	r0, r4
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	200003dc 	.word	0x200003dc

080041b0 <_malloc_r>:
 80041b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b4:	1ccd      	adds	r5, r1, #3
 80041b6:	f025 0503 	bic.w	r5, r5, #3
 80041ba:	3508      	adds	r5, #8
 80041bc:	2d0c      	cmp	r5, #12
 80041be:	bf38      	it	cc
 80041c0:	250c      	movcc	r5, #12
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	4607      	mov	r7, r0
 80041c6:	db01      	blt.n	80041cc <_malloc_r+0x1c>
 80041c8:	42a9      	cmp	r1, r5
 80041ca:	d905      	bls.n	80041d8 <_malloc_r+0x28>
 80041cc:	230c      	movs	r3, #12
 80041ce:	2600      	movs	r6, #0
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4630      	mov	r0, r6
 80041d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042ac <_malloc_r+0xfc>
 80041dc:	f000 f868 	bl	80042b0 <__malloc_lock>
 80041e0:	f8d8 3000 	ldr.w	r3, [r8]
 80041e4:	461c      	mov	r4, r3
 80041e6:	bb5c      	cbnz	r4, 8004240 <_malloc_r+0x90>
 80041e8:	4629      	mov	r1, r5
 80041ea:	4638      	mov	r0, r7
 80041ec:	f7ff ffc0 	bl	8004170 <sbrk_aligned>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	4604      	mov	r4, r0
 80041f4:	d155      	bne.n	80042a2 <_malloc_r+0xf2>
 80041f6:	f8d8 4000 	ldr.w	r4, [r8]
 80041fa:	4626      	mov	r6, r4
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	d145      	bne.n	800428c <_malloc_r+0xdc>
 8004200:	2c00      	cmp	r4, #0
 8004202:	d048      	beq.n	8004296 <_malloc_r+0xe6>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	4631      	mov	r1, r6
 8004208:	4638      	mov	r0, r7
 800420a:	eb04 0903 	add.w	r9, r4, r3
 800420e:	f000 fe43 	bl	8004e98 <_sbrk_r>
 8004212:	4581      	cmp	r9, r0
 8004214:	d13f      	bne.n	8004296 <_malloc_r+0xe6>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	4638      	mov	r0, r7
 800421a:	1a6d      	subs	r5, r5, r1
 800421c:	4629      	mov	r1, r5
 800421e:	f7ff ffa7 	bl	8004170 <sbrk_aligned>
 8004222:	3001      	adds	r0, #1
 8004224:	d037      	beq.n	8004296 <_malloc_r+0xe6>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	442b      	add	r3, r5
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	f8d8 3000 	ldr.w	r3, [r8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d038      	beq.n	80042a6 <_malloc_r+0xf6>
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	42a2      	cmp	r2, r4
 8004238:	d12b      	bne.n	8004292 <_malloc_r+0xe2>
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	e00f      	b.n	8004260 <_malloc_r+0xb0>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	1b52      	subs	r2, r2, r5
 8004244:	d41f      	bmi.n	8004286 <_malloc_r+0xd6>
 8004246:	2a0b      	cmp	r2, #11
 8004248:	d917      	bls.n	800427a <_malloc_r+0xca>
 800424a:	1961      	adds	r1, r4, r5
 800424c:	42a3      	cmp	r3, r4
 800424e:	6025      	str	r5, [r4, #0]
 8004250:	bf18      	it	ne
 8004252:	6059      	strne	r1, [r3, #4]
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	bf08      	it	eq
 8004258:	f8c8 1000 	streq.w	r1, [r8]
 800425c:	5162      	str	r2, [r4, r5]
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	4638      	mov	r0, r7
 8004262:	f104 060b 	add.w	r6, r4, #11
 8004266:	f000 f829 	bl	80042bc <__malloc_unlock>
 800426a:	f026 0607 	bic.w	r6, r6, #7
 800426e:	1d23      	adds	r3, r4, #4
 8004270:	1af2      	subs	r2, r6, r3
 8004272:	d0ae      	beq.n	80041d2 <_malloc_r+0x22>
 8004274:	1b9b      	subs	r3, r3, r6
 8004276:	50a3      	str	r3, [r4, r2]
 8004278:	e7ab      	b.n	80041d2 <_malloc_r+0x22>
 800427a:	42a3      	cmp	r3, r4
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	d1dd      	bne.n	800423c <_malloc_r+0x8c>
 8004280:	f8c8 2000 	str.w	r2, [r8]
 8004284:	e7ec      	b.n	8004260 <_malloc_r+0xb0>
 8004286:	4623      	mov	r3, r4
 8004288:	6864      	ldr	r4, [r4, #4]
 800428a:	e7ac      	b.n	80041e6 <_malloc_r+0x36>
 800428c:	4634      	mov	r4, r6
 800428e:	6876      	ldr	r6, [r6, #4]
 8004290:	e7b4      	b.n	80041fc <_malloc_r+0x4c>
 8004292:	4613      	mov	r3, r2
 8004294:	e7cc      	b.n	8004230 <_malloc_r+0x80>
 8004296:	230c      	movs	r3, #12
 8004298:	4638      	mov	r0, r7
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	f000 f80e 	bl	80042bc <__malloc_unlock>
 80042a0:	e797      	b.n	80041d2 <_malloc_r+0x22>
 80042a2:	6025      	str	r5, [r4, #0]
 80042a4:	e7dc      	b.n	8004260 <_malloc_r+0xb0>
 80042a6:	605b      	str	r3, [r3, #4]
 80042a8:	deff      	udf	#255	; 0xff
 80042aa:	bf00      	nop
 80042ac:	200003d8 	.word	0x200003d8

080042b0 <__malloc_lock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__malloc_lock+0x8>)
 80042b2:	f7ff b890 	b.w	80033d6 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	200003d4 	.word	0x200003d4

080042bc <__malloc_unlock>:
 80042bc:	4801      	ldr	r0, [pc, #4]	; (80042c4 <__malloc_unlock+0x8>)
 80042be:	f7ff b88b 	b.w	80033d8 <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	200003d4 	.word	0x200003d4

080042c8 <_Balloc>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	69c6      	ldr	r6, [r0, #28]
 80042cc:	4604      	mov	r4, r0
 80042ce:	460d      	mov	r5, r1
 80042d0:	b976      	cbnz	r6, 80042f0 <_Balloc+0x28>
 80042d2:	2010      	movs	r0, #16
 80042d4:	f7ff ff44 	bl	8004160 <malloc>
 80042d8:	4602      	mov	r2, r0
 80042da:	61e0      	str	r0, [r4, #28]
 80042dc:	b920      	cbnz	r0, 80042e8 <_Balloc+0x20>
 80042de:	216b      	movs	r1, #107	; 0x6b
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <_Balloc+0x78>)
 80042e2:	4818      	ldr	r0, [pc, #96]	; (8004344 <_Balloc+0x7c>)
 80042e4:	f000 fdf6 	bl	8004ed4 <__assert_func>
 80042e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80042ec:	6006      	str	r6, [r0, #0]
 80042ee:	60c6      	str	r6, [r0, #12]
 80042f0:	69e6      	ldr	r6, [r4, #28]
 80042f2:	68f3      	ldr	r3, [r6, #12]
 80042f4:	b183      	cbz	r3, 8004318 <_Balloc+0x50>
 80042f6:	69e3      	ldr	r3, [r4, #28]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80042fe:	b9b8      	cbnz	r0, 8004330 <_Balloc+0x68>
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f605 	lsl.w	r6, r1, r5
 8004306:	1d72      	adds	r2, r6, #5
 8004308:	4620      	mov	r0, r4
 800430a:	0092      	lsls	r2, r2, #2
 800430c:	f000 fe00 	bl	8004f10 <_calloc_r>
 8004310:	b160      	cbz	r0, 800432c <_Balloc+0x64>
 8004312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004316:	e00e      	b.n	8004336 <_Balloc+0x6e>
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	2104      	movs	r1, #4
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fdf7 	bl	8004f10 <_calloc_r>
 8004322:	69e3      	ldr	r3, [r4, #28]
 8004324:	60f0      	str	r0, [r6, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e4      	bne.n	80042f6 <_Balloc+0x2e>
 800432c:	2000      	movs	r0, #0
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	6802      	ldr	r2, [r0, #0]
 8004332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004336:	2300      	movs	r3, #0
 8004338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800433c:	e7f7      	b.n	800432e <_Balloc+0x66>
 800433e:	bf00      	nop
 8004340:	080050e3 	.word	0x080050e3
 8004344:	08005163 	.word	0x08005163

08004348 <_Bfree>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	69c6      	ldr	r6, [r0, #28]
 800434c:	4605      	mov	r5, r0
 800434e:	460c      	mov	r4, r1
 8004350:	b976      	cbnz	r6, 8004370 <_Bfree+0x28>
 8004352:	2010      	movs	r0, #16
 8004354:	f7ff ff04 	bl	8004160 <malloc>
 8004358:	4602      	mov	r2, r0
 800435a:	61e8      	str	r0, [r5, #28]
 800435c:	b920      	cbnz	r0, 8004368 <_Bfree+0x20>
 800435e:	218f      	movs	r1, #143	; 0x8f
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <_Bfree+0x3c>)
 8004362:	4809      	ldr	r0, [pc, #36]	; (8004388 <_Bfree+0x40>)
 8004364:	f000 fdb6 	bl	8004ed4 <__assert_func>
 8004368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800436c:	6006      	str	r6, [r0, #0]
 800436e:	60c6      	str	r6, [r0, #12]
 8004370:	b13c      	cbz	r4, 8004382 <_Bfree+0x3a>
 8004372:	69eb      	ldr	r3, [r5, #28]
 8004374:	6862      	ldr	r2, [r4, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800437c:	6021      	str	r1, [r4, #0]
 800437e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	080050e3 	.word	0x080050e3
 8004388:	08005163 	.word	0x08005163

0800438c <__multadd>:
 800438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	4607      	mov	r7, r0
 8004392:	460c      	mov	r4, r1
 8004394:	461e      	mov	r6, r3
 8004396:	2000      	movs	r0, #0
 8004398:	690d      	ldr	r5, [r1, #16]
 800439a:	f101 0c14 	add.w	ip, r1, #20
 800439e:	f8dc 3000 	ldr.w	r3, [ip]
 80043a2:	3001      	adds	r0, #1
 80043a4:	b299      	uxth	r1, r3
 80043a6:	fb02 6101 	mla	r1, r2, r1, r6
 80043aa:	0c1e      	lsrs	r6, r3, #16
 80043ac:	0c0b      	lsrs	r3, r1, #16
 80043ae:	fb02 3306 	mla	r3, r2, r6, r3
 80043b2:	b289      	uxth	r1, r1
 80043b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80043b8:	4285      	cmp	r5, r0
 80043ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80043be:	f84c 1b04 	str.w	r1, [ip], #4
 80043c2:	dcec      	bgt.n	800439e <__multadd+0x12>
 80043c4:	b30e      	cbz	r6, 800440a <__multadd+0x7e>
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dc19      	bgt.n	8004400 <__multadd+0x74>
 80043cc:	6861      	ldr	r1, [r4, #4]
 80043ce:	4638      	mov	r0, r7
 80043d0:	3101      	adds	r1, #1
 80043d2:	f7ff ff79 	bl	80042c8 <_Balloc>
 80043d6:	4680      	mov	r8, r0
 80043d8:	b928      	cbnz	r0, 80043e6 <__multadd+0x5a>
 80043da:	4602      	mov	r2, r0
 80043dc:	21ba      	movs	r1, #186	; 0xba
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <__multadd+0x84>)
 80043e0:	480c      	ldr	r0, [pc, #48]	; (8004414 <__multadd+0x88>)
 80043e2:	f000 fd77 	bl	8004ed4 <__assert_func>
 80043e6:	6922      	ldr	r2, [r4, #16]
 80043e8:	f104 010c 	add.w	r1, r4, #12
 80043ec:	3202      	adds	r2, #2
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	300c      	adds	r0, #12
 80043f2:	f000 fd61 	bl	8004eb8 <memcpy>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4638      	mov	r0, r7
 80043fa:	f7ff ffa5 	bl	8004348 <_Bfree>
 80043fe:	4644      	mov	r4, r8
 8004400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004404:	3501      	adds	r5, #1
 8004406:	615e      	str	r6, [r3, #20]
 8004408:	6125      	str	r5, [r4, #16]
 800440a:	4620      	mov	r0, r4
 800440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004410:	08005152 	.word	0x08005152
 8004414:	08005163 	.word	0x08005163

08004418 <__hi0bits>:
 8004418:	0c02      	lsrs	r2, r0, #16
 800441a:	0412      	lsls	r2, r2, #16
 800441c:	4603      	mov	r3, r0
 800441e:	b9ca      	cbnz	r2, 8004454 <__hi0bits+0x3c>
 8004420:	0403      	lsls	r3, r0, #16
 8004422:	2010      	movs	r0, #16
 8004424:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004428:	bf04      	itt	eq
 800442a:	021b      	lsleq	r3, r3, #8
 800442c:	3008      	addeq	r0, #8
 800442e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004432:	bf04      	itt	eq
 8004434:	011b      	lsleq	r3, r3, #4
 8004436:	3004      	addeq	r0, #4
 8004438:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800443c:	bf04      	itt	eq
 800443e:	009b      	lsleq	r3, r3, #2
 8004440:	3002      	addeq	r0, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	db05      	blt.n	8004452 <__hi0bits+0x3a>
 8004446:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800444a:	f100 0001 	add.w	r0, r0, #1
 800444e:	bf08      	it	eq
 8004450:	2020      	moveq	r0, #32
 8004452:	4770      	bx	lr
 8004454:	2000      	movs	r0, #0
 8004456:	e7e5      	b.n	8004424 <__hi0bits+0xc>

08004458 <__lo0bits>:
 8004458:	6803      	ldr	r3, [r0, #0]
 800445a:	4602      	mov	r2, r0
 800445c:	f013 0007 	ands.w	r0, r3, #7
 8004460:	d00b      	beq.n	800447a <__lo0bits+0x22>
 8004462:	07d9      	lsls	r1, r3, #31
 8004464:	d421      	bmi.n	80044aa <__lo0bits+0x52>
 8004466:	0798      	lsls	r0, r3, #30
 8004468:	bf49      	itett	mi
 800446a:	085b      	lsrmi	r3, r3, #1
 800446c:	089b      	lsrpl	r3, r3, #2
 800446e:	2001      	movmi	r0, #1
 8004470:	6013      	strmi	r3, [r2, #0]
 8004472:	bf5c      	itt	pl
 8004474:	2002      	movpl	r0, #2
 8004476:	6013      	strpl	r3, [r2, #0]
 8004478:	4770      	bx	lr
 800447a:	b299      	uxth	r1, r3
 800447c:	b909      	cbnz	r1, 8004482 <__lo0bits+0x2a>
 800447e:	2010      	movs	r0, #16
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2d9      	uxtb	r1, r3
 8004484:	b909      	cbnz	r1, 800448a <__lo0bits+0x32>
 8004486:	3008      	adds	r0, #8
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	0719      	lsls	r1, r3, #28
 800448c:	bf04      	itt	eq
 800448e:	091b      	lsreq	r3, r3, #4
 8004490:	3004      	addeq	r0, #4
 8004492:	0799      	lsls	r1, r3, #30
 8004494:	bf04      	itt	eq
 8004496:	089b      	lsreq	r3, r3, #2
 8004498:	3002      	addeq	r0, #2
 800449a:	07d9      	lsls	r1, r3, #31
 800449c:	d403      	bmi.n	80044a6 <__lo0bits+0x4e>
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	f100 0001 	add.w	r0, r0, #1
 80044a4:	d003      	beq.n	80044ae <__lo0bits+0x56>
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4770      	bx	lr
 80044aa:	2000      	movs	r0, #0
 80044ac:	4770      	bx	lr
 80044ae:	2020      	movs	r0, #32
 80044b0:	4770      	bx	lr
	...

080044b4 <__i2b>:
 80044b4:	b510      	push	{r4, lr}
 80044b6:	460c      	mov	r4, r1
 80044b8:	2101      	movs	r1, #1
 80044ba:	f7ff ff05 	bl	80042c8 <_Balloc>
 80044be:	4602      	mov	r2, r0
 80044c0:	b928      	cbnz	r0, 80044ce <__i2b+0x1a>
 80044c2:	f240 1145 	movw	r1, #325	; 0x145
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <__i2b+0x24>)
 80044c8:	4804      	ldr	r0, [pc, #16]	; (80044dc <__i2b+0x28>)
 80044ca:	f000 fd03 	bl	8004ed4 <__assert_func>
 80044ce:	2301      	movs	r3, #1
 80044d0:	6144      	str	r4, [r0, #20]
 80044d2:	6103      	str	r3, [r0, #16]
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	bf00      	nop
 80044d8:	08005152 	.word	0x08005152
 80044dc:	08005163 	.word	0x08005163

080044e0 <__multiply>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	4691      	mov	r9, r2
 80044e6:	690a      	ldr	r2, [r1, #16]
 80044e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80044ec:	460c      	mov	r4, r1
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bfbe      	ittt	lt
 80044f2:	460b      	movlt	r3, r1
 80044f4:	464c      	movlt	r4, r9
 80044f6:	4699      	movlt	r9, r3
 80044f8:	6927      	ldr	r7, [r4, #16]
 80044fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	eb07 060a 	add.w	r6, r7, sl
 8004506:	42b3      	cmp	r3, r6
 8004508:	b085      	sub	sp, #20
 800450a:	bfb8      	it	lt
 800450c:	3101      	addlt	r1, #1
 800450e:	f7ff fedb 	bl	80042c8 <_Balloc>
 8004512:	b930      	cbnz	r0, 8004522 <__multiply+0x42>
 8004514:	4602      	mov	r2, r0
 8004516:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800451a:	4b43      	ldr	r3, [pc, #268]	; (8004628 <__multiply+0x148>)
 800451c:	4843      	ldr	r0, [pc, #268]	; (800462c <__multiply+0x14c>)
 800451e:	f000 fcd9 	bl	8004ed4 <__assert_func>
 8004522:	f100 0514 	add.w	r5, r0, #20
 8004526:	462b      	mov	r3, r5
 8004528:	2200      	movs	r2, #0
 800452a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800452e:	4543      	cmp	r3, r8
 8004530:	d321      	bcc.n	8004576 <__multiply+0x96>
 8004532:	f104 0314 	add.w	r3, r4, #20
 8004536:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800453a:	f109 0314 	add.w	r3, r9, #20
 800453e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004542:	9202      	str	r2, [sp, #8]
 8004544:	1b3a      	subs	r2, r7, r4
 8004546:	3a15      	subs	r2, #21
 8004548:	f022 0203 	bic.w	r2, r2, #3
 800454c:	3204      	adds	r2, #4
 800454e:	f104 0115 	add.w	r1, r4, #21
 8004552:	428f      	cmp	r7, r1
 8004554:	bf38      	it	cc
 8004556:	2204      	movcc	r2, #4
 8004558:	9201      	str	r2, [sp, #4]
 800455a:	9a02      	ldr	r2, [sp, #8]
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	429a      	cmp	r2, r3
 8004560:	d80c      	bhi.n	800457c <__multiply+0x9c>
 8004562:	2e00      	cmp	r6, #0
 8004564:	dd03      	ble.n	800456e <__multiply+0x8e>
 8004566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800456a:	2b00      	cmp	r3, #0
 800456c:	d05a      	beq.n	8004624 <__multiply+0x144>
 800456e:	6106      	str	r6, [r0, #16]
 8004570:	b005      	add	sp, #20
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	f843 2b04 	str.w	r2, [r3], #4
 800457a:	e7d8      	b.n	800452e <__multiply+0x4e>
 800457c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004580:	f1ba 0f00 	cmp.w	sl, #0
 8004584:	d023      	beq.n	80045ce <__multiply+0xee>
 8004586:	46a9      	mov	r9, r5
 8004588:	f04f 0c00 	mov.w	ip, #0
 800458c:	f104 0e14 	add.w	lr, r4, #20
 8004590:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004594:	f8d9 1000 	ldr.w	r1, [r9]
 8004598:	fa1f fb82 	uxth.w	fp, r2
 800459c:	b289      	uxth	r1, r1
 800459e:	fb0a 110b 	mla	r1, sl, fp, r1
 80045a2:	4461      	add	r1, ip
 80045a4:	f8d9 c000 	ldr.w	ip, [r9]
 80045a8:	0c12      	lsrs	r2, r2, #16
 80045aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80045ae:	fb0a c202 	mla	r2, sl, r2, ip
 80045b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80045b6:	b289      	uxth	r1, r1
 80045b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045bc:	4577      	cmp	r7, lr
 80045be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80045c2:	f849 1b04 	str.w	r1, [r9], #4
 80045c6:	d8e3      	bhi.n	8004590 <__multiply+0xb0>
 80045c8:	9a01      	ldr	r2, [sp, #4]
 80045ca:	f845 c002 	str.w	ip, [r5, r2]
 80045ce:	9a03      	ldr	r2, [sp, #12]
 80045d0:	3304      	adds	r3, #4
 80045d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80045d6:	f1b9 0f00 	cmp.w	r9, #0
 80045da:	d021      	beq.n	8004620 <__multiply+0x140>
 80045dc:	46ae      	mov	lr, r5
 80045de:	f04f 0a00 	mov.w	sl, #0
 80045e2:	6829      	ldr	r1, [r5, #0]
 80045e4:	f104 0c14 	add.w	ip, r4, #20
 80045e8:	f8bc b000 	ldrh.w	fp, [ip]
 80045ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80045f0:	b289      	uxth	r1, r1
 80045f2:	fb09 220b 	mla	r2, r9, fp, r2
 80045f6:	4452      	add	r2, sl
 80045f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045fc:	f84e 1b04 	str.w	r1, [lr], #4
 8004600:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004608:	f8be 1000 	ldrh.w	r1, [lr]
 800460c:	4567      	cmp	r7, ip
 800460e:	fb09 110a 	mla	r1, r9, sl, r1
 8004612:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004616:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800461a:	d8e5      	bhi.n	80045e8 <__multiply+0x108>
 800461c:	9a01      	ldr	r2, [sp, #4]
 800461e:	50a9      	str	r1, [r5, r2]
 8004620:	3504      	adds	r5, #4
 8004622:	e79a      	b.n	800455a <__multiply+0x7a>
 8004624:	3e01      	subs	r6, #1
 8004626:	e79c      	b.n	8004562 <__multiply+0x82>
 8004628:	08005152 	.word	0x08005152
 800462c:	08005163 	.word	0x08005163

08004630 <__pow5mult>:
 8004630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004634:	4615      	mov	r5, r2
 8004636:	f012 0203 	ands.w	r2, r2, #3
 800463a:	4606      	mov	r6, r0
 800463c:	460f      	mov	r7, r1
 800463e:	d007      	beq.n	8004650 <__pow5mult+0x20>
 8004640:	4c25      	ldr	r4, [pc, #148]	; (80046d8 <__pow5mult+0xa8>)
 8004642:	3a01      	subs	r2, #1
 8004644:	2300      	movs	r3, #0
 8004646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800464a:	f7ff fe9f 	bl	800438c <__multadd>
 800464e:	4607      	mov	r7, r0
 8004650:	10ad      	asrs	r5, r5, #2
 8004652:	d03d      	beq.n	80046d0 <__pow5mult+0xa0>
 8004654:	69f4      	ldr	r4, [r6, #28]
 8004656:	b97c      	cbnz	r4, 8004678 <__pow5mult+0x48>
 8004658:	2010      	movs	r0, #16
 800465a:	f7ff fd81 	bl	8004160 <malloc>
 800465e:	4602      	mov	r2, r0
 8004660:	61f0      	str	r0, [r6, #28]
 8004662:	b928      	cbnz	r0, 8004670 <__pow5mult+0x40>
 8004664:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <__pow5mult+0xac>)
 800466a:	481d      	ldr	r0, [pc, #116]	; (80046e0 <__pow5mult+0xb0>)
 800466c:	f000 fc32 	bl	8004ed4 <__assert_func>
 8004670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004674:	6004      	str	r4, [r0, #0]
 8004676:	60c4      	str	r4, [r0, #12]
 8004678:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800467c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004680:	b94c      	cbnz	r4, 8004696 <__pow5mult+0x66>
 8004682:	f240 2171 	movw	r1, #625	; 0x271
 8004686:	4630      	mov	r0, r6
 8004688:	f7ff ff14 	bl	80044b4 <__i2b>
 800468c:	2300      	movs	r3, #0
 800468e:	4604      	mov	r4, r0
 8004690:	f8c8 0008 	str.w	r0, [r8, #8]
 8004694:	6003      	str	r3, [r0, #0]
 8004696:	f04f 0900 	mov.w	r9, #0
 800469a:	07eb      	lsls	r3, r5, #31
 800469c:	d50a      	bpl.n	80046b4 <__pow5mult+0x84>
 800469e:	4639      	mov	r1, r7
 80046a0:	4622      	mov	r2, r4
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7ff ff1c 	bl	80044e0 <__multiply>
 80046a8:	4680      	mov	r8, r0
 80046aa:	4639      	mov	r1, r7
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff fe4b 	bl	8004348 <_Bfree>
 80046b2:	4647      	mov	r7, r8
 80046b4:	106d      	asrs	r5, r5, #1
 80046b6:	d00b      	beq.n	80046d0 <__pow5mult+0xa0>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	b938      	cbnz	r0, 80046cc <__pow5mult+0x9c>
 80046bc:	4622      	mov	r2, r4
 80046be:	4621      	mov	r1, r4
 80046c0:	4630      	mov	r0, r6
 80046c2:	f7ff ff0d 	bl	80044e0 <__multiply>
 80046c6:	6020      	str	r0, [r4, #0]
 80046c8:	f8c0 9000 	str.w	r9, [r0]
 80046cc:	4604      	mov	r4, r0
 80046ce:	e7e4      	b.n	800469a <__pow5mult+0x6a>
 80046d0:	4638      	mov	r0, r7
 80046d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d6:	bf00      	nop
 80046d8:	080052b0 	.word	0x080052b0
 80046dc:	080050e3 	.word	0x080050e3
 80046e0:	08005163 	.word	0x08005163

080046e4 <__lshift>:
 80046e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e8:	460c      	mov	r4, r1
 80046ea:	4607      	mov	r7, r0
 80046ec:	4691      	mov	r9, r2
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	6849      	ldr	r1, [r1, #4]
 80046f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80046fc:	f108 0601 	add.w	r6, r8, #1
 8004700:	42b3      	cmp	r3, r6
 8004702:	db0b      	blt.n	800471c <__lshift+0x38>
 8004704:	4638      	mov	r0, r7
 8004706:	f7ff fddf 	bl	80042c8 <_Balloc>
 800470a:	4605      	mov	r5, r0
 800470c:	b948      	cbnz	r0, 8004722 <__lshift+0x3e>
 800470e:	4602      	mov	r2, r0
 8004710:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <__lshift+0xd0>)
 8004716:	4828      	ldr	r0, [pc, #160]	; (80047b8 <__lshift+0xd4>)
 8004718:	f000 fbdc 	bl	8004ed4 <__assert_func>
 800471c:	3101      	adds	r1, #1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	e7ee      	b.n	8004700 <__lshift+0x1c>
 8004722:	2300      	movs	r3, #0
 8004724:	f100 0114 	add.w	r1, r0, #20
 8004728:	f100 0210 	add.w	r2, r0, #16
 800472c:	4618      	mov	r0, r3
 800472e:	4553      	cmp	r3, sl
 8004730:	db33      	blt.n	800479a <__lshift+0xb6>
 8004732:	6920      	ldr	r0, [r4, #16]
 8004734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004738:	f104 0314 	add.w	r3, r4, #20
 800473c:	f019 091f 	ands.w	r9, r9, #31
 8004740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004748:	d02b      	beq.n	80047a2 <__lshift+0xbe>
 800474a:	468a      	mov	sl, r1
 800474c:	2200      	movs	r2, #0
 800474e:	f1c9 0e20 	rsb	lr, r9, #32
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	fa00 f009 	lsl.w	r0, r0, r9
 8004758:	4310      	orrs	r0, r2
 800475a:	f84a 0b04 	str.w	r0, [sl], #4
 800475e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004762:	459c      	cmp	ip, r3
 8004764:	fa22 f20e 	lsr.w	r2, r2, lr
 8004768:	d8f3      	bhi.n	8004752 <__lshift+0x6e>
 800476a:	ebac 0304 	sub.w	r3, ip, r4
 800476e:	3b15      	subs	r3, #21
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	3304      	adds	r3, #4
 8004776:	f104 0015 	add.w	r0, r4, #21
 800477a:	4584      	cmp	ip, r0
 800477c:	bf38      	it	cc
 800477e:	2304      	movcc	r3, #4
 8004780:	50ca      	str	r2, [r1, r3]
 8004782:	b10a      	cbz	r2, 8004788 <__lshift+0xa4>
 8004784:	f108 0602 	add.w	r6, r8, #2
 8004788:	3e01      	subs	r6, #1
 800478a:	4638      	mov	r0, r7
 800478c:	4621      	mov	r1, r4
 800478e:	612e      	str	r6, [r5, #16]
 8004790:	f7ff fdda 	bl	8004348 <_Bfree>
 8004794:	4628      	mov	r0, r5
 8004796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479a:	f842 0f04 	str.w	r0, [r2, #4]!
 800479e:	3301      	adds	r3, #1
 80047a0:	e7c5      	b.n	800472e <__lshift+0x4a>
 80047a2:	3904      	subs	r1, #4
 80047a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a8:	459c      	cmp	ip, r3
 80047aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80047ae:	d8f9      	bhi.n	80047a4 <__lshift+0xc0>
 80047b0:	e7ea      	b.n	8004788 <__lshift+0xa4>
 80047b2:	bf00      	nop
 80047b4:	08005152 	.word	0x08005152
 80047b8:	08005163 	.word	0x08005163

080047bc <__mcmp>:
 80047bc:	4603      	mov	r3, r0
 80047be:	690a      	ldr	r2, [r1, #16]
 80047c0:	6900      	ldr	r0, [r0, #16]
 80047c2:	b530      	push	{r4, r5, lr}
 80047c4:	1a80      	subs	r0, r0, r2
 80047c6:	d10d      	bne.n	80047e4 <__mcmp+0x28>
 80047c8:	3314      	adds	r3, #20
 80047ca:	3114      	adds	r1, #20
 80047cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80047d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80047d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80047d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80047dc:	4295      	cmp	r5, r2
 80047de:	d002      	beq.n	80047e6 <__mcmp+0x2a>
 80047e0:	d304      	bcc.n	80047ec <__mcmp+0x30>
 80047e2:	2001      	movs	r0, #1
 80047e4:	bd30      	pop	{r4, r5, pc}
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	d3f4      	bcc.n	80047d4 <__mcmp+0x18>
 80047ea:	e7fb      	b.n	80047e4 <__mcmp+0x28>
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	e7f8      	b.n	80047e4 <__mcmp+0x28>
	...

080047f4 <__mdiff>:
 80047f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f8:	460d      	mov	r5, r1
 80047fa:	4607      	mov	r7, r0
 80047fc:	4611      	mov	r1, r2
 80047fe:	4628      	mov	r0, r5
 8004800:	4614      	mov	r4, r2
 8004802:	f7ff ffdb 	bl	80047bc <__mcmp>
 8004806:	1e06      	subs	r6, r0, #0
 8004808:	d111      	bne.n	800482e <__mdiff+0x3a>
 800480a:	4631      	mov	r1, r6
 800480c:	4638      	mov	r0, r7
 800480e:	f7ff fd5b 	bl	80042c8 <_Balloc>
 8004812:	4602      	mov	r2, r0
 8004814:	b928      	cbnz	r0, 8004822 <__mdiff+0x2e>
 8004816:	f240 2137 	movw	r1, #567	; 0x237
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <__mdiff+0x110>)
 800481c:	483a      	ldr	r0, [pc, #232]	; (8004908 <__mdiff+0x114>)
 800481e:	f000 fb59 	bl	8004ed4 <__assert_func>
 8004822:	2301      	movs	r3, #1
 8004824:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004828:	4610      	mov	r0, r2
 800482a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482e:	bfa4      	itt	ge
 8004830:	4623      	movge	r3, r4
 8004832:	462c      	movge	r4, r5
 8004834:	4638      	mov	r0, r7
 8004836:	6861      	ldr	r1, [r4, #4]
 8004838:	bfa6      	itte	ge
 800483a:	461d      	movge	r5, r3
 800483c:	2600      	movge	r6, #0
 800483e:	2601      	movlt	r6, #1
 8004840:	f7ff fd42 	bl	80042c8 <_Balloc>
 8004844:	4602      	mov	r2, r0
 8004846:	b918      	cbnz	r0, 8004850 <__mdiff+0x5c>
 8004848:	f240 2145 	movw	r1, #581	; 0x245
 800484c:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <__mdiff+0x110>)
 800484e:	e7e5      	b.n	800481c <__mdiff+0x28>
 8004850:	f102 0814 	add.w	r8, r2, #20
 8004854:	46c2      	mov	sl, r8
 8004856:	f04f 0c00 	mov.w	ip, #0
 800485a:	6927      	ldr	r7, [r4, #16]
 800485c:	60c6      	str	r6, [r0, #12]
 800485e:	692e      	ldr	r6, [r5, #16]
 8004860:	f104 0014 	add.w	r0, r4, #20
 8004864:	f105 0914 	add.w	r9, r5, #20
 8004868:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800486c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004870:	3410      	adds	r4, #16
 8004872:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004876:	f859 3b04 	ldr.w	r3, [r9], #4
 800487a:	fa1f f18b 	uxth.w	r1, fp
 800487e:	4461      	add	r1, ip
 8004880:	fa1f fc83 	uxth.w	ip, r3
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	eba1 010c 	sub.w	r1, r1, ip
 800488a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800488e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004892:	b289      	uxth	r1, r1
 8004894:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004898:	454e      	cmp	r6, r9
 800489a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800489e:	f84a 1b04 	str.w	r1, [sl], #4
 80048a2:	d8e6      	bhi.n	8004872 <__mdiff+0x7e>
 80048a4:	1b73      	subs	r3, r6, r5
 80048a6:	3b15      	subs	r3, #21
 80048a8:	f023 0303 	bic.w	r3, r3, #3
 80048ac:	3515      	adds	r5, #21
 80048ae:	3304      	adds	r3, #4
 80048b0:	42ae      	cmp	r6, r5
 80048b2:	bf38      	it	cc
 80048b4:	2304      	movcc	r3, #4
 80048b6:	4418      	add	r0, r3
 80048b8:	4443      	add	r3, r8
 80048ba:	461e      	mov	r6, r3
 80048bc:	4605      	mov	r5, r0
 80048be:	4575      	cmp	r5, lr
 80048c0:	d30e      	bcc.n	80048e0 <__mdiff+0xec>
 80048c2:	f10e 0103 	add.w	r1, lr, #3
 80048c6:	1a09      	subs	r1, r1, r0
 80048c8:	f021 0103 	bic.w	r1, r1, #3
 80048cc:	3803      	subs	r0, #3
 80048ce:	4586      	cmp	lr, r0
 80048d0:	bf38      	it	cc
 80048d2:	2100      	movcc	r1, #0
 80048d4:	440b      	add	r3, r1
 80048d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80048da:	b189      	cbz	r1, 8004900 <__mdiff+0x10c>
 80048dc:	6117      	str	r7, [r2, #16]
 80048de:	e7a3      	b.n	8004828 <__mdiff+0x34>
 80048e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80048e4:	fa1f f188 	uxth.w	r1, r8
 80048e8:	4461      	add	r1, ip
 80048ea:	140c      	asrs	r4, r1, #16
 80048ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80048f0:	b289      	uxth	r1, r1
 80048f2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80048f6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80048fa:	f846 1b04 	str.w	r1, [r6], #4
 80048fe:	e7de      	b.n	80048be <__mdiff+0xca>
 8004900:	3f01      	subs	r7, #1
 8004902:	e7e8      	b.n	80048d6 <__mdiff+0xe2>
 8004904:	08005152 	.word	0x08005152
 8004908:	08005163 	.word	0x08005163

0800490c <__d2b>:
 800490c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490e:	2101      	movs	r1, #1
 8004910:	4617      	mov	r7, r2
 8004912:	461c      	mov	r4, r3
 8004914:	9e08      	ldr	r6, [sp, #32]
 8004916:	f7ff fcd7 	bl	80042c8 <_Balloc>
 800491a:	4605      	mov	r5, r0
 800491c:	b930      	cbnz	r0, 800492c <__d2b+0x20>
 800491e:	4602      	mov	r2, r0
 8004920:	f240 310f 	movw	r1, #783	; 0x30f
 8004924:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <__d2b+0xa4>)
 8004926:	4823      	ldr	r0, [pc, #140]	; (80049b4 <__d2b+0xa8>)
 8004928:	f000 fad4 	bl	8004ed4 <__assert_func>
 800492c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004930:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004934:	bb24      	cbnz	r4, 8004980 <__d2b+0x74>
 8004936:	2f00      	cmp	r7, #0
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	d026      	beq.n	800498a <__d2b+0x7e>
 800493c:	4668      	mov	r0, sp
 800493e:	9700      	str	r7, [sp, #0]
 8004940:	f7ff fd8a 	bl	8004458 <__lo0bits>
 8004944:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004948:	b1e8      	cbz	r0, 8004986 <__d2b+0x7a>
 800494a:	f1c0 0320 	rsb	r3, r0, #32
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	430b      	orrs	r3, r1
 8004954:	40c2      	lsrs	r2, r0
 8004956:	616b      	str	r3, [r5, #20]
 8004958:	9201      	str	r2, [sp, #4]
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2102      	movne	r1, #2
 8004962:	2101      	moveq	r1, #1
 8004964:	61ab      	str	r3, [r5, #24]
 8004966:	6129      	str	r1, [r5, #16]
 8004968:	b1bc      	cbz	r4, 800499a <__d2b+0x8e>
 800496a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800496e:	4404      	add	r4, r0
 8004970:	6034      	str	r4, [r6, #0]
 8004972:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004978:	6018      	str	r0, [r3, #0]
 800497a:	4628      	mov	r0, r5
 800497c:	b003      	add	sp, #12
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004984:	e7d7      	b.n	8004936 <__d2b+0x2a>
 8004986:	6169      	str	r1, [r5, #20]
 8004988:	e7e7      	b.n	800495a <__d2b+0x4e>
 800498a:	a801      	add	r0, sp, #4
 800498c:	f7ff fd64 	bl	8004458 <__lo0bits>
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	2101      	movs	r1, #1
 8004994:	616b      	str	r3, [r5, #20]
 8004996:	3020      	adds	r0, #32
 8004998:	e7e5      	b.n	8004966 <__d2b+0x5a>
 800499a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800499e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80049a2:	6030      	str	r0, [r6, #0]
 80049a4:	6918      	ldr	r0, [r3, #16]
 80049a6:	f7ff fd37 	bl	8004418 <__hi0bits>
 80049aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80049ae:	e7e2      	b.n	8004976 <__d2b+0x6a>
 80049b0:	08005152 	.word	0x08005152
 80049b4:	08005163 	.word	0x08005163

080049b8 <__sfputc_r>:
 80049b8:	6893      	ldr	r3, [r2, #8]
 80049ba:	b410      	push	{r4}
 80049bc:	3b01      	subs	r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	6093      	str	r3, [r2, #8]
 80049c2:	da07      	bge.n	80049d4 <__sfputc_r+0x1c>
 80049c4:	6994      	ldr	r4, [r2, #24]
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	db01      	blt.n	80049ce <__sfputc_r+0x16>
 80049ca:	290a      	cmp	r1, #10
 80049cc:	d102      	bne.n	80049d4 <__sfputc_r+0x1c>
 80049ce:	bc10      	pop	{r4}
 80049d0:	f7fe bbef 	b.w	80031b2 <__swbuf_r>
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	1c58      	adds	r0, r3, #1
 80049d8:	6010      	str	r0, [r2, #0]
 80049da:	7019      	strb	r1, [r3, #0]
 80049dc:	4608      	mov	r0, r1
 80049de:	bc10      	pop	{r4}
 80049e0:	4770      	bx	lr

080049e2 <__sfputs_r>:
 80049e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e4:	4606      	mov	r6, r0
 80049e6:	460f      	mov	r7, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	18d5      	adds	r5, r2, r3
 80049ec:	42ac      	cmp	r4, r5
 80049ee:	d101      	bne.n	80049f4 <__sfputs_r+0x12>
 80049f0:	2000      	movs	r0, #0
 80049f2:	e007      	b.n	8004a04 <__sfputs_r+0x22>
 80049f4:	463a      	mov	r2, r7
 80049f6:	4630      	mov	r0, r6
 80049f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049fc:	f7ff ffdc 	bl	80049b8 <__sfputc_r>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d1f3      	bne.n	80049ec <__sfputs_r+0xa>
 8004a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a08 <_vfiprintf_r>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	4614      	mov	r4, r2
 8004a10:	4698      	mov	r8, r3
 8004a12:	4606      	mov	r6, r0
 8004a14:	b09d      	sub	sp, #116	; 0x74
 8004a16:	b118      	cbz	r0, 8004a20 <_vfiprintf_r+0x18>
 8004a18:	6a03      	ldr	r3, [r0, #32]
 8004a1a:	b90b      	cbnz	r3, 8004a20 <_vfiprintf_r+0x18>
 8004a1c:	f7fe fae2 	bl	8002fe4 <__sinit>
 8004a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a22:	07d9      	lsls	r1, r3, #31
 8004a24:	d405      	bmi.n	8004a32 <_vfiprintf_r+0x2a>
 8004a26:	89ab      	ldrh	r3, [r5, #12]
 8004a28:	059a      	lsls	r2, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_vfiprintf_r+0x2a>
 8004a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a2e:	f7fe fcd2 	bl	80033d6 <__retarget_lock_acquire_recursive>
 8004a32:	89ab      	ldrh	r3, [r5, #12]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	d501      	bpl.n	8004a3c <_vfiprintf_r+0x34>
 8004a38:	692b      	ldr	r3, [r5, #16]
 8004a3a:	b99b      	cbnz	r3, 8004a64 <_vfiprintf_r+0x5c>
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f7fe fbf4 	bl	800322c <__swsetup_r>
 8004a44:	b170      	cbz	r0, 8004a64 <_vfiprintf_r+0x5c>
 8004a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a48:	07dc      	lsls	r4, r3, #31
 8004a4a:	d504      	bpl.n	8004a56 <_vfiprintf_r+0x4e>
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	b01d      	add	sp, #116	; 0x74
 8004a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	0598      	lsls	r0, r3, #22
 8004a5a:	d4f7      	bmi.n	8004a4c <_vfiprintf_r+0x44>
 8004a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a5e:	f7fe fcbb 	bl	80033d8 <__retarget_lock_release_recursive>
 8004a62:	e7f3      	b.n	8004a4c <_vfiprintf_r+0x44>
 8004a64:	2300      	movs	r3, #0
 8004a66:	9309      	str	r3, [sp, #36]	; 0x24
 8004a68:	2320      	movs	r3, #32
 8004a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a6e:	2330      	movs	r3, #48	; 0x30
 8004a70:	f04f 0901 	mov.w	r9, #1
 8004a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a78:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004c28 <_vfiprintf_r+0x220>
 8004a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a80:	4623      	mov	r3, r4
 8004a82:	469a      	mov	sl, r3
 8004a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a88:	b10a      	cbz	r2, 8004a8e <_vfiprintf_r+0x86>
 8004a8a:	2a25      	cmp	r2, #37	; 0x25
 8004a8c:	d1f9      	bne.n	8004a82 <_vfiprintf_r+0x7a>
 8004a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8004a92:	d00b      	beq.n	8004aac <_vfiprintf_r+0xa4>
 8004a94:	465b      	mov	r3, fp
 8004a96:	4622      	mov	r2, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f7ff ffa1 	bl	80049e2 <__sfputs_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f000 80a9 	beq.w	8004bf8 <_vfiprintf_r+0x1f0>
 8004aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aa8:	445a      	add	r2, fp
 8004aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8004aac:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a1 	beq.w	8004bf8 <_vfiprintf_r+0x1f0>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ac0:	f10a 0a01 	add.w	sl, sl, #1
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	9307      	str	r3, [sp, #28]
 8004ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004acc:	931a      	str	r3, [sp, #104]	; 0x68
 8004ace:	4654      	mov	r4, sl
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_vfiprintf_r+0x220>)
 8004ad8:	f7fe fc7f 	bl	80033da <memchr>
 8004adc:	9a04      	ldr	r2, [sp, #16]
 8004ade:	b9d8      	cbnz	r0, 8004b18 <_vfiprintf_r+0x110>
 8004ae0:	06d1      	lsls	r1, r2, #27
 8004ae2:	bf44      	itt	mi
 8004ae4:	2320      	movmi	r3, #32
 8004ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aea:	0713      	lsls	r3, r2, #28
 8004aec:	bf44      	itt	mi
 8004aee:	232b      	movmi	r3, #43	; 0x2b
 8004af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af4:	f89a 3000 	ldrb.w	r3, [sl]
 8004af8:	2b2a      	cmp	r3, #42	; 0x2a
 8004afa:	d015      	beq.n	8004b28 <_vfiprintf_r+0x120>
 8004afc:	4654      	mov	r4, sl
 8004afe:	2000      	movs	r0, #0
 8004b00:	f04f 0c0a 	mov.w	ip, #10
 8004b04:	9a07      	ldr	r2, [sp, #28]
 8004b06:	4621      	mov	r1, r4
 8004b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b0c:	3b30      	subs	r3, #48	; 0x30
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	d94d      	bls.n	8004bae <_vfiprintf_r+0x1a6>
 8004b12:	b1b0      	cbz	r0, 8004b42 <_vfiprintf_r+0x13a>
 8004b14:	9207      	str	r2, [sp, #28]
 8004b16:	e014      	b.n	8004b42 <_vfiprintf_r+0x13a>
 8004b18:	eba0 0308 	sub.w	r3, r0, r8
 8004b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b20:	4313      	orrs	r3, r2
 8004b22:	46a2      	mov	sl, r4
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	e7d2      	b.n	8004ace <_vfiprintf_r+0xc6>
 8004b28:	9b03      	ldr	r3, [sp, #12]
 8004b2a:	1d19      	adds	r1, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	9103      	str	r1, [sp, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfbb      	ittet	lt
 8004b34:	425b      	neglt	r3, r3
 8004b36:	f042 0202 	orrlt.w	r2, r2, #2
 8004b3a:	9307      	strge	r3, [sp, #28]
 8004b3c:	9307      	strlt	r3, [sp, #28]
 8004b3e:	bfb8      	it	lt
 8004b40:	9204      	strlt	r2, [sp, #16]
 8004b42:	7823      	ldrb	r3, [r4, #0]
 8004b44:	2b2e      	cmp	r3, #46	; 0x2e
 8004b46:	d10c      	bne.n	8004b62 <_vfiprintf_r+0x15a>
 8004b48:	7863      	ldrb	r3, [r4, #1]
 8004b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b4c:	d134      	bne.n	8004bb8 <_vfiprintf_r+0x1b0>
 8004b4e:	9b03      	ldr	r3, [sp, #12]
 8004b50:	3402      	adds	r4, #2
 8004b52:	1d1a      	adds	r2, r3, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	9203      	str	r2, [sp, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfb8      	it	lt
 8004b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b60:	9305      	str	r3, [sp, #20]
 8004b62:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c2c <_vfiprintf_r+0x224>
 8004b66:	2203      	movs	r2, #3
 8004b68:	4650      	mov	r0, sl
 8004b6a:	7821      	ldrb	r1, [r4, #0]
 8004b6c:	f7fe fc35 	bl	80033da <memchr>
 8004b70:	b138      	cbz	r0, 8004b82 <_vfiprintf_r+0x17a>
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	9b04      	ldr	r3, [sp, #16]
 8004b76:	eba0 000a 	sub.w	r0, r0, sl
 8004b7a:	4082      	lsls	r2, r0
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	3401      	adds	r4, #1
 8004b80:	9304      	str	r3, [sp, #16]
 8004b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b86:	2206      	movs	r2, #6
 8004b88:	4829      	ldr	r0, [pc, #164]	; (8004c30 <_vfiprintf_r+0x228>)
 8004b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b8e:	f7fe fc24 	bl	80033da <memchr>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d03f      	beq.n	8004c16 <_vfiprintf_r+0x20e>
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <_vfiprintf_r+0x22c>)
 8004b98:	bb1b      	cbnz	r3, 8004be2 <_vfiprintf_r+0x1da>
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	f023 0307 	bic.w	r3, r3, #7
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	9303      	str	r3, [sp, #12]
 8004ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba8:	443b      	add	r3, r7
 8004baa:	9309      	str	r3, [sp, #36]	; 0x24
 8004bac:	e768      	b.n	8004a80 <_vfiprintf_r+0x78>
 8004bae:	460c      	mov	r4, r1
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bb6:	e7a6      	b.n	8004b06 <_vfiprintf_r+0xfe>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f04f 0c0a 	mov.w	ip, #10
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	3401      	adds	r4, #1
 8004bc2:	9305      	str	r3, [sp, #20]
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bca:	3a30      	subs	r2, #48	; 0x30
 8004bcc:	2a09      	cmp	r2, #9
 8004bce:	d903      	bls.n	8004bd8 <_vfiprintf_r+0x1d0>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0c6      	beq.n	8004b62 <_vfiprintf_r+0x15a>
 8004bd4:	9105      	str	r1, [sp, #20]
 8004bd6:	e7c4      	b.n	8004b62 <_vfiprintf_r+0x15a>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	2301      	movs	r3, #1
 8004bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004be0:	e7f0      	b.n	8004bc4 <_vfiprintf_r+0x1bc>
 8004be2:	ab03      	add	r3, sp, #12
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	462a      	mov	r2, r5
 8004be8:	4630      	mov	r0, r6
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <_vfiprintf_r+0x230>)
 8004bec:	a904      	add	r1, sp, #16
 8004bee:	f7fd fdab 	bl	8002748 <_printf_float>
 8004bf2:	4607      	mov	r7, r0
 8004bf4:	1c78      	adds	r0, r7, #1
 8004bf6:	d1d6      	bne.n	8004ba6 <_vfiprintf_r+0x19e>
 8004bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bfa:	07d9      	lsls	r1, r3, #31
 8004bfc:	d405      	bmi.n	8004c0a <_vfiprintf_r+0x202>
 8004bfe:	89ab      	ldrh	r3, [r5, #12]
 8004c00:	059a      	lsls	r2, r3, #22
 8004c02:	d402      	bmi.n	8004c0a <_vfiprintf_r+0x202>
 8004c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c06:	f7fe fbe7 	bl	80033d8 <__retarget_lock_release_recursive>
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	065b      	lsls	r3, r3, #25
 8004c0e:	f53f af1d 	bmi.w	8004a4c <_vfiprintf_r+0x44>
 8004c12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c14:	e71c      	b.n	8004a50 <_vfiprintf_r+0x48>
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <_vfiprintf_r+0x230>)
 8004c20:	a904      	add	r1, sp, #16
 8004c22:	f7fe f831 	bl	8002c88 <_printf_i>
 8004c26:	e7e4      	b.n	8004bf2 <_vfiprintf_r+0x1ea>
 8004c28:	080052bc 	.word	0x080052bc
 8004c2c:	080052c2 	.word	0x080052c2
 8004c30:	080052c6 	.word	0x080052c6
 8004c34:	08002749 	.word	0x08002749
 8004c38:	080049e3 	.word	0x080049e3

08004c3c <__sflush_r>:
 8004c3c:	898a      	ldrh	r2, [r1, #12]
 8004c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c40:	4605      	mov	r5, r0
 8004c42:	0710      	lsls	r0, r2, #28
 8004c44:	460c      	mov	r4, r1
 8004c46:	d457      	bmi.n	8004cf8 <__sflush_r+0xbc>
 8004c48:	684b      	ldr	r3, [r1, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc04      	bgt.n	8004c58 <__sflush_r+0x1c>
 8004c4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dc01      	bgt.n	8004c58 <__sflush_r+0x1c>
 8004c54:	2000      	movs	r0, #0
 8004c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	d0fa      	beq.n	8004c54 <__sflush_r+0x18>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c64:	682f      	ldr	r7, [r5, #0]
 8004c66:	6a21      	ldr	r1, [r4, #32]
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	d032      	beq.n	8004cd2 <__sflush_r+0x96>
 8004c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	075a      	lsls	r2, r3, #29
 8004c72:	d505      	bpl.n	8004c80 <__sflush_r+0x44>
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	1ac0      	subs	r0, r0, r3
 8004c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c7a:	b10b      	cbz	r3, 8004c80 <__sflush_r+0x44>
 8004c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c7e:	1ac0      	subs	r0, r0, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	4602      	mov	r2, r0
 8004c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c86:	4628      	mov	r0, r5
 8004c88:	6a21      	ldr	r1, [r4, #32]
 8004c8a:	47b0      	blx	r6
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	d106      	bne.n	8004ca0 <__sflush_r+0x64>
 8004c92:	6829      	ldr	r1, [r5, #0]
 8004c94:	291d      	cmp	r1, #29
 8004c96:	d82b      	bhi.n	8004cf0 <__sflush_r+0xb4>
 8004c98:	4a28      	ldr	r2, [pc, #160]	; (8004d3c <__sflush_r+0x100>)
 8004c9a:	410a      	asrs	r2, r1
 8004c9c:	07d6      	lsls	r6, r2, #31
 8004c9e:	d427      	bmi.n	8004cf0 <__sflush_r+0xb4>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6062      	str	r2, [r4, #4]
 8004ca4:	6922      	ldr	r2, [r4, #16]
 8004ca6:	04d9      	lsls	r1, r3, #19
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	d504      	bpl.n	8004cb6 <__sflush_r+0x7a>
 8004cac:	1c42      	adds	r2, r0, #1
 8004cae:	d101      	bne.n	8004cb4 <__sflush_r+0x78>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b903      	cbnz	r3, 8004cb6 <__sflush_r+0x7a>
 8004cb4:	6560      	str	r0, [r4, #84]	; 0x54
 8004cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb8:	602f      	str	r7, [r5, #0]
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	d0ca      	beq.n	8004c54 <__sflush_r+0x18>
 8004cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d002      	beq.n	8004ccc <__sflush_r+0x90>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7ff fa02 	bl	80040d0 <_free_r>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	6360      	str	r0, [r4, #52]	; 0x34
 8004cd0:	e7c1      	b.n	8004c56 <__sflush_r+0x1a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b0      	blx	r6
 8004cd8:	1c41      	adds	r1, r0, #1
 8004cda:	d1c8      	bne.n	8004c6e <__sflush_r+0x32>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0c5      	beq.n	8004c6e <__sflush_r+0x32>
 8004ce2:	2b1d      	cmp	r3, #29
 8004ce4:	d001      	beq.n	8004cea <__sflush_r+0xae>
 8004ce6:	2b16      	cmp	r3, #22
 8004ce8:	d101      	bne.n	8004cee <__sflush_r+0xb2>
 8004cea:	602f      	str	r7, [r5, #0]
 8004cec:	e7b2      	b.n	8004c54 <__sflush_r+0x18>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	e7ae      	b.n	8004c56 <__sflush_r+0x1a>
 8004cf8:	690f      	ldr	r7, [r1, #16]
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	d0aa      	beq.n	8004c54 <__sflush_r+0x18>
 8004cfe:	0793      	lsls	r3, r2, #30
 8004d00:	bf18      	it	ne
 8004d02:	2300      	movne	r3, #0
 8004d04:	680e      	ldr	r6, [r1, #0]
 8004d06:	bf08      	it	eq
 8004d08:	694b      	ldreq	r3, [r1, #20]
 8004d0a:	1bf6      	subs	r6, r6, r7
 8004d0c:	600f      	str	r7, [r1, #0]
 8004d0e:	608b      	str	r3, [r1, #8]
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	dd9f      	ble.n	8004c54 <__sflush_r+0x18>
 8004d14:	4633      	mov	r3, r6
 8004d16:	463a      	mov	r2, r7
 8004d18:	4628      	mov	r0, r5
 8004d1a:	6a21      	ldr	r1, [r4, #32]
 8004d1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004d20:	47e0      	blx	ip
 8004d22:	2800      	cmp	r0, #0
 8004d24:	dc06      	bgt.n	8004d34 <__sflush_r+0xf8>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	e790      	b.n	8004c56 <__sflush_r+0x1a>
 8004d34:	4407      	add	r7, r0
 8004d36:	1a36      	subs	r6, r6, r0
 8004d38:	e7ea      	b.n	8004d10 <__sflush_r+0xd4>
 8004d3a:	bf00      	nop
 8004d3c:	dfbffffe 	.word	0xdfbffffe

08004d40 <_fflush_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b913      	cbnz	r3, 8004d50 <_fflush_r+0x10>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	b118      	cbz	r0, 8004d5a <_fflush_r+0x1a>
 8004d52:	6a03      	ldr	r3, [r0, #32]
 8004d54:	b90b      	cbnz	r3, 8004d5a <_fflush_r+0x1a>
 8004d56:	f7fe f945 	bl	8002fe4 <__sinit>
 8004d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f3      	beq.n	8004d4a <_fflush_r+0xa>
 8004d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d64:	07d0      	lsls	r0, r2, #31
 8004d66:	d404      	bmi.n	8004d72 <_fflush_r+0x32>
 8004d68:	0599      	lsls	r1, r3, #22
 8004d6a:	d402      	bmi.n	8004d72 <_fflush_r+0x32>
 8004d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d6e:	f7fe fb32 	bl	80033d6 <__retarget_lock_acquire_recursive>
 8004d72:	4628      	mov	r0, r5
 8004d74:	4621      	mov	r1, r4
 8004d76:	f7ff ff61 	bl	8004c3c <__sflush_r>
 8004d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	07da      	lsls	r2, r3, #31
 8004d80:	d4e4      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d4e1      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8a:	f7fe fb25 	bl	80033d8 <__retarget_lock_release_recursive>
 8004d8e:	e7dd      	b.n	8004d4c <_fflush_r+0xc>

08004d90 <__swhatbuf_r>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	460c      	mov	r4, r1
 8004d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d98:	4615      	mov	r5, r2
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	461e      	mov	r6, r3
 8004d9e:	b096      	sub	sp, #88	; 0x58
 8004da0:	da0c      	bge.n	8004dbc <__swhatbuf_r+0x2c>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	2100      	movs	r1, #0
 8004da6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004daa:	bf0c      	ite	eq
 8004dac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004db0:	2340      	movne	r3, #64	; 0x40
 8004db2:	2000      	movs	r0, #0
 8004db4:	6031      	str	r1, [r6, #0]
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	b016      	add	sp, #88	; 0x58
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	466a      	mov	r2, sp
 8004dbe:	f000 f849 	bl	8004e54 <_fstat_r>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	dbed      	blt.n	8004da2 <__swhatbuf_r+0x12>
 8004dc6:	9901      	ldr	r1, [sp, #4]
 8004dc8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004dcc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004dd0:	4259      	negs	r1, r3
 8004dd2:	4159      	adcs	r1, r3
 8004dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd8:	e7eb      	b.n	8004db2 <__swhatbuf_r+0x22>

08004dda <__smakebuf_r>:
 8004dda:	898b      	ldrh	r3, [r1, #12]
 8004ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dde:	079d      	lsls	r5, r3, #30
 8004de0:	4606      	mov	r6, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	d507      	bpl.n	8004df6 <__smakebuf_r+0x1c>
 8004de6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	2301      	movs	r3, #1
 8004df0:	6163      	str	r3, [r4, #20]
 8004df2:	b002      	add	sp, #8
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	466a      	mov	r2, sp
 8004df8:	ab01      	add	r3, sp, #4
 8004dfa:	f7ff ffc9 	bl	8004d90 <__swhatbuf_r>
 8004dfe:	9900      	ldr	r1, [sp, #0]
 8004e00:	4605      	mov	r5, r0
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7ff f9d4 	bl	80041b0 <_malloc_r>
 8004e08:	b948      	cbnz	r0, 8004e1e <__smakebuf_r+0x44>
 8004e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0e:	059a      	lsls	r2, r3, #22
 8004e10:	d4ef      	bmi.n	8004df2 <__smakebuf_r+0x18>
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	e7e3      	b.n	8004de6 <__smakebuf_r+0xc>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	6020      	str	r0, [r4, #0]
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	9b00      	ldr	r3, [sp, #0]
 8004e2a:	6120      	str	r0, [r4, #16]
 8004e2c:	6163      	str	r3, [r4, #20]
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	b15b      	cbz	r3, 8004e4a <__smakebuf_r+0x70>
 8004e32:	4630      	mov	r0, r6
 8004e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e38:	f000 f81e 	bl	8004e78 <_isatty_r>
 8004e3c:	b128      	cbz	r0, 8004e4a <__smakebuf_r+0x70>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f023 0303 	bic.w	r3, r3, #3
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	431d      	orrs	r5, r3
 8004e4e:	81a5      	strh	r5, [r4, #12]
 8004e50:	e7cf      	b.n	8004df2 <__smakebuf_r+0x18>
	...

08004e54 <_fstat_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	2300      	movs	r3, #0
 8004e58:	4d06      	ldr	r5, [pc, #24]	; (8004e74 <_fstat_r+0x20>)
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	f7fc f857 	bl	8000f14 <_fstat>
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d102      	bne.n	8004e70 <_fstat_r+0x1c>
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	b103      	cbz	r3, 8004e70 <_fstat_r+0x1c>
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	200003d0 	.word	0x200003d0

08004e78 <_isatty_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	4d05      	ldr	r5, [pc, #20]	; (8004e94 <_isatty_r+0x1c>)
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc f855 	bl	8000f32 <_isatty>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_isatty_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_isatty_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200003d0 	.word	0x200003d0

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4d05      	ldr	r5, [pc, #20]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fc f85c 	bl	8000f60 <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200003d0 	.word	0x200003d0

08004eb8 <memcpy>:
 8004eb8:	440a      	add	r2, r1
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec0:	d100      	bne.n	8004ec4 <memcpy+0xc>
 8004ec2:	4770      	bx	lr
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed0:	d1f9      	bne.n	8004ec6 <memcpy+0xe>
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <__assert_func>:
 8004ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ed6:	4614      	mov	r4, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <__assert_func+0x2c>)
 8004edc:	4605      	mov	r5, r0
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68d8      	ldr	r0, [r3, #12]
 8004ee2:	b14c      	cbz	r4, 8004ef8 <__assert_func+0x24>
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <__assert_func+0x30>)
 8004ee6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004eea:	9100      	str	r1, [sp, #0]
 8004eec:	462b      	mov	r3, r5
 8004eee:	4906      	ldr	r1, [pc, #24]	; (8004f08 <__assert_func+0x34>)
 8004ef0:	f000 f842 	bl	8004f78 <fiprintf>
 8004ef4:	f000 f852 	bl	8004f9c <abort>
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <__assert_func+0x38>)
 8004efa:	461c      	mov	r4, r3
 8004efc:	e7f3      	b.n	8004ee6 <__assert_func+0x12>
 8004efe:	bf00      	nop
 8004f00:	20000064 	.word	0x20000064
 8004f04:	080052d7 	.word	0x080052d7
 8004f08:	080052e4 	.word	0x080052e4
 8004f0c:	08005312 	.word	0x08005312

08004f10 <_calloc_r>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	fba1 5402 	umull	r5, r4, r1, r2
 8004f16:	b934      	cbnz	r4, 8004f26 <_calloc_r+0x16>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	f7ff f949 	bl	80041b0 <_malloc_r>
 8004f1e:	4606      	mov	r6, r0
 8004f20:	b928      	cbnz	r0, 8004f2e <_calloc_r+0x1e>
 8004f22:	4630      	mov	r0, r6
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	220c      	movs	r2, #12
 8004f28:	2600      	movs	r6, #0
 8004f2a:	6002      	str	r2, [r0, #0]
 8004f2c:	e7f9      	b.n	8004f22 <_calloc_r+0x12>
 8004f2e:	462a      	mov	r2, r5
 8004f30:	4621      	mov	r1, r4
 8004f32:	f7fe f9d3 	bl	80032dc <memset>
 8004f36:	e7f4      	b.n	8004f22 <_calloc_r+0x12>

08004f38 <__ascii_mbtowc>:
 8004f38:	b082      	sub	sp, #8
 8004f3a:	b901      	cbnz	r1, 8004f3e <__ascii_mbtowc+0x6>
 8004f3c:	a901      	add	r1, sp, #4
 8004f3e:	b142      	cbz	r2, 8004f52 <__ascii_mbtowc+0x1a>
 8004f40:	b14b      	cbz	r3, 8004f56 <__ascii_mbtowc+0x1e>
 8004f42:	7813      	ldrb	r3, [r2, #0]
 8004f44:	600b      	str	r3, [r1, #0]
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	1e10      	subs	r0, r2, #0
 8004f4a:	bf18      	it	ne
 8004f4c:	2001      	movne	r0, #1
 8004f4e:	b002      	add	sp, #8
 8004f50:	4770      	bx	lr
 8004f52:	4610      	mov	r0, r2
 8004f54:	e7fb      	b.n	8004f4e <__ascii_mbtowc+0x16>
 8004f56:	f06f 0001 	mvn.w	r0, #1
 8004f5a:	e7f8      	b.n	8004f4e <__ascii_mbtowc+0x16>

08004f5c <__ascii_wctomb>:
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	b141      	cbz	r1, 8004f74 <__ascii_wctomb+0x18>
 8004f62:	2aff      	cmp	r2, #255	; 0xff
 8004f64:	d904      	bls.n	8004f70 <__ascii_wctomb+0x14>
 8004f66:	228a      	movs	r2, #138	; 0x8a
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	4770      	bx	lr
 8004f70:	2001      	movs	r0, #1
 8004f72:	700a      	strb	r2, [r1, #0]
 8004f74:	4770      	bx	lr
	...

08004f78 <fiprintf>:
 8004f78:	b40e      	push	{r1, r2, r3}
 8004f7a:	b503      	push	{r0, r1, lr}
 8004f7c:	4601      	mov	r1, r0
 8004f7e:	ab03      	add	r3, sp, #12
 8004f80:	4805      	ldr	r0, [pc, #20]	; (8004f98 <fiprintf+0x20>)
 8004f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f86:	6800      	ldr	r0, [r0, #0]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	f7ff fd3d 	bl	8004a08 <_vfiprintf_r>
 8004f8e:	b002      	add	sp, #8
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b003      	add	sp, #12
 8004f96:	4770      	bx	lr
 8004f98:	20000064 	.word	0x20000064

08004f9c <abort>:
 8004f9c:	2006      	movs	r0, #6
 8004f9e:	b508      	push	{r3, lr}
 8004fa0:	f000 f82c 	bl	8004ffc <raise>
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fb ff67 	bl	8000e78 <_exit>

08004faa <_raise_r>:
 8004faa:	291f      	cmp	r1, #31
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4604      	mov	r4, r0
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	d904      	bls.n	8004fbe <_raise_r+0x14>
 8004fb4:	2316      	movs	r3, #22
 8004fb6:	6003      	str	r3, [r0, #0]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	bd38      	pop	{r3, r4, r5, pc}
 8004fbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004fc0:	b112      	cbz	r2, 8004fc8 <_raise_r+0x1e>
 8004fc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fc6:	b94b      	cbnz	r3, 8004fdc <_raise_r+0x32>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 f831 	bl	8005030 <_getpid_r>
 8004fce:	462a      	mov	r2, r5
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fd8:	f000 b818 	b.w	800500c <_kill_r>
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d00a      	beq.n	8004ff6 <_raise_r+0x4c>
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	d103      	bne.n	8004fec <_raise_r+0x42>
 8004fe4:	2316      	movs	r3, #22
 8004fe6:	6003      	str	r3, [r0, #0]
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e7e7      	b.n	8004fbc <_raise_r+0x12>
 8004fec:	2400      	movs	r4, #0
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ff4:	4798      	blx	r3
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e7e0      	b.n	8004fbc <_raise_r+0x12>
	...

08004ffc <raise>:
 8004ffc:	4b02      	ldr	r3, [pc, #8]	; (8005008 <raise+0xc>)
 8004ffe:	4601      	mov	r1, r0
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f7ff bfd2 	b.w	8004faa <_raise_r>
 8005006:	bf00      	nop
 8005008:	20000064 	.word	0x20000064

0800500c <_kill_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	2300      	movs	r3, #0
 8005010:	4d06      	ldr	r5, [pc, #24]	; (800502c <_kill_r+0x20>)
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	f7fb ff1d 	bl	8000e58 <_kill>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d102      	bne.n	8005028 <_kill_r+0x1c>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	b103      	cbz	r3, 8005028 <_kill_r+0x1c>
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	200003d0 	.word	0x200003d0

08005030 <_getpid_r>:
 8005030:	f7fb bf0b 	b.w	8000e4a <_getpid>

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
