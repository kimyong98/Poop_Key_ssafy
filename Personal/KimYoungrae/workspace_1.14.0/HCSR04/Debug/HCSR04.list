
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c4c  08002c4c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002c4c  08002c4c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c4c  08002c4c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08002cbc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08002cbc  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c35f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffa  00000000  00000000  0002c433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a5  00000000  00000000  0002f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a60  00000000  00000000  0002fa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e839  00000000  00000000  000484a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bfe0  00000000  00000000  00056cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003918  00000000  00000000  000e2cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e65d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf8 	.word	0x08002bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002bf8 	.word	0x08002bf8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b35      	ldr	r3, [pc, #212]	; (8000238 <MX_GPIO_Init+0xec>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a34      	ldr	r2, [pc, #208]	; (8000238 <MX_GPIO_Init+0xec>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b32      	ldr	r3, [pc, #200]	; (8000238 <MX_GPIO_Init+0xec>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2f      	ldr	r3, [pc, #188]	; (8000238 <MX_GPIO_Init+0xec>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2e      	ldr	r2, [pc, #184]	; (8000238 <MX_GPIO_Init+0xec>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2c      	ldr	r3, [pc, #176]	; (8000238 <MX_GPIO_Init+0xec>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b29      	ldr	r3, [pc, #164]	; (8000238 <MX_GPIO_Init+0xec>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a28      	ldr	r2, [pc, #160]	; (8000238 <MX_GPIO_Init+0xec>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b26      	ldr	r3, [pc, #152]	; (8000238 <MX_GPIO_Init+0xec>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b23      	ldr	r3, [pc, #140]	; (8000238 <MX_GPIO_Init+0xec>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a22      	ldr	r2, [pc, #136]	; (8000238 <MX_GPIO_Init+0xec>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b20      	ldr	r3, [pc, #128]	; (8000238 <MX_GPIO_Init+0xec>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HCSR041TRIG_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80001c6:	481d      	ldr	r0, [pc, #116]	; (800023c <MX_GPIO_Init+0xf0>)
 80001c8:	f000 fe59 	bl	8000e7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d2:	4b1b      	ldr	r3, [pc, #108]	; (8000240 <MX_GPIO_Init+0xf4>)
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	4619      	mov	r1, r3
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001e2:	f000 fcb1 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|HCSR041TRIG_Pin;
 80001e6:	f44f 7390 	mov.w	r3, #288	; 0x120
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	480f      	ldr	r0, [pc, #60]	; (800023c <MX_GPIO_Init+0xf0>)
 8000200:	f000 fca2 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCSR041ECHO_Pin;
 8000204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCSR041ECHO_GPIO_Port, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4808      	ldr	r0, [pc, #32]	; (800023c <MX_GPIO_Init+0xf0>)
 800021a:	f000 fc95 	bl	8000b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	2100      	movs	r1, #0
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f000 fc59 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000228:	2028      	movs	r0, #40	; 0x28
 800022a:	f000 fc72 	bl	8000b12 <HAL_NVIC_EnableIRQ>

}
 800022e:	bf00      	nop
 8000230:	3720      	adds	r7, #32
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800
 8000240:	10110000 	.word	0x10110000
 8000244:	40011000 	.word	0x40011000

08000248 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000250:	1d39      	adds	r1, r7, #4
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2201      	movs	r2, #1
 8000258:	4803      	ldr	r0, [pc, #12]	; (8000268 <__io_putchar+0x20>)
 800025a:	f001 fea9 	bl	8001fb0 <HAL_UART_Transmit>
  return ch;
 800025e:	687b      	ldr	r3, [r7, #4]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000d4 	.word	0x200000d4

0800026c <HAL_TIM_PeriodElapsedCallback>:
uint32_t pulse_end;
uint32_t distance;

uint32_t cnt = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 8000-1 1000-1�???? ?��?��
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	//printf("now : %lu\r\n", cnt);
	cnt++;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]

}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	20000084 	.word	0x20000084

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 fac6 	bl	8000820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f83c 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000298:	f7ff ff58 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800029c:	f000 fa32 	bl	8000704 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002a0:	f000 f988 	bl	80005b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4815      	ldr	r0, [pc, #84]	; (8000300 <main+0x74>)
 80002ac:	f000 fde7 	bl	8000e7e <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 80002b0:	4814      	ldr	r0, [pc, #80]	; (8000304 <main+0x78>)
 80002b2:	f001 fa7f 	bl	80017b4 <HAL_TIM_Base_Start_IT>
	  	      uint32_t distance = (micros()-start) / 58;
	  	      printf("Distance = %lu cm \r\n", distance);
	  	      HAL_Delay(2000);
	*/

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002bc:	4810      	ldr	r0, [pc, #64]	; (8000300 <main+0x74>)
 80002be:	f000 fdde 	bl	8000e7e <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 80002c2:	2014      	movs	r0, #20
 80002c4:	f000 fb0e 	bl	80008e4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ce:	480c      	ldr	r0, [pc, #48]	; (8000300 <main+0x74>)
 80002d0:	f000 fdd5 	bl	8000e7e <HAL_GPIO_WritePin>

	  HAL_Delay(10);
 80002d4:	200a      	movs	r0, #10
 80002d6:	f000 fb05 	bl	80008e4 <HAL_Delay>

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) {
 80002da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002de:	4808      	ldr	r0, [pc, #32]	; (8000300 <main+0x74>)
 80002e0:	f000 fdb6 	bl	8000e50 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d003      	beq.n	80002f2 <main+0x66>
		  printf("SET\r\n");
 80002ea:	4807      	ldr	r0, [pc, #28]	; (8000308 <main+0x7c>)
 80002ec:	f002 f8f6 	bl	80024dc <puts>
 80002f0:	e002      	b.n	80002f8 <main+0x6c>
	  }
	  else {
		  printf("RESET\r\n");
 80002f2:	4806      	ldr	r0, [pc, #24]	; (800030c <main+0x80>)
 80002f4:	f002 f8f2 	bl	80024dc <puts>
	  }
	  HAL_Delay(100);
 80002f8:	2064      	movs	r0, #100	; 0x64
 80002fa:	f000 faf3 	bl	80008e4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80002fe:	e7da      	b.n	80002b6 <main+0x2a>
 8000300:	40010800 	.word	0x40010800
 8000304:	2000008c 	.word	0x2000008c
 8000308:	08002c10 	.word	0x08002c10
 800030c:	08002c18 	.word	0x08002c18

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f002 f9bc 	bl	800269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	2310      	movs	r3, #16
 800033c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033e:	2300      	movs	r3, #0
 8000340:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fdd4 	bl	8000ef4 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000352:	f000 f818 	bl	8000386 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f842 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037a:	f000 f804 	bl	8000386 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038a:	b672      	cpsid	i
}
 800038c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038e:	e7fe      	b.n	800038e <Error_Handler+0x8>

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler+0x4>

080003fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <MemManage_Handler+0x4>

08000406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler+0x4>

08000412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043a:	f000 fa37 	bl	80008ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000448:	4802      	ldr	r0, [pc, #8]	; (8000454 <TIM2_IRQHandler+0x10>)
 800044a:	f001 fa05 	bl	8001858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000008c 	.word	0x2000008c

08000458 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800045c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000460:	f000 fd26 	bl	8000eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	e00a      	b.n	8000490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800047a:	f3af 8000 	nop.w
 800047e:	4601      	mov	r1, r0
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	60ba      	str	r2, [r7, #8]
 8000486:	b2ca      	uxtb	r2, r1
 8000488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf0      	blt.n	800047a <_read+0x12>
  }

  return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	e009      	b.n	80004c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fec3 	bl	8000248 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf1      	blt.n	80004b4 <_write+0x12>
  }
  return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_close>:

int _close(int file)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000500:	605a      	str	r2, [r3, #4]
  return 0;
 8000502:	2300      	movs	r3, #0
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <_isatty>:

int _isatty(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <_sbrk+0x5c>)
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <_sbrk+0x60>)
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <_sbrk+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <_sbrk+0x64>)
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <_sbrk+0x68>)
 800055c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	429a      	cmp	r2, r3
 800056a:	d207      	bcs.n	800057c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800056c:	f002 f8e4 	bl	8002738 <__errno>
 8000570:	4603      	mov	r3, r0
 8000572:	220c      	movs	r2, #12
 8000574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	e009      	b.n	8000590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <_sbrk+0x64>)
 800058c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20005000 	.word	0x20005000
 800059c:	00000400 	.word	0x00000400
 80005a0:	20000088 	.word	0x20000088
 80005a4:	20000270 	.word	0x20000270

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_TIM2_Init+0x98>)
 80005d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_TIM2_Init+0x98>)
 80005da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_TIM2_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_TIM2_Init+0x98>)
 80005e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_TIM2_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_TIM2_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_TIM2_Init+0x98>)
 80005fc:	f001 f88a 	bl	8001714 <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000606:	f7ff febe 	bl	8000386 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_TIM2_Init+0x98>)
 8000618:	f001 fa26 	bl	8001a68 <HAL_TIM_ConfigClockSource>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000622:	f7ff feb0 	bl	8000386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_TIM2_Init+0x98>)
 8000634:	f001 fbfc 	bl	8001e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800063e:	f7ff fea2 	bl	8000386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000008c 	.word	0x2000008c

08000650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800066e:	d13e      	bne.n	80006ee <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <HAL_TIM_Base_MspInit+0xa8>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <HAL_TIM_Base_MspInit+0xa8>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	61d3      	str	r3, [r2, #28]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <HAL_TIM_Base_MspInit+0xa8>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <HAL_TIM_Base_MspInit+0xa8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <HAL_TIM_Base_MspInit+0xa8>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_TIM_Base_MspInit+0xa8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2302      	movs	r3, #2
 80006ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <HAL_TIM_Base_MspInit+0xac>)
 80006b6:	f000 fa47 	bl	8000b48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_TIM_Base_MspInit+0xb0>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <HAL_TIM_Base_MspInit+0xb0>)
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	201c      	movs	r0, #28
 80006e4:	f000 f9f9 	bl	8000ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006e8:	201c      	movs	r0, #28
 80006ea:	f000 fa12 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800
 8000700:	40010000 	.word	0x40010000

08000704 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f001 fbe8 	bl	8001f10 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f7ff fe1e 	bl	8000386 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000d4 	.word	0x200000d4
 8000754:	40004400 	.word	0x40004400

08000758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <HAL_UART_MspInit+0x70>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d123      	bne.n	80007c0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_UART_MspInit+0x74>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <HAL_UART_MspInit+0x74>)
 800077e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000782:	61d3      	str	r3, [r2, #28]
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_UART_MspInit+0x74>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_UART_MspInit+0x74>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <HAL_UART_MspInit+0x74>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_UART_MspInit+0x74>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a8:	230c      	movs	r3, #12
 80007aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <HAL_UART_MspInit+0x78>)
 80007bc:	f000 f9c4 	bl	8000b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40004400 	.word	0x40004400
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010800 	.word	0x40010800

080007d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d4:	f7ff fee8 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007da:	490c      	ldr	r1, [pc, #48]	; (800080c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f0:	4c09      	ldr	r4, [pc, #36]	; (8000818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f001 ffa1 	bl	8002744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000802:	f7ff fd43 	bl	800028c <main>
  bx lr
 8000806:	4770      	bx	lr
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000810:	08002c54 	.word	0x08002c54
  ldr r2, =_sbss
 8000814:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000818:	2000026c 	.word	0x2000026c

0800081c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>
	...

08000820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_Init+0x28>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_Init+0x28>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f947 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f808 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff fda8 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40022000 	.word	0x40022000

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f95f 	bl	8000b2e <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e00e      	b.n	8000898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d80a      	bhi.n	8000896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f000 f927 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <HAL_InitTick+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e000      	b.n	8000898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000004 	.word	0x20000004

080008ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x1c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_IncTick+0x20>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a03      	ldr	r2, [pc, #12]	; (80008cc <HAL_IncTick+0x20>)
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	20000008 	.word	0x20000008
 80008cc:	2000011c 	.word	0x2000011c

080008d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <HAL_GetTick+0x10>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	2000011c 	.word	0x2000011c

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff fff0 	bl	80008d0 <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_Delay+0x44>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffe0 	bl	80008d0 <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <__NVIC_EnableIRQ+0x34>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff2d 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff42 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff35 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e169      	b.n	8000e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8158 	bne.w	8000e2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a9a      	ldr	r2, [pc, #616]	; (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d05e      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b84:	4a98      	ldr	r2, [pc, #608]	; (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d875      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a98      	ldr	r2, [pc, #608]	; (8000dec <HAL_GPIO_Init+0x2a4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d058      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b90:	4a96      	ldr	r2, [pc, #600]	; (8000dec <HAL_GPIO_Init+0x2a4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d86f      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b96:	4a96      	ldr	r2, [pc, #600]	; (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d052      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a94      	ldr	r2, [pc, #592]	; (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d869      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a94      	ldr	r2, [pc, #592]	; (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d04c      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a92      	ldr	r2, [pc, #584]	; (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d863      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bae:	4a92      	ldr	r2, [pc, #584]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d046      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a90      	ldr	r2, [pc, #576]	; (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d85d      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d82a      	bhi.n	8000c14 <HAL_GPIO_Init+0xcc>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d859      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <HAL_GPIO_Init+0x80>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000c2f 	.word	0x08000c2f
 8000bd4:	08000c71 	.word	0x08000c71
 8000bd8:	08000c77 	.word	0x08000c77
 8000bdc:	08000c77 	.word	0x08000c77
 8000be0:	08000c77 	.word	0x08000c77
 8000be4:	08000c77 	.word	0x08000c77
 8000be8:	08000c77 	.word	0x08000c77
 8000bec:	08000c77 	.word	0x08000c77
 8000bf0:	08000c77 	.word	0x08000c77
 8000bf4:	08000c77 	.word	0x08000c77
 8000bf8:	08000c77 	.word	0x08000c77
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c77 	.word	0x08000c77
 8000c04:	08000c77 	.word	0x08000c77
 8000c08:	08000c77 	.word	0x08000c77
 8000c0c:	08000c25 	.word	0x08000c25
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	4a79      	ldr	r2, [pc, #484]	; (8000dfc <HAL_GPIO_Init+0x2b4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1a:	e02c      	b.n	8000c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e029      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e024      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	3308      	adds	r3, #8
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e01f      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e01a      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e013      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	611a      	str	r2, [r3, #16]
          break;
 8000c62:	e009      	b.n	8000c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	615a      	str	r2, [r3, #20]
          break;
 8000c6e:	e003      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          break;
 8000c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	; 0xff
 8000c7c:	d801      	bhi.n	8000c82 <HAL_GPIO_Init+0x13a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	e001      	b.n	8000c86 <HAL_GPIO_Init+0x13e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3304      	adds	r3, #4
 8000c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2bff      	cmp	r3, #255	; 0xff
 8000c8c:	d802      	bhi.n	8000c94 <HAL_GPIO_Init+0x14c>
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0x152>
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	3b08      	subs	r3, #8
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	6a39      	ldr	r1, [r7, #32]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80b1 	beq.w	8000e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce0:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a40      	ldr	r2, [pc, #256]	; (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d013      	beq.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3f      	ldr	r2, [pc, #252]	; (8000e0c <HAL_GPIO_Init+0x2c4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d00d      	beq.n	8000d30 <HAL_GPIO_Init+0x1e8>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3e      	ldr	r2, [pc, #248]	; (8000e10 <HAL_GPIO_Init+0x2c8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d007      	beq.n	8000d2c <HAL_GPIO_Init+0x1e4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3d      	ldr	r2, [pc, #244]	; (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d101      	bne.n	8000d28 <HAL_GPIO_Init+0x1e0>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d46:	492f      	ldr	r1, [pc, #188]	; (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	492c      	ldr	r1, [pc, #176]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4928      	ldr	r1, [pc, #160]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	4922      	ldr	r1, [pc, #136]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60cb      	str	r3, [r1, #12]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	491e      	ldr	r1, [pc, #120]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4918      	ldr	r1, [pc, #96]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4914      	ldr	r1, [pc, #80]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d021      	beq.n	8000e1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	490e      	ldr	r1, [pc, #56]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e021      	b.n	8000e2a <HAL_GPIO_Init+0x2e2>
 8000de6:	bf00      	nop
 8000de8:	10320000 	.word	0x10320000
 8000dec:	10310000 	.word	0x10310000
 8000df0:	10220000 	.word	0x10220000
 8000df4:	10210000 	.word	0x10210000
 8000df8:	10120000 	.word	0x10120000
 8000dfc:	10110000 	.word	0x10110000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40011400 	.word	0x40011400
 8000e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_GPIO_Init+0x304>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4909      	ldr	r1, [pc, #36]	; (8000e4c <HAL_GPIO_Init+0x304>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f47f ae8e 	bne.w	8000b5c <HAL_GPIO_Init+0x14>
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	372c      	adds	r7, #44	; 0x2c
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	807b      	strh	r3, [r7, #2]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e8e:	787b      	ldrb	r3, [r7, #1]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e94:	887a      	ldrh	r2, [r7, #2]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e9a:	e003      	b.n	8000ea4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	041a      	lsls	r2, r3, #16
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f806 	bl	8000ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e272      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f14:	4b92      	ldr	r3, [pc, #584]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d00c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f20:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d112      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
 8000f2c:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d10b      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4b89      	ldr	r3, [pc, #548]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d06c      	beq.n	8001020 <HAL_RCC_OscConfig+0x12c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d168      	bne.n	8001020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e24c      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x76>
 8000f5c:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e02e      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b7b      	ldr	r3, [pc, #492]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7a      	ldr	r2, [pc, #488]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b78      	ldr	r3, [pc, #480]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a77      	ldr	r2, [pc, #476]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xbc>
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a71      	ldr	r2, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a6e      	ldr	r2, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000fb0:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a67      	ldr	r2, [pc, #412]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc7e 	bl	80008d0 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fc7a 	bl	80008d0 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e200      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe4>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fc6a 	bl	80008d0 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fc66 	bl	80008d0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1ec      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x10c>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800102e:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1c0      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4939      	ldr	r1, [pc, #228]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e03a      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fc1f 	bl	80008d0 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc1b 	bl	80008d0 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e1a1      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4927      	ldr	r1, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fbfe 	bl	80008d0 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fbfa 	bl	80008d0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e180      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03a      	beq.n	8001178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d019      	beq.n	800113e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fbde 	bl	80008d0 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fbda 	bl	80008d0 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e160      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 face 	bl	80016d8 <RCC_Delay>
 800113c:	e01c      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fbc4 	bl	80008d0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	e00f      	b.n	800116c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fbc0 	bl	80008d0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d908      	bls.n	800116c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e146      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	42420000 	.word	0x42420000
 8001168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b92      	ldr	r3, [pc, #584]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e9      	bne.n	800114c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a6 	beq.w	80012d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a87      	ldr	r2, [pc, #540]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7e      	ldr	r2, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fb81 	bl	80008d0 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff fb7d 	bl	80008d0 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e103      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x4c8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x312>
 80011f8:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e02d      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x334>
 800120e:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	e01c      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x356>
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a5d      	ldr	r2, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 800124a:	4b5b      	ldr	r3, [pc, #364]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a5a      	ldr	r2, [pc, #360]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb31 	bl	80008d0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb2d 	bl	80008d0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0b1      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ee      	beq.n	8001272 <HAL_RCC_OscConfig+0x37e>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fb1b 	bl	80008d0 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fb17 	bl	80008d0 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e09b      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8087 	beq.w	80013ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d061      	beq.n	80013ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d146      	bne.n	800137e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x4cc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff faeb 	bl	80008d0 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fae7 	bl	80008d0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e06d      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d108      	bne.n	8001338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4921      	ldr	r1, [pc, #132]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a19      	ldr	r1, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	430b      	orrs	r3, r1
 800134a:	491b      	ldr	r1, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x4cc>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fabb 	bl	80008d0 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff fab7 	bl	80008d0 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e03d      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x46a>
 800137c:	e035      	b.n	80013ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_RCC_OscConfig+0x4cc>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff faa4 	bl	80008d0 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff faa0 	bl	80008d0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e026      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x498>
 80013aa:	e01e      	b.n	80013ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e019      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40007000 	.word	0x40007000
 80013c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x500>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d0      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d910      	bls.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4965      	ldr	r1, [pc, #404]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0b8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	494d      	ldr	r1, [pc, #308]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d040      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e07f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e073      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06b      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4936      	ldr	r1, [pc, #216]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff f9f2 	bl	80008d0 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff f9ee 	bl	80008d0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e053      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d210      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4922      	ldr	r1, [pc, #136]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e032      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4916      	ldr	r1, [pc, #88]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001586:	f000 f821 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	5ccb      	ldrb	r3, [r1, r3]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1cc>)
 80015a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1d0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f950 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08002c20 	.word	0x08002c20
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_GetSysClockFreq+0x94>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x30>
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x36>
 80015fa:	e027      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_GetSysClockFreq+0x98>)
 80015fe:	613b      	str	r3, [r7, #16]
      break;
 8001600:	e027      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_RCC_GetSysClockFreq+0x9c>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d010      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_GetSysClockFreq+0x94>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0c5b      	lsrs	r3, r3, #17
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_RCC_GetSysClockFreq+0x98>)
 800162e:	fb03 f202 	mul.w	r2, r3, r2
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e004      	b.n	8001646 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	613b      	str	r3, [r7, #16]
      break;
 800164a:	e002      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_GetSysClockFreq+0x98>)
 800164e:	613b      	str	r3, [r7, #16]
      break;
 8001650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001652:	693b      	ldr	r3, [r7, #16]
}
 8001654:	4618      	mov	r0, r3
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	007a1200 	.word	0x007a1200
 8001668:	08002c38 	.word	0x08002c38
 800166c:	08002c48 	.word	0x08002c48
 8001670:	003d0900 	.word	0x003d0900

08001674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_RCC_GetHCLKFreq+0x10>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000000 	.word	0x20000000

08001688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800168c:	f7ff fff2 	bl	8001674 <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	4903      	ldr	r1, [pc, #12]	; (80016ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	08002c30 	.word	0x08002c30

080016b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016b4:	f7ff ffde 	bl	8001674 <HAL_RCC_GetHCLKFreq>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	0adb      	lsrs	r3, r3, #11
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	4903      	ldr	r1, [pc, #12]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08002c30 	.word	0x08002c30

080016d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <RCC_Delay+0x34>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <RCC_Delay+0x38>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0a5b      	lsrs	r3, r3, #9
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f4:	bf00      	nop
  }
  while (Delay --);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	60fa      	str	r2, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <RCC_Delay+0x1c>
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000000 	.word	0x20000000
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e041      	b.n	80017aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe ff88 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f000 fa74 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d001      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e03a      	b.n	8001842 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_TIM_Base_Start_IT+0x98>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00e      	beq.n	800180c <HAL_TIM_Base_Start_IT+0x58>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f6:	d009      	beq.n	800180c <HAL_TIM_Base_Start_IT+0x58>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_TIM_Base_Start_IT+0x9c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d004      	beq.n	800180c <HAL_TIM_Base_Start_IT+0x58>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <HAL_TIM_Base_Start_IT+0xa0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d111      	bne.n	8001830 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b06      	cmp	r3, #6
 800181c:	d010      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800182e:	e007      	b.n	8001840 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40000400 	.word	0x40000400
 8001854:	40000800 	.word	0x40000800

08001858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b02      	cmp	r3, #2
 800186c:	d122      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b02      	cmp	r3, #2
 800187a:	d11b      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0202 	mvn.w	r2, #2
 8001884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f9b4 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 80018a0:	e005      	b.n	80018ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9a7 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f9b6 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d122      	bne.n	8001908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d11b      	bne.n	8001908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0204 	mvn.w	r2, #4
 80018d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f98a 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 80018f4:	e005      	b.n	8001902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f97d 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f98c 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d122      	bne.n	800195c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b08      	cmp	r3, #8
 8001922:	d11b      	bne.n	800195c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0208 	mvn.w	r2, #8
 800192c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2204      	movs	r2, #4
 8001932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f960 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 8001948:	e005      	b.n	8001956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f953 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f962 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b10      	cmp	r3, #16
 8001968:	d122      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b10      	cmp	r3, #16
 8001976:	d11b      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0210 	mvn.w	r2, #16
 8001980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2208      	movs	r2, #8
 8001986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f936 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 800199c:	e005      	b.n	80019aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f929 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f938 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10e      	bne.n	80019dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0201 	mvn.w	r2, #1
 80019d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe fc48 	bl	800026c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	2b80      	cmp	r3, #128	; 0x80
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f4:	2b80      	cmp	r3, #128	; 0x80
 80019f6:	d107      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa7b 	bl	8001efe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a12:	2b40      	cmp	r3, #64	; 0x40
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d107      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8fc 	bl	8001c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d107      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0220 	mvn.w	r2, #32
 8001a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fa46 	bl	8001eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_TIM_ConfigClockSource+0x1c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0b4      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x186>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abc:	d03e      	beq.n	8001b3c <HAL_TIM_ConfigClockSource+0xd4>
 8001abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac2:	f200 8087 	bhi.w	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	f000 8086 	beq.w	8001bda <HAL_TIM_ConfigClockSource+0x172>
 8001ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad2:	d87f      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad4:	2b70      	cmp	r3, #112	; 0x70
 8001ad6:	d01a      	beq.n	8001b0e <HAL_TIM_ConfigClockSource+0xa6>
 8001ad8:	2b70      	cmp	r3, #112	; 0x70
 8001ada:	d87b      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	2b60      	cmp	r3, #96	; 0x60
 8001ade:	d050      	beq.n	8001b82 <HAL_TIM_ConfigClockSource+0x11a>
 8001ae0:	2b60      	cmp	r3, #96	; 0x60
 8001ae2:	d877      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ae4:	2b50      	cmp	r3, #80	; 0x50
 8001ae6:	d03c      	beq.n	8001b62 <HAL_TIM_ConfigClockSource+0xfa>
 8001ae8:	2b50      	cmp	r3, #80	; 0x50
 8001aea:	d873      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	d058      	beq.n	8001ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8001af0:	2b40      	cmp	r3, #64	; 0x40
 8001af2:	d86f      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001af4:	2b30      	cmp	r3, #48	; 0x30
 8001af6:	d064      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001af8:	2b30      	cmp	r3, #48	; 0x30
 8001afa:	d86b      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d060      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d867      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05c      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d05a      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001b0c:	e062      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b1e:	f000 f968 	bl	8001df2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	609a      	str	r2, [r3, #8]
      break;
 8001b3a:	e04f      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b4c:	f000 f951 	bl	8001df2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b5e:	609a      	str	r2, [r3, #8]
      break;
 8001b60:	e03c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f000 f8c8 	bl	8001d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2150      	movs	r1, #80	; 0x50
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f91f 	bl	8001dbe <TIM_ITRx_SetConfig>
      break;
 8001b80:	e02c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f000 f8e6 	bl	8001d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2160      	movs	r1, #96	; 0x60
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f90f 	bl	8001dbe <TIM_ITRx_SetConfig>
      break;
 8001ba0:	e01c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f000 f8a8 	bl	8001d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f8ff 	bl	8001dbe <TIM_ITRx_SetConfig>
      break;
 8001bc0:	e00c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f000 f8f6 	bl	8001dbe <TIM_ITRx_SetConfig>
      break;
 8001bd2:	e003      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e000      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
	...

08001c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <TIM_Base_SetConfig+0xb8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00b      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d007      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d108      	bne.n	8001c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <TIM_Base_SetConfig+0xb8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c90:	d007      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <TIM_Base_SetConfig+0xb8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800

08001d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	f023 0201 	bic.w	r2, r3, #1
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f023 030a 	bic.w	r3, r3, #10
 8001d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	621a      	str	r2, [r3, #32]
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	f023 0210 	bic.w	r2, r3, #16
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	031b      	lsls	r3, r3, #12
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	621a      	str	r2, [r3, #32]
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f043 0307 	orr.w	r3, r3, #7
 8001de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	609a      	str	r2, [r3, #8]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b087      	sub	sp, #28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	021a      	lsls	r2, r3, #8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	609a      	str	r2, [r3, #8]
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e046      	b.n	8001ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d009      	beq.n	8001eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800

08001eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e042      	b.n	8001fa8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fc0e 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	; 0x24
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f91d 	bl	8002194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d16d      	bne.n	80020ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_UART_Transmit+0x2c>
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e066      	b.n	80020ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fee:	f7fe fc6f 	bl	80008d0 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002008:	d108      	bne.n	800201c <HAL_UART_Transmit+0x6c>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d104      	bne.n	800201c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	e003      	b.n	8002024 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002024:	e02a      	b.n	800207c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f840 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e036      	b.n	80020ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3302      	adds	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e007      	b.n	800206e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cf      	bne.n	8002026 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f810 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e006      	b.n	80020ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b090      	sub	sp, #64	; 0x40
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c6:	e050      	b.n	800216a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d04c      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80020d6:	f7fe fbfb 	bl	80008d0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d241      	bcs.n	800216a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	e853 3f00 	ldrex	r3, [r3]
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002106:	637a      	str	r2, [r7, #52]	; 0x34
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800210c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800210e:	e841 2300 	strex	r3, r2, [r1]
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e5      	bne.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3314      	adds	r3, #20
 8002120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	e853 3f00 	ldrex	r3, [r3]
 8002128:	613b      	str	r3, [r7, #16]
   return(result);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213a:	623a      	str	r2, [r7, #32]
 800213c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	69f9      	ldr	r1, [r7, #28]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	61bb      	str	r3, [r7, #24]
   return(result);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e5      	bne.n	800211a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e00f      	b.n	800218a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4013      	ands	r3, r2
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	429a      	cmp	r2, r3
 8002186:	d09f      	beq.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3740      	adds	r7, #64	; 0x40
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ce:	f023 030c 	bic.w	r3, r3, #12
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	430b      	orrs	r3, r1
 80021da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <UART_SetConfig+0x114>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d103      	bne.n	8002204 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021fc:	f7ff fa58 	bl	80016b0 <HAL_RCC_GetPCLK2Freq>
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	e002      	b.n	800220a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002204:	f7ff fa40 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8002208:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009a      	lsls	r2, r3, #2
 8002214:	441a      	add	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	4a22      	ldr	r2, [pc, #136]	; (80022ac <UART_SetConfig+0x118>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	0119      	lsls	r1, r3, #4
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009a      	lsls	r2, r3, #2
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <UART_SetConfig+0x118>)
 8002242:	fba3 0302 	umull	r0, r3, r3, r2
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	fb00 f303 	mul.w	r3, r0, r3
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	; 0x32
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <UART_SetConfig+0x118>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002260:	4419      	add	r1, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fbb2 f2f3 	udiv	r2, r2, r3
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <UART_SetConfig+0x118>)
 800227a:	fba3 0302 	umull	r0, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	fb00 f303 	mul.w	r3, r0, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <UART_SetConfig+0x118>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 020f 	and.w	r2, r3, #15
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	440a      	add	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40013800 	.word	0x40013800
 80022ac:	51eb851f 	.word	0x51eb851f

080022b0 <std>:
 80022b0:	2300      	movs	r3, #0
 80022b2:	b510      	push	{r4, lr}
 80022b4:	4604      	mov	r4, r0
 80022b6:	e9c0 3300 	strd	r3, r3, [r0]
 80022ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022be:	6083      	str	r3, [r0, #8]
 80022c0:	8181      	strh	r1, [r0, #12]
 80022c2:	6643      	str	r3, [r0, #100]	; 0x64
 80022c4:	81c2      	strh	r2, [r0, #14]
 80022c6:	6183      	str	r3, [r0, #24]
 80022c8:	4619      	mov	r1, r3
 80022ca:	2208      	movs	r2, #8
 80022cc:	305c      	adds	r0, #92	; 0x5c
 80022ce:	f000 f9e5 	bl	800269c <memset>
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <std+0x58>)
 80022d4:	6224      	str	r4, [r4, #32]
 80022d6:	6263      	str	r3, [r4, #36]	; 0x24
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <std+0x5c>)
 80022da:	62a3      	str	r3, [r4, #40]	; 0x28
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <std+0x60>)
 80022de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <std+0x64>)
 80022e2:	6323      	str	r3, [r4, #48]	; 0x30
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <std+0x68>)
 80022e6:	429c      	cmp	r4, r3
 80022e8:	d006      	beq.n	80022f8 <std+0x48>
 80022ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80022ee:	4294      	cmp	r4, r2
 80022f0:	d002      	beq.n	80022f8 <std+0x48>
 80022f2:	33d0      	adds	r3, #208	; 0xd0
 80022f4:	429c      	cmp	r4, r3
 80022f6:	d105      	bne.n	8002304 <std+0x54>
 80022f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002300:	f000 ba44 	b.w	800278c <__retarget_lock_init_recursive>
 8002304:	bd10      	pop	{r4, pc}
 8002306:	bf00      	nop
 8002308:	080024ed 	.word	0x080024ed
 800230c:	0800250f 	.word	0x0800250f
 8002310:	08002547 	.word	0x08002547
 8002314:	0800256b 	.word	0x0800256b
 8002318:	20000120 	.word	0x20000120

0800231c <stdio_exit_handler>:
 800231c:	4a02      	ldr	r2, [pc, #8]	; (8002328 <stdio_exit_handler+0xc>)
 800231e:	4903      	ldr	r1, [pc, #12]	; (800232c <stdio_exit_handler+0x10>)
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <stdio_exit_handler+0x14>)
 8002322:	f000 b869 	b.w	80023f8 <_fwalk_sglue>
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c
 800232c:	08002a81 	.word	0x08002a81
 8002330:	20000018 	.word	0x20000018

08002334 <cleanup_stdio>:
 8002334:	6841      	ldr	r1, [r0, #4]
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <cleanup_stdio+0x34>)
 8002338:	b510      	push	{r4, lr}
 800233a:	4299      	cmp	r1, r3
 800233c:	4604      	mov	r4, r0
 800233e:	d001      	beq.n	8002344 <cleanup_stdio+0x10>
 8002340:	f000 fb9e 	bl	8002a80 <_fflush_r>
 8002344:	68a1      	ldr	r1, [r4, #8]
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <cleanup_stdio+0x38>)
 8002348:	4299      	cmp	r1, r3
 800234a:	d002      	beq.n	8002352 <cleanup_stdio+0x1e>
 800234c:	4620      	mov	r0, r4
 800234e:	f000 fb97 	bl	8002a80 <_fflush_r>
 8002352:	68e1      	ldr	r1, [r4, #12]
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <cleanup_stdio+0x3c>)
 8002356:	4299      	cmp	r1, r3
 8002358:	d004      	beq.n	8002364 <cleanup_stdio+0x30>
 800235a:	4620      	mov	r0, r4
 800235c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002360:	f000 bb8e 	b.w	8002a80 <_fflush_r>
 8002364:	bd10      	pop	{r4, pc}
 8002366:	bf00      	nop
 8002368:	20000120 	.word	0x20000120
 800236c:	20000188 	.word	0x20000188
 8002370:	200001f0 	.word	0x200001f0

08002374 <global_stdio_init.part.0>:
 8002374:	b510      	push	{r4, lr}
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <global_stdio_init.part.0+0x30>)
 8002378:	4c0b      	ldr	r4, [pc, #44]	; (80023a8 <global_stdio_init.part.0+0x34>)
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <global_stdio_init.part.0+0x38>)
 800237c:	4620      	mov	r0, r4
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	2104      	movs	r1, #4
 8002382:	2200      	movs	r2, #0
 8002384:	f7ff ff94 	bl	80022b0 <std>
 8002388:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800238c:	2201      	movs	r2, #1
 800238e:	2109      	movs	r1, #9
 8002390:	f7ff ff8e 	bl	80022b0 <std>
 8002394:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002398:	2202      	movs	r2, #2
 800239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800239e:	2112      	movs	r1, #18
 80023a0:	f7ff bf86 	b.w	80022b0 <std>
 80023a4:	20000258 	.word	0x20000258
 80023a8:	20000120 	.word	0x20000120
 80023ac:	0800231d 	.word	0x0800231d

080023b0 <__sfp_lock_acquire>:
 80023b0:	4801      	ldr	r0, [pc, #4]	; (80023b8 <__sfp_lock_acquire+0x8>)
 80023b2:	f000 b9ec 	b.w	800278e <__retarget_lock_acquire_recursive>
 80023b6:	bf00      	nop
 80023b8:	20000261 	.word	0x20000261

080023bc <__sfp_lock_release>:
 80023bc:	4801      	ldr	r0, [pc, #4]	; (80023c4 <__sfp_lock_release+0x8>)
 80023be:	f000 b9e7 	b.w	8002790 <__retarget_lock_release_recursive>
 80023c2:	bf00      	nop
 80023c4:	20000261 	.word	0x20000261

080023c8 <__sinit>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	4604      	mov	r4, r0
 80023cc:	f7ff fff0 	bl	80023b0 <__sfp_lock_acquire>
 80023d0:	6a23      	ldr	r3, [r4, #32]
 80023d2:	b11b      	cbz	r3, 80023dc <__sinit+0x14>
 80023d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d8:	f7ff bff0 	b.w	80023bc <__sfp_lock_release>
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__sinit+0x28>)
 80023de:	6223      	str	r3, [r4, #32]
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <__sinit+0x2c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f5      	bne.n	80023d4 <__sinit+0xc>
 80023e8:	f7ff ffc4 	bl	8002374 <global_stdio_init.part.0>
 80023ec:	e7f2      	b.n	80023d4 <__sinit+0xc>
 80023ee:	bf00      	nop
 80023f0:	08002335 	.word	0x08002335
 80023f4:	20000258 	.word	0x20000258

080023f8 <_fwalk_sglue>:
 80023f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023fc:	4607      	mov	r7, r0
 80023fe:	4688      	mov	r8, r1
 8002400:	4614      	mov	r4, r2
 8002402:	2600      	movs	r6, #0
 8002404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002408:	f1b9 0901 	subs.w	r9, r9, #1
 800240c:	d505      	bpl.n	800241a <_fwalk_sglue+0x22>
 800240e:	6824      	ldr	r4, [r4, #0]
 8002410:	2c00      	cmp	r4, #0
 8002412:	d1f7      	bne.n	8002404 <_fwalk_sglue+0xc>
 8002414:	4630      	mov	r0, r6
 8002416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800241a:	89ab      	ldrh	r3, [r5, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d907      	bls.n	8002430 <_fwalk_sglue+0x38>
 8002420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002424:	3301      	adds	r3, #1
 8002426:	d003      	beq.n	8002430 <_fwalk_sglue+0x38>
 8002428:	4629      	mov	r1, r5
 800242a:	4638      	mov	r0, r7
 800242c:	47c0      	blx	r8
 800242e:	4306      	orrs	r6, r0
 8002430:	3568      	adds	r5, #104	; 0x68
 8002432:	e7e9      	b.n	8002408 <_fwalk_sglue+0x10>

08002434 <_puts_r>:
 8002434:	6a03      	ldr	r3, [r0, #32]
 8002436:	b570      	push	{r4, r5, r6, lr}
 8002438:	4605      	mov	r5, r0
 800243a:	460e      	mov	r6, r1
 800243c:	6884      	ldr	r4, [r0, #8]
 800243e:	b90b      	cbnz	r3, 8002444 <_puts_r+0x10>
 8002440:	f7ff ffc2 	bl	80023c8 <__sinit>
 8002444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002446:	07db      	lsls	r3, r3, #31
 8002448:	d405      	bmi.n	8002456 <_puts_r+0x22>
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	0598      	lsls	r0, r3, #22
 800244e:	d402      	bmi.n	8002456 <_puts_r+0x22>
 8002450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002452:	f000 f99c 	bl	800278e <__retarget_lock_acquire_recursive>
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	0719      	lsls	r1, r3, #28
 800245a:	d513      	bpl.n	8002484 <_puts_r+0x50>
 800245c:	6923      	ldr	r3, [r4, #16]
 800245e:	b18b      	cbz	r3, 8002484 <_puts_r+0x50>
 8002460:	3e01      	subs	r6, #1
 8002462:	68a3      	ldr	r3, [r4, #8]
 8002464:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002468:	3b01      	subs	r3, #1
 800246a:	60a3      	str	r3, [r4, #8]
 800246c:	b9e9      	cbnz	r1, 80024aa <_puts_r+0x76>
 800246e:	2b00      	cmp	r3, #0
 8002470:	da2e      	bge.n	80024d0 <_puts_r+0x9c>
 8002472:	4622      	mov	r2, r4
 8002474:	210a      	movs	r1, #10
 8002476:	4628      	mov	r0, r5
 8002478:	f000 f87b 	bl	8002572 <__swbuf_r>
 800247c:	3001      	adds	r0, #1
 800247e:	d007      	beq.n	8002490 <_puts_r+0x5c>
 8002480:	250a      	movs	r5, #10
 8002482:	e007      	b.n	8002494 <_puts_r+0x60>
 8002484:	4621      	mov	r1, r4
 8002486:	4628      	mov	r0, r5
 8002488:	f000 f8b0 	bl	80025ec <__swsetup_r>
 800248c:	2800      	cmp	r0, #0
 800248e:	d0e7      	beq.n	8002460 <_puts_r+0x2c>
 8002490:	f04f 35ff 	mov.w	r5, #4294967295
 8002494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002496:	07da      	lsls	r2, r3, #31
 8002498:	d405      	bmi.n	80024a6 <_puts_r+0x72>
 800249a:	89a3      	ldrh	r3, [r4, #12]
 800249c:	059b      	lsls	r3, r3, #22
 800249e:	d402      	bmi.n	80024a6 <_puts_r+0x72>
 80024a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024a2:	f000 f975 	bl	8002790 <__retarget_lock_release_recursive>
 80024a6:	4628      	mov	r0, r5
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da04      	bge.n	80024b8 <_puts_r+0x84>
 80024ae:	69a2      	ldr	r2, [r4, #24]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dc06      	bgt.n	80024c2 <_puts_r+0x8e>
 80024b4:	290a      	cmp	r1, #10
 80024b6:	d004      	beq.n	80024c2 <_puts_r+0x8e>
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	6022      	str	r2, [r4, #0]
 80024be:	7019      	strb	r1, [r3, #0]
 80024c0:	e7cf      	b.n	8002462 <_puts_r+0x2e>
 80024c2:	4622      	mov	r2, r4
 80024c4:	4628      	mov	r0, r5
 80024c6:	f000 f854 	bl	8002572 <__swbuf_r>
 80024ca:	3001      	adds	r0, #1
 80024cc:	d1c9      	bne.n	8002462 <_puts_r+0x2e>
 80024ce:	e7df      	b.n	8002490 <_puts_r+0x5c>
 80024d0:	250a      	movs	r5, #10
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	6022      	str	r2, [r4, #0]
 80024d8:	701d      	strb	r5, [r3, #0]
 80024da:	e7db      	b.n	8002494 <_puts_r+0x60>

080024dc <puts>:
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <puts+0xc>)
 80024de:	4601      	mov	r1, r0
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f7ff bfa7 	b.w	8002434 <_puts_r>
 80024e6:	bf00      	nop
 80024e8:	20000064 	.word	0x20000064

080024ec <__sread>:
 80024ec:	b510      	push	{r4, lr}
 80024ee:	460c      	mov	r4, r1
 80024f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f4:	f000 f8fc 	bl	80026f0 <_read_r>
 80024f8:	2800      	cmp	r0, #0
 80024fa:	bfab      	itete	ge
 80024fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024fe:	89a3      	ldrhlt	r3, [r4, #12]
 8002500:	181b      	addge	r3, r3, r0
 8002502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002506:	bfac      	ite	ge
 8002508:	6563      	strge	r3, [r4, #84]	; 0x54
 800250a:	81a3      	strhlt	r3, [r4, #12]
 800250c:	bd10      	pop	{r4, pc}

0800250e <__swrite>:
 800250e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002512:	461f      	mov	r7, r3
 8002514:	898b      	ldrh	r3, [r1, #12]
 8002516:	4605      	mov	r5, r0
 8002518:	05db      	lsls	r3, r3, #23
 800251a:	460c      	mov	r4, r1
 800251c:	4616      	mov	r6, r2
 800251e:	d505      	bpl.n	800252c <__swrite+0x1e>
 8002520:	2302      	movs	r3, #2
 8002522:	2200      	movs	r2, #0
 8002524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002528:	f000 f8d0 	bl	80026cc <_lseek_r>
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	4632      	mov	r2, r6
 8002530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002534:	81a3      	strh	r3, [r4, #12]
 8002536:	4628      	mov	r0, r5
 8002538:	463b      	mov	r3, r7
 800253a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800253e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002542:	f000 b8e7 	b.w	8002714 <_write_r>

08002546 <__sseek>:
 8002546:	b510      	push	{r4, lr}
 8002548:	460c      	mov	r4, r1
 800254a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800254e:	f000 f8bd 	bl	80026cc <_lseek_r>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	bf15      	itete	ne
 8002558:	6560      	strne	r0, [r4, #84]	; 0x54
 800255a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800255e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002562:	81a3      	strheq	r3, [r4, #12]
 8002564:	bf18      	it	ne
 8002566:	81a3      	strhne	r3, [r4, #12]
 8002568:	bd10      	pop	{r4, pc}

0800256a <__sclose>:
 800256a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800256e:	f000 b89d 	b.w	80026ac <_close_r>

08002572 <__swbuf_r>:
 8002572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002574:	460e      	mov	r6, r1
 8002576:	4614      	mov	r4, r2
 8002578:	4605      	mov	r5, r0
 800257a:	b118      	cbz	r0, 8002584 <__swbuf_r+0x12>
 800257c:	6a03      	ldr	r3, [r0, #32]
 800257e:	b90b      	cbnz	r3, 8002584 <__swbuf_r+0x12>
 8002580:	f7ff ff22 	bl	80023c8 <__sinit>
 8002584:	69a3      	ldr	r3, [r4, #24]
 8002586:	60a3      	str	r3, [r4, #8]
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	071a      	lsls	r2, r3, #28
 800258c:	d525      	bpl.n	80025da <__swbuf_r+0x68>
 800258e:	6923      	ldr	r3, [r4, #16]
 8002590:	b31b      	cbz	r3, 80025da <__swbuf_r+0x68>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	6922      	ldr	r2, [r4, #16]
 8002596:	b2f6      	uxtb	r6, r6
 8002598:	1a98      	subs	r0, r3, r2
 800259a:	6963      	ldr	r3, [r4, #20]
 800259c:	4637      	mov	r7, r6
 800259e:	4283      	cmp	r3, r0
 80025a0:	dc04      	bgt.n	80025ac <__swbuf_r+0x3a>
 80025a2:	4621      	mov	r1, r4
 80025a4:	4628      	mov	r0, r5
 80025a6:	f000 fa6b 	bl	8002a80 <_fflush_r>
 80025aa:	b9e0      	cbnz	r0, 80025e6 <__swbuf_r+0x74>
 80025ac:	68a3      	ldr	r3, [r4, #8]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	60a3      	str	r3, [r4, #8]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	6022      	str	r2, [r4, #0]
 80025b8:	701e      	strb	r6, [r3, #0]
 80025ba:	6962      	ldr	r2, [r4, #20]
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	429a      	cmp	r2, r3
 80025c0:	d004      	beq.n	80025cc <__swbuf_r+0x5a>
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	07db      	lsls	r3, r3, #31
 80025c6:	d506      	bpl.n	80025d6 <__swbuf_r+0x64>
 80025c8:	2e0a      	cmp	r6, #10
 80025ca:	d104      	bne.n	80025d6 <__swbuf_r+0x64>
 80025cc:	4621      	mov	r1, r4
 80025ce:	4628      	mov	r0, r5
 80025d0:	f000 fa56 	bl	8002a80 <_fflush_r>
 80025d4:	b938      	cbnz	r0, 80025e6 <__swbuf_r+0x74>
 80025d6:	4638      	mov	r0, r7
 80025d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025da:	4621      	mov	r1, r4
 80025dc:	4628      	mov	r0, r5
 80025de:	f000 f805 	bl	80025ec <__swsetup_r>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d0d5      	beq.n	8002592 <__swbuf_r+0x20>
 80025e6:	f04f 37ff 	mov.w	r7, #4294967295
 80025ea:	e7f4      	b.n	80025d6 <__swbuf_r+0x64>

080025ec <__swsetup_r>:
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <__swsetup_r+0xac>)
 80025f0:	4605      	mov	r5, r0
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	460c      	mov	r4, r1
 80025f6:	b118      	cbz	r0, 8002600 <__swsetup_r+0x14>
 80025f8:	6a03      	ldr	r3, [r0, #32]
 80025fa:	b90b      	cbnz	r3, 8002600 <__swsetup_r+0x14>
 80025fc:	f7ff fee4 	bl	80023c8 <__sinit>
 8002600:	89a3      	ldrh	r3, [r4, #12]
 8002602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002606:	0718      	lsls	r0, r3, #28
 8002608:	d422      	bmi.n	8002650 <__swsetup_r+0x64>
 800260a:	06d9      	lsls	r1, r3, #27
 800260c:	d407      	bmi.n	800261e <__swsetup_r+0x32>
 800260e:	2309      	movs	r3, #9
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002616:	f04f 30ff 	mov.w	r0, #4294967295
 800261a:	81a3      	strh	r3, [r4, #12]
 800261c:	e034      	b.n	8002688 <__swsetup_r+0x9c>
 800261e:	0758      	lsls	r0, r3, #29
 8002620:	d512      	bpl.n	8002648 <__swsetup_r+0x5c>
 8002622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002624:	b141      	cbz	r1, 8002638 <__swsetup_r+0x4c>
 8002626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800262a:	4299      	cmp	r1, r3
 800262c:	d002      	beq.n	8002634 <__swsetup_r+0x48>
 800262e:	4628      	mov	r0, r5
 8002630:	f000 f8b0 	bl	8002794 <_free_r>
 8002634:	2300      	movs	r3, #0
 8002636:	6363      	str	r3, [r4, #52]	; 0x34
 8002638:	89a3      	ldrh	r3, [r4, #12]
 800263a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800263e:	81a3      	strh	r3, [r4, #12]
 8002640:	2300      	movs	r3, #0
 8002642:	6063      	str	r3, [r4, #4]
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	89a3      	ldrh	r3, [r4, #12]
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	81a3      	strh	r3, [r4, #12]
 8002650:	6923      	ldr	r3, [r4, #16]
 8002652:	b94b      	cbnz	r3, 8002668 <__swsetup_r+0x7c>
 8002654:	89a3      	ldrh	r3, [r4, #12]
 8002656:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265e:	d003      	beq.n	8002668 <__swsetup_r+0x7c>
 8002660:	4621      	mov	r1, r4
 8002662:	4628      	mov	r0, r5
 8002664:	f000 fa59 	bl	8002b1a <__smakebuf_r>
 8002668:	89a0      	ldrh	r0, [r4, #12]
 800266a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800266e:	f010 0301 	ands.w	r3, r0, #1
 8002672:	d00a      	beq.n	800268a <__swsetup_r+0x9e>
 8002674:	2300      	movs	r3, #0
 8002676:	60a3      	str	r3, [r4, #8]
 8002678:	6963      	ldr	r3, [r4, #20]
 800267a:	425b      	negs	r3, r3
 800267c:	61a3      	str	r3, [r4, #24]
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	b943      	cbnz	r3, 8002694 <__swsetup_r+0xa8>
 8002682:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002686:	d1c4      	bne.n	8002612 <__swsetup_r+0x26>
 8002688:	bd38      	pop	{r3, r4, r5, pc}
 800268a:	0781      	lsls	r1, r0, #30
 800268c:	bf58      	it	pl
 800268e:	6963      	ldrpl	r3, [r4, #20]
 8002690:	60a3      	str	r3, [r4, #8]
 8002692:	e7f4      	b.n	800267e <__swsetup_r+0x92>
 8002694:	2000      	movs	r0, #0
 8002696:	e7f7      	b.n	8002688 <__swsetup_r+0x9c>
 8002698:	20000064 	.word	0x20000064

0800269c <memset>:
 800269c:	4603      	mov	r3, r0
 800269e:	4402      	add	r2, r0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d100      	bne.n	80026a6 <memset+0xa>
 80026a4:	4770      	bx	lr
 80026a6:	f803 1b01 	strb.w	r1, [r3], #1
 80026aa:	e7f9      	b.n	80026a0 <memset+0x4>

080026ac <_close_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	2300      	movs	r3, #0
 80026b0:	4d05      	ldr	r5, [pc, #20]	; (80026c8 <_close_r+0x1c>)
 80026b2:	4604      	mov	r4, r0
 80026b4:	4608      	mov	r0, r1
 80026b6:	602b      	str	r3, [r5, #0]
 80026b8:	f7fd ff0f 	bl	80004da <_close>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d102      	bne.n	80026c6 <_close_r+0x1a>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <_close_r+0x1a>
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	2000025c 	.word	0x2000025c

080026cc <_lseek_r>:
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4604      	mov	r4, r0
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	2200      	movs	r2, #0
 80026d6:	4d05      	ldr	r5, [pc, #20]	; (80026ec <_lseek_r+0x20>)
 80026d8:	602a      	str	r2, [r5, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	f7fd ff21 	bl	8000522 <_lseek>
 80026e0:	1c43      	adds	r3, r0, #1
 80026e2:	d102      	bne.n	80026ea <_lseek_r+0x1e>
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	b103      	cbz	r3, 80026ea <_lseek_r+0x1e>
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	2000025c 	.word	0x2000025c

080026f0 <_read_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	2200      	movs	r2, #0
 80026fa:	4d05      	ldr	r5, [pc, #20]	; (8002710 <_read_r+0x20>)
 80026fc:	602a      	str	r2, [r5, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	f7fd feb2 	bl	8000468 <_read>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_read_r+0x1e>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_read_r+0x1e>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	2000025c 	.word	0x2000025c

08002714 <_write_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	2200      	movs	r2, #0
 800271e:	4d05      	ldr	r5, [pc, #20]	; (8002734 <_write_r+0x20>)
 8002720:	602a      	str	r2, [r5, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f7fd febd 	bl	80004a2 <_write>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_write_r+0x1e>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_write_r+0x1e>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	2000025c 	.word	0x2000025c

08002738 <__errno>:
 8002738:	4b01      	ldr	r3, [pc, #4]	; (8002740 <__errno+0x8>)
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000064 	.word	0x20000064

08002744 <__libc_init_array>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	2600      	movs	r6, #0
 8002748:	4d0c      	ldr	r5, [pc, #48]	; (800277c <__libc_init_array+0x38>)
 800274a:	4c0d      	ldr	r4, [pc, #52]	; (8002780 <__libc_init_array+0x3c>)
 800274c:	1b64      	subs	r4, r4, r5
 800274e:	10a4      	asrs	r4, r4, #2
 8002750:	42a6      	cmp	r6, r4
 8002752:	d109      	bne.n	8002768 <__libc_init_array+0x24>
 8002754:	f000 fa50 	bl	8002bf8 <_init>
 8002758:	2600      	movs	r6, #0
 800275a:	4d0a      	ldr	r5, [pc, #40]	; (8002784 <__libc_init_array+0x40>)
 800275c:	4c0a      	ldr	r4, [pc, #40]	; (8002788 <__libc_init_array+0x44>)
 800275e:	1b64      	subs	r4, r4, r5
 8002760:	10a4      	asrs	r4, r4, #2
 8002762:	42a6      	cmp	r6, r4
 8002764:	d105      	bne.n	8002772 <__libc_init_array+0x2e>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	f855 3b04 	ldr.w	r3, [r5], #4
 800276c:	4798      	blx	r3
 800276e:	3601      	adds	r6, #1
 8002770:	e7ee      	b.n	8002750 <__libc_init_array+0xc>
 8002772:	f855 3b04 	ldr.w	r3, [r5], #4
 8002776:	4798      	blx	r3
 8002778:	3601      	adds	r6, #1
 800277a:	e7f2      	b.n	8002762 <__libc_init_array+0x1e>
 800277c:	08002c4c 	.word	0x08002c4c
 8002780:	08002c4c 	.word	0x08002c4c
 8002784:	08002c4c 	.word	0x08002c4c
 8002788:	08002c50 	.word	0x08002c50

0800278c <__retarget_lock_init_recursive>:
 800278c:	4770      	bx	lr

0800278e <__retarget_lock_acquire_recursive>:
 800278e:	4770      	bx	lr

08002790 <__retarget_lock_release_recursive>:
 8002790:	4770      	bx	lr
	...

08002794 <_free_r>:
 8002794:	b538      	push	{r3, r4, r5, lr}
 8002796:	4605      	mov	r5, r0
 8002798:	2900      	cmp	r1, #0
 800279a:	d040      	beq.n	800281e <_free_r+0x8a>
 800279c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027a0:	1f0c      	subs	r4, r1, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bfb8      	it	lt
 80027a6:	18e4      	addlt	r4, r4, r3
 80027a8:	f000 f8dc 	bl	8002964 <__malloc_lock>
 80027ac:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <_free_r+0x8c>)
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	b933      	cbnz	r3, 80027c0 <_free_r+0x2c>
 80027b2:	6063      	str	r3, [r4, #4]
 80027b4:	6014      	str	r4, [r2, #0]
 80027b6:	4628      	mov	r0, r5
 80027b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027bc:	f000 b8d8 	b.w	8002970 <__malloc_unlock>
 80027c0:	42a3      	cmp	r3, r4
 80027c2:	d908      	bls.n	80027d6 <_free_r+0x42>
 80027c4:	6820      	ldr	r0, [r4, #0]
 80027c6:	1821      	adds	r1, r4, r0
 80027c8:	428b      	cmp	r3, r1
 80027ca:	bf01      	itttt	eq
 80027cc:	6819      	ldreq	r1, [r3, #0]
 80027ce:	685b      	ldreq	r3, [r3, #4]
 80027d0:	1809      	addeq	r1, r1, r0
 80027d2:	6021      	streq	r1, [r4, #0]
 80027d4:	e7ed      	b.n	80027b2 <_free_r+0x1e>
 80027d6:	461a      	mov	r2, r3
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b10b      	cbz	r3, 80027e0 <_free_r+0x4c>
 80027dc:	42a3      	cmp	r3, r4
 80027de:	d9fa      	bls.n	80027d6 <_free_r+0x42>
 80027e0:	6811      	ldr	r1, [r2, #0]
 80027e2:	1850      	adds	r0, r2, r1
 80027e4:	42a0      	cmp	r0, r4
 80027e6:	d10b      	bne.n	8002800 <_free_r+0x6c>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	4401      	add	r1, r0
 80027ec:	1850      	adds	r0, r2, r1
 80027ee:	4283      	cmp	r3, r0
 80027f0:	6011      	str	r1, [r2, #0]
 80027f2:	d1e0      	bne.n	80027b6 <_free_r+0x22>
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4408      	add	r0, r1
 80027fa:	6010      	str	r0, [r2, #0]
 80027fc:	6053      	str	r3, [r2, #4]
 80027fe:	e7da      	b.n	80027b6 <_free_r+0x22>
 8002800:	d902      	bls.n	8002808 <_free_r+0x74>
 8002802:	230c      	movs	r3, #12
 8002804:	602b      	str	r3, [r5, #0]
 8002806:	e7d6      	b.n	80027b6 <_free_r+0x22>
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	1821      	adds	r1, r4, r0
 800280c:	428b      	cmp	r3, r1
 800280e:	bf01      	itttt	eq
 8002810:	6819      	ldreq	r1, [r3, #0]
 8002812:	685b      	ldreq	r3, [r3, #4]
 8002814:	1809      	addeq	r1, r1, r0
 8002816:	6021      	streq	r1, [r4, #0]
 8002818:	6063      	str	r3, [r4, #4]
 800281a:	6054      	str	r4, [r2, #4]
 800281c:	e7cb      	b.n	80027b6 <_free_r+0x22>
 800281e:	bd38      	pop	{r3, r4, r5, pc}
 8002820:	20000264 	.word	0x20000264

08002824 <sbrk_aligned>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	4e0e      	ldr	r6, [pc, #56]	; (8002860 <sbrk_aligned+0x3c>)
 8002828:	460c      	mov	r4, r1
 800282a:	6831      	ldr	r1, [r6, #0]
 800282c:	4605      	mov	r5, r0
 800282e:	b911      	cbnz	r1, 8002836 <sbrk_aligned+0x12>
 8002830:	f000 f9d2 	bl	8002bd8 <_sbrk_r>
 8002834:	6030      	str	r0, [r6, #0]
 8002836:	4621      	mov	r1, r4
 8002838:	4628      	mov	r0, r5
 800283a:	f000 f9cd 	bl	8002bd8 <_sbrk_r>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	d00a      	beq.n	8002858 <sbrk_aligned+0x34>
 8002842:	1cc4      	adds	r4, r0, #3
 8002844:	f024 0403 	bic.w	r4, r4, #3
 8002848:	42a0      	cmp	r0, r4
 800284a:	d007      	beq.n	800285c <sbrk_aligned+0x38>
 800284c:	1a21      	subs	r1, r4, r0
 800284e:	4628      	mov	r0, r5
 8002850:	f000 f9c2 	bl	8002bd8 <_sbrk_r>
 8002854:	3001      	adds	r0, #1
 8002856:	d101      	bne.n	800285c <sbrk_aligned+0x38>
 8002858:	f04f 34ff 	mov.w	r4, #4294967295
 800285c:	4620      	mov	r0, r4
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	20000268 	.word	0x20000268

08002864 <_malloc_r>:
 8002864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002868:	1ccd      	adds	r5, r1, #3
 800286a:	f025 0503 	bic.w	r5, r5, #3
 800286e:	3508      	adds	r5, #8
 8002870:	2d0c      	cmp	r5, #12
 8002872:	bf38      	it	cc
 8002874:	250c      	movcc	r5, #12
 8002876:	2d00      	cmp	r5, #0
 8002878:	4607      	mov	r7, r0
 800287a:	db01      	blt.n	8002880 <_malloc_r+0x1c>
 800287c:	42a9      	cmp	r1, r5
 800287e:	d905      	bls.n	800288c <_malloc_r+0x28>
 8002880:	230c      	movs	r3, #12
 8002882:	2600      	movs	r6, #0
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4630      	mov	r0, r6
 8002888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800288c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002960 <_malloc_r+0xfc>
 8002890:	f000 f868 	bl	8002964 <__malloc_lock>
 8002894:	f8d8 3000 	ldr.w	r3, [r8]
 8002898:	461c      	mov	r4, r3
 800289a:	bb5c      	cbnz	r4, 80028f4 <_malloc_r+0x90>
 800289c:	4629      	mov	r1, r5
 800289e:	4638      	mov	r0, r7
 80028a0:	f7ff ffc0 	bl	8002824 <sbrk_aligned>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	4604      	mov	r4, r0
 80028a8:	d155      	bne.n	8002956 <_malloc_r+0xf2>
 80028aa:	f8d8 4000 	ldr.w	r4, [r8]
 80028ae:	4626      	mov	r6, r4
 80028b0:	2e00      	cmp	r6, #0
 80028b2:	d145      	bne.n	8002940 <_malloc_r+0xdc>
 80028b4:	2c00      	cmp	r4, #0
 80028b6:	d048      	beq.n	800294a <_malloc_r+0xe6>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	4631      	mov	r1, r6
 80028bc:	4638      	mov	r0, r7
 80028be:	eb04 0903 	add.w	r9, r4, r3
 80028c2:	f000 f989 	bl	8002bd8 <_sbrk_r>
 80028c6:	4581      	cmp	r9, r0
 80028c8:	d13f      	bne.n	800294a <_malloc_r+0xe6>
 80028ca:	6821      	ldr	r1, [r4, #0]
 80028cc:	4638      	mov	r0, r7
 80028ce:	1a6d      	subs	r5, r5, r1
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7ff ffa7 	bl	8002824 <sbrk_aligned>
 80028d6:	3001      	adds	r0, #1
 80028d8:	d037      	beq.n	800294a <_malloc_r+0xe6>
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	442b      	add	r3, r5
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	f8d8 3000 	ldr.w	r3, [r8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d038      	beq.n	800295a <_malloc_r+0xf6>
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	42a2      	cmp	r2, r4
 80028ec:	d12b      	bne.n	8002946 <_malloc_r+0xe2>
 80028ee:	2200      	movs	r2, #0
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e00f      	b.n	8002914 <_malloc_r+0xb0>
 80028f4:	6822      	ldr	r2, [r4, #0]
 80028f6:	1b52      	subs	r2, r2, r5
 80028f8:	d41f      	bmi.n	800293a <_malloc_r+0xd6>
 80028fa:	2a0b      	cmp	r2, #11
 80028fc:	d917      	bls.n	800292e <_malloc_r+0xca>
 80028fe:	1961      	adds	r1, r4, r5
 8002900:	42a3      	cmp	r3, r4
 8002902:	6025      	str	r5, [r4, #0]
 8002904:	bf18      	it	ne
 8002906:	6059      	strne	r1, [r3, #4]
 8002908:	6863      	ldr	r3, [r4, #4]
 800290a:	bf08      	it	eq
 800290c:	f8c8 1000 	streq.w	r1, [r8]
 8002910:	5162      	str	r2, [r4, r5]
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	4638      	mov	r0, r7
 8002916:	f104 060b 	add.w	r6, r4, #11
 800291a:	f000 f829 	bl	8002970 <__malloc_unlock>
 800291e:	f026 0607 	bic.w	r6, r6, #7
 8002922:	1d23      	adds	r3, r4, #4
 8002924:	1af2      	subs	r2, r6, r3
 8002926:	d0ae      	beq.n	8002886 <_malloc_r+0x22>
 8002928:	1b9b      	subs	r3, r3, r6
 800292a:	50a3      	str	r3, [r4, r2]
 800292c:	e7ab      	b.n	8002886 <_malloc_r+0x22>
 800292e:	42a3      	cmp	r3, r4
 8002930:	6862      	ldr	r2, [r4, #4]
 8002932:	d1dd      	bne.n	80028f0 <_malloc_r+0x8c>
 8002934:	f8c8 2000 	str.w	r2, [r8]
 8002938:	e7ec      	b.n	8002914 <_malloc_r+0xb0>
 800293a:	4623      	mov	r3, r4
 800293c:	6864      	ldr	r4, [r4, #4]
 800293e:	e7ac      	b.n	800289a <_malloc_r+0x36>
 8002940:	4634      	mov	r4, r6
 8002942:	6876      	ldr	r6, [r6, #4]
 8002944:	e7b4      	b.n	80028b0 <_malloc_r+0x4c>
 8002946:	4613      	mov	r3, r2
 8002948:	e7cc      	b.n	80028e4 <_malloc_r+0x80>
 800294a:	230c      	movs	r3, #12
 800294c:	4638      	mov	r0, r7
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	f000 f80e 	bl	8002970 <__malloc_unlock>
 8002954:	e797      	b.n	8002886 <_malloc_r+0x22>
 8002956:	6025      	str	r5, [r4, #0]
 8002958:	e7dc      	b.n	8002914 <_malloc_r+0xb0>
 800295a:	605b      	str	r3, [r3, #4]
 800295c:	deff      	udf	#255	; 0xff
 800295e:	bf00      	nop
 8002960:	20000264 	.word	0x20000264

08002964 <__malloc_lock>:
 8002964:	4801      	ldr	r0, [pc, #4]	; (800296c <__malloc_lock+0x8>)
 8002966:	f7ff bf12 	b.w	800278e <__retarget_lock_acquire_recursive>
 800296a:	bf00      	nop
 800296c:	20000260 	.word	0x20000260

08002970 <__malloc_unlock>:
 8002970:	4801      	ldr	r0, [pc, #4]	; (8002978 <__malloc_unlock+0x8>)
 8002972:	f7ff bf0d 	b.w	8002790 <__retarget_lock_release_recursive>
 8002976:	bf00      	nop
 8002978:	20000260 	.word	0x20000260

0800297c <__sflush_r>:
 800297c:	898a      	ldrh	r2, [r1, #12]
 800297e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002980:	4605      	mov	r5, r0
 8002982:	0710      	lsls	r0, r2, #28
 8002984:	460c      	mov	r4, r1
 8002986:	d457      	bmi.n	8002a38 <__sflush_r+0xbc>
 8002988:	684b      	ldr	r3, [r1, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dc04      	bgt.n	8002998 <__sflush_r+0x1c>
 800298e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	dc01      	bgt.n	8002998 <__sflush_r+0x1c>
 8002994:	2000      	movs	r0, #0
 8002996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800299a:	2e00      	cmp	r6, #0
 800299c:	d0fa      	beq.n	8002994 <__sflush_r+0x18>
 800299e:	2300      	movs	r3, #0
 80029a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029a4:	682f      	ldr	r7, [r5, #0]
 80029a6:	6a21      	ldr	r1, [r4, #32]
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	d032      	beq.n	8002a12 <__sflush_r+0x96>
 80029ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	075a      	lsls	r2, r3, #29
 80029b2:	d505      	bpl.n	80029c0 <__sflush_r+0x44>
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	1ac0      	subs	r0, r0, r3
 80029b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029ba:	b10b      	cbz	r3, 80029c0 <__sflush_r+0x44>
 80029bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029be:	1ac0      	subs	r0, r0, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	4602      	mov	r2, r0
 80029c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029c6:	4628      	mov	r0, r5
 80029c8:	6a21      	ldr	r1, [r4, #32]
 80029ca:	47b0      	blx	r6
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	d106      	bne.n	80029e0 <__sflush_r+0x64>
 80029d2:	6829      	ldr	r1, [r5, #0]
 80029d4:	291d      	cmp	r1, #29
 80029d6:	d82b      	bhi.n	8002a30 <__sflush_r+0xb4>
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <__sflush_r+0x100>)
 80029da:	410a      	asrs	r2, r1
 80029dc:	07d6      	lsls	r6, r2, #31
 80029de:	d427      	bmi.n	8002a30 <__sflush_r+0xb4>
 80029e0:	2200      	movs	r2, #0
 80029e2:	6062      	str	r2, [r4, #4]
 80029e4:	6922      	ldr	r2, [r4, #16]
 80029e6:	04d9      	lsls	r1, r3, #19
 80029e8:	6022      	str	r2, [r4, #0]
 80029ea:	d504      	bpl.n	80029f6 <__sflush_r+0x7a>
 80029ec:	1c42      	adds	r2, r0, #1
 80029ee:	d101      	bne.n	80029f4 <__sflush_r+0x78>
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	b903      	cbnz	r3, 80029f6 <__sflush_r+0x7a>
 80029f4:	6560      	str	r0, [r4, #84]	; 0x54
 80029f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029f8:	602f      	str	r7, [r5, #0]
 80029fa:	2900      	cmp	r1, #0
 80029fc:	d0ca      	beq.n	8002994 <__sflush_r+0x18>
 80029fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a02:	4299      	cmp	r1, r3
 8002a04:	d002      	beq.n	8002a0c <__sflush_r+0x90>
 8002a06:	4628      	mov	r0, r5
 8002a08:	f7ff fec4 	bl	8002794 <_free_r>
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a10:	e7c1      	b.n	8002996 <__sflush_r+0x1a>
 8002a12:	2301      	movs	r3, #1
 8002a14:	4628      	mov	r0, r5
 8002a16:	47b0      	blx	r6
 8002a18:	1c41      	adds	r1, r0, #1
 8002a1a:	d1c8      	bne.n	80029ae <__sflush_r+0x32>
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0c5      	beq.n	80029ae <__sflush_r+0x32>
 8002a22:	2b1d      	cmp	r3, #29
 8002a24:	d001      	beq.n	8002a2a <__sflush_r+0xae>
 8002a26:	2b16      	cmp	r3, #22
 8002a28:	d101      	bne.n	8002a2e <__sflush_r+0xb2>
 8002a2a:	602f      	str	r7, [r5, #0]
 8002a2c:	e7b2      	b.n	8002994 <__sflush_r+0x18>
 8002a2e:	89a3      	ldrh	r3, [r4, #12]
 8002a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	e7ae      	b.n	8002996 <__sflush_r+0x1a>
 8002a38:	690f      	ldr	r7, [r1, #16]
 8002a3a:	2f00      	cmp	r7, #0
 8002a3c:	d0aa      	beq.n	8002994 <__sflush_r+0x18>
 8002a3e:	0793      	lsls	r3, r2, #30
 8002a40:	bf18      	it	ne
 8002a42:	2300      	movne	r3, #0
 8002a44:	680e      	ldr	r6, [r1, #0]
 8002a46:	bf08      	it	eq
 8002a48:	694b      	ldreq	r3, [r1, #20]
 8002a4a:	1bf6      	subs	r6, r6, r7
 8002a4c:	600f      	str	r7, [r1, #0]
 8002a4e:	608b      	str	r3, [r1, #8]
 8002a50:	2e00      	cmp	r6, #0
 8002a52:	dd9f      	ble.n	8002994 <__sflush_r+0x18>
 8002a54:	4633      	mov	r3, r6
 8002a56:	463a      	mov	r2, r7
 8002a58:	4628      	mov	r0, r5
 8002a5a:	6a21      	ldr	r1, [r4, #32]
 8002a5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a60:	47e0      	blx	ip
 8002a62:	2800      	cmp	r0, #0
 8002a64:	dc06      	bgt.n	8002a74 <__sflush_r+0xf8>
 8002a66:	89a3      	ldrh	r3, [r4, #12]
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	e790      	b.n	8002996 <__sflush_r+0x1a>
 8002a74:	4407      	add	r7, r0
 8002a76:	1a36      	subs	r6, r6, r0
 8002a78:	e7ea      	b.n	8002a50 <__sflush_r+0xd4>
 8002a7a:	bf00      	nop
 8002a7c:	dfbffffe 	.word	0xdfbffffe

08002a80 <_fflush_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	4605      	mov	r5, r0
 8002a86:	460c      	mov	r4, r1
 8002a88:	b913      	cbnz	r3, 8002a90 <_fflush_r+0x10>
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
 8002a90:	b118      	cbz	r0, 8002a9a <_fflush_r+0x1a>
 8002a92:	6a03      	ldr	r3, [r0, #32]
 8002a94:	b90b      	cbnz	r3, 8002a9a <_fflush_r+0x1a>
 8002a96:	f7ff fc97 	bl	80023c8 <__sinit>
 8002a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f3      	beq.n	8002a8a <_fflush_r+0xa>
 8002aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002aa4:	07d0      	lsls	r0, r2, #31
 8002aa6:	d404      	bmi.n	8002ab2 <_fflush_r+0x32>
 8002aa8:	0599      	lsls	r1, r3, #22
 8002aaa:	d402      	bmi.n	8002ab2 <_fflush_r+0x32>
 8002aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aae:	f7ff fe6e 	bl	800278e <__retarget_lock_acquire_recursive>
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	f7ff ff61 	bl	800297c <__sflush_r>
 8002aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002abc:	4605      	mov	r5, r0
 8002abe:	07da      	lsls	r2, r3, #31
 8002ac0:	d4e4      	bmi.n	8002a8c <_fflush_r+0xc>
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	059b      	lsls	r3, r3, #22
 8002ac6:	d4e1      	bmi.n	8002a8c <_fflush_r+0xc>
 8002ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aca:	f7ff fe61 	bl	8002790 <__retarget_lock_release_recursive>
 8002ace:	e7dd      	b.n	8002a8c <_fflush_r+0xc>

08002ad0 <__swhatbuf_r>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad8:	4615      	mov	r5, r2
 8002ada:	2900      	cmp	r1, #0
 8002adc:	461e      	mov	r6, r3
 8002ade:	b096      	sub	sp, #88	; 0x58
 8002ae0:	da0c      	bge.n	8002afc <__swhatbuf_r+0x2c>
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002aea:	bf0c      	ite	eq
 8002aec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002af0:	2340      	movne	r3, #64	; 0x40
 8002af2:	2000      	movs	r0, #0
 8002af4:	6031      	str	r1, [r6, #0]
 8002af6:	602b      	str	r3, [r5, #0]
 8002af8:	b016      	add	sp, #88	; 0x58
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	466a      	mov	r2, sp
 8002afe:	f000 f849 	bl	8002b94 <_fstat_r>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	dbed      	blt.n	8002ae2 <__swhatbuf_r+0x12>
 8002b06:	9901      	ldr	r1, [sp, #4]
 8002b08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002b0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002b10:	4259      	negs	r1, r3
 8002b12:	4159      	adcs	r1, r3
 8002b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b18:	e7eb      	b.n	8002af2 <__swhatbuf_r+0x22>

08002b1a <__smakebuf_r>:
 8002b1a:	898b      	ldrh	r3, [r1, #12]
 8002b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b1e:	079d      	lsls	r5, r3, #30
 8002b20:	4606      	mov	r6, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	d507      	bpl.n	8002b36 <__smakebuf_r+0x1c>
 8002b26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	6123      	str	r3, [r4, #16]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	6163      	str	r3, [r4, #20]
 8002b32:	b002      	add	sp, #8
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	466a      	mov	r2, sp
 8002b38:	ab01      	add	r3, sp, #4
 8002b3a:	f7ff ffc9 	bl	8002ad0 <__swhatbuf_r>
 8002b3e:	9900      	ldr	r1, [sp, #0]
 8002b40:	4605      	mov	r5, r0
 8002b42:	4630      	mov	r0, r6
 8002b44:	f7ff fe8e 	bl	8002864 <_malloc_r>
 8002b48:	b948      	cbnz	r0, 8002b5e <__smakebuf_r+0x44>
 8002b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b4e:	059a      	lsls	r2, r3, #22
 8002b50:	d4ef      	bmi.n	8002b32 <__smakebuf_r+0x18>
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	81a3      	strh	r3, [r4, #12]
 8002b5c:	e7e3      	b.n	8002b26 <__smakebuf_r+0xc>
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	6020      	str	r0, [r4, #0]
 8002b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b66:	81a3      	strh	r3, [r4, #12]
 8002b68:	9b00      	ldr	r3, [sp, #0]
 8002b6a:	6120      	str	r0, [r4, #16]
 8002b6c:	6163      	str	r3, [r4, #20]
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	b15b      	cbz	r3, 8002b8a <__smakebuf_r+0x70>
 8002b72:	4630      	mov	r0, r6
 8002b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b78:	f000 f81e 	bl	8002bb8 <_isatty_r>
 8002b7c:	b128      	cbz	r0, 8002b8a <__smakebuf_r+0x70>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f023 0303 	bic.w	r3, r3, #3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	81a3      	strh	r3, [r4, #12]
 8002b8a:	89a3      	ldrh	r3, [r4, #12]
 8002b8c:	431d      	orrs	r5, r3
 8002b8e:	81a5      	strh	r5, [r4, #12]
 8002b90:	e7cf      	b.n	8002b32 <__smakebuf_r+0x18>
	...

08002b94 <_fstat_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	2300      	movs	r3, #0
 8002b98:	4d06      	ldr	r5, [pc, #24]	; (8002bb4 <_fstat_r+0x20>)
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	f7fd fca5 	bl	80004f0 <_fstat>
 8002ba6:	1c43      	adds	r3, r0, #1
 8002ba8:	d102      	bne.n	8002bb0 <_fstat_r+0x1c>
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	b103      	cbz	r3, 8002bb0 <_fstat_r+0x1c>
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000025c 	.word	0x2000025c

08002bb8 <_isatty_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4d05      	ldr	r5, [pc, #20]	; (8002bd4 <_isatty_r+0x1c>)
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	602b      	str	r3, [r5, #0]
 8002bc4:	f7fd fca3 	bl	800050e <_isatty>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d102      	bne.n	8002bd2 <_isatty_r+0x1a>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	b103      	cbz	r3, 8002bd2 <_isatty_r+0x1a>
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	2000025c 	.word	0x2000025c

08002bd8 <_sbrk_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	2300      	movs	r3, #0
 8002bdc:	4d05      	ldr	r5, [pc, #20]	; (8002bf4 <_sbrk_r+0x1c>)
 8002bde:	4604      	mov	r4, r0
 8002be0:	4608      	mov	r0, r1
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	f7fd fcaa 	bl	800053c <_sbrk>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_sbrk_r+0x1a>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_sbrk_r+0x1a>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	2000025c 	.word	0x2000025c

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
