
sonar_adv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080056f0  080056f0  000156f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a94  08005a94  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005a94  08005a94  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a94  08005a94  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  08005c70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08005c70  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c221  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fcc  00000000  00000000  0002c461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b0  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a3c  00000000  00000000  0002fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8a3  00000000  00000000  0004849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf6a  00000000  00000000  00056d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004398  00000000  00000000  000e2cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e7044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080056d8 	.word	0x080056d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080056d8 	.word	0x080056d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b5a:	f043 0320 	orr.w	r3, r3, #32
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0320 	and.w	r3, r3, #32
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_GPIO_Init+0xec>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <MX_GPIO_Init+0xf0>)
 8000ba4:	f000 fec5 	bl	8001932 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_GPIO_Init+0xf4>)
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4818      	ldr	r0, [pc, #96]	; (8000c20 <MX_GPIO_Init+0xf8>)
 8000bbe:	f000 fd1d 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000bc2:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <MX_GPIO_Init+0xf0>)
 8000bdc:	f000 fd0e 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_GPIO_Init+0xf0>)
 8000bf6:	f000 fd01 	bl	80015fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2028      	movs	r0, #40	; 0x28
 8000c00:	f000 fcc5 	bl	800158e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c04:	2028      	movs	r0, #40	; 0x28
 8000c06:	f000 fcde 	bl	80015c6 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	10110000 	.word	0x10110000
 8000c20:	40011000 	.word	0x40011000

08000c24 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c2c:	1d39      	adds	r1, r7, #4
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2201      	movs	r2, #1
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <__io_putchar+0x20>)
 8000c36:	f001 ff15 	bl	8002a64 <HAL_UART_Transmit>
  return ch;
 8000c3a:	687b      	ldr	r3, [r7, #4]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000240 	.word	0x20000240

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t overflows = 0U;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // 제네레이트 없음
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d104      	bne.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x1c>
		overflows++;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c62:	6013      	str	r3, [r2, #0]
	}
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	200001f0 	.word	0x200001f0

08000c78 <GetMicroSec>:


uint32_t GetMicroSec(void){ // 제네레이트 없음
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	uint32_t count = __HAL_TIM_GET_COUNTER(&htim1);
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <GetMicroSec+0x44>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	603b      	str	r3, [r7, #0]
	uint32_t overflow = overflows;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <GetMicroSec+0x48>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	607b      	str	r3, [r7, #4]
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) && (count < 0x8000)) {
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <GetMicroSec+0x44>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d106      	bne.n	8000ca8 <GetMicroSec+0x30>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ca0:	d202      	bcs.n	8000ca8 <GetMicroSec+0x30>
	        overflow++;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
	}

	return(overflow << 16) + count;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	041a      	lsls	r2, r3, #16
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	4413      	add	r3, r2
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	200001f0 	.word	0x200001f0
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 fb01 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f877 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f7ff ff27 	bl	8000b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 fa6d 	bl	80011b8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000cde:	f000 f9ed 	bl	80010bc <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Init(&htim1);         // 제네레이트 없음
 8000ce2:	4835      	ldr	r0, [pc, #212]	; (8000db8 <main+0xf0>)
 8000ce4:	f001 fa70 	bl	80021c8 <HAL_TIM_Base_Init>
  __HAL_TIM_SET_COUNTER(&htim1, 0);  // 제네레이트 없음
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <main+0xf0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim1);     // 제네레이트 없음
 8000cf0:	4831      	ldr	r0, [pc, #196]	; (8000db8 <main+0xf0>)
 8000cf2:	f001 fab9 	bl	8002268 <HAL_TIM_Base_Start_IT>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
	  // HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET



	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	482f      	ldr	r0, [pc, #188]	; (8000dbc <main+0xf4>)
 8000cfe:	f000 fe18 	bl	8001932 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000d02:	2005      	movs	r0, #5
 8000d04:	f000 fb48 	bl	8001398 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	482b      	ldr	r0, [pc, #172]	; (8000dbc <main+0xf4>)
 8000d10:	f000 fe0f 	bl	8001932 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000d14:	2014      	movs	r0, #20
 8000d16:	f000 fb3f 	bl	8001398 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4826      	ldr	r0, [pc, #152]	; (8000dbc <main+0xf4>)
 8000d22:	f000 fe06 	bl	8001932 <HAL_GPIO_WritePin>

	  //printf("right after : %lu\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));

	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_RESET);
 8000d26:	bf00      	nop
 8000d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2c:	4823      	ldr	r0, [pc, #140]	; (8000dbc <main+0xf4>)
 8000d2e:	f000 fde9 	bl	8001904 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f7      	beq.n	8000d28 <main+0x60>
	  st = GetMicroSec();
 8000d38:	f7ff ff9e 	bl	8000c78 <GetMicroSec>
 8000d3c:	60f8      	str	r0, [r7, #12]
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET);
 8000d3e:	bf00      	nop
 8000d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d44:	481d      	ldr	r0, [pc, #116]	; (8000dbc <main+0xf4>)
 8000d46:	f000 fddd 	bl	8001904 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d0f7      	beq.n	8000d40 <main+0x78>
	  ed = GetMicroSec();
 8000d50:	f7ff ff92 	bl	8000c78 <GetMicroSec>
 8000d54:	60b8      	str	r0, [r7, #8]

	  diff = ed -st;
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	607b      	str	r3, [r7, #4]
	  distance = diff * 0.034 /2;
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fb40 	bl	80003e4 <__aeabi_ui2d>
 8000d64:	a312      	add	r3, pc, #72	; (adr r3, 8000db0 <main+0xe8>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	f7ff fbb5 	bl	80004d8 <__aeabi_dmul>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7e:	f7ff fcd5 	bl	800072c <__aeabi_ddiv>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fe7d 	bl	8000a88 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	603b      	str	r3, [r7, #0]
	  printf("%.3f\r\n", distance);
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f7ff fb48 	bl	8000428 <__aeabi_f2d>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <main+0xf8>)
 8000d9e:	f002 fd01 	bl	80037a4 <iprintf>


	  HAL_Delay(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f000 faf7 	bl	8001398 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000daa:	e7a4      	b.n	8000cf6 <main+0x2e>
 8000dac:	f3af 8000 	nop.w
 8000db0:	b020c49c 	.word	0xb020c49c
 8000db4:	3fa16872 	.word	0x3fa16872
 8000db8:	200001f8 	.word	0x200001f8
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	080056f0 	.word	0x080056f0

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b090      	sub	sp, #64	; 0x40
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2228      	movs	r2, #40	; 0x28
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fd3b 	bl	800384e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dee:	2310      	movs	r3, #16
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fdd4 	bl	80019a8 <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e06:	f000 f818 	bl	8000e3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f842 	bl	8001eac <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 f804 	bl	8000e3a <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3740      	adds	r7, #64	; 0x40
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3e:	b672      	cpsid	i
}
 8000e40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_MspInit+0x5c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_MspInit+0x60>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_MspInit+0x60>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 fa37 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <TIM1_UP_IRQHandler+0x10>)
 8000efe:	f001 fa05 	bl	800230c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001f8 	.word	0x200001f8

08000f0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM1_CC_IRQHandler+0x10>)
 8000f12:	f001 f9fb 	bl	800230c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001f8 	.word	0x200001f8

08000f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f28:	f000 fd1c 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <_kill>:

int _kill(int pid, int sig)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f48:	f002 fcd4 	bl	80038f4 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2216      	movs	r2, #22
 8000f50:	601a      	str	r2, [r3, #0]
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_exit>:

void _exit (int status)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f66:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffe7 	bl	8000f3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f70:	e7fe      	b.n	8000f70 <_exit+0x12>

08000f72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00a      	b.n	8000f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f84:	f3af 8000 	nop.w
 8000f88:	4601      	mov	r1, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf0      	blt.n	8000f84 <_read+0x12>
  }

  return len;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e009      	b.n	8000fd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe2c 	bl	8000c24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf1      	blt.n	8000fbe <_write+0x12>
  }
  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_close>:

int _close(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <_isatty>:

int _isatty(int file)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f002 fc3e 	bl	80038f4 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20005000 	.word	0x20005000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	200001f4 	.word	0x200001f4
 80010ac:	200003d8 	.word	0x200003d8

080010b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM1_Init+0x98>)
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <MX_TIM1_Init+0x9c>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7; // 8-1인데 8로 나누는걸 의미함.
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM1_Init+0x98>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM1_Init+0x98>)
 80010ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_TIM1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_TIM1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_TIM1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_TIM1_Init+0x98>)
 8001106:	f001 f85f 	bl	80021c8 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001110:	f7ff fe93 	bl	8000e3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_TIM1_Init+0x98>)
 8001122:	f001 f9fb 	bl	800251c <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800112c:	f7ff fe85 	bl	8000e3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_TIM1_Init+0x98>)
 800113e:	f001 fbd1 	bl	80028e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001148:	f7ff fe77 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001f8 	.word	0x200001f8
 8001158:	40012c00 	.word	0x40012c00

0800115c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_TIM_Base_MspInit+0x54>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d11b      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_TIM_Base_MspInit+0x58>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_TIM_Base_MspInit+0x58>)
 8001174:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_Base_MspInit+0x58>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2019      	movs	r0, #25
 800118c:	f000 f9ff 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001190:	2019      	movs	r0, #25
 8001192:	f000 fa18 	bl	80015c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201b      	movs	r0, #27
 800119c:	f000 f9f7 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011a0:	201b      	movs	r0, #27
 80011a2:	f000 fa10 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012c00 	.word	0x40012c00
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f001 fbe8 	bl	80029c4 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f7ff fe1e 	bl	8000e3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000240 	.word	0x20000240
 8001208:	40004400 	.word	0x40004400

0800120c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <HAL_UART_MspInit+0x70>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d123      	bne.n	8001274 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_UART_MspInit+0x74>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_UART_MspInit+0x74>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0x74>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0x74>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_UART_MspInit+0x74>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_UART_MspInit+0x74>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800125c:	230c      	movs	r3, #12
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0x78>)
 8001270:	f000 f9c4 	bl	80015fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004400 	.word	0x40004400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010800 	.word	0x40010800

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff ff12 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f002 fb25 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fd07 	bl	8000cc8 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012c4:	08005a9c 	.word	0x08005a9c
  ldr r2, =_sbss
 80012c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80012cc:	200003d8 	.word	0x200003d8

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f947 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fda8 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f95f 	bl	80015e2 <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f927 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <HAL_IncTick+0x20>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000008 	.word	0x20000008
 8001380:	20000288 	.word	0x20000288

08001384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000288 	.word	0x20000288

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fff0 	bl	8001384 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffe0 	bl	8001384 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4906      	ldr	r1, [pc, #24]	; (8001478 <__NVIC_EnableIRQ+0x34>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff90 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff2d 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff42 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff90 	bl	80014d0 <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5f 	bl	800147c <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff35 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e169      	b.n	80018e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001610:	2201      	movs	r2, #1
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8158 	bne.w	80018de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4a9a      	ldr	r2, [pc, #616]	; (800189c <HAL_GPIO_Init+0x2a0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d05e      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001638:	4a98      	ldr	r2, [pc, #608]	; (800189c <HAL_GPIO_Init+0x2a0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d875      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 800163e:	4a98      	ldr	r2, [pc, #608]	; (80018a0 <HAL_GPIO_Init+0x2a4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d058      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001644:	4a96      	ldr	r2, [pc, #600]	; (80018a0 <HAL_GPIO_Init+0x2a4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d86f      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 800164a:	4a96      	ldr	r2, [pc, #600]	; (80018a4 <HAL_GPIO_Init+0x2a8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d052      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001650:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <HAL_GPIO_Init+0x2a8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d869      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 8001656:	4a94      	ldr	r2, [pc, #592]	; (80018a8 <HAL_GPIO_Init+0x2ac>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d04c      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 800165c:	4a92      	ldr	r2, [pc, #584]	; (80018a8 <HAL_GPIO_Init+0x2ac>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d863      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 8001662:	4a92      	ldr	r2, [pc, #584]	; (80018ac <HAL_GPIO_Init+0x2b0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d046      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
 8001668:	4a90      	ldr	r2, [pc, #576]	; (80018ac <HAL_GPIO_Init+0x2b0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d85d      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d82a      	bhi.n	80016c8 <HAL_GPIO_Init+0xcc>
 8001672:	2b12      	cmp	r3, #18
 8001674:	d859      	bhi.n	800172a <HAL_GPIO_Init+0x12e>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <HAL_GPIO_Init+0x80>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	080016f7 	.word	0x080016f7
 8001680:	080016d1 	.word	0x080016d1
 8001684:	080016e3 	.word	0x080016e3
 8001688:	08001725 	.word	0x08001725
 800168c:	0800172b 	.word	0x0800172b
 8001690:	0800172b 	.word	0x0800172b
 8001694:	0800172b 	.word	0x0800172b
 8001698:	0800172b 	.word	0x0800172b
 800169c:	0800172b 	.word	0x0800172b
 80016a0:	0800172b 	.word	0x0800172b
 80016a4:	0800172b 	.word	0x0800172b
 80016a8:	0800172b 	.word	0x0800172b
 80016ac:	0800172b 	.word	0x0800172b
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	0800172b 	.word	0x0800172b
 80016b8:	0800172b 	.word	0x0800172b
 80016bc:	0800172b 	.word	0x0800172b
 80016c0:	080016d9 	.word	0x080016d9
 80016c4:	080016ed 	.word	0x080016ed
 80016c8:	4a79      	ldr	r2, [pc, #484]	; (80018b0 <HAL_GPIO_Init+0x2b4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ce:	e02c      	b.n	800172a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e029      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	3304      	adds	r3, #4
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e024      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	3308      	adds	r3, #8
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e01f      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	330c      	adds	r3, #12
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e01a      	b.n	800172c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fe:	2304      	movs	r3, #4
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e013      	b.n	800172c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	611a      	str	r2, [r3, #16]
          break;
 8001716:	e009      	b.n	800172c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001718:	2308      	movs	r3, #8
 800171a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	615a      	str	r2, [r3, #20]
          break;
 8001722:	e003      	b.n	800172c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x130>
          break;
 800172a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d801      	bhi.n	8001736 <HAL_GPIO_Init+0x13a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	e001      	b.n	800173a <HAL_GPIO_Init+0x13e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	d802      	bhi.n	8001748 <HAL_GPIO_Init+0x14c>
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x152>
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	3b08      	subs	r3, #8
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	210f      	movs	r1, #15
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80b1 	beq.w	80018de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800177c:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001794:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <HAL_GPIO_Init+0x2bc>)
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a40      	ldr	r2, [pc, #256]	; (80018bc <HAL_GPIO_Init+0x2c0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d013      	beq.n	80017e8 <HAL_GPIO_Init+0x1ec>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a3f      	ldr	r2, [pc, #252]	; (80018c0 <HAL_GPIO_Init+0x2c4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1e8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a3e      	ldr	r2, [pc, #248]	; (80018c4 <HAL_GPIO_Init+0x2c8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <HAL_GPIO_Init+0x2cc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1e0>
 80017d8:	2303      	movs	r3, #3
 80017da:	e006      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017dc:	2304      	movs	r3, #4
 80017de:	e004      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_GPIO_Init+0x1ee>
 80017e8:	2300      	movs	r3, #0
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	f002 0203 	and.w	r2, r2, #3
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	4093      	lsls	r3, r2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017fa:	492f      	ldr	r1, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x2bc>)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	492c      	ldr	r1, [pc, #176]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4928      	ldr	r1, [pc, #160]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800182c:	4013      	ands	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4922      	ldr	r1, [pc, #136]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	43db      	mvns	r3, r3
 8001852:	491e      	ldr	r1, [pc, #120]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001854:	4013      	ands	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4918      	ldr	r1, [pc, #96]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	4914      	ldr	r1, [pc, #80]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800187c:	4013      	ands	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d021      	beq.n	80018d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e021      	b.n	80018de <HAL_GPIO_Init+0x2e2>
 800189a:	bf00      	nop
 800189c:	10320000 	.word	0x10320000
 80018a0:	10310000 	.word	0x10310000
 80018a4:	10220000 	.word	0x10220000
 80018a8:	10210000 	.word	0x10210000
 80018ac:	10120000 	.word	0x10120000
 80018b0:	10110000 	.word	0x10110000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010000 	.word	0x40010000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	40011000 	.word	0x40011000
 80018c8:	40011400 	.word	0x40011400
 80018cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_GPIO_Init+0x304>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4909      	ldr	r1, [pc, #36]	; (8001900 <HAL_GPIO_Init+0x304>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	3301      	adds	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f47f ae8e 	bne.w	8001610 <HAL_GPIO_Init+0x14>
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	372c      	adds	r7, #44	; 0x2c
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40010400 	.word	0x40010400

08001904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001942:	787b      	ldrb	r3, [r7, #1]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194e:	e003      	b.n	8001958 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	041a      	lsls	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f806 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e272      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8087 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00c      	beq.n	80019ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d4:	4b8f      	ldr	r3, [pc, #572]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d112      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
 80019e0:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d10b      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d168      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e24c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x76>
 8001a10:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a7f      	ldr	r2, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e02e      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7a      	ldr	r2, [pc, #488]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0xbc>
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a71      	ldr	r2, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc7e 	bl	8001384 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc7a 	bl	8001384 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e200      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe4>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc6a 	bl	8001384 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc66 	bl	8001384 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1ec      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x10c>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4939      	ldr	r1, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fc1f 	bl	8001384 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fc1b 	bl	8001384 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1a1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fbfe 	bl	8001384 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fbfa 	bl	8001384 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e180      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03a      	beq.n	8001c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fbde 	bl	8001384 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fbda 	bl	8001384 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e160      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 face 	bl	800218c <RCC_Delay>
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fbc4 	bl	8001384 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fbc0 	bl	8001384 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d908      	bls.n	8001c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e146      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	42420000 	.word	0x42420000
 8001c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e9      	bne.n	8001c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a6 	beq.w	8001d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7e      	ldr	r2, [pc, #504]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb81 	bl	8001384 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff fb7d 	bl	8001384 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e103      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x312>
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e02d      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x334>
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a66      	ldr	r2, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	e01c      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x356>
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a60      	ldr	r2, [pc, #384]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fb31 	bl	8001384 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fb2d 	bl	8001384 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0b1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ee      	beq.n	8001d26 <HAL_RCC_OscConfig+0x37e>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fb1b 	bl	8001384 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fb17 	bl	8001384 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e09b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8087 	beq.w	8001e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d061      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d146      	bne.n	8001e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff faeb 	bl	8001384 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fae7 	bl	8001384 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e06d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a19      	ldr	r1, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fabb 	bl	8001384 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fab7 	bl	8001384 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e03d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46a>
 8001e30:	e035      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff faa4 	bl	8001384 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff faa0 	bl	8001384 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e026      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x498>
 8001e5e:	e01e      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e019      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x500>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7ff f9f2 	bl	8001384 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff f9ee 	bl	8001384 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f950 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	080056f8 	.word	0x080056f8
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_RCC_GetSysClockFreq+0x94>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x30>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ae:	e027      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 80020b2:	613b      	str	r3, [r7, #16]
      break;
 80020b4:	e027      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_GetSysClockFreq+0x94>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0c5b      	lsrs	r3, r3, #17
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	fb03 f202 	mul.w	r2, r3, r2
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e004      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	613b      	str	r3, [r7, #16]
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 8002102:	613b      	str	r3, [r7, #16]
      break;
 8002104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002106:	693b      	ldr	r3, [r7, #16]
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	08005710 	.word	0x08005710
 8002120:	08005720 	.word	0x08005720
 8002124:	003d0900 	.word	0x003d0900

08002128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <HAL_RCC_GetHCLKFreq+0x10>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002140:	f7ff fff2 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4903      	ldr	r1, [pc, #12]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	08005708 	.word	0x08005708

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002168:	f7ff ffde 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08005708 	.word	0x08005708

0800218c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <RCC_Delay+0x34>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <RCC_Delay+0x38>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0a5b      	lsrs	r3, r3, #9
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021a8:	bf00      	nop
  }
  while (Delay --);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	60fa      	str	r2, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <RCC_Delay+0x1c>
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	20000000 	.word	0x20000000
 80021c4:	10624dd3 	.word	0x10624dd3

080021c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e041      	b.n	800225e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe ffb4 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 fa74 	bl	80026f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d001      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e03a      	b.n	80022f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_TIM_Base_Start_IT+0x98>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x58>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d009      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x58>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_TIM_Base_Start_IT+0x9c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x58>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <HAL_TIM_Base_Start_IT+0xa0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d010      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	e007      	b.n	80022f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40000400 	.word	0x40000400
 8002308:	40000800 	.word	0x40000800

0800230c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0202 	mvn.w	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f9b4 	bl	80026bc <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f9a7 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f9b6 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0204 	mvn.w	r2, #4
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f98a 	bl	80026bc <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f97d 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f98c 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0208 	mvn.w	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f960 	bl	80026bc <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f953 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f962 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b10      	cmp	r3, #16
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b10      	cmp	r3, #16
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0210 	mvn.w	r2, #16
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2208      	movs	r2, #8
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f936 	bl	80026bc <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f929 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f938 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0201 	mvn.w	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fbdc 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa7b 	bl	80029b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8fc 	bl	80026e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b20      	cmp	r3, #32
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0220 	mvn.w	r2, #32
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa46 	bl	80029a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_TIM_ConfigClockSource+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e0b4      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x186>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800255e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002570:	d03e      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002576:	f200 8087 	bhi.w	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	f000 8086 	beq.w	800268e <HAL_TIM_ConfigClockSource+0x172>
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d87f      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b70      	cmp	r3, #112	; 0x70
 800258a:	d01a      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xa6>
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d87b      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d050      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x11a>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d877      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d03c      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0xfa>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d873      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d058      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x13a>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d86f      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d064      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d86b      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d060      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d867      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d05c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d05a      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	e062      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025d2:	f000 f968 	bl	80028a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	609a      	str	r2, [r3, #8]
      break;
 80025ee:	e04f      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002600:	f000 f951 	bl	80028a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002612:	609a      	str	r2, [r3, #8]
      break;
 8002614:	e03c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	461a      	mov	r2, r3
 8002624:	f000 f8c8 	bl	80027b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2150      	movs	r1, #80	; 0x50
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f91f 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002634:	e02c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002642:	461a      	mov	r2, r3
 8002644:	f000 f8e6 	bl	8002814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2160      	movs	r1, #96	; 0x60
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f90f 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002654:	e01c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8a8 	bl	80027b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f8ff 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002674:	e00c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f000 f8f6 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002686:	e003      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e000      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800268e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a29      	ldr	r2, [pc, #164]	; (80027ac <TIM_Base_SetConfig+0xb8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x30>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x30>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <TIM_Base_SetConfig+0xbc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x30>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <TIM_Base_SetConfig+0xc0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <TIM_Base_SetConfig+0xb8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0x62>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <TIM_Base_SetConfig+0xbc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <TIM_Base_SetConfig+0xc0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <TIM_Base_SetConfig+0xb8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d103      	bne.n	800279c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	615a      	str	r2, [r3, #20]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800

080027b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f023 0201 	bic.w	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 030a 	bic.w	r3, r3, #10
 80027f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0210 	bic.w	r2, r3, #16
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800283e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	621a      	str	r2, [r3, #32]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	f043 0307 	orr.w	r3, r3, #7
 8002894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	609a      	str	r2, [r3, #8]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e046      	b.n	800298a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d009      	beq.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10c      	bne.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800

080029a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e042      	b.n	8002a5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fc0e 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f91d 	bl	8002c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d16d      	bne.n	8002b60 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_UART_Transmit+0x2c>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e066      	b.n	8002b62 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fc6f 	bl	8001384 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d108      	bne.n	8002ad0 <HAL_UART_Transmit+0x6c>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e003      	b.n	8002ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ad8:	e02a      	b.n	8002b30 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f840 	bl	8002b6a <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e036      	b.n	8002b62 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e007      	b.n	8002b22 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1cf      	bne.n	8002ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f810 	bl	8002b6a <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e006      	b.n	8002b62 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e000      	b.n	8002b62 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b090      	sub	sp, #64	; 0x40
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7a:	e050      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d04c      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b8a:	f7fe fbfb 	bl	8001384 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d241      	bcs.n	8002c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bba:	637a      	str	r2, [r7, #52]	; 0x34
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e5      	bne.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	e853 3f00 	ldrex	r3, [r3]
 8002bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3314      	adds	r3, #20
 8002bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bee:	623a      	str	r2, [r7, #32]
 8002bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	69f9      	ldr	r1, [r7, #28]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e5      	bne.n	8002bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e00f      	b.n	8002c3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d09f      	beq.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3740      	adds	r7, #64	; 0x40
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c82:	f023 030c 	bic.w	r3, r3, #12
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <UART_SetConfig+0x114>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d103      	bne.n	8002cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cb0:	f7ff fa58 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	e002      	b.n	8002cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f7ff fa40 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <UART_SetConfig+0x118>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	0119      	lsls	r1, r3, #4
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009a      	lsls	r2, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <UART_SetConfig+0x118>)
 8002cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2064      	movs	r0, #100	; 0x64
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	; 0x32
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <UART_SetConfig+0x118>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d14:	4419      	add	r1, r3
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009a      	lsls	r2, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <UART_SetConfig+0x118>)
 8002d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	3332      	adds	r3, #50	; 0x32
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <UART_SetConfig+0x118>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	440a      	add	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <__cvt>:
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d6a:	461f      	mov	r7, r3
 8002d6c:	bfbb      	ittet	lt
 8002d6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	461f      	movlt	r7, r3
 8002d74:	2300      	movge	r3, #0
 8002d76:	232d      	movlt	r3, #45	; 0x2d
 8002d78:	b088      	sub	sp, #32
 8002d7a:	4614      	mov	r4, r2
 8002d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d80:	7013      	strb	r3, [r2, #0]
 8002d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002d84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002d88:	f023 0820 	bic.w	r8, r3, #32
 8002d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d90:	d005      	beq.n	8002d9e <__cvt+0x3a>
 8002d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002d96:	d100      	bne.n	8002d9a <__cvt+0x36>
 8002d98:	3501      	adds	r5, #1
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e000      	b.n	8002da0 <__cvt+0x3c>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	aa07      	add	r2, sp, #28
 8002da2:	9204      	str	r2, [sp, #16]
 8002da4:	aa06      	add	r2, sp, #24
 8002da6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002daa:	e9cd 3500 	strd	r3, r5, [sp]
 8002dae:	4622      	mov	r2, r4
 8002db0:	463b      	mov	r3, r7
 8002db2:	f000 fe65 	bl	8003a80 <_dtoa_r>
 8002db6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002dba:	4606      	mov	r6, r0
 8002dbc:	d102      	bne.n	8002dc4 <__cvt+0x60>
 8002dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002dc0:	07db      	lsls	r3, r3, #31
 8002dc2:	d522      	bpl.n	8002e0a <__cvt+0xa6>
 8002dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002dc8:	eb06 0905 	add.w	r9, r6, r5
 8002dcc:	d110      	bne.n	8002df0 <__cvt+0x8c>
 8002dce:	7833      	ldrb	r3, [r6, #0]
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d10a      	bne.n	8002dea <__cvt+0x86>
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4639      	mov	r1, r7
 8002ddc:	f7fd fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8002de0:	b918      	cbnz	r0, 8002dea <__cvt+0x86>
 8002de2:	f1c5 0501 	rsb	r5, r5, #1
 8002de6:	f8ca 5000 	str.w	r5, [sl]
 8002dea:	f8da 3000 	ldr.w	r3, [sl]
 8002dee:	4499      	add	r9, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	2300      	movs	r3, #0
 8002df4:	4620      	mov	r0, r4
 8002df6:	4639      	mov	r1, r7
 8002df8:	f7fd fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8002dfc:	b108      	cbz	r0, 8002e02 <__cvt+0x9e>
 8002dfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e02:	2230      	movs	r2, #48	; 0x30
 8002e04:	9b07      	ldr	r3, [sp, #28]
 8002e06:	454b      	cmp	r3, r9
 8002e08:	d307      	bcc.n	8002e1a <__cvt+0xb6>
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	9b07      	ldr	r3, [sp, #28]
 8002e0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002e10:	1b9b      	subs	r3, r3, r6
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	b008      	add	sp, #32
 8002e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	9107      	str	r1, [sp, #28]
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e7f0      	b.n	8002e04 <__cvt+0xa0>

08002e22 <__exponent>:
 8002e22:	4603      	mov	r3, r0
 8002e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e26:	2900      	cmp	r1, #0
 8002e28:	f803 2b02 	strb.w	r2, [r3], #2
 8002e2c:	bfb6      	itet	lt
 8002e2e:	222d      	movlt	r2, #45	; 0x2d
 8002e30:	222b      	movge	r2, #43	; 0x2b
 8002e32:	4249      	neglt	r1, r1
 8002e34:	2909      	cmp	r1, #9
 8002e36:	7042      	strb	r2, [r0, #1]
 8002e38:	dd2a      	ble.n	8002e90 <__exponent+0x6e>
 8002e3a:	f10d 0207 	add.w	r2, sp, #7
 8002e3e:	4617      	mov	r7, r2
 8002e40:	260a      	movs	r6, #10
 8002e42:	fb91 f5f6 	sdiv	r5, r1, r6
 8002e46:	4694      	mov	ip, r2
 8002e48:	fb06 1415 	mls	r4, r6, r5, r1
 8002e4c:	3430      	adds	r4, #48	; 0x30
 8002e4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002e52:	460c      	mov	r4, r1
 8002e54:	2c63      	cmp	r4, #99	; 0x63
 8002e56:	4629      	mov	r1, r5
 8002e58:	f102 32ff 	add.w	r2, r2, #4294967295
 8002e5c:	dcf1      	bgt.n	8002e42 <__exponent+0x20>
 8002e5e:	3130      	adds	r1, #48	; 0x30
 8002e60:	f1ac 0402 	sub.w	r4, ip, #2
 8002e64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e68:	4622      	mov	r2, r4
 8002e6a:	1c41      	adds	r1, r0, #1
 8002e6c:	42ba      	cmp	r2, r7
 8002e6e:	d30a      	bcc.n	8002e86 <__exponent+0x64>
 8002e70:	f10d 0209 	add.w	r2, sp, #9
 8002e74:	eba2 020c 	sub.w	r2, r2, ip
 8002e78:	42bc      	cmp	r4, r7
 8002e7a:	bf88      	it	hi
 8002e7c:	2200      	movhi	r2, #0
 8002e7e:	4413      	add	r3, r2
 8002e80:	1a18      	subs	r0, r3, r0
 8002e82:	b003      	add	sp, #12
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002e8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002e8e:	e7ed      	b.n	8002e6c <__exponent+0x4a>
 8002e90:	2330      	movs	r3, #48	; 0x30
 8002e92:	3130      	adds	r1, #48	; 0x30
 8002e94:	7083      	strb	r3, [r0, #2]
 8002e96:	70c1      	strb	r1, [r0, #3]
 8002e98:	1d03      	adds	r3, r0, #4
 8002e9a:	e7f1      	b.n	8002e80 <__exponent+0x5e>

08002e9c <_printf_float>:
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	b091      	sub	sp, #68	; 0x44
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002ea8:	4616      	mov	r6, r2
 8002eaa:	461f      	mov	r7, r3
 8002eac:	4605      	mov	r5, r0
 8002eae:	f000 fcd7 	bl	8003860 <_localeconv_r>
 8002eb2:	6803      	ldr	r3, [r0, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb8:	f7fd f94a 	bl	8000150 <strlen>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	930e      	str	r3, [sp, #56]	; 0x38
 8002ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec4:	900a      	str	r0, [sp, #40]	; 0x28
 8002ec6:	3307      	adds	r3, #7
 8002ec8:	f023 0307 	bic.w	r3, r3, #7
 8002ecc:	f103 0208 	add.w	r2, r3, #8
 8002ed0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8002ed8:	f8c8 2000 	str.w	r2, [r8]
 8002edc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	4643      	mov	r3, r8
 8002ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ee8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8002eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef2:	4650      	mov	r0, sl
 8002ef4:	4b9c      	ldr	r3, [pc, #624]	; (8003168 <_printf_float+0x2cc>)
 8002ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ef8:	f7fd fd88 	bl	8000a0c <__aeabi_dcmpun>
 8002efc:	bb70      	cbnz	r0, 8002f5c <_printf_float+0xc0>
 8002efe:	f04f 32ff 	mov.w	r2, #4294967295
 8002f02:	4650      	mov	r0, sl
 8002f04:	4b98      	ldr	r3, [pc, #608]	; (8003168 <_printf_float+0x2cc>)
 8002f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f08:	f7fd fd62 	bl	80009d0 <__aeabi_dcmple>
 8002f0c:	bb30      	cbnz	r0, 8002f5c <_printf_float+0xc0>
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2300      	movs	r3, #0
 8002f12:	4650      	mov	r0, sl
 8002f14:	4641      	mov	r1, r8
 8002f16:	f7fd fd51 	bl	80009bc <__aeabi_dcmplt>
 8002f1a:	b110      	cbz	r0, 8002f22 <_printf_float+0x86>
 8002f1c:	232d      	movs	r3, #45	; 0x2d
 8002f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f22:	4a92      	ldr	r2, [pc, #584]	; (800316c <_printf_float+0x2d0>)
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <_printf_float+0x2d4>)
 8002f26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002f2a:	bf94      	ite	ls
 8002f2c:	4690      	movls	r8, r2
 8002f2e:	4698      	movhi	r8, r3
 8002f30:	2303      	movs	r3, #3
 8002f32:	f04f 0a00 	mov.w	sl, #0
 8002f36:	6123      	str	r3, [r4, #16]
 8002f38:	f02b 0304 	bic.w	r3, fp, #4
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	4633      	mov	r3, r6
 8002f40:	4621      	mov	r1, r4
 8002f42:	4628      	mov	r0, r5
 8002f44:	9700      	str	r7, [sp, #0]
 8002f46:	aa0f      	add	r2, sp, #60	; 0x3c
 8002f48:	f000 f9d6 	bl	80032f8 <_printf_common>
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	f040 8090 	bne.w	8003072 <_printf_float+0x1d6>
 8002f52:	f04f 30ff 	mov.w	r0, #4294967295
 8002f56:	b011      	add	sp, #68	; 0x44
 8002f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5c:	4652      	mov	r2, sl
 8002f5e:	4643      	mov	r3, r8
 8002f60:	4650      	mov	r0, sl
 8002f62:	4641      	mov	r1, r8
 8002f64:	f7fd fd52 	bl	8000a0c <__aeabi_dcmpun>
 8002f68:	b148      	cbz	r0, 8002f7e <_printf_float+0xe2>
 8002f6a:	f1b8 0f00 	cmp.w	r8, #0
 8002f6e:	bfb8      	it	lt
 8002f70:	232d      	movlt	r3, #45	; 0x2d
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <_printf_float+0x2d8>)
 8002f74:	bfb8      	it	lt
 8002f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <_printf_float+0x2dc>)
 8002f7c:	e7d3      	b.n	8002f26 <_printf_float+0x8a>
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	d142      	bne.n	800300e <_printf_float+0x172>
 8002f88:	2306      	movs	r3, #6
 8002f8a:	6063      	str	r3, [r4, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9206      	str	r2, [sp, #24]
 8002f90:	aa0e      	add	r2, sp, #56	; 0x38
 8002f92:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002f96:	aa0d      	add	r2, sp, #52	; 0x34
 8002f98:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002f9c:	9203      	str	r2, [sp, #12]
 8002f9e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002fa2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	4652      	mov	r2, sl
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8002fb4:	f7ff fed6 	bl	8002d64 <__cvt>
 8002fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fba:	4680      	mov	r8, r0
 8002fbc:	2947      	cmp	r1, #71	; 0x47
 8002fbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fc0:	d108      	bne.n	8002fd4 <_printf_float+0x138>
 8002fc2:	1cc8      	adds	r0, r1, #3
 8002fc4:	db02      	blt.n	8002fcc <_printf_float+0x130>
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	4299      	cmp	r1, r3
 8002fca:	dd40      	ble.n	800304e <_printf_float+0x1b2>
 8002fcc:	f1a9 0902 	sub.w	r9, r9, #2
 8002fd0:	fa5f f989 	uxtb.w	r9, r9
 8002fd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002fd8:	d81f      	bhi.n	800301a <_printf_float+0x17e>
 8002fda:	464a      	mov	r2, r9
 8002fdc:	3901      	subs	r1, #1
 8002fde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002fe2:	910d      	str	r1, [sp, #52]	; 0x34
 8002fe4:	f7ff ff1d 	bl	8002e22 <__exponent>
 8002fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fea:	4682      	mov	sl, r0
 8002fec:	1813      	adds	r3, r2, r0
 8002fee:	2a01      	cmp	r2, #1
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	dc02      	bgt.n	8002ffa <_printf_float+0x15e>
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	07d2      	lsls	r2, r2, #31
 8002ff8:	d501      	bpl.n	8002ffe <_printf_float+0x162>
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	6123      	str	r3, [r4, #16]
 8002ffe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003002:	2b00      	cmp	r3, #0
 8003004:	d09b      	beq.n	8002f3e <_printf_float+0xa2>
 8003006:	232d      	movs	r3, #45	; 0x2d
 8003008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800300c:	e797      	b.n	8002f3e <_printf_float+0xa2>
 800300e:	2947      	cmp	r1, #71	; 0x47
 8003010:	d1bc      	bne.n	8002f8c <_printf_float+0xf0>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ba      	bne.n	8002f8c <_printf_float+0xf0>
 8003016:	2301      	movs	r3, #1
 8003018:	e7b7      	b.n	8002f8a <_printf_float+0xee>
 800301a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800301e:	d118      	bne.n	8003052 <_printf_float+0x1b6>
 8003020:	2900      	cmp	r1, #0
 8003022:	6863      	ldr	r3, [r4, #4]
 8003024:	dd0b      	ble.n	800303e <_printf_float+0x1a2>
 8003026:	6121      	str	r1, [r4, #16]
 8003028:	b913      	cbnz	r3, 8003030 <_printf_float+0x194>
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	07d0      	lsls	r0, r2, #31
 800302e:	d502      	bpl.n	8003036 <_printf_float+0x19a>
 8003030:	3301      	adds	r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	6123      	str	r3, [r4, #16]
 8003036:	f04f 0a00 	mov.w	sl, #0
 800303a:	65a1      	str	r1, [r4, #88]	; 0x58
 800303c:	e7df      	b.n	8002ffe <_printf_float+0x162>
 800303e:	b913      	cbnz	r3, 8003046 <_printf_float+0x1aa>
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	07d2      	lsls	r2, r2, #31
 8003044:	d501      	bpl.n	800304a <_printf_float+0x1ae>
 8003046:	3302      	adds	r3, #2
 8003048:	e7f4      	b.n	8003034 <_printf_float+0x198>
 800304a:	2301      	movs	r3, #1
 800304c:	e7f2      	b.n	8003034 <_printf_float+0x198>
 800304e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003054:	4299      	cmp	r1, r3
 8003056:	db05      	blt.n	8003064 <_printf_float+0x1c8>
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	6121      	str	r1, [r4, #16]
 800305c:	07d8      	lsls	r0, r3, #31
 800305e:	d5ea      	bpl.n	8003036 <_printf_float+0x19a>
 8003060:	1c4b      	adds	r3, r1, #1
 8003062:	e7e7      	b.n	8003034 <_printf_float+0x198>
 8003064:	2900      	cmp	r1, #0
 8003066:	bfcc      	ite	gt
 8003068:	2201      	movgt	r2, #1
 800306a:	f1c1 0202 	rsble	r2, r1, #2
 800306e:	4413      	add	r3, r2
 8003070:	e7e0      	b.n	8003034 <_printf_float+0x198>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	055a      	lsls	r2, r3, #21
 8003076:	d407      	bmi.n	8003088 <_printf_float+0x1ec>
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	4642      	mov	r2, r8
 800307c:	4631      	mov	r1, r6
 800307e:	4628      	mov	r0, r5
 8003080:	47b8      	blx	r7
 8003082:	3001      	adds	r0, #1
 8003084:	d12b      	bne.n	80030de <_printf_float+0x242>
 8003086:	e764      	b.n	8002f52 <_printf_float+0xb6>
 8003088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800308c:	f240 80dd 	bls.w	800324a <_printf_float+0x3ae>
 8003090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003094:	2200      	movs	r2, #0
 8003096:	2300      	movs	r3, #0
 8003098:	f7fd fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800309c:	2800      	cmp	r0, #0
 800309e:	d033      	beq.n	8003108 <_printf_float+0x26c>
 80030a0:	2301      	movs	r3, #1
 80030a2:	4631      	mov	r1, r6
 80030a4:	4628      	mov	r0, r5
 80030a6:	4a35      	ldr	r2, [pc, #212]	; (800317c <_printf_float+0x2e0>)
 80030a8:	47b8      	blx	r7
 80030aa:	3001      	adds	r0, #1
 80030ac:	f43f af51 	beq.w	8002f52 <_printf_float+0xb6>
 80030b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80030b4:	429a      	cmp	r2, r3
 80030b6:	db02      	blt.n	80030be <_printf_float+0x222>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	07d8      	lsls	r0, r3, #31
 80030bc:	d50f      	bpl.n	80030de <_printf_float+0x242>
 80030be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	47b8      	blx	r7
 80030c8:	3001      	adds	r0, #1
 80030ca:	f43f af42 	beq.w	8002f52 <_printf_float+0xb6>
 80030ce:	f04f 0800 	mov.w	r8, #0
 80030d2:	f104 091a 	add.w	r9, r4, #26
 80030d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030d8:	3b01      	subs	r3, #1
 80030da:	4543      	cmp	r3, r8
 80030dc:	dc09      	bgt.n	80030f2 <_printf_float+0x256>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	079b      	lsls	r3, r3, #30
 80030e2:	f100 8104 	bmi.w	80032ee <_printf_float+0x452>
 80030e6:	68e0      	ldr	r0, [r4, #12]
 80030e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030ea:	4298      	cmp	r0, r3
 80030ec:	bfb8      	it	lt
 80030ee:	4618      	movlt	r0, r3
 80030f0:	e731      	b.n	8002f56 <_printf_float+0xba>
 80030f2:	2301      	movs	r3, #1
 80030f4:	464a      	mov	r2, r9
 80030f6:	4631      	mov	r1, r6
 80030f8:	4628      	mov	r0, r5
 80030fa:	47b8      	blx	r7
 80030fc:	3001      	adds	r0, #1
 80030fe:	f43f af28 	beq.w	8002f52 <_printf_float+0xb6>
 8003102:	f108 0801 	add.w	r8, r8, #1
 8003106:	e7e6      	b.n	80030d6 <_printf_float+0x23a>
 8003108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800310a:	2b00      	cmp	r3, #0
 800310c:	dc38      	bgt.n	8003180 <_printf_float+0x2e4>
 800310e:	2301      	movs	r3, #1
 8003110:	4631      	mov	r1, r6
 8003112:	4628      	mov	r0, r5
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <_printf_float+0x2e0>)
 8003116:	47b8      	blx	r7
 8003118:	3001      	adds	r0, #1
 800311a:	f43f af1a 	beq.w	8002f52 <_printf_float+0xb6>
 800311e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003122:	4313      	orrs	r3, r2
 8003124:	d102      	bne.n	800312c <_printf_float+0x290>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	07d9      	lsls	r1, r3, #31
 800312a:	d5d8      	bpl.n	80030de <_printf_float+0x242>
 800312c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003130:	4631      	mov	r1, r6
 8003132:	4628      	mov	r0, r5
 8003134:	47b8      	blx	r7
 8003136:	3001      	adds	r0, #1
 8003138:	f43f af0b 	beq.w	8002f52 <_printf_float+0xb6>
 800313c:	f04f 0900 	mov.w	r9, #0
 8003140:	f104 0a1a 	add.w	sl, r4, #26
 8003144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003146:	425b      	negs	r3, r3
 8003148:	454b      	cmp	r3, r9
 800314a:	dc01      	bgt.n	8003150 <_printf_float+0x2b4>
 800314c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800314e:	e794      	b.n	800307a <_printf_float+0x1de>
 8003150:	2301      	movs	r3, #1
 8003152:	4652      	mov	r2, sl
 8003154:	4631      	mov	r1, r6
 8003156:	4628      	mov	r0, r5
 8003158:	47b8      	blx	r7
 800315a:	3001      	adds	r0, #1
 800315c:	f43f aef9 	beq.w	8002f52 <_printf_float+0xb6>
 8003160:	f109 0901 	add.w	r9, r9, #1
 8003164:	e7ee      	b.n	8003144 <_printf_float+0x2a8>
 8003166:	bf00      	nop
 8003168:	7fefffff 	.word	0x7fefffff
 800316c:	08005722 	.word	0x08005722
 8003170:	08005726 	.word	0x08005726
 8003174:	0800572a 	.word	0x0800572a
 8003178:	0800572e 	.word	0x0800572e
 800317c:	08005732 	.word	0x08005732
 8003180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003184:	429a      	cmp	r2, r3
 8003186:	bfa8      	it	ge
 8003188:	461a      	movge	r2, r3
 800318a:	2a00      	cmp	r2, #0
 800318c:	4691      	mov	r9, r2
 800318e:	dc37      	bgt.n	8003200 <_printf_float+0x364>
 8003190:	f04f 0b00 	mov.w	fp, #0
 8003194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003198:	f104 021a 	add.w	r2, r4, #26
 800319c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80031a0:	ebaa 0309 	sub.w	r3, sl, r9
 80031a4:	455b      	cmp	r3, fp
 80031a6:	dc33      	bgt.n	8003210 <_printf_float+0x374>
 80031a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031ac:	429a      	cmp	r2, r3
 80031ae:	db3b      	blt.n	8003228 <_printf_float+0x38c>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	07da      	lsls	r2, r3, #31
 80031b4:	d438      	bmi.n	8003228 <_printf_float+0x38c>
 80031b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80031ba:	eba2 0903 	sub.w	r9, r2, r3
 80031be:	eba2 020a 	sub.w	r2, r2, sl
 80031c2:	4591      	cmp	r9, r2
 80031c4:	bfa8      	it	ge
 80031c6:	4691      	movge	r9, r2
 80031c8:	f1b9 0f00 	cmp.w	r9, #0
 80031cc:	dc34      	bgt.n	8003238 <_printf_float+0x39c>
 80031ce:	f04f 0800 	mov.w	r8, #0
 80031d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031d6:	f104 0a1a 	add.w	sl, r4, #26
 80031da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	eba3 0309 	sub.w	r3, r3, r9
 80031e4:	4543      	cmp	r3, r8
 80031e6:	f77f af7a 	ble.w	80030de <_printf_float+0x242>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4652      	mov	r2, sl
 80031ee:	4631      	mov	r1, r6
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b8      	blx	r7
 80031f4:	3001      	adds	r0, #1
 80031f6:	f43f aeac 	beq.w	8002f52 <_printf_float+0xb6>
 80031fa:	f108 0801 	add.w	r8, r8, #1
 80031fe:	e7ec      	b.n	80031da <_printf_float+0x33e>
 8003200:	4613      	mov	r3, r2
 8003202:	4631      	mov	r1, r6
 8003204:	4642      	mov	r2, r8
 8003206:	4628      	mov	r0, r5
 8003208:	47b8      	blx	r7
 800320a:	3001      	adds	r0, #1
 800320c:	d1c0      	bne.n	8003190 <_printf_float+0x2f4>
 800320e:	e6a0      	b.n	8002f52 <_printf_float+0xb6>
 8003210:	2301      	movs	r3, #1
 8003212:	4631      	mov	r1, r6
 8003214:	4628      	mov	r0, r5
 8003216:	920b      	str	r2, [sp, #44]	; 0x2c
 8003218:	47b8      	blx	r7
 800321a:	3001      	adds	r0, #1
 800321c:	f43f ae99 	beq.w	8002f52 <_printf_float+0xb6>
 8003220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003222:	f10b 0b01 	add.w	fp, fp, #1
 8003226:	e7b9      	b.n	800319c <_printf_float+0x300>
 8003228:	4631      	mov	r1, r6
 800322a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800322e:	4628      	mov	r0, r5
 8003230:	47b8      	blx	r7
 8003232:	3001      	adds	r0, #1
 8003234:	d1bf      	bne.n	80031b6 <_printf_float+0x31a>
 8003236:	e68c      	b.n	8002f52 <_printf_float+0xb6>
 8003238:	464b      	mov	r3, r9
 800323a:	4631      	mov	r1, r6
 800323c:	4628      	mov	r0, r5
 800323e:	eb08 020a 	add.w	r2, r8, sl
 8003242:	47b8      	blx	r7
 8003244:	3001      	adds	r0, #1
 8003246:	d1c2      	bne.n	80031ce <_printf_float+0x332>
 8003248:	e683      	b.n	8002f52 <_printf_float+0xb6>
 800324a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800324c:	2a01      	cmp	r2, #1
 800324e:	dc01      	bgt.n	8003254 <_printf_float+0x3b8>
 8003250:	07db      	lsls	r3, r3, #31
 8003252:	d539      	bpl.n	80032c8 <_printf_float+0x42c>
 8003254:	2301      	movs	r3, #1
 8003256:	4642      	mov	r2, r8
 8003258:	4631      	mov	r1, r6
 800325a:	4628      	mov	r0, r5
 800325c:	47b8      	blx	r7
 800325e:	3001      	adds	r0, #1
 8003260:	f43f ae77 	beq.w	8002f52 <_printf_float+0xb6>
 8003264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003268:	4631      	mov	r1, r6
 800326a:	4628      	mov	r0, r5
 800326c:	47b8      	blx	r7
 800326e:	3001      	adds	r0, #1
 8003270:	f43f ae6f 	beq.w	8002f52 <_printf_float+0xb6>
 8003274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003278:	2200      	movs	r2, #0
 800327a:	2300      	movs	r3, #0
 800327c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003280:	f7fd fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8003284:	b9d8      	cbnz	r0, 80032be <_printf_float+0x422>
 8003286:	f109 33ff 	add.w	r3, r9, #4294967295
 800328a:	f108 0201 	add.w	r2, r8, #1
 800328e:	4631      	mov	r1, r6
 8003290:	4628      	mov	r0, r5
 8003292:	47b8      	blx	r7
 8003294:	3001      	adds	r0, #1
 8003296:	d10e      	bne.n	80032b6 <_printf_float+0x41a>
 8003298:	e65b      	b.n	8002f52 <_printf_float+0xb6>
 800329a:	2301      	movs	r3, #1
 800329c:	464a      	mov	r2, r9
 800329e:	4631      	mov	r1, r6
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b8      	blx	r7
 80032a4:	3001      	adds	r0, #1
 80032a6:	f43f ae54 	beq.w	8002f52 <_printf_float+0xb6>
 80032aa:	f108 0801 	add.w	r8, r8, #1
 80032ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b0:	3b01      	subs	r3, #1
 80032b2:	4543      	cmp	r3, r8
 80032b4:	dcf1      	bgt.n	800329a <_printf_float+0x3fe>
 80032b6:	4653      	mov	r3, sl
 80032b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80032bc:	e6de      	b.n	800307c <_printf_float+0x1e0>
 80032be:	f04f 0800 	mov.w	r8, #0
 80032c2:	f104 091a 	add.w	r9, r4, #26
 80032c6:	e7f2      	b.n	80032ae <_printf_float+0x412>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4642      	mov	r2, r8
 80032cc:	e7df      	b.n	800328e <_printf_float+0x3f2>
 80032ce:	2301      	movs	r3, #1
 80032d0:	464a      	mov	r2, r9
 80032d2:	4631      	mov	r1, r6
 80032d4:	4628      	mov	r0, r5
 80032d6:	47b8      	blx	r7
 80032d8:	3001      	adds	r0, #1
 80032da:	f43f ae3a 	beq.w	8002f52 <_printf_float+0xb6>
 80032de:	f108 0801 	add.w	r8, r8, #1
 80032e2:	68e3      	ldr	r3, [r4, #12]
 80032e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80032e6:	1a5b      	subs	r3, r3, r1
 80032e8:	4543      	cmp	r3, r8
 80032ea:	dcf0      	bgt.n	80032ce <_printf_float+0x432>
 80032ec:	e6fb      	b.n	80030e6 <_printf_float+0x24a>
 80032ee:	f04f 0800 	mov.w	r8, #0
 80032f2:	f104 0919 	add.w	r9, r4, #25
 80032f6:	e7f4      	b.n	80032e2 <_printf_float+0x446>

080032f8 <_printf_common>:
 80032f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032fc:	4616      	mov	r6, r2
 80032fe:	4699      	mov	r9, r3
 8003300:	688a      	ldr	r2, [r1, #8]
 8003302:	690b      	ldr	r3, [r1, #16]
 8003304:	4607      	mov	r7, r0
 8003306:	4293      	cmp	r3, r2
 8003308:	bfb8      	it	lt
 800330a:	4613      	movlt	r3, r2
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003312:	460c      	mov	r4, r1
 8003314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003318:	b10a      	cbz	r2, 800331e <_printf_common+0x26>
 800331a:	3301      	adds	r3, #1
 800331c:	6033      	str	r3, [r6, #0]
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	0699      	lsls	r1, r3, #26
 8003322:	bf42      	ittt	mi
 8003324:	6833      	ldrmi	r3, [r6, #0]
 8003326:	3302      	addmi	r3, #2
 8003328:	6033      	strmi	r3, [r6, #0]
 800332a:	6825      	ldr	r5, [r4, #0]
 800332c:	f015 0506 	ands.w	r5, r5, #6
 8003330:	d106      	bne.n	8003340 <_printf_common+0x48>
 8003332:	f104 0a19 	add.w	sl, r4, #25
 8003336:	68e3      	ldr	r3, [r4, #12]
 8003338:	6832      	ldr	r2, [r6, #0]
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	42ab      	cmp	r3, r5
 800333e:	dc2b      	bgt.n	8003398 <_printf_common+0xa0>
 8003340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003344:	1e13      	subs	r3, r2, #0
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	bf18      	it	ne
 800334a:	2301      	movne	r3, #1
 800334c:	0692      	lsls	r2, r2, #26
 800334e:	d430      	bmi.n	80033b2 <_printf_common+0xba>
 8003350:	4649      	mov	r1, r9
 8003352:	4638      	mov	r0, r7
 8003354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003358:	47c0      	blx	r8
 800335a:	3001      	adds	r0, #1
 800335c:	d023      	beq.n	80033a6 <_printf_common+0xae>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	6922      	ldr	r2, [r4, #16]
 8003362:	f003 0306 	and.w	r3, r3, #6
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf14      	ite	ne
 800336a:	2500      	movne	r5, #0
 800336c:	6833      	ldreq	r3, [r6, #0]
 800336e:	f04f 0600 	mov.w	r6, #0
 8003372:	bf08      	it	eq
 8003374:	68e5      	ldreq	r5, [r4, #12]
 8003376:	f104 041a 	add.w	r4, r4, #26
 800337a:	bf08      	it	eq
 800337c:	1aed      	subeq	r5, r5, r3
 800337e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003382:	bf08      	it	eq
 8003384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003388:	4293      	cmp	r3, r2
 800338a:	bfc4      	itt	gt
 800338c:	1a9b      	subgt	r3, r3, r2
 800338e:	18ed      	addgt	r5, r5, r3
 8003390:	42b5      	cmp	r5, r6
 8003392:	d11a      	bne.n	80033ca <_printf_common+0xd2>
 8003394:	2000      	movs	r0, #0
 8003396:	e008      	b.n	80033aa <_printf_common+0xb2>
 8003398:	2301      	movs	r3, #1
 800339a:	4652      	mov	r2, sl
 800339c:	4649      	mov	r1, r9
 800339e:	4638      	mov	r0, r7
 80033a0:	47c0      	blx	r8
 80033a2:	3001      	adds	r0, #1
 80033a4:	d103      	bne.n	80033ae <_printf_common+0xb6>
 80033a6:	f04f 30ff 	mov.w	r0, #4294967295
 80033aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ae:	3501      	adds	r5, #1
 80033b0:	e7c1      	b.n	8003336 <_printf_common+0x3e>
 80033b2:	2030      	movs	r0, #48	; 0x30
 80033b4:	18e1      	adds	r1, r4, r3
 80033b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033c0:	4422      	add	r2, r4
 80033c2:	3302      	adds	r3, #2
 80033c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033c8:	e7c2      	b.n	8003350 <_printf_common+0x58>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4622      	mov	r2, r4
 80033ce:	4649      	mov	r1, r9
 80033d0:	4638      	mov	r0, r7
 80033d2:	47c0      	blx	r8
 80033d4:	3001      	adds	r0, #1
 80033d6:	d0e6      	beq.n	80033a6 <_printf_common+0xae>
 80033d8:	3601      	adds	r6, #1
 80033da:	e7d9      	b.n	8003390 <_printf_common+0x98>

080033dc <_printf_i>:
 80033dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	7e0f      	ldrb	r7, [r1, #24]
 80033e2:	4691      	mov	r9, r2
 80033e4:	2f78      	cmp	r7, #120	; 0x78
 80033e6:	4680      	mov	r8, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	469a      	mov	sl, r3
 80033ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033f2:	d807      	bhi.n	8003404 <_printf_i+0x28>
 80033f4:	2f62      	cmp	r7, #98	; 0x62
 80033f6:	d80a      	bhi.n	800340e <_printf_i+0x32>
 80033f8:	2f00      	cmp	r7, #0
 80033fa:	f000 80d5 	beq.w	80035a8 <_printf_i+0x1cc>
 80033fe:	2f58      	cmp	r7, #88	; 0x58
 8003400:	f000 80c1 	beq.w	8003586 <_printf_i+0x1aa>
 8003404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800340c:	e03a      	b.n	8003484 <_printf_i+0xa8>
 800340e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003412:	2b15      	cmp	r3, #21
 8003414:	d8f6      	bhi.n	8003404 <_printf_i+0x28>
 8003416:	a101      	add	r1, pc, #4	; (adr r1, 800341c <_printf_i+0x40>)
 8003418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800341c:	08003475 	.word	0x08003475
 8003420:	08003489 	.word	0x08003489
 8003424:	08003405 	.word	0x08003405
 8003428:	08003405 	.word	0x08003405
 800342c:	08003405 	.word	0x08003405
 8003430:	08003405 	.word	0x08003405
 8003434:	08003489 	.word	0x08003489
 8003438:	08003405 	.word	0x08003405
 800343c:	08003405 	.word	0x08003405
 8003440:	08003405 	.word	0x08003405
 8003444:	08003405 	.word	0x08003405
 8003448:	0800358f 	.word	0x0800358f
 800344c:	080034b5 	.word	0x080034b5
 8003450:	08003549 	.word	0x08003549
 8003454:	08003405 	.word	0x08003405
 8003458:	08003405 	.word	0x08003405
 800345c:	080035b1 	.word	0x080035b1
 8003460:	08003405 	.word	0x08003405
 8003464:	080034b5 	.word	0x080034b5
 8003468:	08003405 	.word	0x08003405
 800346c:	08003405 	.word	0x08003405
 8003470:	08003551 	.word	0x08003551
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	602a      	str	r2, [r5, #0]
 800347c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003484:	2301      	movs	r3, #1
 8003486:	e0a0      	b.n	80035ca <_printf_i+0x1ee>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	682b      	ldr	r3, [r5, #0]
 800348c:	0607      	lsls	r7, r0, #24
 800348e:	f103 0104 	add.w	r1, r3, #4
 8003492:	6029      	str	r1, [r5, #0]
 8003494:	d501      	bpl.n	800349a <_printf_i+0xbe>
 8003496:	681e      	ldr	r6, [r3, #0]
 8003498:	e003      	b.n	80034a2 <_printf_i+0xc6>
 800349a:	0646      	lsls	r6, r0, #25
 800349c:	d5fb      	bpl.n	8003496 <_printf_i+0xba>
 800349e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034a2:	2e00      	cmp	r6, #0
 80034a4:	da03      	bge.n	80034ae <_printf_i+0xd2>
 80034a6:	232d      	movs	r3, #45	; 0x2d
 80034a8:	4276      	negs	r6, r6
 80034aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ae:	230a      	movs	r3, #10
 80034b0:	4859      	ldr	r0, [pc, #356]	; (8003618 <_printf_i+0x23c>)
 80034b2:	e012      	b.n	80034da <_printf_i+0xfe>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	1d19      	adds	r1, r3, #4
 80034ba:	6029      	str	r1, [r5, #0]
 80034bc:	0605      	lsls	r5, r0, #24
 80034be:	d501      	bpl.n	80034c4 <_printf_i+0xe8>
 80034c0:	681e      	ldr	r6, [r3, #0]
 80034c2:	e002      	b.n	80034ca <_printf_i+0xee>
 80034c4:	0641      	lsls	r1, r0, #25
 80034c6:	d5fb      	bpl.n	80034c0 <_printf_i+0xe4>
 80034c8:	881e      	ldrh	r6, [r3, #0]
 80034ca:	2f6f      	cmp	r7, #111	; 0x6f
 80034cc:	bf0c      	ite	eq
 80034ce:	2308      	moveq	r3, #8
 80034d0:	230a      	movne	r3, #10
 80034d2:	4851      	ldr	r0, [pc, #324]	; (8003618 <_printf_i+0x23c>)
 80034d4:	2100      	movs	r1, #0
 80034d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034da:	6865      	ldr	r5, [r4, #4]
 80034dc:	2d00      	cmp	r5, #0
 80034de:	bfa8      	it	ge
 80034e0:	6821      	ldrge	r1, [r4, #0]
 80034e2:	60a5      	str	r5, [r4, #8]
 80034e4:	bfa4      	itt	ge
 80034e6:	f021 0104 	bicge.w	r1, r1, #4
 80034ea:	6021      	strge	r1, [r4, #0]
 80034ec:	b90e      	cbnz	r6, 80034f2 <_printf_i+0x116>
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	d04b      	beq.n	800358a <_printf_i+0x1ae>
 80034f2:	4615      	mov	r5, r2
 80034f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80034f8:	fb03 6711 	mls	r7, r3, r1, r6
 80034fc:	5dc7      	ldrb	r7, [r0, r7]
 80034fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003502:	4637      	mov	r7, r6
 8003504:	42bb      	cmp	r3, r7
 8003506:	460e      	mov	r6, r1
 8003508:	d9f4      	bls.n	80034f4 <_printf_i+0x118>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d10b      	bne.n	8003526 <_printf_i+0x14a>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	07de      	lsls	r6, r3, #31
 8003512:	d508      	bpl.n	8003526 <_printf_i+0x14a>
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	6861      	ldr	r1, [r4, #4]
 8003518:	4299      	cmp	r1, r3
 800351a:	bfde      	ittt	le
 800351c:	2330      	movle	r3, #48	; 0x30
 800351e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003526:	1b52      	subs	r2, r2, r5
 8003528:	6122      	str	r2, [r4, #16]
 800352a:	464b      	mov	r3, r9
 800352c:	4621      	mov	r1, r4
 800352e:	4640      	mov	r0, r8
 8003530:	f8cd a000 	str.w	sl, [sp]
 8003534:	aa03      	add	r2, sp, #12
 8003536:	f7ff fedf 	bl	80032f8 <_printf_common>
 800353a:	3001      	adds	r0, #1
 800353c:	d14a      	bne.n	80035d4 <_printf_i+0x1f8>
 800353e:	f04f 30ff 	mov.w	r0, #4294967295
 8003542:	b004      	add	sp, #16
 8003544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	2778      	movs	r7, #120	; 0x78
 8003552:	4832      	ldr	r0, [pc, #200]	; (800361c <_printf_i+0x240>)
 8003554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	6829      	ldr	r1, [r5, #0]
 800355c:	061f      	lsls	r7, r3, #24
 800355e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003562:	d402      	bmi.n	800356a <_printf_i+0x18e>
 8003564:	065f      	lsls	r7, r3, #25
 8003566:	bf48      	it	mi
 8003568:	b2b6      	uxthmi	r6, r6
 800356a:	07df      	lsls	r7, r3, #31
 800356c:	bf48      	it	mi
 800356e:	f043 0320 	orrmi.w	r3, r3, #32
 8003572:	6029      	str	r1, [r5, #0]
 8003574:	bf48      	it	mi
 8003576:	6023      	strmi	r3, [r4, #0]
 8003578:	b91e      	cbnz	r6, 8003582 <_printf_i+0x1a6>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	f023 0320 	bic.w	r3, r3, #32
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	2310      	movs	r3, #16
 8003584:	e7a6      	b.n	80034d4 <_printf_i+0xf8>
 8003586:	4824      	ldr	r0, [pc, #144]	; (8003618 <_printf_i+0x23c>)
 8003588:	e7e4      	b.n	8003554 <_printf_i+0x178>
 800358a:	4615      	mov	r5, r2
 800358c:	e7bd      	b.n	800350a <_printf_i+0x12e>
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	6826      	ldr	r6, [r4, #0]
 8003592:	1d18      	adds	r0, r3, #4
 8003594:	6961      	ldr	r1, [r4, #20]
 8003596:	6028      	str	r0, [r5, #0]
 8003598:	0635      	lsls	r5, r6, #24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	d501      	bpl.n	80035a2 <_printf_i+0x1c6>
 800359e:	6019      	str	r1, [r3, #0]
 80035a0:	e002      	b.n	80035a8 <_printf_i+0x1cc>
 80035a2:	0670      	lsls	r0, r6, #25
 80035a4:	d5fb      	bpl.n	800359e <_printf_i+0x1c2>
 80035a6:	8019      	strh	r1, [r3, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	4615      	mov	r5, r2
 80035ac:	6123      	str	r3, [r4, #16]
 80035ae:	e7bc      	b.n	800352a <_printf_i+0x14e>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	1d1a      	adds	r2, r3, #4
 80035b6:	602a      	str	r2, [r5, #0]
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 f9c6 	bl	800394e <memchr>
 80035c2:	b108      	cbz	r0, 80035c8 <_printf_i+0x1ec>
 80035c4:	1b40      	subs	r0, r0, r5
 80035c6:	6060      	str	r0, [r4, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	2300      	movs	r3, #0
 80035ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d2:	e7aa      	b.n	800352a <_printf_i+0x14e>
 80035d4:	462a      	mov	r2, r5
 80035d6:	4649      	mov	r1, r9
 80035d8:	4640      	mov	r0, r8
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	47d0      	blx	sl
 80035de:	3001      	adds	r0, #1
 80035e0:	d0ad      	beq.n	800353e <_printf_i+0x162>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	079b      	lsls	r3, r3, #30
 80035e6:	d413      	bmi.n	8003610 <_printf_i+0x234>
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	4298      	cmp	r0, r3
 80035ee:	bfb8      	it	lt
 80035f0:	4618      	movlt	r0, r3
 80035f2:	e7a6      	b.n	8003542 <_printf_i+0x166>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4632      	mov	r2, r6
 80035f8:	4649      	mov	r1, r9
 80035fa:	4640      	mov	r0, r8
 80035fc:	47d0      	blx	sl
 80035fe:	3001      	adds	r0, #1
 8003600:	d09d      	beq.n	800353e <_printf_i+0x162>
 8003602:	3501      	adds	r5, #1
 8003604:	68e3      	ldr	r3, [r4, #12]
 8003606:	9903      	ldr	r1, [sp, #12]
 8003608:	1a5b      	subs	r3, r3, r1
 800360a:	42ab      	cmp	r3, r5
 800360c:	dcf2      	bgt.n	80035f4 <_printf_i+0x218>
 800360e:	e7eb      	b.n	80035e8 <_printf_i+0x20c>
 8003610:	2500      	movs	r5, #0
 8003612:	f104 0619 	add.w	r6, r4, #25
 8003616:	e7f5      	b.n	8003604 <_printf_i+0x228>
 8003618:	08005734 	.word	0x08005734
 800361c:	08005745 	.word	0x08005745

08003620 <std>:
 8003620:	2300      	movs	r3, #0
 8003622:	b510      	push	{r4, lr}
 8003624:	4604      	mov	r4, r0
 8003626:	e9c0 3300 	strd	r3, r3, [r0]
 800362a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800362e:	6083      	str	r3, [r0, #8]
 8003630:	8181      	strh	r1, [r0, #12]
 8003632:	6643      	str	r3, [r0, #100]	; 0x64
 8003634:	81c2      	strh	r2, [r0, #14]
 8003636:	6183      	str	r3, [r0, #24]
 8003638:	4619      	mov	r1, r3
 800363a:	2208      	movs	r2, #8
 800363c:	305c      	adds	r0, #92	; 0x5c
 800363e:	f000 f906 	bl	800384e <memset>
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <std+0x58>)
 8003644:	6224      	str	r4, [r4, #32]
 8003646:	6263      	str	r3, [r4, #36]	; 0x24
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <std+0x5c>)
 800364a:	62a3      	str	r3, [r4, #40]	; 0x28
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <std+0x60>)
 800364e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <std+0x64>)
 8003652:	6323      	str	r3, [r4, #48]	; 0x30
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <std+0x68>)
 8003656:	429c      	cmp	r4, r3
 8003658:	d006      	beq.n	8003668 <std+0x48>
 800365a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800365e:	4294      	cmp	r4, r2
 8003660:	d002      	beq.n	8003668 <std+0x48>
 8003662:	33d0      	adds	r3, #208	; 0xd0
 8003664:	429c      	cmp	r4, r3
 8003666:	d105      	bne.n	8003674 <std+0x54>
 8003668:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003670:	f000 b96a 	b.w	8003948 <__retarget_lock_init_recursive>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	bf00      	nop
 8003678:	080037c9 	.word	0x080037c9
 800367c:	080037eb 	.word	0x080037eb
 8003680:	08003823 	.word	0x08003823
 8003684:	08003847 	.word	0x08003847
 8003688:	2000028c 	.word	0x2000028c

0800368c <stdio_exit_handler>:
 800368c:	4a02      	ldr	r2, [pc, #8]	; (8003698 <stdio_exit_handler+0xc>)
 800368e:	4903      	ldr	r1, [pc, #12]	; (800369c <stdio_exit_handler+0x10>)
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <stdio_exit_handler+0x14>)
 8003692:	f000 b869 	b.w	8003768 <_fwalk_sglue>
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c
 800369c:	080052b9 	.word	0x080052b9
 80036a0:	20000018 	.word	0x20000018

080036a4 <cleanup_stdio>:
 80036a4:	6841      	ldr	r1, [r0, #4]
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <cleanup_stdio+0x34>)
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4299      	cmp	r1, r3
 80036ac:	4604      	mov	r4, r0
 80036ae:	d001      	beq.n	80036b4 <cleanup_stdio+0x10>
 80036b0:	f001 fe02 	bl	80052b8 <_fflush_r>
 80036b4:	68a1      	ldr	r1, [r4, #8]
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <cleanup_stdio+0x38>)
 80036b8:	4299      	cmp	r1, r3
 80036ba:	d002      	beq.n	80036c2 <cleanup_stdio+0x1e>
 80036bc:	4620      	mov	r0, r4
 80036be:	f001 fdfb 	bl	80052b8 <_fflush_r>
 80036c2:	68e1      	ldr	r1, [r4, #12]
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <cleanup_stdio+0x3c>)
 80036c6:	4299      	cmp	r1, r3
 80036c8:	d004      	beq.n	80036d4 <cleanup_stdio+0x30>
 80036ca:	4620      	mov	r0, r4
 80036cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d0:	f001 bdf2 	b.w	80052b8 <_fflush_r>
 80036d4:	bd10      	pop	{r4, pc}
 80036d6:	bf00      	nop
 80036d8:	2000028c 	.word	0x2000028c
 80036dc:	200002f4 	.word	0x200002f4
 80036e0:	2000035c 	.word	0x2000035c

080036e4 <global_stdio_init.part.0>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <global_stdio_init.part.0+0x30>)
 80036e8:	4c0b      	ldr	r4, [pc, #44]	; (8003718 <global_stdio_init.part.0+0x34>)
 80036ea:	4a0c      	ldr	r2, [pc, #48]	; (800371c <global_stdio_init.part.0+0x38>)
 80036ec:	4620      	mov	r0, r4
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	2104      	movs	r1, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	f7ff ff94 	bl	8003620 <std>
 80036f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036fc:	2201      	movs	r2, #1
 80036fe:	2109      	movs	r1, #9
 8003700:	f7ff ff8e 	bl	8003620 <std>
 8003704:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003708:	2202      	movs	r2, #2
 800370a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370e:	2112      	movs	r1, #18
 8003710:	f7ff bf86 	b.w	8003620 <std>
 8003714:	200003c4 	.word	0x200003c4
 8003718:	2000028c 	.word	0x2000028c
 800371c:	0800368d 	.word	0x0800368d

08003720 <__sfp_lock_acquire>:
 8003720:	4801      	ldr	r0, [pc, #4]	; (8003728 <__sfp_lock_acquire+0x8>)
 8003722:	f000 b912 	b.w	800394a <__retarget_lock_acquire_recursive>
 8003726:	bf00      	nop
 8003728:	200003cd 	.word	0x200003cd

0800372c <__sfp_lock_release>:
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <__sfp_lock_release+0x8>)
 800372e:	f000 b90d 	b.w	800394c <__retarget_lock_release_recursive>
 8003732:	bf00      	nop
 8003734:	200003cd 	.word	0x200003cd

08003738 <__sinit>:
 8003738:	b510      	push	{r4, lr}
 800373a:	4604      	mov	r4, r0
 800373c:	f7ff fff0 	bl	8003720 <__sfp_lock_acquire>
 8003740:	6a23      	ldr	r3, [r4, #32]
 8003742:	b11b      	cbz	r3, 800374c <__sinit+0x14>
 8003744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003748:	f7ff bff0 	b.w	800372c <__sfp_lock_release>
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <__sinit+0x28>)
 800374e:	6223      	str	r3, [r4, #32]
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <__sinit+0x2c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f5      	bne.n	8003744 <__sinit+0xc>
 8003758:	f7ff ffc4 	bl	80036e4 <global_stdio_init.part.0>
 800375c:	e7f2      	b.n	8003744 <__sinit+0xc>
 800375e:	bf00      	nop
 8003760:	080036a5 	.word	0x080036a5
 8003764:	200003c4 	.word	0x200003c4

08003768 <_fwalk_sglue>:
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800376c:	4607      	mov	r7, r0
 800376e:	4688      	mov	r8, r1
 8003770:	4614      	mov	r4, r2
 8003772:	2600      	movs	r6, #0
 8003774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003778:	f1b9 0901 	subs.w	r9, r9, #1
 800377c:	d505      	bpl.n	800378a <_fwalk_sglue+0x22>
 800377e:	6824      	ldr	r4, [r4, #0]
 8003780:	2c00      	cmp	r4, #0
 8003782:	d1f7      	bne.n	8003774 <_fwalk_sglue+0xc>
 8003784:	4630      	mov	r0, r6
 8003786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d907      	bls.n	80037a0 <_fwalk_sglue+0x38>
 8003790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003794:	3301      	adds	r3, #1
 8003796:	d003      	beq.n	80037a0 <_fwalk_sglue+0x38>
 8003798:	4629      	mov	r1, r5
 800379a:	4638      	mov	r0, r7
 800379c:	47c0      	blx	r8
 800379e:	4306      	orrs	r6, r0
 80037a0:	3568      	adds	r5, #104	; 0x68
 80037a2:	e7e9      	b.n	8003778 <_fwalk_sglue+0x10>

080037a4 <iprintf>:
 80037a4:	b40f      	push	{r0, r1, r2, r3}
 80037a6:	b507      	push	{r0, r1, r2, lr}
 80037a8:	4906      	ldr	r1, [pc, #24]	; (80037c4 <iprintf+0x20>)
 80037aa:	ab04      	add	r3, sp, #16
 80037ac:	6808      	ldr	r0, [r1, #0]
 80037ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b2:	6881      	ldr	r1, [r0, #8]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	f001 fbe3 	bl	8004f80 <_vfiprintf_r>
 80037ba:	b003      	add	sp, #12
 80037bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c0:	b004      	add	sp, #16
 80037c2:	4770      	bx	lr
 80037c4:	20000064 	.word	0x20000064

080037c8 <__sread>:
 80037c8:	b510      	push	{r4, lr}
 80037ca:	460c      	mov	r4, r1
 80037cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d0:	f000 f86c 	bl	80038ac <_read_r>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	bfab      	itete	ge
 80037d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037da:	89a3      	ldrhlt	r3, [r4, #12]
 80037dc:	181b      	addge	r3, r3, r0
 80037de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037e2:	bfac      	ite	ge
 80037e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037e6:	81a3      	strhlt	r3, [r4, #12]
 80037e8:	bd10      	pop	{r4, pc}

080037ea <__swrite>:
 80037ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ee:	461f      	mov	r7, r3
 80037f0:	898b      	ldrh	r3, [r1, #12]
 80037f2:	4605      	mov	r5, r0
 80037f4:	05db      	lsls	r3, r3, #23
 80037f6:	460c      	mov	r4, r1
 80037f8:	4616      	mov	r6, r2
 80037fa:	d505      	bpl.n	8003808 <__swrite+0x1e>
 80037fc:	2302      	movs	r3, #2
 80037fe:	2200      	movs	r2, #0
 8003800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003804:	f000 f840 	bl	8003888 <_lseek_r>
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	4632      	mov	r2, r6
 800380c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	4628      	mov	r0, r5
 8003814:	463b      	mov	r3, r7
 8003816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800381a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800381e:	f000 b857 	b.w	80038d0 <_write_r>

08003822 <__sseek>:
 8003822:	b510      	push	{r4, lr}
 8003824:	460c      	mov	r4, r1
 8003826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382a:	f000 f82d 	bl	8003888 <_lseek_r>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	bf15      	itete	ne
 8003834:	6560      	strne	r0, [r4, #84]	; 0x54
 8003836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800383a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800383e:	81a3      	strheq	r3, [r4, #12]
 8003840:	bf18      	it	ne
 8003842:	81a3      	strhne	r3, [r4, #12]
 8003844:	bd10      	pop	{r4, pc}

08003846 <__sclose>:
 8003846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384a:	f000 b80d 	b.w	8003868 <_close_r>

0800384e <memset>:
 800384e:	4603      	mov	r3, r0
 8003850:	4402      	add	r2, r0
 8003852:	4293      	cmp	r3, r2
 8003854:	d100      	bne.n	8003858 <memset+0xa>
 8003856:	4770      	bx	lr
 8003858:	f803 1b01 	strb.w	r1, [r3], #1
 800385c:	e7f9      	b.n	8003852 <memset+0x4>
	...

08003860 <_localeconv_r>:
 8003860:	4800      	ldr	r0, [pc, #0]	; (8003864 <_localeconv_r+0x4>)
 8003862:	4770      	bx	lr
 8003864:	20000158 	.word	0x20000158

08003868 <_close_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	2300      	movs	r3, #0
 800386c:	4d05      	ldr	r5, [pc, #20]	; (8003884 <_close_r+0x1c>)
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	f7fd fbb6 	bl	8000fe4 <_close>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_close_r+0x1a>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	b103      	cbz	r3, 8003882 <_close_r+0x1a>
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	200003c8 	.word	0x200003c8

08003888 <_lseek_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	4611      	mov	r1, r2
 8003890:	2200      	movs	r2, #0
 8003892:	4d05      	ldr	r5, [pc, #20]	; (80038a8 <_lseek_r+0x20>)
 8003894:	602a      	str	r2, [r5, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f7fd fbc8 	bl	800102c <_lseek>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_lseek_r+0x1e>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_lseek_r+0x1e>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	200003c8 	.word	0x200003c8

080038ac <_read_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	2200      	movs	r2, #0
 80038b6:	4d05      	ldr	r5, [pc, #20]	; (80038cc <_read_r+0x20>)
 80038b8:	602a      	str	r2, [r5, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7fd fb59 	bl	8000f72 <_read>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_read_r+0x1e>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_read_r+0x1e>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	200003c8 	.word	0x200003c8

080038d0 <_write_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	2200      	movs	r2, #0
 80038da:	4d05      	ldr	r5, [pc, #20]	; (80038f0 <_write_r+0x20>)
 80038dc:	602a      	str	r2, [r5, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	f7fd fb64 	bl	8000fac <_write>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d102      	bne.n	80038ee <_write_r+0x1e>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	b103      	cbz	r3, 80038ee <_write_r+0x1e>
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	200003c8 	.word	0x200003c8

080038f4 <__errno>:
 80038f4:	4b01      	ldr	r3, [pc, #4]	; (80038fc <__errno+0x8>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000064 	.word	0x20000064

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	2600      	movs	r6, #0
 8003904:	4d0c      	ldr	r5, [pc, #48]	; (8003938 <__libc_init_array+0x38>)
 8003906:	4c0d      	ldr	r4, [pc, #52]	; (800393c <__libc_init_array+0x3c>)
 8003908:	1b64      	subs	r4, r4, r5
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	f001 fee2 	bl	80056d8 <_init>
 8003914:	2600      	movs	r6, #0
 8003916:	4d0a      	ldr	r5, [pc, #40]	; (8003940 <__libc_init_array+0x40>)
 8003918:	4c0a      	ldr	r4, [pc, #40]	; (8003944 <__libc_init_array+0x44>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f855 3b04 	ldr.w	r3, [r5], #4
 8003928:	4798      	blx	r3
 800392a:	3601      	adds	r6, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003932:	4798      	blx	r3
 8003934:	3601      	adds	r6, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08005a94 	.word	0x08005a94
 800393c:	08005a94 	.word	0x08005a94
 8003940:	08005a94 	.word	0x08005a94
 8003944:	08005a98 	.word	0x08005a98

08003948 <__retarget_lock_init_recursive>:
 8003948:	4770      	bx	lr

0800394a <__retarget_lock_acquire_recursive>:
 800394a:	4770      	bx	lr

0800394c <__retarget_lock_release_recursive>:
 800394c:	4770      	bx	lr

0800394e <memchr>:
 800394e:	4603      	mov	r3, r0
 8003950:	b510      	push	{r4, lr}
 8003952:	b2c9      	uxtb	r1, r1
 8003954:	4402      	add	r2, r0
 8003956:	4293      	cmp	r3, r2
 8003958:	4618      	mov	r0, r3
 800395a:	d101      	bne.n	8003960 <memchr+0x12>
 800395c:	2000      	movs	r0, #0
 800395e:	e003      	b.n	8003968 <memchr+0x1a>
 8003960:	7804      	ldrb	r4, [r0, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	428c      	cmp	r4, r1
 8003966:	d1f6      	bne.n	8003956 <memchr+0x8>
 8003968:	bd10      	pop	{r4, pc}

0800396a <quorem>:
 800396a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396e:	6903      	ldr	r3, [r0, #16]
 8003970:	690c      	ldr	r4, [r1, #16]
 8003972:	4607      	mov	r7, r0
 8003974:	42a3      	cmp	r3, r4
 8003976:	db7f      	blt.n	8003a78 <quorem+0x10e>
 8003978:	3c01      	subs	r4, #1
 800397a:	f100 0514 	add.w	r5, r0, #20
 800397e:	f101 0814 	add.w	r8, r1, #20
 8003982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800398c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003990:	3301      	adds	r3, #1
 8003992:	429a      	cmp	r2, r3
 8003994:	fbb2 f6f3 	udiv	r6, r2, r3
 8003998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800399c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80039a0:	d331      	bcc.n	8003a06 <quorem+0x9c>
 80039a2:	f04f 0e00 	mov.w	lr, #0
 80039a6:	4640      	mov	r0, r8
 80039a8:	46ac      	mov	ip, r5
 80039aa:	46f2      	mov	sl, lr
 80039ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80039b0:	b293      	uxth	r3, r2
 80039b2:	fb06 e303 	mla	r3, r6, r3, lr
 80039b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039ba:	0c1a      	lsrs	r2, r3, #16
 80039bc:	b29b      	uxth	r3, r3
 80039be:	fb06 220e 	mla	r2, r6, lr, r2
 80039c2:	ebaa 0303 	sub.w	r3, sl, r3
 80039c6:	f8dc a000 	ldr.w	sl, [ip]
 80039ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039ce:	fa1f fa8a 	uxth.w	sl, sl
 80039d2:	4453      	add	r3, sl
 80039d4:	f8dc a000 	ldr.w	sl, [ip]
 80039d8:	b292      	uxth	r2, r2
 80039da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80039de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039e8:	4581      	cmp	r9, r0
 80039ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80039ee:	f84c 3b04 	str.w	r3, [ip], #4
 80039f2:	d2db      	bcs.n	80039ac <quorem+0x42>
 80039f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80039f8:	b92b      	cbnz	r3, 8003a06 <quorem+0x9c>
 80039fa:	9b01      	ldr	r3, [sp, #4]
 80039fc:	3b04      	subs	r3, #4
 80039fe:	429d      	cmp	r5, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	d32d      	bcc.n	8003a60 <quorem+0xf6>
 8003a04:	613c      	str	r4, [r7, #16]
 8003a06:	4638      	mov	r0, r7
 8003a08:	f001 f994 	bl	8004d34 <__mcmp>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	db23      	blt.n	8003a58 <quorem+0xee>
 8003a10:	4629      	mov	r1, r5
 8003a12:	2000      	movs	r0, #0
 8003a14:	3601      	adds	r6, #1
 8003a16:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a1a:	f8d1 c000 	ldr.w	ip, [r1]
 8003a1e:	b293      	uxth	r3, r2
 8003a20:	1ac3      	subs	r3, r0, r3
 8003a22:	0c12      	lsrs	r2, r2, #16
 8003a24:	fa1f f08c 	uxth.w	r0, ip
 8003a28:	4403      	add	r3, r0
 8003a2a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003a2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a38:	45c1      	cmp	r9, r8
 8003a3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003a3e:	f841 3b04 	str.w	r3, [r1], #4
 8003a42:	d2e8      	bcs.n	8003a16 <quorem+0xac>
 8003a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a4c:	b922      	cbnz	r2, 8003a58 <quorem+0xee>
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	429d      	cmp	r5, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	d30a      	bcc.n	8003a6c <quorem+0x102>
 8003a56:	613c      	str	r4, [r7, #16]
 8003a58:	4630      	mov	r0, r6
 8003a5a:	b003      	add	sp, #12
 8003a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	3b04      	subs	r3, #4
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d1cd      	bne.n	8003a04 <quorem+0x9a>
 8003a68:	3c01      	subs	r4, #1
 8003a6a:	e7c8      	b.n	80039fe <quorem+0x94>
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	3b04      	subs	r3, #4
 8003a70:	2a00      	cmp	r2, #0
 8003a72:	d1f0      	bne.n	8003a56 <quorem+0xec>
 8003a74:	3c01      	subs	r4, #1
 8003a76:	e7eb      	b.n	8003a50 <quorem+0xe6>
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e7ee      	b.n	8003a5a <quorem+0xf0>
 8003a7c:	0000      	movs	r0, r0
	...

08003a80 <_dtoa_r>:
 8003a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a84:	4616      	mov	r6, r2
 8003a86:	461f      	mov	r7, r3
 8003a88:	69c4      	ldr	r4, [r0, #28]
 8003a8a:	b099      	sub	sp, #100	; 0x64
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003a92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003a96:	b974      	cbnz	r4, 8003ab6 <_dtoa_r+0x36>
 8003a98:	2010      	movs	r0, #16
 8003a9a:	f000 fe1d 	bl	80046d8 <malloc>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	61e8      	str	r0, [r5, #28]
 8003aa2:	b920      	cbnz	r0, 8003aae <_dtoa_r+0x2e>
 8003aa4:	21ef      	movs	r1, #239	; 0xef
 8003aa6:	4bac      	ldr	r3, [pc, #688]	; (8003d58 <_dtoa_r+0x2d8>)
 8003aa8:	48ac      	ldr	r0, [pc, #688]	; (8003d5c <_dtoa_r+0x2dc>)
 8003aaa:	f001 fce1 	bl	8005470 <__assert_func>
 8003aae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ab2:	6004      	str	r4, [r0, #0]
 8003ab4:	60c4      	str	r4, [r0, #12]
 8003ab6:	69eb      	ldr	r3, [r5, #28]
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	b151      	cbz	r1, 8003ad2 <_dtoa_r+0x52>
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4093      	lsls	r3, r2
 8003ac2:	604a      	str	r2, [r1, #4]
 8003ac4:	608b      	str	r3, [r1, #8]
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 fefa 	bl	80048c0 <_Bfree>
 8003acc:	2200      	movs	r2, #0
 8003ace:	69eb      	ldr	r3, [r5, #28]
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	1e3b      	subs	r3, r7, #0
 8003ad4:	bfaf      	iteee	ge
 8003ad6:	2300      	movge	r3, #0
 8003ad8:	2201      	movlt	r2, #1
 8003ada:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ade:	9305      	strlt	r3, [sp, #20]
 8003ae0:	bfa8      	it	ge
 8003ae2:	f8c8 3000 	strge.w	r3, [r8]
 8003ae6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003aea:	4b9d      	ldr	r3, [pc, #628]	; (8003d60 <_dtoa_r+0x2e0>)
 8003aec:	bfb8      	it	lt
 8003aee:	f8c8 2000 	strlt.w	r2, [r8]
 8003af2:	ea33 0309 	bics.w	r3, r3, r9
 8003af6:	d119      	bne.n	8003b2c <_dtoa_r+0xac>
 8003af8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003afc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b04:	4333      	orrs	r3, r6
 8003b06:	f000 8589 	beq.w	800461c <_dtoa_r+0xb9c>
 8003b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b0c:	b953      	cbnz	r3, 8003b24 <_dtoa_r+0xa4>
 8003b0e:	4b95      	ldr	r3, [pc, #596]	; (8003d64 <_dtoa_r+0x2e4>)
 8003b10:	e023      	b.n	8003b5a <_dtoa_r+0xda>
 8003b12:	4b95      	ldr	r3, [pc, #596]	; (8003d68 <_dtoa_r+0x2e8>)
 8003b14:	9303      	str	r3, [sp, #12]
 8003b16:	3308      	adds	r3, #8
 8003b18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	9803      	ldr	r0, [sp, #12]
 8003b1e:	b019      	add	sp, #100	; 0x64
 8003b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b24:	4b8f      	ldr	r3, [pc, #572]	; (8003d64 <_dtoa_r+0x2e4>)
 8003b26:	9303      	str	r3, [sp, #12]
 8003b28:	3303      	adds	r3, #3
 8003b2a:	e7f5      	b.n	8003b18 <_dtoa_r+0x98>
 8003b2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003b30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f7fc ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8003b40:	4680      	mov	r8, r0
 8003b42:	b160      	cbz	r0, 8003b5e <_dtoa_r+0xde>
 8003b44:	2301      	movs	r3, #1
 8003b46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8562 	beq.w	8004616 <_dtoa_r+0xb96>
 8003b52:	4b86      	ldr	r3, [pc, #536]	; (8003d6c <_dtoa_r+0x2ec>)
 8003b54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	e7de      	b.n	8003b1c <_dtoa_r+0x9c>
 8003b5e:	ab16      	add	r3, sp, #88	; 0x58
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	ab17      	add	r3, sp, #92	; 0x5c
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4628      	mov	r0, r5
 8003b68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b6c:	f001 f98a 	bl	8004e84 <__d2b>
 8003b70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003b74:	4682      	mov	sl, r0
 8003b76:	2c00      	cmp	r4, #0
 8003b78:	d07e      	beq.n	8003c78 <_dtoa_r+0x1f8>
 8003b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003b8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003b90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003b94:	4619      	mov	r1, r3
 8003b96:	2200      	movs	r2, #0
 8003b98:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <_dtoa_r+0x2f0>)
 8003b9a:	f7fc fae5 	bl	8000168 <__aeabi_dsub>
 8003b9e:	a368      	add	r3, pc, #416	; (adr r3, 8003d40 <_dtoa_r+0x2c0>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fc98 	bl	80004d8 <__aeabi_dmul>
 8003ba8:	a367      	add	r3, pc, #412	; (adr r3, 8003d48 <_dtoa_r+0x2c8>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc fadd 	bl	800016c <__adddf3>
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	460f      	mov	r7, r1
 8003bb8:	f7fc fc24 	bl	8000404 <__aeabi_i2d>
 8003bbc:	a364      	add	r3, pc, #400	; (adr r3, 8003d50 <_dtoa_r+0x2d0>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fc89 	bl	80004d8 <__aeabi_dmul>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4630      	mov	r0, r6
 8003bcc:	4639      	mov	r1, r7
 8003bce:	f7fc facd 	bl	800016c <__adddf3>
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	460f      	mov	r7, r1
 8003bd6:	f7fc ff2f 	bl	8000a38 <__aeabi_d2iz>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4683      	mov	fp, r0
 8003bde:	2300      	movs	r3, #0
 8003be0:	4630      	mov	r0, r6
 8003be2:	4639      	mov	r1, r7
 8003be4:	f7fc feea 	bl	80009bc <__aeabi_dcmplt>
 8003be8:	b148      	cbz	r0, 8003bfe <_dtoa_r+0x17e>
 8003bea:	4658      	mov	r0, fp
 8003bec:	f7fc fc0a 	bl	8000404 <__aeabi_i2d>
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	f7fc fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf8:	b908      	cbnz	r0, 8003bfe <_dtoa_r+0x17e>
 8003bfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003bfe:	f1bb 0f16 	cmp.w	fp, #22
 8003c02:	d857      	bhi.n	8003cb4 <_dtoa_r+0x234>
 8003c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c08:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <_dtoa_r+0x2f4>)
 8003c0a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fed3 	bl	80009bc <__aeabi_dcmplt>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d04e      	beq.n	8003cb8 <_dtoa_r+0x238>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c24:	1b1b      	subs	r3, r3, r4
 8003c26:	1e5a      	subs	r2, r3, #1
 8003c28:	bf46      	itte	mi
 8003c2a:	f1c3 0901 	rsbmi	r9, r3, #1
 8003c2e:	2300      	movmi	r3, #0
 8003c30:	f04f 0900 	movpl.w	r9, #0
 8003c34:	9209      	str	r2, [sp, #36]	; 0x24
 8003c36:	bf48      	it	mi
 8003c38:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003c3a:	f1bb 0f00 	cmp.w	fp, #0
 8003c3e:	db3d      	blt.n	8003cbc <_dtoa_r+0x23c>
 8003c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c42:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003c46:	445b      	add	r3, fp
 8003c48:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8003c4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d867      	bhi.n	8003d24 <_dtoa_r+0x2a4>
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	bfc4      	itt	gt
 8003c58:	3b04      	subgt	r3, #4
 8003c5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c5e:	bfc8      	it	gt
 8003c60:	2400      	movgt	r4, #0
 8003c62:	f1a3 0302 	sub.w	r3, r3, #2
 8003c66:	bfd8      	it	le
 8003c68:	2401      	movle	r4, #1
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	f200 8086 	bhi.w	8003d7c <_dtoa_r+0x2fc>
 8003c70:	e8df f003 	tbb	[pc, r3]
 8003c74:	5637392c 	.word	0x5637392c
 8003c78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003c7c:	441c      	add	r4, r3
 8003c7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	bfc1      	itttt	gt
 8003c86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c8a:	fa09 f903 	lslgt.w	r9, r9, r3
 8003c8e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003c92:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003c96:	bfd6      	itet	le
 8003c98:	f1c3 0320 	rsble	r3, r3, #32
 8003c9c:	ea49 0003 	orrgt.w	r0, r9, r3
 8003ca0:	fa06 f003 	lslle.w	r0, r6, r3
 8003ca4:	f7fc fb9e 	bl	80003e4 <__aeabi_ui2d>
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003cae:	3c01      	subs	r4, #1
 8003cb0:	9213      	str	r2, [sp, #76]	; 0x4c
 8003cb2:	e76f      	b.n	8003b94 <_dtoa_r+0x114>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e7b3      	b.n	8003c20 <_dtoa_r+0x1a0>
 8003cb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8003cba:	e7b2      	b.n	8003c22 <_dtoa_r+0x1a2>
 8003cbc:	f1cb 0300 	rsb	r3, fp, #0
 8003cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	eba9 090b 	sub.w	r9, r9, fp
 8003cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8003cca:	e7c0      	b.n	8003c4e <_dtoa_r+0x1ce>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dc55      	bgt.n	8003d82 <_dtoa_r+0x302>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	461a      	mov	r2, r3
 8003cda:	9306      	str	r3, [sp, #24]
 8003cdc:	9308      	str	r3, [sp, #32]
 8003cde:	9223      	str	r2, [sp, #140]	; 0x8c
 8003ce0:	e00b      	b.n	8003cfa <_dtoa_r+0x27a>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e7f3      	b.n	8003cce <_dtoa_r+0x24e>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cec:	445b      	add	r3, fp
 8003cee:	9306      	str	r3, [sp, #24]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	9308      	str	r3, [sp, #32]
 8003cf6:	bfb8      	it	lt
 8003cf8:	2301      	movlt	r3, #1
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	69e8      	ldr	r0, [r5, #28]
 8003d00:	f102 0614 	add.w	r6, r2, #20
 8003d04:	429e      	cmp	r6, r3
 8003d06:	d940      	bls.n	8003d8a <_dtoa_r+0x30a>
 8003d08:	6041      	str	r1, [r0, #4]
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 fd98 	bl	8004840 <_Balloc>
 8003d10:	9003      	str	r0, [sp, #12]
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d13c      	bne.n	8003d90 <_dtoa_r+0x310>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f240 11af 	movw	r1, #431	; 0x1af
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <_dtoa_r+0x2f8>)
 8003d1e:	e6c3      	b.n	8003aa8 <_dtoa_r+0x28>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e7e1      	b.n	8003ce8 <_dtoa_r+0x268>
 8003d24:	2401      	movs	r4, #1
 8003d26:	2300      	movs	r3, #0
 8003d28:	940b      	str	r4, [sp, #44]	; 0x2c
 8003d2a:	9322      	str	r3, [sp, #136]	; 0x88
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d30:	2200      	movs	r2, #0
 8003d32:	9306      	str	r3, [sp, #24]
 8003d34:	9308      	str	r3, [sp, #32]
 8003d36:	2312      	movs	r3, #18
 8003d38:	e7d1      	b.n	8003cde <_dtoa_r+0x25e>
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	636f4361 	.word	0x636f4361
 8003d44:	3fd287a7 	.word	0x3fd287a7
 8003d48:	8b60c8b3 	.word	0x8b60c8b3
 8003d4c:	3fc68a28 	.word	0x3fc68a28
 8003d50:	509f79fb 	.word	0x509f79fb
 8003d54:	3fd34413 	.word	0x3fd34413
 8003d58:	08005763 	.word	0x08005763
 8003d5c:	0800577a 	.word	0x0800577a
 8003d60:	7ff00000 	.word	0x7ff00000
 8003d64:	0800575f 	.word	0x0800575f
 8003d68:	08005756 	.word	0x08005756
 8003d6c:	08005733 	.word	0x08005733
 8003d70:	3ff80000 	.word	0x3ff80000
 8003d74:	08005868 	.word	0x08005868
 8003d78:	080057d2 	.word	0x080057d2
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d80:	e7d4      	b.n	8003d2c <_dtoa_r+0x2ac>
 8003d82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d84:	9306      	str	r3, [sp, #24]
 8003d86:	9308      	str	r3, [sp, #32]
 8003d88:	e7b7      	b.n	8003cfa <_dtoa_r+0x27a>
 8003d8a:	3101      	adds	r1, #1
 8003d8c:	0052      	lsls	r2, r2, #1
 8003d8e:	e7b7      	b.n	8003d00 <_dtoa_r+0x280>
 8003d90:	69eb      	ldr	r3, [r5, #28]
 8003d92:	9a03      	ldr	r2, [sp, #12]
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	9b08      	ldr	r3, [sp, #32]
 8003d98:	2b0e      	cmp	r3, #14
 8003d9a:	f200 80a8 	bhi.w	8003eee <_dtoa_r+0x46e>
 8003d9e:	2c00      	cmp	r4, #0
 8003da0:	f000 80a5 	beq.w	8003eee <_dtoa_r+0x46e>
 8003da4:	f1bb 0f00 	cmp.w	fp, #0
 8003da8:	dd34      	ble.n	8003e14 <_dtoa_r+0x394>
 8003daa:	4b9a      	ldr	r3, [pc, #616]	; (8004014 <_dtoa_r+0x594>)
 8003dac:	f00b 020f 	and.w	r2, fp, #15
 8003db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003db4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003db8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003dc0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003dc4:	d016      	beq.n	8003df4 <_dtoa_r+0x374>
 8003dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dca:	4b93      	ldr	r3, [pc, #588]	; (8004018 <_dtoa_r+0x598>)
 8003dcc:	2703      	movs	r7, #3
 8003dce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dd2:	f7fc fcab 	bl	800072c <__aeabi_ddiv>
 8003dd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003dda:	f004 040f 	and.w	r4, r4, #15
 8003dde:	4e8e      	ldr	r6, [pc, #568]	; (8004018 <_dtoa_r+0x598>)
 8003de0:	b954      	cbnz	r4, 8003df8 <_dtoa_r+0x378>
 8003de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dea:	f7fc fc9f 	bl	800072c <__aeabi_ddiv>
 8003dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003df2:	e029      	b.n	8003e48 <_dtoa_r+0x3c8>
 8003df4:	2702      	movs	r7, #2
 8003df6:	e7f2      	b.n	8003dde <_dtoa_r+0x35e>
 8003df8:	07e1      	lsls	r1, r4, #31
 8003dfa:	d508      	bpl.n	8003e0e <_dtoa_r+0x38e>
 8003dfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e04:	f7fc fb68 	bl	80004d8 <__aeabi_dmul>
 8003e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e0c:	3701      	adds	r7, #1
 8003e0e:	1064      	asrs	r4, r4, #1
 8003e10:	3608      	adds	r6, #8
 8003e12:	e7e5      	b.n	8003de0 <_dtoa_r+0x360>
 8003e14:	f000 80a5 	beq.w	8003f62 <_dtoa_r+0x4e2>
 8003e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e1c:	f1cb 0400 	rsb	r4, fp, #0
 8003e20:	4b7c      	ldr	r3, [pc, #496]	; (8004014 <_dtoa_r+0x594>)
 8003e22:	f004 020f 	and.w	r2, r4, #15
 8003e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fb53 	bl	80004d8 <__aeabi_dmul>
 8003e32:	2702      	movs	r7, #2
 8003e34:	2300      	movs	r3, #0
 8003e36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e3a:	4e77      	ldr	r6, [pc, #476]	; (8004018 <_dtoa_r+0x598>)
 8003e3c:	1124      	asrs	r4, r4, #4
 8003e3e:	2c00      	cmp	r4, #0
 8003e40:	f040 8084 	bne.w	8003f4c <_dtoa_r+0x4cc>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1d2      	bne.n	8003dee <_dtoa_r+0x36e>
 8003e48:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8087 	beq.w	8003f66 <_dtoa_r+0x4e6>
 8003e58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4b6f      	ldr	r3, [pc, #444]	; (800401c <_dtoa_r+0x59c>)
 8003e60:	f7fc fdac 	bl	80009bc <__aeabi_dcmplt>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d07e      	beq.n	8003f66 <_dtoa_r+0x4e6>
 8003e68:	9b08      	ldr	r3, [sp, #32]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d07b      	beq.n	8003f66 <_dtoa_r+0x4e6>
 8003e6e:	9b06      	ldr	r3, [sp, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dd38      	ble.n	8003ee6 <_dtoa_r+0x466>
 8003e74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4b69      	ldr	r3, [pc, #420]	; (8004020 <_dtoa_r+0x5a0>)
 8003e7c:	f7fc fb2c 	bl	80004d8 <__aeabi_dmul>
 8003e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e84:	9c06      	ldr	r4, [sp, #24]
 8003e86:	f10b 38ff 	add.w	r8, fp, #4294967295
 8003e8a:	3701      	adds	r7, #1
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	f7fc fab9 	bl	8000404 <__aeabi_i2d>
 8003e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e96:	f7fc fb1f 	bl	80004d8 <__aeabi_dmul>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <_dtoa_r+0x5a4>)
 8003e9e:	f7fc f965 	bl	800016c <__adddf3>
 8003ea2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003ea6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003eaa:	9611      	str	r6, [sp, #68]	; 0x44
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d15d      	bne.n	8003f6c <_dtoa_r+0x4ec>
 8003eb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <_dtoa_r+0x5a8>)
 8003eb8:	f7fc f956 	bl	8000168 <__aeabi_dsub>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ec4:	4633      	mov	r3, r6
 8003ec6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ec8:	f7fc fd96 	bl	80009f8 <__aeabi_dcmpgt>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f040 8295 	bne.w	80043fc <_dtoa_r+0x97c>
 8003ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ed6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ed8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003edc:	f7fc fd6e 	bl	80009bc <__aeabi_dcmplt>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f040 8289 	bne.w	80043f8 <_dtoa_r+0x978>
 8003ee6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003eea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003eee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f2c0 8151 	blt.w	8004198 <_dtoa_r+0x718>
 8003ef6:	f1bb 0f0e 	cmp.w	fp, #14
 8003efa:	f300 814d 	bgt.w	8004198 <_dtoa_r+0x718>
 8003efe:	4b45      	ldr	r3, [pc, #276]	; (8004014 <_dtoa_r+0x594>)
 8003f00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003f0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f280 80da 	bge.w	80040c8 <_dtoa_r+0x648>
 8003f14:	9b08      	ldr	r3, [sp, #32]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f300 80d6 	bgt.w	80040c8 <_dtoa_r+0x648>
 8003f1c:	f040 826b 	bne.w	80043f6 <_dtoa_r+0x976>
 8003f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f24:	2200      	movs	r2, #0
 8003f26:	4b40      	ldr	r3, [pc, #256]	; (8004028 <_dtoa_r+0x5a8>)
 8003f28:	f7fc fad6 	bl	80004d8 <__aeabi_dmul>
 8003f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f30:	f7fc fd58 	bl	80009e4 <__aeabi_dcmpge>
 8003f34:	9c08      	ldr	r4, [sp, #32]
 8003f36:	4626      	mov	r6, r4
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	f040 8241 	bne.w	80043c0 <_dtoa_r+0x940>
 8003f3e:	2331      	movs	r3, #49	; 0x31
 8003f40:	9f03      	ldr	r7, [sp, #12]
 8003f42:	f10b 0b01 	add.w	fp, fp, #1
 8003f46:	f807 3b01 	strb.w	r3, [r7], #1
 8003f4a:	e23d      	b.n	80043c8 <_dtoa_r+0x948>
 8003f4c:	07e2      	lsls	r2, r4, #31
 8003f4e:	d505      	bpl.n	8003f5c <_dtoa_r+0x4dc>
 8003f50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f54:	f7fc fac0 	bl	80004d8 <__aeabi_dmul>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	3701      	adds	r7, #1
 8003f5c:	1064      	asrs	r4, r4, #1
 8003f5e:	3608      	adds	r6, #8
 8003f60:	e76d      	b.n	8003e3e <_dtoa_r+0x3be>
 8003f62:	2702      	movs	r7, #2
 8003f64:	e770      	b.n	8003e48 <_dtoa_r+0x3c8>
 8003f66:	46d8      	mov	r8, fp
 8003f68:	9c08      	ldr	r4, [sp, #32]
 8003f6a:	e78f      	b.n	8003e8c <_dtoa_r+0x40c>
 8003f6c:	9903      	ldr	r1, [sp, #12]
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <_dtoa_r+0x594>)
 8003f70:	4421      	add	r1, r4
 8003f72:	9112      	str	r1, [sp, #72]	; 0x48
 8003f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003f7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d054      	beq.n	8004030 <_dtoa_r+0x5b0>
 8003f86:	2000      	movs	r0, #0
 8003f88:	4928      	ldr	r1, [pc, #160]	; (800402c <_dtoa_r+0x5ac>)
 8003f8a:	f7fc fbcf 	bl	800072c <__aeabi_ddiv>
 8003f8e:	463b      	mov	r3, r7
 8003f90:	4632      	mov	r2, r6
 8003f92:	f7fc f8e9 	bl	8000168 <__aeabi_dsub>
 8003f96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f9a:	9f03      	ldr	r7, [sp, #12]
 8003f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fa0:	f7fc fd4a 	bl	8000a38 <__aeabi_d2iz>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	f7fc fa2d 	bl	8000404 <__aeabi_i2d>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fb2:	f7fc f8d9 	bl	8000168 <__aeabi_dsub>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	3430      	adds	r4, #48	; 0x30
 8003fbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fc4:	f807 4b01 	strb.w	r4, [r7], #1
 8003fc8:	f7fc fcf8 	bl	80009bc <__aeabi_dcmplt>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d173      	bne.n	80040b8 <_dtoa_r+0x638>
 8003fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	4911      	ldr	r1, [pc, #68]	; (800401c <_dtoa_r+0x59c>)
 8003fd8:	f7fc f8c6 	bl	8000168 <__aeabi_dsub>
 8003fdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fe0:	f7fc fcec 	bl	80009bc <__aeabi_dcmplt>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	f040 80b6 	bne.w	8004156 <_dtoa_r+0x6d6>
 8003fea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fec:	429f      	cmp	r7, r3
 8003fee:	f43f af7a 	beq.w	8003ee6 <_dtoa_r+0x466>
 8003ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <_dtoa_r+0x5a0>)
 8003ffa:	f7fc fa6d 	bl	80004d8 <__aeabi_dmul>
 8003ffe:	2200      	movs	r2, #0
 8004000:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <_dtoa_r+0x5a0>)
 800400a:	f7fc fa65 	bl	80004d8 <__aeabi_dmul>
 800400e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004012:	e7c3      	b.n	8003f9c <_dtoa_r+0x51c>
 8004014:	08005868 	.word	0x08005868
 8004018:	08005840 	.word	0x08005840
 800401c:	3ff00000 	.word	0x3ff00000
 8004020:	40240000 	.word	0x40240000
 8004024:	401c0000 	.word	0x401c0000
 8004028:	40140000 	.word	0x40140000
 800402c:	3fe00000 	.word	0x3fe00000
 8004030:	4630      	mov	r0, r6
 8004032:	4639      	mov	r1, r7
 8004034:	f7fc fa50 	bl	80004d8 <__aeabi_dmul>
 8004038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800403a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800403e:	9c03      	ldr	r4, [sp, #12]
 8004040:	9314      	str	r3, [sp, #80]	; 0x50
 8004042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004046:	f7fc fcf7 	bl	8000a38 <__aeabi_d2iz>
 800404a:	9015      	str	r0, [sp, #84]	; 0x54
 800404c:	f7fc f9da 	bl	8000404 <__aeabi_i2d>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004058:	f7fc f886 	bl	8000168 <__aeabi_dsub>
 800405c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800405e:	4606      	mov	r6, r0
 8004060:	3330      	adds	r3, #48	; 0x30
 8004062:	f804 3b01 	strb.w	r3, [r4], #1
 8004066:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004068:	460f      	mov	r7, r1
 800406a:	429c      	cmp	r4, r3
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	d124      	bne.n	80040bc <_dtoa_r+0x63c>
 8004072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004076:	4baf      	ldr	r3, [pc, #700]	; (8004334 <_dtoa_r+0x8b4>)
 8004078:	f7fc f878 	bl	800016c <__adddf3>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4630      	mov	r0, r6
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc fcb8 	bl	80009f8 <__aeabi_dcmpgt>
 8004088:	2800      	cmp	r0, #0
 800408a:	d163      	bne.n	8004154 <_dtoa_r+0x6d4>
 800408c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004090:	2000      	movs	r0, #0
 8004092:	49a8      	ldr	r1, [pc, #672]	; (8004334 <_dtoa_r+0x8b4>)
 8004094:	f7fc f868 	bl	8000168 <__aeabi_dsub>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4630      	mov	r0, r6
 800409e:	4639      	mov	r1, r7
 80040a0:	f7fc fc8c 	bl	80009bc <__aeabi_dcmplt>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f43f af1e 	beq.w	8003ee6 <_dtoa_r+0x466>
 80040aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80040ac:	1e7b      	subs	r3, r7, #1
 80040ae:	9314      	str	r3, [sp, #80]	; 0x50
 80040b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	d0f8      	beq.n	80040aa <_dtoa_r+0x62a>
 80040b8:	46c3      	mov	fp, r8
 80040ba:	e03b      	b.n	8004134 <_dtoa_r+0x6b4>
 80040bc:	4b9e      	ldr	r3, [pc, #632]	; (8004338 <_dtoa_r+0x8b8>)
 80040be:	f7fc fa0b 	bl	80004d8 <__aeabi_dmul>
 80040c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040c6:	e7bc      	b.n	8004042 <_dtoa_r+0x5c2>
 80040c8:	9f03      	ldr	r7, [sp, #12]
 80040ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80040ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040d2:	4640      	mov	r0, r8
 80040d4:	4649      	mov	r1, r9
 80040d6:	f7fc fb29 	bl	800072c <__aeabi_ddiv>
 80040da:	f7fc fcad 	bl	8000a38 <__aeabi_d2iz>
 80040de:	4604      	mov	r4, r0
 80040e0:	f7fc f990 	bl	8000404 <__aeabi_i2d>
 80040e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040e8:	f7fc f9f6 	bl	80004d8 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4640      	mov	r0, r8
 80040f2:	4649      	mov	r1, r9
 80040f4:	f7fc f838 	bl	8000168 <__aeabi_dsub>
 80040f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80040fc:	f807 6b01 	strb.w	r6, [r7], #1
 8004100:	9e03      	ldr	r6, [sp, #12]
 8004102:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004106:	1bbe      	subs	r6, r7, r6
 8004108:	45b4      	cmp	ip, r6
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	d136      	bne.n	800417e <_dtoa_r+0x6fe>
 8004110:	f7fc f82c 	bl	800016c <__adddf3>
 8004114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004118:	4680      	mov	r8, r0
 800411a:	4689      	mov	r9, r1
 800411c:	f7fc fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8004120:	bb58      	cbnz	r0, 800417a <_dtoa_r+0x6fa>
 8004122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004126:	4640      	mov	r0, r8
 8004128:	4649      	mov	r1, r9
 800412a:	f7fc fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800412e:	b108      	cbz	r0, 8004134 <_dtoa_r+0x6b4>
 8004130:	07e3      	lsls	r3, r4, #31
 8004132:	d422      	bmi.n	800417a <_dtoa_r+0x6fa>
 8004134:	4651      	mov	r1, sl
 8004136:	4628      	mov	r0, r5
 8004138:	f000 fbc2 	bl	80048c0 <_Bfree>
 800413c:	2300      	movs	r3, #0
 800413e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004140:	703b      	strb	r3, [r7, #0]
 8004142:	f10b 0301 	add.w	r3, fp, #1
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800414a:	2b00      	cmp	r3, #0
 800414c:	f43f ace6 	beq.w	8003b1c <_dtoa_r+0x9c>
 8004150:	601f      	str	r7, [r3, #0]
 8004152:	e4e3      	b.n	8003b1c <_dtoa_r+0x9c>
 8004154:	4627      	mov	r7, r4
 8004156:	463b      	mov	r3, r7
 8004158:	461f      	mov	r7, r3
 800415a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800415e:	2a39      	cmp	r2, #57	; 0x39
 8004160:	d107      	bne.n	8004172 <_dtoa_r+0x6f2>
 8004162:	9a03      	ldr	r2, [sp, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d1f7      	bne.n	8004158 <_dtoa_r+0x6d8>
 8004168:	2230      	movs	r2, #48	; 0x30
 800416a:	9903      	ldr	r1, [sp, #12]
 800416c:	f108 0801 	add.w	r8, r8, #1
 8004170:	700a      	strb	r2, [r1, #0]
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	3201      	adds	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e79e      	b.n	80040b8 <_dtoa_r+0x638>
 800417a:	46d8      	mov	r8, fp
 800417c:	e7eb      	b.n	8004156 <_dtoa_r+0x6d6>
 800417e:	2200      	movs	r2, #0
 8004180:	4b6d      	ldr	r3, [pc, #436]	; (8004338 <_dtoa_r+0x8b8>)
 8004182:	f7fc f9a9 	bl	80004d8 <__aeabi_dmul>
 8004186:	2200      	movs	r2, #0
 8004188:	2300      	movs	r3, #0
 800418a:	4680      	mov	r8, r0
 800418c:	4689      	mov	r9, r1
 800418e:	f7fc fc0b 	bl	80009a8 <__aeabi_dcmpeq>
 8004192:	2800      	cmp	r0, #0
 8004194:	d09b      	beq.n	80040ce <_dtoa_r+0x64e>
 8004196:	e7cd      	b.n	8004134 <_dtoa_r+0x6b4>
 8004198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800419a:	2a00      	cmp	r2, #0
 800419c:	f000 80c4 	beq.w	8004328 <_dtoa_r+0x8a8>
 80041a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	f300 80a8 	bgt.w	80042f8 <_dtoa_r+0x878>
 80041a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	f000 80a0 	beq.w	80042f0 <_dtoa_r+0x870>
 80041b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041b4:	464f      	mov	r7, r9
 80041b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80041b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ba:	2101      	movs	r1, #1
 80041bc:	441a      	add	r2, r3
 80041be:	4628      	mov	r0, r5
 80041c0:	4499      	add	r9, r3
 80041c2:	9209      	str	r2, [sp, #36]	; 0x24
 80041c4:	f000 fc32 	bl	8004a2c <__i2b>
 80041c8:	4606      	mov	r6, r0
 80041ca:	b15f      	cbz	r7, 80041e4 <_dtoa_r+0x764>
 80041cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dd08      	ble.n	80041e4 <_dtoa_r+0x764>
 80041d2:	42bb      	cmp	r3, r7
 80041d4:	bfa8      	it	ge
 80041d6:	463b      	movge	r3, r7
 80041d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041da:	eba9 0903 	sub.w	r9, r9, r3
 80041de:	1aff      	subs	r7, r7, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	9309      	str	r3, [sp, #36]	; 0x24
 80041e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041e6:	b1f3      	cbz	r3, 8004226 <_dtoa_r+0x7a6>
 80041e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a0 	beq.w	8004330 <_dtoa_r+0x8b0>
 80041f0:	2c00      	cmp	r4, #0
 80041f2:	dd10      	ble.n	8004216 <_dtoa_r+0x796>
 80041f4:	4631      	mov	r1, r6
 80041f6:	4622      	mov	r2, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 fcd5 	bl	8004ba8 <__pow5mult>
 80041fe:	4652      	mov	r2, sl
 8004200:	4601      	mov	r1, r0
 8004202:	4606      	mov	r6, r0
 8004204:	4628      	mov	r0, r5
 8004206:	f000 fc27 	bl	8004a58 <__multiply>
 800420a:	4680      	mov	r8, r0
 800420c:	4651      	mov	r1, sl
 800420e:	4628      	mov	r0, r5
 8004210:	f000 fb56 	bl	80048c0 <_Bfree>
 8004214:	46c2      	mov	sl, r8
 8004216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004218:	1b1a      	subs	r2, r3, r4
 800421a:	d004      	beq.n	8004226 <_dtoa_r+0x7a6>
 800421c:	4651      	mov	r1, sl
 800421e:	4628      	mov	r0, r5
 8004220:	f000 fcc2 	bl	8004ba8 <__pow5mult>
 8004224:	4682      	mov	sl, r0
 8004226:	2101      	movs	r1, #1
 8004228:	4628      	mov	r0, r5
 800422a:	f000 fbff 	bl	8004a2c <__i2b>
 800422e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004230:	4604      	mov	r4, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	f340 8082 	ble.w	800433c <_dtoa_r+0x8bc>
 8004238:	461a      	mov	r2, r3
 800423a:	4601      	mov	r1, r0
 800423c:	4628      	mov	r0, r5
 800423e:	f000 fcb3 	bl	8004ba8 <__pow5mult>
 8004242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004244:	4604      	mov	r4, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	dd7b      	ble.n	8004342 <_dtoa_r+0x8c2>
 800424a:	f04f 0800 	mov.w	r8, #0
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004254:	6918      	ldr	r0, [r3, #16]
 8004256:	f000 fb9b 	bl	8004990 <__hi0bits>
 800425a:	f1c0 0020 	rsb	r0, r0, #32
 800425e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004260:	4418      	add	r0, r3
 8004262:	f010 001f 	ands.w	r0, r0, #31
 8004266:	f000 8092 	beq.w	800438e <_dtoa_r+0x90e>
 800426a:	f1c0 0320 	rsb	r3, r0, #32
 800426e:	2b04      	cmp	r3, #4
 8004270:	f340 8085 	ble.w	800437e <_dtoa_r+0x8fe>
 8004274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004276:	f1c0 001c 	rsb	r0, r0, #28
 800427a:	4403      	add	r3, r0
 800427c:	4481      	add	r9, r0
 800427e:	4407      	add	r7, r0
 8004280:	9309      	str	r3, [sp, #36]	; 0x24
 8004282:	f1b9 0f00 	cmp.w	r9, #0
 8004286:	dd05      	ble.n	8004294 <_dtoa_r+0x814>
 8004288:	4651      	mov	r1, sl
 800428a:	464a      	mov	r2, r9
 800428c:	4628      	mov	r0, r5
 800428e:	f000 fce5 	bl	8004c5c <__lshift>
 8004292:	4682      	mov	sl, r0
 8004294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	dd05      	ble.n	80042a6 <_dtoa_r+0x826>
 800429a:	4621      	mov	r1, r4
 800429c:	461a      	mov	r2, r3
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 fcdc 	bl	8004c5c <__lshift>
 80042a4:	4604      	mov	r4, r0
 80042a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d072      	beq.n	8004392 <_dtoa_r+0x912>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4650      	mov	r0, sl
 80042b0:	f000 fd40 	bl	8004d34 <__mcmp>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	da6c      	bge.n	8004392 <_dtoa_r+0x912>
 80042b8:	2300      	movs	r3, #0
 80042ba:	4651      	mov	r1, sl
 80042bc:	220a      	movs	r2, #10
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 fb20 	bl	8004904 <__multadd>
 80042c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042c6:	4682      	mov	sl, r0
 80042c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 81ac 	beq.w	800462a <_dtoa_r+0xbaa>
 80042d2:	2300      	movs	r3, #0
 80042d4:	4631      	mov	r1, r6
 80042d6:	220a      	movs	r2, #10
 80042d8:	4628      	mov	r0, r5
 80042da:	f000 fb13 	bl	8004904 <__multadd>
 80042de:	9b06      	ldr	r3, [sp, #24]
 80042e0:	4606      	mov	r6, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f300 8093 	bgt.w	800440e <_dtoa_r+0x98e>
 80042e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	dc59      	bgt.n	80043a2 <_dtoa_r+0x922>
 80042ee:	e08e      	b.n	800440e <_dtoa_r+0x98e>
 80042f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80042f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80042f6:	e75d      	b.n	80041b4 <_dtoa_r+0x734>
 80042f8:	9b08      	ldr	r3, [sp, #32]
 80042fa:	1e5c      	subs	r4, r3, #1
 80042fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fe:	42a3      	cmp	r3, r4
 8004300:	bfbf      	itttt	lt
 8004302:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004304:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004306:	1ae3      	sublt	r3, r4, r3
 8004308:	18d2      	addlt	r2, r2, r3
 800430a:	bfa8      	it	ge
 800430c:	1b1c      	subge	r4, r3, r4
 800430e:	9b08      	ldr	r3, [sp, #32]
 8004310:	bfbe      	ittt	lt
 8004312:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004314:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004316:	2400      	movlt	r4, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfb5      	itete	lt
 800431c:	eba9 0703 	sublt.w	r7, r9, r3
 8004320:	464f      	movge	r7, r9
 8004322:	2300      	movlt	r3, #0
 8004324:	9b08      	ldrge	r3, [sp, #32]
 8004326:	e747      	b.n	80041b8 <_dtoa_r+0x738>
 8004328:	464f      	mov	r7, r9
 800432a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800432c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800432e:	e74c      	b.n	80041ca <_dtoa_r+0x74a>
 8004330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004332:	e773      	b.n	800421c <_dtoa_r+0x79c>
 8004334:	3fe00000 	.word	0x3fe00000
 8004338:	40240000 	.word	0x40240000
 800433c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800433e:	2b01      	cmp	r3, #1
 8004340:	dc18      	bgt.n	8004374 <_dtoa_r+0x8f4>
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	b9b3      	cbnz	r3, 8004374 <_dtoa_r+0x8f4>
 8004346:	9b05      	ldr	r3, [sp, #20]
 8004348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800434c:	b993      	cbnz	r3, 8004374 <_dtoa_r+0x8f4>
 800434e:	9b05      	ldr	r3, [sp, #20]
 8004350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004354:	0d1b      	lsrs	r3, r3, #20
 8004356:	051b      	lsls	r3, r3, #20
 8004358:	b17b      	cbz	r3, 800437a <_dtoa_r+0x8fa>
 800435a:	f04f 0801 	mov.w	r8, #1
 800435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004360:	f109 0901 	add.w	r9, r9, #1
 8004364:	3301      	adds	r3, #1
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	f47f af6f 	bne.w	800424e <_dtoa_r+0x7ce>
 8004370:	2001      	movs	r0, #1
 8004372:	e774      	b.n	800425e <_dtoa_r+0x7de>
 8004374:	f04f 0800 	mov.w	r8, #0
 8004378:	e7f6      	b.n	8004368 <_dtoa_r+0x8e8>
 800437a:	4698      	mov	r8, r3
 800437c:	e7f4      	b.n	8004368 <_dtoa_r+0x8e8>
 800437e:	d080      	beq.n	8004282 <_dtoa_r+0x802>
 8004380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004382:	331c      	adds	r3, #28
 8004384:	441a      	add	r2, r3
 8004386:	4499      	add	r9, r3
 8004388:	441f      	add	r7, r3
 800438a:	9209      	str	r2, [sp, #36]	; 0x24
 800438c:	e779      	b.n	8004282 <_dtoa_r+0x802>
 800438e:	4603      	mov	r3, r0
 8004390:	e7f6      	b.n	8004380 <_dtoa_r+0x900>
 8004392:	9b08      	ldr	r3, [sp, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dc34      	bgt.n	8004402 <_dtoa_r+0x982>
 8004398:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800439a:	2b02      	cmp	r3, #2
 800439c:	dd31      	ble.n	8004402 <_dtoa_r+0x982>
 800439e:	9b08      	ldr	r3, [sp, #32]
 80043a0:	9306      	str	r3, [sp, #24]
 80043a2:	9b06      	ldr	r3, [sp, #24]
 80043a4:	b963      	cbnz	r3, 80043c0 <_dtoa_r+0x940>
 80043a6:	4621      	mov	r1, r4
 80043a8:	2205      	movs	r2, #5
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 faaa 	bl	8004904 <__multadd>
 80043b0:	4601      	mov	r1, r0
 80043b2:	4604      	mov	r4, r0
 80043b4:	4650      	mov	r0, sl
 80043b6:	f000 fcbd 	bl	8004d34 <__mcmp>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f73f adbf 	bgt.w	8003f3e <_dtoa_r+0x4be>
 80043c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043c2:	9f03      	ldr	r7, [sp, #12]
 80043c4:	ea6f 0b03 	mvn.w	fp, r3
 80043c8:	f04f 0800 	mov.w	r8, #0
 80043cc:	4621      	mov	r1, r4
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 fa76 	bl	80048c0 <_Bfree>
 80043d4:	2e00      	cmp	r6, #0
 80043d6:	f43f aead 	beq.w	8004134 <_dtoa_r+0x6b4>
 80043da:	f1b8 0f00 	cmp.w	r8, #0
 80043de:	d005      	beq.n	80043ec <_dtoa_r+0x96c>
 80043e0:	45b0      	cmp	r8, r6
 80043e2:	d003      	beq.n	80043ec <_dtoa_r+0x96c>
 80043e4:	4641      	mov	r1, r8
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 fa6a 	bl	80048c0 <_Bfree>
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 fa66 	bl	80048c0 <_Bfree>
 80043f4:	e69e      	b.n	8004134 <_dtoa_r+0x6b4>
 80043f6:	2400      	movs	r4, #0
 80043f8:	4626      	mov	r6, r4
 80043fa:	e7e1      	b.n	80043c0 <_dtoa_r+0x940>
 80043fc:	46c3      	mov	fp, r8
 80043fe:	4626      	mov	r6, r4
 8004400:	e59d      	b.n	8003f3e <_dtoa_r+0x4be>
 8004402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80c8 	beq.w	800459a <_dtoa_r+0xb1a>
 800440a:	9b08      	ldr	r3, [sp, #32]
 800440c:	9306      	str	r3, [sp, #24]
 800440e:	2f00      	cmp	r7, #0
 8004410:	dd05      	ble.n	800441e <_dtoa_r+0x99e>
 8004412:	4631      	mov	r1, r6
 8004414:	463a      	mov	r2, r7
 8004416:	4628      	mov	r0, r5
 8004418:	f000 fc20 	bl	8004c5c <__lshift>
 800441c:	4606      	mov	r6, r0
 800441e:	f1b8 0f00 	cmp.w	r8, #0
 8004422:	d05b      	beq.n	80044dc <_dtoa_r+0xa5c>
 8004424:	4628      	mov	r0, r5
 8004426:	6871      	ldr	r1, [r6, #4]
 8004428:	f000 fa0a 	bl	8004840 <_Balloc>
 800442c:	4607      	mov	r7, r0
 800442e:	b928      	cbnz	r0, 800443c <_dtoa_r+0x9bc>
 8004430:	4602      	mov	r2, r0
 8004432:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004436:	4b81      	ldr	r3, [pc, #516]	; (800463c <_dtoa_r+0xbbc>)
 8004438:	f7ff bb36 	b.w	8003aa8 <_dtoa_r+0x28>
 800443c:	6932      	ldr	r2, [r6, #16]
 800443e:	f106 010c 	add.w	r1, r6, #12
 8004442:	3202      	adds	r2, #2
 8004444:	0092      	lsls	r2, r2, #2
 8004446:	300c      	adds	r0, #12
 8004448:	f001 f804 	bl	8005454 <memcpy>
 800444c:	2201      	movs	r2, #1
 800444e:	4639      	mov	r1, r7
 8004450:	4628      	mov	r0, r5
 8004452:	f000 fc03 	bl	8004c5c <__lshift>
 8004456:	46b0      	mov	r8, r6
 8004458:	4606      	mov	r6, r0
 800445a:	9b03      	ldr	r3, [sp, #12]
 800445c:	9a03      	ldr	r2, [sp, #12]
 800445e:	3301      	adds	r3, #1
 8004460:	9308      	str	r3, [sp, #32]
 8004462:	9b06      	ldr	r3, [sp, #24]
 8004464:	4413      	add	r3, r2
 8004466:	930b      	str	r3, [sp, #44]	; 0x2c
 8004468:	9b04      	ldr	r3, [sp, #16]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	930a      	str	r3, [sp, #40]	; 0x28
 8004470:	9b08      	ldr	r3, [sp, #32]
 8004472:	4621      	mov	r1, r4
 8004474:	3b01      	subs	r3, #1
 8004476:	4650      	mov	r0, sl
 8004478:	9304      	str	r3, [sp, #16]
 800447a:	f7ff fa76 	bl	800396a <quorem>
 800447e:	4641      	mov	r1, r8
 8004480:	9006      	str	r0, [sp, #24]
 8004482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004486:	4650      	mov	r0, sl
 8004488:	f000 fc54 	bl	8004d34 <__mcmp>
 800448c:	4632      	mov	r2, r6
 800448e:	9009      	str	r0, [sp, #36]	; 0x24
 8004490:	4621      	mov	r1, r4
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fc6a 	bl	8004d6c <__mdiff>
 8004498:	68c2      	ldr	r2, [r0, #12]
 800449a:	4607      	mov	r7, r0
 800449c:	bb02      	cbnz	r2, 80044e0 <_dtoa_r+0xa60>
 800449e:	4601      	mov	r1, r0
 80044a0:	4650      	mov	r0, sl
 80044a2:	f000 fc47 	bl	8004d34 <__mcmp>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4639      	mov	r1, r7
 80044aa:	4628      	mov	r0, r5
 80044ac:	920c      	str	r2, [sp, #48]	; 0x30
 80044ae:	f000 fa07 	bl	80048c0 <_Bfree>
 80044b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044b6:	9f08      	ldr	r7, [sp, #32]
 80044b8:	ea43 0102 	orr.w	r1, r3, r2
 80044bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044be:	4319      	orrs	r1, r3
 80044c0:	d110      	bne.n	80044e4 <_dtoa_r+0xa64>
 80044c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80044c6:	d029      	beq.n	800451c <_dtoa_r+0xa9c>
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	dd02      	ble.n	80044d4 <_dtoa_r+0xa54>
 80044ce:	9b06      	ldr	r3, [sp, #24]
 80044d0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	f883 9000 	strb.w	r9, [r3]
 80044da:	e777      	b.n	80043cc <_dtoa_r+0x94c>
 80044dc:	4630      	mov	r0, r6
 80044de:	e7ba      	b.n	8004456 <_dtoa_r+0x9d6>
 80044e0:	2201      	movs	r2, #1
 80044e2:	e7e1      	b.n	80044a8 <_dtoa_r+0xa28>
 80044e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	db04      	blt.n	80044f4 <_dtoa_r+0xa74>
 80044ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80044ec:	430b      	orrs	r3, r1
 80044ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044f0:	430b      	orrs	r3, r1
 80044f2:	d120      	bne.n	8004536 <_dtoa_r+0xab6>
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	dded      	ble.n	80044d4 <_dtoa_r+0xa54>
 80044f8:	4651      	mov	r1, sl
 80044fa:	2201      	movs	r2, #1
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 fbad 	bl	8004c5c <__lshift>
 8004502:	4621      	mov	r1, r4
 8004504:	4682      	mov	sl, r0
 8004506:	f000 fc15 	bl	8004d34 <__mcmp>
 800450a:	2800      	cmp	r0, #0
 800450c:	dc03      	bgt.n	8004516 <_dtoa_r+0xa96>
 800450e:	d1e1      	bne.n	80044d4 <_dtoa_r+0xa54>
 8004510:	f019 0f01 	tst.w	r9, #1
 8004514:	d0de      	beq.n	80044d4 <_dtoa_r+0xa54>
 8004516:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800451a:	d1d8      	bne.n	80044ce <_dtoa_r+0xa4e>
 800451c:	2339      	movs	r3, #57	; 0x39
 800451e:	9a04      	ldr	r2, [sp, #16]
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	463b      	mov	r3, r7
 8004524:	461f      	mov	r7, r3
 8004526:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800452a:	3b01      	subs	r3, #1
 800452c:	2a39      	cmp	r2, #57	; 0x39
 800452e:	d06b      	beq.n	8004608 <_dtoa_r+0xb88>
 8004530:	3201      	adds	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e74a      	b.n	80043cc <_dtoa_r+0x94c>
 8004536:	2a00      	cmp	r2, #0
 8004538:	dd07      	ble.n	800454a <_dtoa_r+0xaca>
 800453a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800453e:	d0ed      	beq.n	800451c <_dtoa_r+0xa9c>
 8004540:	9a04      	ldr	r2, [sp, #16]
 8004542:	f109 0301 	add.w	r3, r9, #1
 8004546:	7013      	strb	r3, [r2, #0]
 8004548:	e740      	b.n	80043cc <_dtoa_r+0x94c>
 800454a:	9b08      	ldr	r3, [sp, #32]
 800454c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800454e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004552:	4293      	cmp	r3, r2
 8004554:	d042      	beq.n	80045dc <_dtoa_r+0xb5c>
 8004556:	4651      	mov	r1, sl
 8004558:	2300      	movs	r3, #0
 800455a:	220a      	movs	r2, #10
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f9d1 	bl	8004904 <__multadd>
 8004562:	45b0      	cmp	r8, r6
 8004564:	4682      	mov	sl, r0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f04f 020a 	mov.w	r2, #10
 800456e:	4641      	mov	r1, r8
 8004570:	4628      	mov	r0, r5
 8004572:	d107      	bne.n	8004584 <_dtoa_r+0xb04>
 8004574:	f000 f9c6 	bl	8004904 <__multadd>
 8004578:	4680      	mov	r8, r0
 800457a:	4606      	mov	r6, r0
 800457c:	9b08      	ldr	r3, [sp, #32]
 800457e:	3301      	adds	r3, #1
 8004580:	9308      	str	r3, [sp, #32]
 8004582:	e775      	b.n	8004470 <_dtoa_r+0x9f0>
 8004584:	f000 f9be 	bl	8004904 <__multadd>
 8004588:	4631      	mov	r1, r6
 800458a:	4680      	mov	r8, r0
 800458c:	2300      	movs	r3, #0
 800458e:	220a      	movs	r2, #10
 8004590:	4628      	mov	r0, r5
 8004592:	f000 f9b7 	bl	8004904 <__multadd>
 8004596:	4606      	mov	r6, r0
 8004598:	e7f0      	b.n	800457c <_dtoa_r+0xafc>
 800459a:	9b08      	ldr	r3, [sp, #32]
 800459c:	9306      	str	r3, [sp, #24]
 800459e:	9f03      	ldr	r7, [sp, #12]
 80045a0:	4621      	mov	r1, r4
 80045a2:	4650      	mov	r0, sl
 80045a4:	f7ff f9e1 	bl	800396a <quorem>
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80045ae:	f807 9b01 	strb.w	r9, [r7], #1
 80045b2:	1afa      	subs	r2, r7, r3
 80045b4:	9b06      	ldr	r3, [sp, #24]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	dd07      	ble.n	80045ca <_dtoa_r+0xb4a>
 80045ba:	4651      	mov	r1, sl
 80045bc:	2300      	movs	r3, #0
 80045be:	220a      	movs	r2, #10
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 f99f 	bl	8004904 <__multadd>
 80045c6:	4682      	mov	sl, r0
 80045c8:	e7ea      	b.n	80045a0 <_dtoa_r+0xb20>
 80045ca:	9b06      	ldr	r3, [sp, #24]
 80045cc:	f04f 0800 	mov.w	r8, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfcc      	ite	gt
 80045d4:	461f      	movgt	r7, r3
 80045d6:	2701      	movle	r7, #1
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	441f      	add	r7, r3
 80045dc:	4651      	mov	r1, sl
 80045de:	2201      	movs	r2, #1
 80045e0:	4628      	mov	r0, r5
 80045e2:	f000 fb3b 	bl	8004c5c <__lshift>
 80045e6:	4621      	mov	r1, r4
 80045e8:	4682      	mov	sl, r0
 80045ea:	f000 fba3 	bl	8004d34 <__mcmp>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	dc97      	bgt.n	8004522 <_dtoa_r+0xaa2>
 80045f2:	d102      	bne.n	80045fa <_dtoa_r+0xb7a>
 80045f4:	f019 0f01 	tst.w	r9, #1
 80045f8:	d193      	bne.n	8004522 <_dtoa_r+0xaa2>
 80045fa:	463b      	mov	r3, r7
 80045fc:	461f      	mov	r7, r3
 80045fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004602:	2a30      	cmp	r2, #48	; 0x30
 8004604:	d0fa      	beq.n	80045fc <_dtoa_r+0xb7c>
 8004606:	e6e1      	b.n	80043cc <_dtoa_r+0x94c>
 8004608:	9a03      	ldr	r2, [sp, #12]
 800460a:	429a      	cmp	r2, r3
 800460c:	d18a      	bne.n	8004524 <_dtoa_r+0xaa4>
 800460e:	2331      	movs	r3, #49	; 0x31
 8004610:	f10b 0b01 	add.w	fp, fp, #1
 8004614:	e797      	b.n	8004546 <_dtoa_r+0xac6>
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <_dtoa_r+0xbc0>)
 8004618:	f7ff ba9f 	b.w	8003b5a <_dtoa_r+0xda>
 800461c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800461e:	2b00      	cmp	r3, #0
 8004620:	f47f aa77 	bne.w	8003b12 <_dtoa_r+0x92>
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <_dtoa_r+0xbc4>)
 8004626:	f7ff ba98 	b.w	8003b5a <_dtoa_r+0xda>
 800462a:	9b06      	ldr	r3, [sp, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	dcb6      	bgt.n	800459e <_dtoa_r+0xb1e>
 8004630:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004632:	2b02      	cmp	r3, #2
 8004634:	f73f aeb5 	bgt.w	80043a2 <_dtoa_r+0x922>
 8004638:	e7b1      	b.n	800459e <_dtoa_r+0xb1e>
 800463a:	bf00      	nop
 800463c:	080057d2 	.word	0x080057d2
 8004640:	08005732 	.word	0x08005732
 8004644:	08005756 	.word	0x08005756

08004648 <_free_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	d040      	beq.n	80046d2 <_free_r+0x8a>
 8004650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004654:	1f0c      	subs	r4, r1, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	18e4      	addlt	r4, r4, r3
 800465c:	f000 f8e4 	bl	8004828 <__malloc_lock>
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <_free_r+0x8c>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	b933      	cbnz	r3, 8004674 <_free_r+0x2c>
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6014      	str	r4, [r2, #0]
 800466a:	4628      	mov	r0, r5
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004670:	f000 b8e0 	b.w	8004834 <__malloc_unlock>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d908      	bls.n	800468a <_free_r+0x42>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1809      	addeq	r1, r1, r0
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	e7ed      	b.n	8004666 <_free_r+0x1e>
 800468a:	461a      	mov	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b10b      	cbz	r3, 8004694 <_free_r+0x4c>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x42>
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	1850      	adds	r0, r2, r1
 8004698:	42a0      	cmp	r0, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x6c>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	4401      	add	r1, r0
 80046a0:	1850      	adds	r0, r2, r1
 80046a2:	4283      	cmp	r3, r0
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	d1e0      	bne.n	800466a <_free_r+0x22>
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4408      	add	r0, r1
 80046ae:	6010      	str	r0, [r2, #0]
 80046b0:	6053      	str	r3, [r2, #4]
 80046b2:	e7da      	b.n	800466a <_free_r+0x22>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x74>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d6      	b.n	800466a <_free_r+0x22>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf01      	itttt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	1809      	addeq	r1, r1, r0
 80046ca:	6021      	streq	r1, [r4, #0]
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	6054      	str	r4, [r2, #4]
 80046d0:	e7cb      	b.n	800466a <_free_r+0x22>
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	200003d0 	.word	0x200003d0

080046d8 <malloc>:
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <malloc+0xc>)
 80046da:	4601      	mov	r1, r0
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	f000 b823 	b.w	8004728 <_malloc_r>
 80046e2:	bf00      	nop
 80046e4:	20000064 	.word	0x20000064

080046e8 <sbrk_aligned>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4e0e      	ldr	r6, [pc, #56]	; (8004724 <sbrk_aligned+0x3c>)
 80046ec:	460c      	mov	r4, r1
 80046ee:	6831      	ldr	r1, [r6, #0]
 80046f0:	4605      	mov	r5, r0
 80046f2:	b911      	cbnz	r1, 80046fa <sbrk_aligned+0x12>
 80046f4:	f000 fe9e 	bl	8005434 <_sbrk_r>
 80046f8:	6030      	str	r0, [r6, #0]
 80046fa:	4621      	mov	r1, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 fe99 	bl	8005434 <_sbrk_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	d00a      	beq.n	800471c <sbrk_aligned+0x34>
 8004706:	1cc4      	adds	r4, r0, #3
 8004708:	f024 0403 	bic.w	r4, r4, #3
 800470c:	42a0      	cmp	r0, r4
 800470e:	d007      	beq.n	8004720 <sbrk_aligned+0x38>
 8004710:	1a21      	subs	r1, r4, r0
 8004712:	4628      	mov	r0, r5
 8004714:	f000 fe8e 	bl	8005434 <_sbrk_r>
 8004718:	3001      	adds	r0, #1
 800471a:	d101      	bne.n	8004720 <sbrk_aligned+0x38>
 800471c:	f04f 34ff 	mov.w	r4, #4294967295
 8004720:	4620      	mov	r0, r4
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	200003d4 	.word	0x200003d4

08004728 <_malloc_r>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	1ccd      	adds	r5, r1, #3
 800472e:	f025 0503 	bic.w	r5, r5, #3
 8004732:	3508      	adds	r5, #8
 8004734:	2d0c      	cmp	r5, #12
 8004736:	bf38      	it	cc
 8004738:	250c      	movcc	r5, #12
 800473a:	2d00      	cmp	r5, #0
 800473c:	4607      	mov	r7, r0
 800473e:	db01      	blt.n	8004744 <_malloc_r+0x1c>
 8004740:	42a9      	cmp	r1, r5
 8004742:	d905      	bls.n	8004750 <_malloc_r+0x28>
 8004744:	230c      	movs	r3, #12
 8004746:	2600      	movs	r6, #0
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4630      	mov	r0, r6
 800474c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004750:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004824 <_malloc_r+0xfc>
 8004754:	f000 f868 	bl	8004828 <__malloc_lock>
 8004758:	f8d8 3000 	ldr.w	r3, [r8]
 800475c:	461c      	mov	r4, r3
 800475e:	bb5c      	cbnz	r4, 80047b8 <_malloc_r+0x90>
 8004760:	4629      	mov	r1, r5
 8004762:	4638      	mov	r0, r7
 8004764:	f7ff ffc0 	bl	80046e8 <sbrk_aligned>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	4604      	mov	r4, r0
 800476c:	d155      	bne.n	800481a <_malloc_r+0xf2>
 800476e:	f8d8 4000 	ldr.w	r4, [r8]
 8004772:	4626      	mov	r6, r4
 8004774:	2e00      	cmp	r6, #0
 8004776:	d145      	bne.n	8004804 <_malloc_r+0xdc>
 8004778:	2c00      	cmp	r4, #0
 800477a:	d048      	beq.n	800480e <_malloc_r+0xe6>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	4631      	mov	r1, r6
 8004780:	4638      	mov	r0, r7
 8004782:	eb04 0903 	add.w	r9, r4, r3
 8004786:	f000 fe55 	bl	8005434 <_sbrk_r>
 800478a:	4581      	cmp	r9, r0
 800478c:	d13f      	bne.n	800480e <_malloc_r+0xe6>
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	4638      	mov	r0, r7
 8004792:	1a6d      	subs	r5, r5, r1
 8004794:	4629      	mov	r1, r5
 8004796:	f7ff ffa7 	bl	80046e8 <sbrk_aligned>
 800479a:	3001      	adds	r0, #1
 800479c:	d037      	beq.n	800480e <_malloc_r+0xe6>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	442b      	add	r3, r5
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	f8d8 3000 	ldr.w	r3, [r8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d038      	beq.n	800481e <_malloc_r+0xf6>
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	42a2      	cmp	r2, r4
 80047b0:	d12b      	bne.n	800480a <_malloc_r+0xe2>
 80047b2:	2200      	movs	r2, #0
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	e00f      	b.n	80047d8 <_malloc_r+0xb0>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	1b52      	subs	r2, r2, r5
 80047bc:	d41f      	bmi.n	80047fe <_malloc_r+0xd6>
 80047be:	2a0b      	cmp	r2, #11
 80047c0:	d917      	bls.n	80047f2 <_malloc_r+0xca>
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	6025      	str	r5, [r4, #0]
 80047c8:	bf18      	it	ne
 80047ca:	6059      	strne	r1, [r3, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	bf08      	it	eq
 80047d0:	f8c8 1000 	streq.w	r1, [r8]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4638      	mov	r0, r7
 80047da:	f104 060b 	add.w	r6, r4, #11
 80047de:	f000 f829 	bl	8004834 <__malloc_unlock>
 80047e2:	f026 0607 	bic.w	r6, r6, #7
 80047e6:	1d23      	adds	r3, r4, #4
 80047e8:	1af2      	subs	r2, r6, r3
 80047ea:	d0ae      	beq.n	800474a <_malloc_r+0x22>
 80047ec:	1b9b      	subs	r3, r3, r6
 80047ee:	50a3      	str	r3, [r4, r2]
 80047f0:	e7ab      	b.n	800474a <_malloc_r+0x22>
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	6862      	ldr	r2, [r4, #4]
 80047f6:	d1dd      	bne.n	80047b4 <_malloc_r+0x8c>
 80047f8:	f8c8 2000 	str.w	r2, [r8]
 80047fc:	e7ec      	b.n	80047d8 <_malloc_r+0xb0>
 80047fe:	4623      	mov	r3, r4
 8004800:	6864      	ldr	r4, [r4, #4]
 8004802:	e7ac      	b.n	800475e <_malloc_r+0x36>
 8004804:	4634      	mov	r4, r6
 8004806:	6876      	ldr	r6, [r6, #4]
 8004808:	e7b4      	b.n	8004774 <_malloc_r+0x4c>
 800480a:	4613      	mov	r3, r2
 800480c:	e7cc      	b.n	80047a8 <_malloc_r+0x80>
 800480e:	230c      	movs	r3, #12
 8004810:	4638      	mov	r0, r7
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	f000 f80e 	bl	8004834 <__malloc_unlock>
 8004818:	e797      	b.n	800474a <_malloc_r+0x22>
 800481a:	6025      	str	r5, [r4, #0]
 800481c:	e7dc      	b.n	80047d8 <_malloc_r+0xb0>
 800481e:	605b      	str	r3, [r3, #4]
 8004820:	deff      	udf	#255	; 0xff
 8004822:	bf00      	nop
 8004824:	200003d0 	.word	0x200003d0

08004828 <__malloc_lock>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__malloc_lock+0x8>)
 800482a:	f7ff b88e 	b.w	800394a <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	200003cc 	.word	0x200003cc

08004834 <__malloc_unlock>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__malloc_unlock+0x8>)
 8004836:	f7ff b889 	b.w	800394c <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	200003cc 	.word	0x200003cc

08004840 <_Balloc>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	69c6      	ldr	r6, [r0, #28]
 8004844:	4604      	mov	r4, r0
 8004846:	460d      	mov	r5, r1
 8004848:	b976      	cbnz	r6, 8004868 <_Balloc+0x28>
 800484a:	2010      	movs	r0, #16
 800484c:	f7ff ff44 	bl	80046d8 <malloc>
 8004850:	4602      	mov	r2, r0
 8004852:	61e0      	str	r0, [r4, #28]
 8004854:	b920      	cbnz	r0, 8004860 <_Balloc+0x20>
 8004856:	216b      	movs	r1, #107	; 0x6b
 8004858:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <_Balloc+0x78>)
 800485a:	4818      	ldr	r0, [pc, #96]	; (80048bc <_Balloc+0x7c>)
 800485c:	f000 fe08 	bl	8005470 <__assert_func>
 8004860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004864:	6006      	str	r6, [r0, #0]
 8004866:	60c6      	str	r6, [r0, #12]
 8004868:	69e6      	ldr	r6, [r4, #28]
 800486a:	68f3      	ldr	r3, [r6, #12]
 800486c:	b183      	cbz	r3, 8004890 <_Balloc+0x50>
 800486e:	69e3      	ldr	r3, [r4, #28]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004876:	b9b8      	cbnz	r0, 80048a8 <_Balloc+0x68>
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f605 	lsl.w	r6, r1, r5
 800487e:	1d72      	adds	r2, r6, #5
 8004880:	4620      	mov	r0, r4
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	f000 fe12 	bl	80054ac <_calloc_r>
 8004888:	b160      	cbz	r0, 80048a4 <_Balloc+0x64>
 800488a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800488e:	e00e      	b.n	80048ae <_Balloc+0x6e>
 8004890:	2221      	movs	r2, #33	; 0x21
 8004892:	2104      	movs	r1, #4
 8004894:	4620      	mov	r0, r4
 8004896:	f000 fe09 	bl	80054ac <_calloc_r>
 800489a:	69e3      	ldr	r3, [r4, #28]
 800489c:	60f0      	str	r0, [r6, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e4      	bne.n	800486e <_Balloc+0x2e>
 80048a4:	2000      	movs	r0, #0
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	6802      	ldr	r2, [r0, #0]
 80048aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80048ae:	2300      	movs	r3, #0
 80048b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80048b4:	e7f7      	b.n	80048a6 <_Balloc+0x66>
 80048b6:	bf00      	nop
 80048b8:	08005763 	.word	0x08005763
 80048bc:	080057e3 	.word	0x080057e3

080048c0 <_Bfree>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	69c6      	ldr	r6, [r0, #28]
 80048c4:	4605      	mov	r5, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b976      	cbnz	r6, 80048e8 <_Bfree+0x28>
 80048ca:	2010      	movs	r0, #16
 80048cc:	f7ff ff04 	bl	80046d8 <malloc>
 80048d0:	4602      	mov	r2, r0
 80048d2:	61e8      	str	r0, [r5, #28]
 80048d4:	b920      	cbnz	r0, 80048e0 <_Bfree+0x20>
 80048d6:	218f      	movs	r1, #143	; 0x8f
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <_Bfree+0x3c>)
 80048da:	4809      	ldr	r0, [pc, #36]	; (8004900 <_Bfree+0x40>)
 80048dc:	f000 fdc8 	bl	8005470 <__assert_func>
 80048e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048e4:	6006      	str	r6, [r0, #0]
 80048e6:	60c6      	str	r6, [r0, #12]
 80048e8:	b13c      	cbz	r4, 80048fa <_Bfree+0x3a>
 80048ea:	69eb      	ldr	r3, [r5, #28]
 80048ec:	6862      	ldr	r2, [r4, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048f4:	6021      	str	r1, [r4, #0]
 80048f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	08005763 	.word	0x08005763
 8004900:	080057e3 	.word	0x080057e3

08004904 <__multadd>:
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	4607      	mov	r7, r0
 800490a:	460c      	mov	r4, r1
 800490c:	461e      	mov	r6, r3
 800490e:	2000      	movs	r0, #0
 8004910:	690d      	ldr	r5, [r1, #16]
 8004912:	f101 0c14 	add.w	ip, r1, #20
 8004916:	f8dc 3000 	ldr.w	r3, [ip]
 800491a:	3001      	adds	r0, #1
 800491c:	b299      	uxth	r1, r3
 800491e:	fb02 6101 	mla	r1, r2, r1, r6
 8004922:	0c1e      	lsrs	r6, r3, #16
 8004924:	0c0b      	lsrs	r3, r1, #16
 8004926:	fb02 3306 	mla	r3, r2, r6, r3
 800492a:	b289      	uxth	r1, r1
 800492c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004930:	4285      	cmp	r5, r0
 8004932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004936:	f84c 1b04 	str.w	r1, [ip], #4
 800493a:	dcec      	bgt.n	8004916 <__multadd+0x12>
 800493c:	b30e      	cbz	r6, 8004982 <__multadd+0x7e>
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	42ab      	cmp	r3, r5
 8004942:	dc19      	bgt.n	8004978 <__multadd+0x74>
 8004944:	6861      	ldr	r1, [r4, #4]
 8004946:	4638      	mov	r0, r7
 8004948:	3101      	adds	r1, #1
 800494a:	f7ff ff79 	bl	8004840 <_Balloc>
 800494e:	4680      	mov	r8, r0
 8004950:	b928      	cbnz	r0, 800495e <__multadd+0x5a>
 8004952:	4602      	mov	r2, r0
 8004954:	21ba      	movs	r1, #186	; 0xba
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <__multadd+0x84>)
 8004958:	480c      	ldr	r0, [pc, #48]	; (800498c <__multadd+0x88>)
 800495a:	f000 fd89 	bl	8005470 <__assert_func>
 800495e:	6922      	ldr	r2, [r4, #16]
 8004960:	f104 010c 	add.w	r1, r4, #12
 8004964:	3202      	adds	r2, #2
 8004966:	0092      	lsls	r2, r2, #2
 8004968:	300c      	adds	r0, #12
 800496a:	f000 fd73 	bl	8005454 <memcpy>
 800496e:	4621      	mov	r1, r4
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ffa5 	bl	80048c0 <_Bfree>
 8004976:	4644      	mov	r4, r8
 8004978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800497c:	3501      	adds	r5, #1
 800497e:	615e      	str	r6, [r3, #20]
 8004980:	6125      	str	r5, [r4, #16]
 8004982:	4620      	mov	r0, r4
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004988:	080057d2 	.word	0x080057d2
 800498c:	080057e3 	.word	0x080057e3

08004990 <__hi0bits>:
 8004990:	0c02      	lsrs	r2, r0, #16
 8004992:	0412      	lsls	r2, r2, #16
 8004994:	4603      	mov	r3, r0
 8004996:	b9ca      	cbnz	r2, 80049cc <__hi0bits+0x3c>
 8004998:	0403      	lsls	r3, r0, #16
 800499a:	2010      	movs	r0, #16
 800499c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049a0:	bf04      	itt	eq
 80049a2:	021b      	lsleq	r3, r3, #8
 80049a4:	3008      	addeq	r0, #8
 80049a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049aa:	bf04      	itt	eq
 80049ac:	011b      	lsleq	r3, r3, #4
 80049ae:	3004      	addeq	r0, #4
 80049b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80049b4:	bf04      	itt	eq
 80049b6:	009b      	lsleq	r3, r3, #2
 80049b8:	3002      	addeq	r0, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db05      	blt.n	80049ca <__hi0bits+0x3a>
 80049be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80049c2:	f100 0001 	add.w	r0, r0, #1
 80049c6:	bf08      	it	eq
 80049c8:	2020      	moveq	r0, #32
 80049ca:	4770      	bx	lr
 80049cc:	2000      	movs	r0, #0
 80049ce:	e7e5      	b.n	800499c <__hi0bits+0xc>

080049d0 <__lo0bits>:
 80049d0:	6803      	ldr	r3, [r0, #0]
 80049d2:	4602      	mov	r2, r0
 80049d4:	f013 0007 	ands.w	r0, r3, #7
 80049d8:	d00b      	beq.n	80049f2 <__lo0bits+0x22>
 80049da:	07d9      	lsls	r1, r3, #31
 80049dc:	d421      	bmi.n	8004a22 <__lo0bits+0x52>
 80049de:	0798      	lsls	r0, r3, #30
 80049e0:	bf49      	itett	mi
 80049e2:	085b      	lsrmi	r3, r3, #1
 80049e4:	089b      	lsrpl	r3, r3, #2
 80049e6:	2001      	movmi	r0, #1
 80049e8:	6013      	strmi	r3, [r2, #0]
 80049ea:	bf5c      	itt	pl
 80049ec:	2002      	movpl	r0, #2
 80049ee:	6013      	strpl	r3, [r2, #0]
 80049f0:	4770      	bx	lr
 80049f2:	b299      	uxth	r1, r3
 80049f4:	b909      	cbnz	r1, 80049fa <__lo0bits+0x2a>
 80049f6:	2010      	movs	r0, #16
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	b2d9      	uxtb	r1, r3
 80049fc:	b909      	cbnz	r1, 8004a02 <__lo0bits+0x32>
 80049fe:	3008      	adds	r0, #8
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	0719      	lsls	r1, r3, #28
 8004a04:	bf04      	itt	eq
 8004a06:	091b      	lsreq	r3, r3, #4
 8004a08:	3004      	addeq	r0, #4
 8004a0a:	0799      	lsls	r1, r3, #30
 8004a0c:	bf04      	itt	eq
 8004a0e:	089b      	lsreq	r3, r3, #2
 8004a10:	3002      	addeq	r0, #2
 8004a12:	07d9      	lsls	r1, r3, #31
 8004a14:	d403      	bmi.n	8004a1e <__lo0bits+0x4e>
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	f100 0001 	add.w	r0, r0, #1
 8004a1c:	d003      	beq.n	8004a26 <__lo0bits+0x56>
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4770      	bx	lr
 8004a22:	2000      	movs	r0, #0
 8004a24:	4770      	bx	lr
 8004a26:	2020      	movs	r0, #32
 8004a28:	4770      	bx	lr
	...

08004a2c <__i2b>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	460c      	mov	r4, r1
 8004a30:	2101      	movs	r1, #1
 8004a32:	f7ff ff05 	bl	8004840 <_Balloc>
 8004a36:	4602      	mov	r2, r0
 8004a38:	b928      	cbnz	r0, 8004a46 <__i2b+0x1a>
 8004a3a:	f240 1145 	movw	r1, #325	; 0x145
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <__i2b+0x24>)
 8004a40:	4804      	ldr	r0, [pc, #16]	; (8004a54 <__i2b+0x28>)
 8004a42:	f000 fd15 	bl	8005470 <__assert_func>
 8004a46:	2301      	movs	r3, #1
 8004a48:	6144      	str	r4, [r0, #20]
 8004a4a:	6103      	str	r3, [r0, #16]
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	bf00      	nop
 8004a50:	080057d2 	.word	0x080057d2
 8004a54:	080057e3 	.word	0x080057e3

08004a58 <__multiply>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	4691      	mov	r9, r2
 8004a5e:	690a      	ldr	r2, [r1, #16]
 8004a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a64:	460c      	mov	r4, r1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bfbe      	ittt	lt
 8004a6a:	460b      	movlt	r3, r1
 8004a6c:	464c      	movlt	r4, r9
 8004a6e:	4699      	movlt	r9, r3
 8004a70:	6927      	ldr	r7, [r4, #16]
 8004a72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004a76:	68a3      	ldr	r3, [r4, #8]
 8004a78:	6861      	ldr	r1, [r4, #4]
 8004a7a:	eb07 060a 	add.w	r6, r7, sl
 8004a7e:	42b3      	cmp	r3, r6
 8004a80:	b085      	sub	sp, #20
 8004a82:	bfb8      	it	lt
 8004a84:	3101      	addlt	r1, #1
 8004a86:	f7ff fedb 	bl	8004840 <_Balloc>
 8004a8a:	b930      	cbnz	r0, 8004a9a <__multiply+0x42>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004a92:	4b43      	ldr	r3, [pc, #268]	; (8004ba0 <__multiply+0x148>)
 8004a94:	4843      	ldr	r0, [pc, #268]	; (8004ba4 <__multiply+0x14c>)
 8004a96:	f000 fceb 	bl	8005470 <__assert_func>
 8004a9a:	f100 0514 	add.w	r5, r0, #20
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004aa6:	4543      	cmp	r3, r8
 8004aa8:	d321      	bcc.n	8004aee <__multiply+0x96>
 8004aaa:	f104 0314 	add.w	r3, r4, #20
 8004aae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ab2:	f109 0314 	add.w	r3, r9, #20
 8004ab6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004aba:	9202      	str	r2, [sp, #8]
 8004abc:	1b3a      	subs	r2, r7, r4
 8004abe:	3a15      	subs	r2, #21
 8004ac0:	f022 0203 	bic.w	r2, r2, #3
 8004ac4:	3204      	adds	r2, #4
 8004ac6:	f104 0115 	add.w	r1, r4, #21
 8004aca:	428f      	cmp	r7, r1
 8004acc:	bf38      	it	cc
 8004ace:	2204      	movcc	r2, #4
 8004ad0:	9201      	str	r2, [sp, #4]
 8004ad2:	9a02      	ldr	r2, [sp, #8]
 8004ad4:	9303      	str	r3, [sp, #12]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d80c      	bhi.n	8004af4 <__multiply+0x9c>
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	dd03      	ble.n	8004ae6 <__multiply+0x8e>
 8004ade:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d05a      	beq.n	8004b9c <__multiply+0x144>
 8004ae6:	6106      	str	r6, [r0, #16]
 8004ae8:	b005      	add	sp, #20
 8004aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aee:	f843 2b04 	str.w	r2, [r3], #4
 8004af2:	e7d8      	b.n	8004aa6 <__multiply+0x4e>
 8004af4:	f8b3 a000 	ldrh.w	sl, [r3]
 8004af8:	f1ba 0f00 	cmp.w	sl, #0
 8004afc:	d023      	beq.n	8004b46 <__multiply+0xee>
 8004afe:	46a9      	mov	r9, r5
 8004b00:	f04f 0c00 	mov.w	ip, #0
 8004b04:	f104 0e14 	add.w	lr, r4, #20
 8004b08:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004b0c:	f8d9 1000 	ldr.w	r1, [r9]
 8004b10:	fa1f fb82 	uxth.w	fp, r2
 8004b14:	b289      	uxth	r1, r1
 8004b16:	fb0a 110b 	mla	r1, sl, fp, r1
 8004b1a:	4461      	add	r1, ip
 8004b1c:	f8d9 c000 	ldr.w	ip, [r9]
 8004b20:	0c12      	lsrs	r2, r2, #16
 8004b22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b26:	fb0a c202 	mla	r2, sl, r2, ip
 8004b2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004b2e:	b289      	uxth	r1, r1
 8004b30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b34:	4577      	cmp	r7, lr
 8004b36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004b3a:	f849 1b04 	str.w	r1, [r9], #4
 8004b3e:	d8e3      	bhi.n	8004b08 <__multiply+0xb0>
 8004b40:	9a01      	ldr	r2, [sp, #4]
 8004b42:	f845 c002 	str.w	ip, [r5, r2]
 8004b46:	9a03      	ldr	r2, [sp, #12]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004b4e:	f1b9 0f00 	cmp.w	r9, #0
 8004b52:	d021      	beq.n	8004b98 <__multiply+0x140>
 8004b54:	46ae      	mov	lr, r5
 8004b56:	f04f 0a00 	mov.w	sl, #0
 8004b5a:	6829      	ldr	r1, [r5, #0]
 8004b5c:	f104 0c14 	add.w	ip, r4, #20
 8004b60:	f8bc b000 	ldrh.w	fp, [ip]
 8004b64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004b68:	b289      	uxth	r1, r1
 8004b6a:	fb09 220b 	mla	r2, r9, fp, r2
 8004b6e:	4452      	add	r2, sl
 8004b70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b74:	f84e 1b04 	str.w	r1, [lr], #4
 8004b78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004b7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b80:	f8be 1000 	ldrh.w	r1, [lr]
 8004b84:	4567      	cmp	r7, ip
 8004b86:	fb09 110a 	mla	r1, r9, sl, r1
 8004b8a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004b8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b92:	d8e5      	bhi.n	8004b60 <__multiply+0x108>
 8004b94:	9a01      	ldr	r2, [sp, #4]
 8004b96:	50a9      	str	r1, [r5, r2]
 8004b98:	3504      	adds	r5, #4
 8004b9a:	e79a      	b.n	8004ad2 <__multiply+0x7a>
 8004b9c:	3e01      	subs	r6, #1
 8004b9e:	e79c      	b.n	8004ada <__multiply+0x82>
 8004ba0:	080057d2 	.word	0x080057d2
 8004ba4:	080057e3 	.word	0x080057e3

08004ba8 <__pow5mult>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4615      	mov	r5, r2
 8004bae:	f012 0203 	ands.w	r2, r2, #3
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460f      	mov	r7, r1
 8004bb6:	d007      	beq.n	8004bc8 <__pow5mult+0x20>
 8004bb8:	4c25      	ldr	r4, [pc, #148]	; (8004c50 <__pow5mult+0xa8>)
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bc2:	f7ff fe9f 	bl	8004904 <__multadd>
 8004bc6:	4607      	mov	r7, r0
 8004bc8:	10ad      	asrs	r5, r5, #2
 8004bca:	d03d      	beq.n	8004c48 <__pow5mult+0xa0>
 8004bcc:	69f4      	ldr	r4, [r6, #28]
 8004bce:	b97c      	cbnz	r4, 8004bf0 <__pow5mult+0x48>
 8004bd0:	2010      	movs	r0, #16
 8004bd2:	f7ff fd81 	bl	80046d8 <malloc>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	61f0      	str	r0, [r6, #28]
 8004bda:	b928      	cbnz	r0, 8004be8 <__pow5mult+0x40>
 8004bdc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004be0:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <__pow5mult+0xac>)
 8004be2:	481d      	ldr	r0, [pc, #116]	; (8004c58 <__pow5mult+0xb0>)
 8004be4:	f000 fc44 	bl	8005470 <__assert_func>
 8004be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bec:	6004      	str	r4, [r0, #0]
 8004bee:	60c4      	str	r4, [r0, #12]
 8004bf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004bf8:	b94c      	cbnz	r4, 8004c0e <__pow5mult+0x66>
 8004bfa:	f240 2171 	movw	r1, #625	; 0x271
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f7ff ff14 	bl	8004a2c <__i2b>
 8004c04:	2300      	movs	r3, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c0c:	6003      	str	r3, [r0, #0]
 8004c0e:	f04f 0900 	mov.w	r9, #0
 8004c12:	07eb      	lsls	r3, r5, #31
 8004c14:	d50a      	bpl.n	8004c2c <__pow5mult+0x84>
 8004c16:	4639      	mov	r1, r7
 8004c18:	4622      	mov	r2, r4
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7ff ff1c 	bl	8004a58 <__multiply>
 8004c20:	4680      	mov	r8, r0
 8004c22:	4639      	mov	r1, r7
 8004c24:	4630      	mov	r0, r6
 8004c26:	f7ff fe4b 	bl	80048c0 <_Bfree>
 8004c2a:	4647      	mov	r7, r8
 8004c2c:	106d      	asrs	r5, r5, #1
 8004c2e:	d00b      	beq.n	8004c48 <__pow5mult+0xa0>
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	b938      	cbnz	r0, 8004c44 <__pow5mult+0x9c>
 8004c34:	4622      	mov	r2, r4
 8004c36:	4621      	mov	r1, r4
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f7ff ff0d 	bl	8004a58 <__multiply>
 8004c3e:	6020      	str	r0, [r4, #0]
 8004c40:	f8c0 9000 	str.w	r9, [r0]
 8004c44:	4604      	mov	r4, r0
 8004c46:	e7e4      	b.n	8004c12 <__pow5mult+0x6a>
 8004c48:	4638      	mov	r0, r7
 8004c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4e:	bf00      	nop
 8004c50:	08005930 	.word	0x08005930
 8004c54:	08005763 	.word	0x08005763
 8004c58:	080057e3 	.word	0x080057e3

08004c5c <__lshift>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	460c      	mov	r4, r1
 8004c62:	4607      	mov	r7, r0
 8004c64:	4691      	mov	r9, r2
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	6849      	ldr	r1, [r1, #4]
 8004c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c6e:	68a3      	ldr	r3, [r4, #8]
 8004c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c74:	f108 0601 	add.w	r6, r8, #1
 8004c78:	42b3      	cmp	r3, r6
 8004c7a:	db0b      	blt.n	8004c94 <__lshift+0x38>
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff fddf 	bl	8004840 <_Balloc>
 8004c82:	4605      	mov	r5, r0
 8004c84:	b948      	cbnz	r0, 8004c9a <__lshift+0x3e>
 8004c86:	4602      	mov	r2, r0
 8004c88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <__lshift+0xd0>)
 8004c8e:	4828      	ldr	r0, [pc, #160]	; (8004d30 <__lshift+0xd4>)
 8004c90:	f000 fbee 	bl	8005470 <__assert_func>
 8004c94:	3101      	adds	r1, #1
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	e7ee      	b.n	8004c78 <__lshift+0x1c>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f100 0114 	add.w	r1, r0, #20
 8004ca0:	f100 0210 	add.w	r2, r0, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	4553      	cmp	r3, sl
 8004ca8:	db33      	blt.n	8004d12 <__lshift+0xb6>
 8004caa:	6920      	ldr	r0, [r4, #16]
 8004cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004cb0:	f104 0314 	add.w	r3, r4, #20
 8004cb4:	f019 091f 	ands.w	r9, r9, #31
 8004cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004cc0:	d02b      	beq.n	8004d1a <__lshift+0xbe>
 8004cc2:	468a      	mov	sl, r1
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8004cd0:	4310      	orrs	r0, r2
 8004cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8004cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cda:	459c      	cmp	ip, r3
 8004cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ce0:	d8f3      	bhi.n	8004cca <__lshift+0x6e>
 8004ce2:	ebac 0304 	sub.w	r3, ip, r4
 8004ce6:	3b15      	subs	r3, #21
 8004ce8:	f023 0303 	bic.w	r3, r3, #3
 8004cec:	3304      	adds	r3, #4
 8004cee:	f104 0015 	add.w	r0, r4, #21
 8004cf2:	4584      	cmp	ip, r0
 8004cf4:	bf38      	it	cc
 8004cf6:	2304      	movcc	r3, #4
 8004cf8:	50ca      	str	r2, [r1, r3]
 8004cfa:	b10a      	cbz	r2, 8004d00 <__lshift+0xa4>
 8004cfc:	f108 0602 	add.w	r6, r8, #2
 8004d00:	3e01      	subs	r6, #1
 8004d02:	4638      	mov	r0, r7
 8004d04:	4621      	mov	r1, r4
 8004d06:	612e      	str	r6, [r5, #16]
 8004d08:	f7ff fdda 	bl	80048c0 <_Bfree>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d16:	3301      	adds	r3, #1
 8004d18:	e7c5      	b.n	8004ca6 <__lshift+0x4a>
 8004d1a:	3904      	subs	r1, #4
 8004d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d20:	459c      	cmp	ip, r3
 8004d22:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d26:	d8f9      	bhi.n	8004d1c <__lshift+0xc0>
 8004d28:	e7ea      	b.n	8004d00 <__lshift+0xa4>
 8004d2a:	bf00      	nop
 8004d2c:	080057d2 	.word	0x080057d2
 8004d30:	080057e3 	.word	0x080057e3

08004d34 <__mcmp>:
 8004d34:	4603      	mov	r3, r0
 8004d36:	690a      	ldr	r2, [r1, #16]
 8004d38:	6900      	ldr	r0, [r0, #16]
 8004d3a:	b530      	push	{r4, r5, lr}
 8004d3c:	1a80      	subs	r0, r0, r2
 8004d3e:	d10d      	bne.n	8004d5c <__mcmp+0x28>
 8004d40:	3314      	adds	r3, #20
 8004d42:	3114      	adds	r1, #20
 8004d44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004d48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d54:	4295      	cmp	r5, r2
 8004d56:	d002      	beq.n	8004d5e <__mcmp+0x2a>
 8004d58:	d304      	bcc.n	8004d64 <__mcmp+0x30>
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	bd30      	pop	{r4, r5, pc}
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	d3f4      	bcc.n	8004d4c <__mcmp+0x18>
 8004d62:	e7fb      	b.n	8004d5c <__mcmp+0x28>
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e7f8      	b.n	8004d5c <__mcmp+0x28>
	...

08004d6c <__mdiff>:
 8004d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	460d      	mov	r5, r1
 8004d72:	4607      	mov	r7, r0
 8004d74:	4611      	mov	r1, r2
 8004d76:	4628      	mov	r0, r5
 8004d78:	4614      	mov	r4, r2
 8004d7a:	f7ff ffdb 	bl	8004d34 <__mcmp>
 8004d7e:	1e06      	subs	r6, r0, #0
 8004d80:	d111      	bne.n	8004da6 <__mdiff+0x3a>
 8004d82:	4631      	mov	r1, r6
 8004d84:	4638      	mov	r0, r7
 8004d86:	f7ff fd5b 	bl	8004840 <_Balloc>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	b928      	cbnz	r0, 8004d9a <__mdiff+0x2e>
 8004d8e:	f240 2137 	movw	r1, #567	; 0x237
 8004d92:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <__mdiff+0x110>)
 8004d94:	483a      	ldr	r0, [pc, #232]	; (8004e80 <__mdiff+0x114>)
 8004d96:	f000 fb6b 	bl	8005470 <__assert_func>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004da0:	4610      	mov	r0, r2
 8004da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da6:	bfa4      	itt	ge
 8004da8:	4623      	movge	r3, r4
 8004daa:	462c      	movge	r4, r5
 8004dac:	4638      	mov	r0, r7
 8004dae:	6861      	ldr	r1, [r4, #4]
 8004db0:	bfa6      	itte	ge
 8004db2:	461d      	movge	r5, r3
 8004db4:	2600      	movge	r6, #0
 8004db6:	2601      	movlt	r6, #1
 8004db8:	f7ff fd42 	bl	8004840 <_Balloc>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	b918      	cbnz	r0, 8004dc8 <__mdiff+0x5c>
 8004dc0:	f240 2145 	movw	r1, #581	; 0x245
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <__mdiff+0x110>)
 8004dc6:	e7e5      	b.n	8004d94 <__mdiff+0x28>
 8004dc8:	f102 0814 	add.w	r8, r2, #20
 8004dcc:	46c2      	mov	sl, r8
 8004dce:	f04f 0c00 	mov.w	ip, #0
 8004dd2:	6927      	ldr	r7, [r4, #16]
 8004dd4:	60c6      	str	r6, [r0, #12]
 8004dd6:	692e      	ldr	r6, [r5, #16]
 8004dd8:	f104 0014 	add.w	r0, r4, #20
 8004ddc:	f105 0914 	add.w	r9, r5, #20
 8004de0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004de4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004de8:	3410      	adds	r4, #16
 8004dea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004dee:	f859 3b04 	ldr.w	r3, [r9], #4
 8004df2:	fa1f f18b 	uxth.w	r1, fp
 8004df6:	4461      	add	r1, ip
 8004df8:	fa1f fc83 	uxth.w	ip, r3
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	eba1 010c 	sub.w	r1, r1, ip
 8004e02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004e0a:	b289      	uxth	r1, r1
 8004e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e10:	454e      	cmp	r6, r9
 8004e12:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004e16:	f84a 1b04 	str.w	r1, [sl], #4
 8004e1a:	d8e6      	bhi.n	8004dea <__mdiff+0x7e>
 8004e1c:	1b73      	subs	r3, r6, r5
 8004e1e:	3b15      	subs	r3, #21
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	3515      	adds	r5, #21
 8004e26:	3304      	adds	r3, #4
 8004e28:	42ae      	cmp	r6, r5
 8004e2a:	bf38      	it	cc
 8004e2c:	2304      	movcc	r3, #4
 8004e2e:	4418      	add	r0, r3
 8004e30:	4443      	add	r3, r8
 8004e32:	461e      	mov	r6, r3
 8004e34:	4605      	mov	r5, r0
 8004e36:	4575      	cmp	r5, lr
 8004e38:	d30e      	bcc.n	8004e58 <__mdiff+0xec>
 8004e3a:	f10e 0103 	add.w	r1, lr, #3
 8004e3e:	1a09      	subs	r1, r1, r0
 8004e40:	f021 0103 	bic.w	r1, r1, #3
 8004e44:	3803      	subs	r0, #3
 8004e46:	4586      	cmp	lr, r0
 8004e48:	bf38      	it	cc
 8004e4a:	2100      	movcc	r1, #0
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004e52:	b189      	cbz	r1, 8004e78 <__mdiff+0x10c>
 8004e54:	6117      	str	r7, [r2, #16]
 8004e56:	e7a3      	b.n	8004da0 <__mdiff+0x34>
 8004e58:	f855 8b04 	ldr.w	r8, [r5], #4
 8004e5c:	fa1f f188 	uxth.w	r1, r8
 8004e60:	4461      	add	r1, ip
 8004e62:	140c      	asrs	r4, r1, #16
 8004e64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004e68:	b289      	uxth	r1, r1
 8004e6a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004e6e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004e72:	f846 1b04 	str.w	r1, [r6], #4
 8004e76:	e7de      	b.n	8004e36 <__mdiff+0xca>
 8004e78:	3f01      	subs	r7, #1
 8004e7a:	e7e8      	b.n	8004e4e <__mdiff+0xe2>
 8004e7c:	080057d2 	.word	0x080057d2
 8004e80:	080057e3 	.word	0x080057e3

08004e84 <__d2b>:
 8004e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e86:	2101      	movs	r1, #1
 8004e88:	4617      	mov	r7, r2
 8004e8a:	461c      	mov	r4, r3
 8004e8c:	9e08      	ldr	r6, [sp, #32]
 8004e8e:	f7ff fcd7 	bl	8004840 <_Balloc>
 8004e92:	4605      	mov	r5, r0
 8004e94:	b930      	cbnz	r0, 8004ea4 <__d2b+0x20>
 8004e96:	4602      	mov	r2, r0
 8004e98:	f240 310f 	movw	r1, #783	; 0x30f
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <__d2b+0xa4>)
 8004e9e:	4823      	ldr	r0, [pc, #140]	; (8004f2c <__d2b+0xa8>)
 8004ea0:	f000 fae6 	bl	8005470 <__assert_func>
 8004ea4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004ea8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004eac:	bb24      	cbnz	r4, 8004ef8 <__d2b+0x74>
 8004eae:	2f00      	cmp	r7, #0
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	d026      	beq.n	8004f02 <__d2b+0x7e>
 8004eb4:	4668      	mov	r0, sp
 8004eb6:	9700      	str	r7, [sp, #0]
 8004eb8:	f7ff fd8a 	bl	80049d0 <__lo0bits>
 8004ebc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ec0:	b1e8      	cbz	r0, 8004efe <__d2b+0x7a>
 8004ec2:	f1c0 0320 	rsb	r3, r0, #32
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	40c2      	lsrs	r2, r0
 8004ece:	616b      	str	r3, [r5, #20]
 8004ed0:	9201      	str	r2, [sp, #4]
 8004ed2:	9b01      	ldr	r3, [sp, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2102      	movne	r1, #2
 8004eda:	2101      	moveq	r1, #1
 8004edc:	61ab      	str	r3, [r5, #24]
 8004ede:	6129      	str	r1, [r5, #16]
 8004ee0:	b1bc      	cbz	r4, 8004f12 <__d2b+0x8e>
 8004ee2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004ee6:	4404      	add	r4, r0
 8004ee8:	6034      	str	r4, [r6, #0]
 8004eea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	6018      	str	r0, [r3, #0]
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efc:	e7d7      	b.n	8004eae <__d2b+0x2a>
 8004efe:	6169      	str	r1, [r5, #20]
 8004f00:	e7e7      	b.n	8004ed2 <__d2b+0x4e>
 8004f02:	a801      	add	r0, sp, #4
 8004f04:	f7ff fd64 	bl	80049d0 <__lo0bits>
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	616b      	str	r3, [r5, #20]
 8004f0e:	3020      	adds	r0, #32
 8004f10:	e7e5      	b.n	8004ede <__d2b+0x5a>
 8004f12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f16:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8004f1a:	6030      	str	r0, [r6, #0]
 8004f1c:	6918      	ldr	r0, [r3, #16]
 8004f1e:	f7ff fd37 	bl	8004990 <__hi0bits>
 8004f22:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004f26:	e7e2      	b.n	8004eee <__d2b+0x6a>
 8004f28:	080057d2 	.word	0x080057d2
 8004f2c:	080057e3 	.word	0x080057e3

08004f30 <__sfputc_r>:
 8004f30:	6893      	ldr	r3, [r2, #8]
 8004f32:	b410      	push	{r4}
 8004f34:	3b01      	subs	r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	6093      	str	r3, [r2, #8]
 8004f3a:	da07      	bge.n	8004f4c <__sfputc_r+0x1c>
 8004f3c:	6994      	ldr	r4, [r2, #24]
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	db01      	blt.n	8004f46 <__sfputc_r+0x16>
 8004f42:	290a      	cmp	r1, #10
 8004f44:	d102      	bne.n	8004f4c <__sfputc_r+0x1c>
 8004f46:	bc10      	pop	{r4}
 8004f48:	f000 b9de 	b.w	8005308 <__swbuf_r>
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	1c58      	adds	r0, r3, #1
 8004f50:	6010      	str	r0, [r2, #0]
 8004f52:	7019      	strb	r1, [r3, #0]
 8004f54:	4608      	mov	r0, r1
 8004f56:	bc10      	pop	{r4}
 8004f58:	4770      	bx	lr

08004f5a <__sfputs_r>:
 8004f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	460f      	mov	r7, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	18d5      	adds	r5, r2, r3
 8004f64:	42ac      	cmp	r4, r5
 8004f66:	d101      	bne.n	8004f6c <__sfputs_r+0x12>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e007      	b.n	8004f7c <__sfputs_r+0x22>
 8004f6c:	463a      	mov	r2, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f74:	f7ff ffdc 	bl	8004f30 <__sfputc_r>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d1f3      	bne.n	8004f64 <__sfputs_r+0xa>
 8004f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f80 <_vfiprintf_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	460d      	mov	r5, r1
 8004f86:	4614      	mov	r4, r2
 8004f88:	4698      	mov	r8, r3
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	b09d      	sub	sp, #116	; 0x74
 8004f8e:	b118      	cbz	r0, 8004f98 <_vfiprintf_r+0x18>
 8004f90:	6a03      	ldr	r3, [r0, #32]
 8004f92:	b90b      	cbnz	r3, 8004f98 <_vfiprintf_r+0x18>
 8004f94:	f7fe fbd0 	bl	8003738 <__sinit>
 8004f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f9a:	07d9      	lsls	r1, r3, #31
 8004f9c:	d405      	bmi.n	8004faa <_vfiprintf_r+0x2a>
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	059a      	lsls	r2, r3, #22
 8004fa2:	d402      	bmi.n	8004faa <_vfiprintf_r+0x2a>
 8004fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fa6:	f7fe fcd0 	bl	800394a <__retarget_lock_acquire_recursive>
 8004faa:	89ab      	ldrh	r3, [r5, #12]
 8004fac:	071b      	lsls	r3, r3, #28
 8004fae:	d501      	bpl.n	8004fb4 <_vfiprintf_r+0x34>
 8004fb0:	692b      	ldr	r3, [r5, #16]
 8004fb2:	b99b      	cbnz	r3, 8004fdc <_vfiprintf_r+0x5c>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 f9e4 	bl	8005384 <__swsetup_r>
 8004fbc:	b170      	cbz	r0, 8004fdc <_vfiprintf_r+0x5c>
 8004fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fc0:	07dc      	lsls	r4, r3, #31
 8004fc2:	d504      	bpl.n	8004fce <_vfiprintf_r+0x4e>
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	b01d      	add	sp, #116	; 0x74
 8004fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fce:	89ab      	ldrh	r3, [r5, #12]
 8004fd0:	0598      	lsls	r0, r3, #22
 8004fd2:	d4f7      	bmi.n	8004fc4 <_vfiprintf_r+0x44>
 8004fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fd6:	f7fe fcb9 	bl	800394c <__retarget_lock_release_recursive>
 8004fda:	e7f3      	b.n	8004fc4 <_vfiprintf_r+0x44>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fe6:	2330      	movs	r3, #48	; 0x30
 8004fe8:	f04f 0901 	mov.w	r9, #1
 8004fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ff0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80051a0 <_vfiprintf_r+0x220>
 8004ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	469a      	mov	sl, r3
 8004ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005000:	b10a      	cbz	r2, 8005006 <_vfiprintf_r+0x86>
 8005002:	2a25      	cmp	r2, #37	; 0x25
 8005004:	d1f9      	bne.n	8004ffa <_vfiprintf_r+0x7a>
 8005006:	ebba 0b04 	subs.w	fp, sl, r4
 800500a:	d00b      	beq.n	8005024 <_vfiprintf_r+0xa4>
 800500c:	465b      	mov	r3, fp
 800500e:	4622      	mov	r2, r4
 8005010:	4629      	mov	r1, r5
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff ffa1 	bl	8004f5a <__sfputs_r>
 8005018:	3001      	adds	r0, #1
 800501a:	f000 80a9 	beq.w	8005170 <_vfiprintf_r+0x1f0>
 800501e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005020:	445a      	add	r2, fp
 8005022:	9209      	str	r2, [sp, #36]	; 0x24
 8005024:	f89a 3000 	ldrb.w	r3, [sl]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a1 	beq.w	8005170 <_vfiprintf_r+0x1f0>
 800502e:	2300      	movs	r3, #0
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005038:	f10a 0a01 	add.w	sl, sl, #1
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	9307      	str	r3, [sp, #28]
 8005040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005044:	931a      	str	r3, [sp, #104]	; 0x68
 8005046:	4654      	mov	r4, sl
 8005048:	2205      	movs	r2, #5
 800504a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504e:	4854      	ldr	r0, [pc, #336]	; (80051a0 <_vfiprintf_r+0x220>)
 8005050:	f7fe fc7d 	bl	800394e <memchr>
 8005054:	9a04      	ldr	r2, [sp, #16]
 8005056:	b9d8      	cbnz	r0, 8005090 <_vfiprintf_r+0x110>
 8005058:	06d1      	lsls	r1, r2, #27
 800505a:	bf44      	itt	mi
 800505c:	2320      	movmi	r3, #32
 800505e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005062:	0713      	lsls	r3, r2, #28
 8005064:	bf44      	itt	mi
 8005066:	232b      	movmi	r3, #43	; 0x2b
 8005068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800506c:	f89a 3000 	ldrb.w	r3, [sl]
 8005070:	2b2a      	cmp	r3, #42	; 0x2a
 8005072:	d015      	beq.n	80050a0 <_vfiprintf_r+0x120>
 8005074:	4654      	mov	r4, sl
 8005076:	2000      	movs	r0, #0
 8005078:	f04f 0c0a 	mov.w	ip, #10
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	4621      	mov	r1, r4
 8005080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005084:	3b30      	subs	r3, #48	; 0x30
 8005086:	2b09      	cmp	r3, #9
 8005088:	d94d      	bls.n	8005126 <_vfiprintf_r+0x1a6>
 800508a:	b1b0      	cbz	r0, 80050ba <_vfiprintf_r+0x13a>
 800508c:	9207      	str	r2, [sp, #28]
 800508e:	e014      	b.n	80050ba <_vfiprintf_r+0x13a>
 8005090:	eba0 0308 	sub.w	r3, r0, r8
 8005094:	fa09 f303 	lsl.w	r3, r9, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	46a2      	mov	sl, r4
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	e7d2      	b.n	8005046 <_vfiprintf_r+0xc6>
 80050a0:	9b03      	ldr	r3, [sp, #12]
 80050a2:	1d19      	adds	r1, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	9103      	str	r1, [sp, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfbb      	ittet	lt
 80050ac:	425b      	neglt	r3, r3
 80050ae:	f042 0202 	orrlt.w	r2, r2, #2
 80050b2:	9307      	strge	r3, [sp, #28]
 80050b4:	9307      	strlt	r3, [sp, #28]
 80050b6:	bfb8      	it	lt
 80050b8:	9204      	strlt	r2, [sp, #16]
 80050ba:	7823      	ldrb	r3, [r4, #0]
 80050bc:	2b2e      	cmp	r3, #46	; 0x2e
 80050be:	d10c      	bne.n	80050da <_vfiprintf_r+0x15a>
 80050c0:	7863      	ldrb	r3, [r4, #1]
 80050c2:	2b2a      	cmp	r3, #42	; 0x2a
 80050c4:	d134      	bne.n	8005130 <_vfiprintf_r+0x1b0>
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	3402      	adds	r4, #2
 80050ca:	1d1a      	adds	r2, r3, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	9203      	str	r2, [sp, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bfb8      	it	lt
 80050d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051a4 <_vfiprintf_r+0x224>
 80050de:	2203      	movs	r2, #3
 80050e0:	4650      	mov	r0, sl
 80050e2:	7821      	ldrb	r1, [r4, #0]
 80050e4:	f7fe fc33 	bl	800394e <memchr>
 80050e8:	b138      	cbz	r0, 80050fa <_vfiprintf_r+0x17a>
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	9b04      	ldr	r3, [sp, #16]
 80050ee:	eba0 000a 	sub.w	r0, r0, sl
 80050f2:	4082      	lsls	r2, r0
 80050f4:	4313      	orrs	r3, r2
 80050f6:	3401      	adds	r4, #1
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fe:	2206      	movs	r2, #6
 8005100:	4829      	ldr	r0, [pc, #164]	; (80051a8 <_vfiprintf_r+0x228>)
 8005102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005106:	f7fe fc22 	bl	800394e <memchr>
 800510a:	2800      	cmp	r0, #0
 800510c:	d03f      	beq.n	800518e <_vfiprintf_r+0x20e>
 800510e:	4b27      	ldr	r3, [pc, #156]	; (80051ac <_vfiprintf_r+0x22c>)
 8005110:	bb1b      	cbnz	r3, 800515a <_vfiprintf_r+0x1da>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	3307      	adds	r3, #7
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	3308      	adds	r3, #8
 800511c:	9303      	str	r3, [sp, #12]
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	443b      	add	r3, r7
 8005122:	9309      	str	r3, [sp, #36]	; 0x24
 8005124:	e768      	b.n	8004ff8 <_vfiprintf_r+0x78>
 8005126:	460c      	mov	r4, r1
 8005128:	2001      	movs	r0, #1
 800512a:	fb0c 3202 	mla	r2, ip, r2, r3
 800512e:	e7a6      	b.n	800507e <_vfiprintf_r+0xfe>
 8005130:	2300      	movs	r3, #0
 8005132:	f04f 0c0a 	mov.w	ip, #10
 8005136:	4619      	mov	r1, r3
 8005138:	3401      	adds	r4, #1
 800513a:	9305      	str	r3, [sp, #20]
 800513c:	4620      	mov	r0, r4
 800513e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005142:	3a30      	subs	r2, #48	; 0x30
 8005144:	2a09      	cmp	r2, #9
 8005146:	d903      	bls.n	8005150 <_vfiprintf_r+0x1d0>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0c6      	beq.n	80050da <_vfiprintf_r+0x15a>
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	e7c4      	b.n	80050da <_vfiprintf_r+0x15a>
 8005150:	4604      	mov	r4, r0
 8005152:	2301      	movs	r3, #1
 8005154:	fb0c 2101 	mla	r1, ip, r1, r2
 8005158:	e7f0      	b.n	800513c <_vfiprintf_r+0x1bc>
 800515a:	ab03      	add	r3, sp, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	462a      	mov	r2, r5
 8005160:	4630      	mov	r0, r6
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <_vfiprintf_r+0x230>)
 8005164:	a904      	add	r1, sp, #16
 8005166:	f7fd fe99 	bl	8002e9c <_printf_float>
 800516a:	4607      	mov	r7, r0
 800516c:	1c78      	adds	r0, r7, #1
 800516e:	d1d6      	bne.n	800511e <_vfiprintf_r+0x19e>
 8005170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005172:	07d9      	lsls	r1, r3, #31
 8005174:	d405      	bmi.n	8005182 <_vfiprintf_r+0x202>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	059a      	lsls	r2, r3, #22
 800517a:	d402      	bmi.n	8005182 <_vfiprintf_r+0x202>
 800517c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800517e:	f7fe fbe5 	bl	800394c <__retarget_lock_release_recursive>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	065b      	lsls	r3, r3, #25
 8005186:	f53f af1d 	bmi.w	8004fc4 <_vfiprintf_r+0x44>
 800518a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800518c:	e71c      	b.n	8004fc8 <_vfiprintf_r+0x48>
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4630      	mov	r0, r6
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <_vfiprintf_r+0x230>)
 8005198:	a904      	add	r1, sp, #16
 800519a:	f7fe f91f 	bl	80033dc <_printf_i>
 800519e:	e7e4      	b.n	800516a <_vfiprintf_r+0x1ea>
 80051a0:	0800593c 	.word	0x0800593c
 80051a4:	08005942 	.word	0x08005942
 80051a8:	08005946 	.word	0x08005946
 80051ac:	08002e9d 	.word	0x08002e9d
 80051b0:	08004f5b 	.word	0x08004f5b

080051b4 <__sflush_r>:
 80051b4:	898a      	ldrh	r2, [r1, #12]
 80051b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b8:	4605      	mov	r5, r0
 80051ba:	0710      	lsls	r0, r2, #28
 80051bc:	460c      	mov	r4, r1
 80051be:	d457      	bmi.n	8005270 <__sflush_r+0xbc>
 80051c0:	684b      	ldr	r3, [r1, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dc04      	bgt.n	80051d0 <__sflush_r+0x1c>
 80051c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	dc01      	bgt.n	80051d0 <__sflush_r+0x1c>
 80051cc:	2000      	movs	r0, #0
 80051ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d0fa      	beq.n	80051cc <__sflush_r+0x18>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051dc:	682f      	ldr	r7, [r5, #0]
 80051de:	6a21      	ldr	r1, [r4, #32]
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	d032      	beq.n	800524a <__sflush_r+0x96>
 80051e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	075a      	lsls	r2, r3, #29
 80051ea:	d505      	bpl.n	80051f8 <__sflush_r+0x44>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	1ac0      	subs	r0, r0, r3
 80051f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051f2:	b10b      	cbz	r3, 80051f8 <__sflush_r+0x44>
 80051f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051f6:	1ac0      	subs	r0, r0, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	4602      	mov	r2, r0
 80051fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051fe:	4628      	mov	r0, r5
 8005200:	6a21      	ldr	r1, [r4, #32]
 8005202:	47b0      	blx	r6
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	d106      	bne.n	8005218 <__sflush_r+0x64>
 800520a:	6829      	ldr	r1, [r5, #0]
 800520c:	291d      	cmp	r1, #29
 800520e:	d82b      	bhi.n	8005268 <__sflush_r+0xb4>
 8005210:	4a28      	ldr	r2, [pc, #160]	; (80052b4 <__sflush_r+0x100>)
 8005212:	410a      	asrs	r2, r1
 8005214:	07d6      	lsls	r6, r2, #31
 8005216:	d427      	bmi.n	8005268 <__sflush_r+0xb4>
 8005218:	2200      	movs	r2, #0
 800521a:	6062      	str	r2, [r4, #4]
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	04d9      	lsls	r1, r3, #19
 8005220:	6022      	str	r2, [r4, #0]
 8005222:	d504      	bpl.n	800522e <__sflush_r+0x7a>
 8005224:	1c42      	adds	r2, r0, #1
 8005226:	d101      	bne.n	800522c <__sflush_r+0x78>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b903      	cbnz	r3, 800522e <__sflush_r+0x7a>
 800522c:	6560      	str	r0, [r4, #84]	; 0x54
 800522e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005230:	602f      	str	r7, [r5, #0]
 8005232:	2900      	cmp	r1, #0
 8005234:	d0ca      	beq.n	80051cc <__sflush_r+0x18>
 8005236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800523a:	4299      	cmp	r1, r3
 800523c:	d002      	beq.n	8005244 <__sflush_r+0x90>
 800523e:	4628      	mov	r0, r5
 8005240:	f7ff fa02 	bl	8004648 <_free_r>
 8005244:	2000      	movs	r0, #0
 8005246:	6360      	str	r0, [r4, #52]	; 0x34
 8005248:	e7c1      	b.n	80051ce <__sflush_r+0x1a>
 800524a:	2301      	movs	r3, #1
 800524c:	4628      	mov	r0, r5
 800524e:	47b0      	blx	r6
 8005250:	1c41      	adds	r1, r0, #1
 8005252:	d1c8      	bne.n	80051e6 <__sflush_r+0x32>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0c5      	beq.n	80051e6 <__sflush_r+0x32>
 800525a:	2b1d      	cmp	r3, #29
 800525c:	d001      	beq.n	8005262 <__sflush_r+0xae>
 800525e:	2b16      	cmp	r3, #22
 8005260:	d101      	bne.n	8005266 <__sflush_r+0xb2>
 8005262:	602f      	str	r7, [r5, #0]
 8005264:	e7b2      	b.n	80051cc <__sflush_r+0x18>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800526c:	81a3      	strh	r3, [r4, #12]
 800526e:	e7ae      	b.n	80051ce <__sflush_r+0x1a>
 8005270:	690f      	ldr	r7, [r1, #16]
 8005272:	2f00      	cmp	r7, #0
 8005274:	d0aa      	beq.n	80051cc <__sflush_r+0x18>
 8005276:	0793      	lsls	r3, r2, #30
 8005278:	bf18      	it	ne
 800527a:	2300      	movne	r3, #0
 800527c:	680e      	ldr	r6, [r1, #0]
 800527e:	bf08      	it	eq
 8005280:	694b      	ldreq	r3, [r1, #20]
 8005282:	1bf6      	subs	r6, r6, r7
 8005284:	600f      	str	r7, [r1, #0]
 8005286:	608b      	str	r3, [r1, #8]
 8005288:	2e00      	cmp	r6, #0
 800528a:	dd9f      	ble.n	80051cc <__sflush_r+0x18>
 800528c:	4633      	mov	r3, r6
 800528e:	463a      	mov	r2, r7
 8005290:	4628      	mov	r0, r5
 8005292:	6a21      	ldr	r1, [r4, #32]
 8005294:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005298:	47e0      	blx	ip
 800529a:	2800      	cmp	r0, #0
 800529c:	dc06      	bgt.n	80052ac <__sflush_r+0xf8>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	e790      	b.n	80051ce <__sflush_r+0x1a>
 80052ac:	4407      	add	r7, r0
 80052ae:	1a36      	subs	r6, r6, r0
 80052b0:	e7ea      	b.n	8005288 <__sflush_r+0xd4>
 80052b2:	bf00      	nop
 80052b4:	dfbffffe 	.word	0xdfbffffe

080052b8 <_fflush_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	690b      	ldr	r3, [r1, #16]
 80052bc:	4605      	mov	r5, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	b913      	cbnz	r3, 80052c8 <_fflush_r+0x10>
 80052c2:	2500      	movs	r5, #0
 80052c4:	4628      	mov	r0, r5
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	b118      	cbz	r0, 80052d2 <_fflush_r+0x1a>
 80052ca:	6a03      	ldr	r3, [r0, #32]
 80052cc:	b90b      	cbnz	r3, 80052d2 <_fflush_r+0x1a>
 80052ce:	f7fe fa33 	bl	8003738 <__sinit>
 80052d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f3      	beq.n	80052c2 <_fflush_r+0xa>
 80052da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052dc:	07d0      	lsls	r0, r2, #31
 80052de:	d404      	bmi.n	80052ea <_fflush_r+0x32>
 80052e0:	0599      	lsls	r1, r3, #22
 80052e2:	d402      	bmi.n	80052ea <_fflush_r+0x32>
 80052e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e6:	f7fe fb30 	bl	800394a <__retarget_lock_acquire_recursive>
 80052ea:	4628      	mov	r0, r5
 80052ec:	4621      	mov	r1, r4
 80052ee:	f7ff ff61 	bl	80051b4 <__sflush_r>
 80052f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052f4:	4605      	mov	r5, r0
 80052f6:	07da      	lsls	r2, r3, #31
 80052f8:	d4e4      	bmi.n	80052c4 <_fflush_r+0xc>
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	059b      	lsls	r3, r3, #22
 80052fe:	d4e1      	bmi.n	80052c4 <_fflush_r+0xc>
 8005300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005302:	f7fe fb23 	bl	800394c <__retarget_lock_release_recursive>
 8005306:	e7dd      	b.n	80052c4 <_fflush_r+0xc>

08005308 <__swbuf_r>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	460e      	mov	r6, r1
 800530c:	4614      	mov	r4, r2
 800530e:	4605      	mov	r5, r0
 8005310:	b118      	cbz	r0, 800531a <__swbuf_r+0x12>
 8005312:	6a03      	ldr	r3, [r0, #32]
 8005314:	b90b      	cbnz	r3, 800531a <__swbuf_r+0x12>
 8005316:	f7fe fa0f 	bl	8003738 <__sinit>
 800531a:	69a3      	ldr	r3, [r4, #24]
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	071a      	lsls	r2, r3, #28
 8005322:	d525      	bpl.n	8005370 <__swbuf_r+0x68>
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	b31b      	cbz	r3, 8005370 <__swbuf_r+0x68>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	6922      	ldr	r2, [r4, #16]
 800532c:	b2f6      	uxtb	r6, r6
 800532e:	1a98      	subs	r0, r3, r2
 8005330:	6963      	ldr	r3, [r4, #20]
 8005332:	4637      	mov	r7, r6
 8005334:	4283      	cmp	r3, r0
 8005336:	dc04      	bgt.n	8005342 <__swbuf_r+0x3a>
 8005338:	4621      	mov	r1, r4
 800533a:	4628      	mov	r0, r5
 800533c:	f7ff ffbc 	bl	80052b8 <_fflush_r>
 8005340:	b9e0      	cbnz	r0, 800537c <__swbuf_r+0x74>
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	3b01      	subs	r3, #1
 8005346:	60a3      	str	r3, [r4, #8]
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	6022      	str	r2, [r4, #0]
 800534e:	701e      	strb	r6, [r3, #0]
 8005350:	6962      	ldr	r2, [r4, #20]
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d004      	beq.n	8005362 <__swbuf_r+0x5a>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d506      	bpl.n	800536c <__swbuf_r+0x64>
 800535e:	2e0a      	cmp	r6, #10
 8005360:	d104      	bne.n	800536c <__swbuf_r+0x64>
 8005362:	4621      	mov	r1, r4
 8005364:	4628      	mov	r0, r5
 8005366:	f7ff ffa7 	bl	80052b8 <_fflush_r>
 800536a:	b938      	cbnz	r0, 800537c <__swbuf_r+0x74>
 800536c:	4638      	mov	r0, r7
 800536e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005370:	4621      	mov	r1, r4
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f806 	bl	8005384 <__swsetup_r>
 8005378:	2800      	cmp	r0, #0
 800537a:	d0d5      	beq.n	8005328 <__swbuf_r+0x20>
 800537c:	f04f 37ff 	mov.w	r7, #4294967295
 8005380:	e7f4      	b.n	800536c <__swbuf_r+0x64>
	...

08005384 <__swsetup_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4b2a      	ldr	r3, [pc, #168]	; (8005430 <__swsetup_r+0xac>)
 8005388:	4605      	mov	r5, r0
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	460c      	mov	r4, r1
 800538e:	b118      	cbz	r0, 8005398 <__swsetup_r+0x14>
 8005390:	6a03      	ldr	r3, [r0, #32]
 8005392:	b90b      	cbnz	r3, 8005398 <__swsetup_r+0x14>
 8005394:	f7fe f9d0 	bl	8003738 <__sinit>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800539e:	0718      	lsls	r0, r3, #28
 80053a0:	d422      	bmi.n	80053e8 <__swsetup_r+0x64>
 80053a2:	06d9      	lsls	r1, r3, #27
 80053a4:	d407      	bmi.n	80053b6 <__swsetup_r+0x32>
 80053a6:	2309      	movs	r3, #9
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	e034      	b.n	8005420 <__swsetup_r+0x9c>
 80053b6:	0758      	lsls	r0, r3, #29
 80053b8:	d512      	bpl.n	80053e0 <__swsetup_r+0x5c>
 80053ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053bc:	b141      	cbz	r1, 80053d0 <__swsetup_r+0x4c>
 80053be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c2:	4299      	cmp	r1, r3
 80053c4:	d002      	beq.n	80053cc <__swsetup_r+0x48>
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7ff f93e 	bl	8004648 <_free_r>
 80053cc:	2300      	movs	r3, #0
 80053ce:	6363      	str	r3, [r4, #52]	; 0x34
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053d6:	81a3      	strh	r3, [r4, #12]
 80053d8:	2300      	movs	r3, #0
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	f043 0308 	orr.w	r3, r3, #8
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	b94b      	cbnz	r3, 8005400 <__swsetup_r+0x7c>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f6:	d003      	beq.n	8005400 <__swsetup_r+0x7c>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 f8c1 	bl	8005582 <__smakebuf_r>
 8005400:	89a0      	ldrh	r0, [r4, #12]
 8005402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005406:	f010 0301 	ands.w	r3, r0, #1
 800540a:	d00a      	beq.n	8005422 <__swsetup_r+0x9e>
 800540c:	2300      	movs	r3, #0
 800540e:	60a3      	str	r3, [r4, #8]
 8005410:	6963      	ldr	r3, [r4, #20]
 8005412:	425b      	negs	r3, r3
 8005414:	61a3      	str	r3, [r4, #24]
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	b943      	cbnz	r3, 800542c <__swsetup_r+0xa8>
 800541a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800541e:	d1c4      	bne.n	80053aa <__swsetup_r+0x26>
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	0781      	lsls	r1, r0, #30
 8005424:	bf58      	it	pl
 8005426:	6963      	ldrpl	r3, [r4, #20]
 8005428:	60a3      	str	r3, [r4, #8]
 800542a:	e7f4      	b.n	8005416 <__swsetup_r+0x92>
 800542c:	2000      	movs	r0, #0
 800542e:	e7f7      	b.n	8005420 <__swsetup_r+0x9c>
 8005430:	20000064 	.word	0x20000064

08005434 <_sbrk_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	2300      	movs	r3, #0
 8005438:	4d05      	ldr	r5, [pc, #20]	; (8005450 <_sbrk_r+0x1c>)
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fb fe00 	bl	8001044 <_sbrk>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_sbrk_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_sbrk_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200003c8 	.word	0x200003c8

08005454 <memcpy>:
 8005454:	440a      	add	r2, r1
 8005456:	4291      	cmp	r1, r2
 8005458:	f100 33ff 	add.w	r3, r0, #4294967295
 800545c:	d100      	bne.n	8005460 <memcpy+0xc>
 800545e:	4770      	bx	lr
 8005460:	b510      	push	{r4, lr}
 8005462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005466:	4291      	cmp	r1, r2
 8005468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800546c:	d1f9      	bne.n	8005462 <memcpy+0xe>
 800546e:	bd10      	pop	{r4, pc}

08005470 <__assert_func>:
 8005470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005472:	4614      	mov	r4, r2
 8005474:	461a      	mov	r2, r3
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <__assert_func+0x2c>)
 8005478:	4605      	mov	r5, r0
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68d8      	ldr	r0, [r3, #12]
 800547e:	b14c      	cbz	r4, 8005494 <__assert_func+0x24>
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <__assert_func+0x30>)
 8005482:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005486:	9100      	str	r1, [sp, #0]
 8005488:	462b      	mov	r3, r5
 800548a:	4906      	ldr	r1, [pc, #24]	; (80054a4 <__assert_func+0x34>)
 800548c:	f000 f842 	bl	8005514 <fiprintf>
 8005490:	f000 f8d6 	bl	8005640 <abort>
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <__assert_func+0x38>)
 8005496:	461c      	mov	r4, r3
 8005498:	e7f3      	b.n	8005482 <__assert_func+0x12>
 800549a:	bf00      	nop
 800549c:	20000064 	.word	0x20000064
 80054a0:	08005957 	.word	0x08005957
 80054a4:	08005964 	.word	0x08005964
 80054a8:	08005992 	.word	0x08005992

080054ac <_calloc_r>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	fba1 5402 	umull	r5, r4, r1, r2
 80054b2:	b934      	cbnz	r4, 80054c2 <_calloc_r+0x16>
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7ff f937 	bl	8004728 <_malloc_r>
 80054ba:	4606      	mov	r6, r0
 80054bc:	b928      	cbnz	r0, 80054ca <_calloc_r+0x1e>
 80054be:	4630      	mov	r0, r6
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	220c      	movs	r2, #12
 80054c4:	2600      	movs	r6, #0
 80054c6:	6002      	str	r2, [r0, #0]
 80054c8:	e7f9      	b.n	80054be <_calloc_r+0x12>
 80054ca:	462a      	mov	r2, r5
 80054cc:	4621      	mov	r1, r4
 80054ce:	f7fe f9be 	bl	800384e <memset>
 80054d2:	e7f4      	b.n	80054be <_calloc_r+0x12>

080054d4 <__ascii_mbtowc>:
 80054d4:	b082      	sub	sp, #8
 80054d6:	b901      	cbnz	r1, 80054da <__ascii_mbtowc+0x6>
 80054d8:	a901      	add	r1, sp, #4
 80054da:	b142      	cbz	r2, 80054ee <__ascii_mbtowc+0x1a>
 80054dc:	b14b      	cbz	r3, 80054f2 <__ascii_mbtowc+0x1e>
 80054de:	7813      	ldrb	r3, [r2, #0]
 80054e0:	600b      	str	r3, [r1, #0]
 80054e2:	7812      	ldrb	r2, [r2, #0]
 80054e4:	1e10      	subs	r0, r2, #0
 80054e6:	bf18      	it	ne
 80054e8:	2001      	movne	r0, #1
 80054ea:	b002      	add	sp, #8
 80054ec:	4770      	bx	lr
 80054ee:	4610      	mov	r0, r2
 80054f0:	e7fb      	b.n	80054ea <__ascii_mbtowc+0x16>
 80054f2:	f06f 0001 	mvn.w	r0, #1
 80054f6:	e7f8      	b.n	80054ea <__ascii_mbtowc+0x16>

080054f8 <__ascii_wctomb>:
 80054f8:	4603      	mov	r3, r0
 80054fa:	4608      	mov	r0, r1
 80054fc:	b141      	cbz	r1, 8005510 <__ascii_wctomb+0x18>
 80054fe:	2aff      	cmp	r2, #255	; 0xff
 8005500:	d904      	bls.n	800550c <__ascii_wctomb+0x14>
 8005502:	228a      	movs	r2, #138	; 0x8a
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	4770      	bx	lr
 800550c:	2001      	movs	r0, #1
 800550e:	700a      	strb	r2, [r1, #0]
 8005510:	4770      	bx	lr
	...

08005514 <fiprintf>:
 8005514:	b40e      	push	{r1, r2, r3}
 8005516:	b503      	push	{r0, r1, lr}
 8005518:	4601      	mov	r1, r0
 800551a:	ab03      	add	r3, sp, #12
 800551c:	4805      	ldr	r0, [pc, #20]	; (8005534 <fiprintf+0x20>)
 800551e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005522:	6800      	ldr	r0, [r0, #0]
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	f7ff fd2b 	bl	8004f80 <_vfiprintf_r>
 800552a:	b002      	add	sp, #8
 800552c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005530:	b003      	add	sp, #12
 8005532:	4770      	bx	lr
 8005534:	20000064 	.word	0x20000064

08005538 <__swhatbuf_r>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	4615      	mov	r5, r2
 8005542:	2900      	cmp	r1, #0
 8005544:	461e      	mov	r6, r3
 8005546:	b096      	sub	sp, #88	; 0x58
 8005548:	da0c      	bge.n	8005564 <__swhatbuf_r+0x2c>
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	2100      	movs	r1, #0
 800554e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005552:	bf0c      	ite	eq
 8005554:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005558:	2340      	movne	r3, #64	; 0x40
 800555a:	2000      	movs	r0, #0
 800555c:	6031      	str	r1, [r6, #0]
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	b016      	add	sp, #88	; 0x58
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	466a      	mov	r2, sp
 8005566:	f000 f849 	bl	80055fc <_fstat_r>
 800556a:	2800      	cmp	r0, #0
 800556c:	dbed      	blt.n	800554a <__swhatbuf_r+0x12>
 800556e:	9901      	ldr	r1, [sp, #4]
 8005570:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005574:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005578:	4259      	negs	r1, r3
 800557a:	4159      	adcs	r1, r3
 800557c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005580:	e7eb      	b.n	800555a <__swhatbuf_r+0x22>

08005582 <__smakebuf_r>:
 8005582:	898b      	ldrh	r3, [r1, #12]
 8005584:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005586:	079d      	lsls	r5, r3, #30
 8005588:	4606      	mov	r6, r0
 800558a:	460c      	mov	r4, r1
 800558c:	d507      	bpl.n	800559e <__smakebuf_r+0x1c>
 800558e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005592:	6023      	str	r3, [r4, #0]
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	2301      	movs	r3, #1
 8005598:	6163      	str	r3, [r4, #20]
 800559a:	b002      	add	sp, #8
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	466a      	mov	r2, sp
 80055a0:	ab01      	add	r3, sp, #4
 80055a2:	f7ff ffc9 	bl	8005538 <__swhatbuf_r>
 80055a6:	9900      	ldr	r1, [sp, #0]
 80055a8:	4605      	mov	r5, r0
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff f8bc 	bl	8004728 <_malloc_r>
 80055b0:	b948      	cbnz	r0, 80055c6 <__smakebuf_r+0x44>
 80055b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b6:	059a      	lsls	r2, r3, #22
 80055b8:	d4ef      	bmi.n	800559a <__smakebuf_r+0x18>
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	f043 0302 	orr.w	r3, r3, #2
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	e7e3      	b.n	800558e <__smakebuf_r+0xc>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	6020      	str	r0, [r4, #0]
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	9b00      	ldr	r3, [sp, #0]
 80055d2:	6120      	str	r0, [r4, #16]
 80055d4:	6163      	str	r3, [r4, #20]
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	b15b      	cbz	r3, 80055f2 <__smakebuf_r+0x70>
 80055da:	4630      	mov	r0, r6
 80055dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e0:	f000 f81e 	bl	8005620 <_isatty_r>
 80055e4:	b128      	cbz	r0, 80055f2 <__smakebuf_r+0x70>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f023 0303 	bic.w	r3, r3, #3
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	81a3      	strh	r3, [r4, #12]
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	431d      	orrs	r5, r3
 80055f6:	81a5      	strh	r5, [r4, #12]
 80055f8:	e7cf      	b.n	800559a <__smakebuf_r+0x18>
	...

080055fc <_fstat_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	2300      	movs	r3, #0
 8005600:	4d06      	ldr	r5, [pc, #24]	; (800561c <_fstat_r+0x20>)
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	4611      	mov	r1, r2
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	f7fb fcf6 	bl	8000ffa <_fstat>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	d102      	bne.n	8005618 <_fstat_r+0x1c>
 8005612:	682b      	ldr	r3, [r5, #0]
 8005614:	b103      	cbz	r3, 8005618 <_fstat_r+0x1c>
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	bd38      	pop	{r3, r4, r5, pc}
 800561a:	bf00      	nop
 800561c:	200003c8 	.word	0x200003c8

08005620 <_isatty_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	2300      	movs	r3, #0
 8005624:	4d05      	ldr	r5, [pc, #20]	; (800563c <_isatty_r+0x1c>)
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fcf4 	bl	8001018 <_isatty>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_isatty_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_isatty_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	200003c8 	.word	0x200003c8

08005640 <abort>:
 8005640:	2006      	movs	r0, #6
 8005642:	b508      	push	{r3, lr}
 8005644:	f000 f82c 	bl	80056a0 <raise>
 8005648:	2001      	movs	r0, #1
 800564a:	f7fb fc88 	bl	8000f5e <_exit>

0800564e <_raise_r>:
 800564e:	291f      	cmp	r1, #31
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4604      	mov	r4, r0
 8005654:	460d      	mov	r5, r1
 8005656:	d904      	bls.n	8005662 <_raise_r+0x14>
 8005658:	2316      	movs	r3, #22
 800565a:	6003      	str	r3, [r0, #0]
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	bd38      	pop	{r3, r4, r5, pc}
 8005662:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005664:	b112      	cbz	r2, 800566c <_raise_r+0x1e>
 8005666:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800566a:	b94b      	cbnz	r3, 8005680 <_raise_r+0x32>
 800566c:	4620      	mov	r0, r4
 800566e:	f000 f831 	bl	80056d4 <_getpid_r>
 8005672:	462a      	mov	r2, r5
 8005674:	4601      	mov	r1, r0
 8005676:	4620      	mov	r0, r4
 8005678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800567c:	f000 b818 	b.w	80056b0 <_kill_r>
 8005680:	2b01      	cmp	r3, #1
 8005682:	d00a      	beq.n	800569a <_raise_r+0x4c>
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	d103      	bne.n	8005690 <_raise_r+0x42>
 8005688:	2316      	movs	r3, #22
 800568a:	6003      	str	r3, [r0, #0]
 800568c:	2001      	movs	r0, #1
 800568e:	e7e7      	b.n	8005660 <_raise_r+0x12>
 8005690:	2400      	movs	r4, #0
 8005692:	4628      	mov	r0, r5
 8005694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005698:	4798      	blx	r3
 800569a:	2000      	movs	r0, #0
 800569c:	e7e0      	b.n	8005660 <_raise_r+0x12>
	...

080056a0 <raise>:
 80056a0:	4b02      	ldr	r3, [pc, #8]	; (80056ac <raise+0xc>)
 80056a2:	4601      	mov	r1, r0
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	f7ff bfd2 	b.w	800564e <_raise_r>
 80056aa:	bf00      	nop
 80056ac:	20000064 	.word	0x20000064

080056b0 <_kill_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	2300      	movs	r3, #0
 80056b4:	4d06      	ldr	r5, [pc, #24]	; (80056d0 <_kill_r+0x20>)
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	f7fb fc3e 	bl	8000f3e <_kill>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d102      	bne.n	80056cc <_kill_r+0x1c>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	b103      	cbz	r3, 80056cc <_kill_r+0x1c>
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	bd38      	pop	{r3, r4, r5, pc}
 80056ce:	bf00      	nop
 80056d0:	200003c8 	.word	0x200003c8

080056d4 <_getpid_r>:
 80056d4:	f7fb bc2c 	b.w	8000f30 <_getpid>

080056d8 <_init>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr

080056e4 <_fini>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr
