
Timmer_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e0  080030e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080030e0  080030e0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e0  080030e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080030e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003150  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003150  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb7e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb1  00000000  00000000  0002bc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000988  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184e6  00000000  00000000  0002edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3a8  00000000  00000000  000472ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008beff  00000000  00000000  00054656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a88  00000000  00000000  000e0558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e3fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003020 	.word	0x08003020

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003020 	.word	0x08003020

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 fe9f 	bl	8001ea0 <HAL_UART_Transmit>
  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000cc 	.word	0x200000cc

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fb37 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f813 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f8c7 	bl	8000310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000182:	f000 f89b 	bl	80002bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000186:	f000 f849 	bl	800021c <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t Time = GetExtendedCounter();
 800018a:	f000 f94d 	bl	8000428 <GetExtendedCounter>
 800018e:	6078      	str	r0, [r7, #4]
	  printf("Time : %lu\r\n", Time);
 8000190:	6879      	ldr	r1, [r7, #4]
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <main+0x30>)
 8000194:	f002 f8c6 	bl	8002324 <iprintf>
	  HAL_Delay(100);
 8000198:	2064      	movs	r0, #100	; 0x64
 800019a:	f000 fb87 	bl	80008ac <HAL_Delay>
  {
 800019e:	e7f4      	b.n	800018a <main+0x1a>
 80001a0:	08003038 	.word	0x08003038

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	; 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 f90b 	bl	80023ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d2:	2300      	movs	r3, #0
 80001d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 fe56 	bl	8000e8c <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e6:	f000 f94b 	bl	8000480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 f8c4 	bl	8001390 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020e:	f000 f937 	bl	8000480 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000238:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <MX_TIM1_Init+0x98>)
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <MX_TIM1_Init+0x9c>)
 800023c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800023e:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <MX_TIM1_Init+0x98>)
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <MX_TIM1_Init+0x98>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800024a:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <MX_TIM1_Init+0x98>)
 800024c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000250:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000252:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <MX_TIM1_Init+0x98>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000258:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <MX_TIM1_Init+0x98>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800025e:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_TIM1_Init+0x98>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000264:	4813      	ldr	r0, [pc, #76]	; (80002b4 <MX_TIM1_Init+0x98>)
 8000266:	f001 fa21 	bl	80016ac <HAL_TIM_Base_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000270:	f000 f906 	bl	8000480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4619      	mov	r1, r3
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <MX_TIM1_Init+0x98>)
 8000282:	f001 fb6a 	bl	800195a <HAL_TIM_ConfigClockSource>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800028c:	f000 f8f8 	bl	8000480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000290:	2300      	movs	r3, #0
 8000292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000294:	2300      	movs	r3, #0
 8000296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4619      	mov	r1, r3
 800029c:	4805      	ldr	r0, [pc, #20]	; (80002b4 <MX_TIM1_Init+0x98>)
 800029e:	f001 fd3f 	bl	8001d20 <HAL_TIMEx_MasterConfigSynchronization>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80002a8:	f000 f8ea 	bl	8000480 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */


  /* USER CODE END TIM1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000084 	.word	0x20000084
 80002b8:	40012c00 	.word	0x40012c00

080002bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_USART2_UART_Init+0x50>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f001 fd84 	bl	8001e00 <HAL_UART_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002fe:	f000 f8bf 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200000cc 	.word	0x200000cc
 800030c:	40004400 	.word	0x40004400

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <MX_GPIO_Init+0xcc>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a26      	ldr	r2, [pc, #152]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <MX_GPIO_Init+0xcc>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xd0>)
 800038a:	f000 fd45 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_GPIO_Init+0xd4>)
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <MX_GPIO_Init+0xd8>)
 80003a4:	f000 fbb4 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <MX_GPIO_Init+0xd0>)
 80003c0:	f000 fba6 	bl	8000b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f000 fb6a 	bl	8000aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f000 fb83 	bl	8000ada <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	10110000 	.word	0x10110000
 80003e8:	40011000 	.word	0x40011000

080003ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a08      	ldr	r2, [pc, #32]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d104      	bne.n	8000408 <HAL_TIM_PeriodElapsedCallback+0x1c>
        overflowCount++; // 오버플로우 발생 시 카운터 증가
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	4a06      	ldr	r2, [pc, #24]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000406:	6013      	str	r3, [r2, #0]
    }
    printf("\r\n OverFlow %lu \r\n", overflowCount);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000410:	f001 ff88 	bl	8002324 <iprintf>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40012c00 	.word	0x40012c00
 8000420:	20000114 	.word	0x20000114
 8000424:	08003048 	.word	0x08003048

08000428 <GetExtendedCounter>:

uint32_t GetExtendedCounter(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
    uint32_t counter = __HAL_TIM_GET_COUNTER(&htim1);
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <GetExtendedCounter+0x4c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000434:	603b      	str	r3, [r7, #0]
    uint32_t overflow = overflowCount;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <GetExtendedCounter+0x50>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	607b      	str	r3, [r7, #4]

if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) && (counter < 0x8000)) {
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <GetExtendedCounter+0x4c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	2b01      	cmp	r3, #1
 8000448:	d106      	bne.n	8000458 <GetExtendedCounter+0x30>
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000450:	d202      	bcs.n	8000458 <GetExtendedCounter+0x30>
    overflow++;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3301      	adds	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
}
printf("\r\noverflow : %lu counter : %lu\r\n", overflow, counter);
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <GetExtendedCounter+0x54>)
 800045e:	f001 ff61 	bl	8002324 <iprintf>
return (overflow << 16) + counter;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	041a      	lsls	r2, r3, #16
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	4413      	add	r3, r2
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000084 	.word	0x20000084
 8000478:	20000114 	.word	0x20000114
 800047c:	0800305c 	.word	0x0800305c

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_MspInit+0x60>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_MspInit+0x60>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <HAL_TIM_Base_MspInit+0x54>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d11b      	bne.n	800053a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_TIM_Base_MspInit+0x58>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a10      	ldr	r2, [pc, #64]	; (8000548 <HAL_TIM_Base_MspInit+0x58>)
 8000508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_TIM_Base_MspInit+0x58>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	2019      	movs	r0, #25
 8000520:	f000 fabf 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000524:	2019      	movs	r0, #25
 8000526:	f000 fad8 	bl	8000ada <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	201b      	movs	r0, #27
 8000530:	f000 fab7 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000534:	201b      	movs	r0, #27
 8000536:	f000 fad0 	bl	8000ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40012c00 	.word	0x40012c00
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a15      	ldr	r2, [pc, #84]	; (80005bc <HAL_UART_MspInit+0x70>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d123      	bne.n	80005b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <HAL_UART_MspInit+0x74>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <HAL_UART_MspInit+0x74>)
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <HAL_UART_MspInit+0x74>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_UART_MspInit+0x74>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_UART_MspInit+0x74>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_UART_MspInit+0x74>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800059c:	230c      	movs	r3, #12
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HAL_UART_MspInit+0x78>)
 80005b0:	f000 faae 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40004400 	.word	0x40004400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	e7fe      	b.n	80005cc <NMI_Handler+0x4>

080005ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <MemManage_Handler+0x4>

080005da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060e:	f000 f931 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <TIM1_UP_IRQHandler+0x10>)
 800061e:	f001 f894 	bl	800174a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084

0800062c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <TIM1_CC_IRQHandler+0x10>)
 8000632:	f001 f88a 	bl	800174a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000084 	.word	0x20000084

08000640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000644:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000648:	f000 fbfe 	bl	8000e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e00a      	b.n	8000678 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000662:	f3af 8000 	nop.w
 8000666:	4601      	mov	r1, r0
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	b2ca      	uxtb	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf0      	blt.n	8000662 <_read+0x12>
  }

  return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e009      	b.n	80006b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd51 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbf1      	blt.n	800069c <_write+0x12>
  }
  return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_close>:

int _close(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e8:	605a      	str	r2, [r3, #4]
  return 0;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <_isatty>:

int _isatty(int file)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800070a:	b480      	push	{r7}
 800070c:	b085      	sub	sp, #20
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
	...

08000724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <_sbrk+0x5c>)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_sbrk+0x60>)
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_sbrk+0x64>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <_sbrk+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000754:	f001 fe8a 	bl	800246c <__errno>
 8000758:	4603      	mov	r3, r0
 800075a:	220c      	movs	r2, #12
 800075c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	e009      	b.n	8000778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <_sbrk+0x64>)
 8000774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20005000 	.word	0x20005000
 8000784:	00000400 	.word	0x00000400
 8000788:	20000118 	.word	0x20000118
 800078c:	20000270 	.word	0x20000270

08000790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff fff8 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a2:	490c      	ldr	r1, [pc, #48]	; (80007d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b8:	4c09      	ldr	r4, [pc, #36]	; (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f001 fe57 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fcd1 	bl	8000170 <main>
  bx lr
 80007ce:	4770      	bx	lr
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007d8:	080030e8 	.word	0x080030e8
  ldr r2, =_sbss
 80007dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007e0:	2000026c 	.word	0x2000026c

080007e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_2_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_Init+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_Init+0x28>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f947 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fe42 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f95f 	bl	8000af6 <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 f927 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000008 	.word	0x20000008
 8000870:	20000004 	.word	0x20000004

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000008 	.word	0x20000008
 8000894:	2000011c 	.word	0x2000011c

08000898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	2000011c 	.word	0x2000011c

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff fff0 	bl	8000898 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffe0 	bl	8000898 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <__NVIC_EnableIRQ+0x34>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff90 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff2d 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff42 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff35 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	e169      	b.n	8000df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8158 	bne.w	8000df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4a9a      	ldr	r2, [pc, #616]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d05e      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b4c:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d875      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b52:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d058      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b58:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d86f      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b5e:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d052      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b64:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d869      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b6a:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d04c      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b70:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d863      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b76:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d046      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a90      	ldr	r2, [pc, #576]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d85d      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d82a      	bhi.n	8000bdc <HAL_GPIO_Init+0xcc>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d859      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <HAL_GPIO_Init+0x80>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000c0b 	.word	0x08000c0b
 8000b94:	08000be5 	.word	0x08000be5
 8000b98:	08000bf7 	.word	0x08000bf7
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000c3f 	.word	0x08000c3f
 8000ba4:	08000c3f 	.word	0x08000c3f
 8000ba8:	08000c3f 	.word	0x08000c3f
 8000bac:	08000c3f 	.word	0x08000c3f
 8000bb0:	08000c3f 	.word	0x08000c3f
 8000bb4:	08000c3f 	.word	0x08000c3f
 8000bb8:	08000c3f 	.word	0x08000c3f
 8000bbc:	08000c3f 	.word	0x08000c3f
 8000bc0:	08000c3f 	.word	0x08000c3f
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c3f 	.word	0x08000c3f
 8000bcc:	08000c3f 	.word	0x08000c3f
 8000bd0:	08000c3f 	.word	0x08000c3f
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c01 	.word	0x08000c01
 8000bdc:	4a79      	ldr	r2, [pc, #484]	; (8000dc4 <HAL_GPIO_Init+0x2b4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e02c      	b.n	8000c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e029      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e024      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e01f      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	330c      	adds	r3, #12
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e01a      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c12:	2304      	movs	r3, #4
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e013      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d105      	bne.n	8000c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	611a      	str	r2, [r3, #16]
          break;
 8000c2a:	e009      	b.n	8000c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	615a      	str	r2, [r3, #20]
          break;
 8000c36:	e003      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          break;
 8000c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2bff      	cmp	r3, #255	; 0xff
 8000c44:	d801      	bhi.n	8000c4a <HAL_GPIO_Init+0x13a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	e001      	b.n	8000c4e <HAL_GPIO_Init+0x13e>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	; 0xff
 8000c54:	d802      	bhi.n	8000c5c <HAL_GPIO_Init+0x14c>
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x152>
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	210f      	movs	r1, #15
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	6a39      	ldr	r1, [r7, #32]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca8:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <HAL_GPIO_Init+0x2c0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d013      	beq.n	8000cfc <HAL_GPIO_Init+0x1ec>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_GPIO_Init+0x2c4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d00d      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e8>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <HAL_GPIO_Init+0x2c8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d007      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3d      	ldr	r2, [pc, #244]	; (8000ddc <HAL_GPIO_Init+0x2cc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_GPIO_Init+0x1e0>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0e:	492f      	ldr	r1, [pc, #188]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	492c      	ldr	r1, [pc, #176]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4928      	ldr	r1, [pc, #160]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	4922      	ldr	r1, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60cb      	str	r3, [r1, #12]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	491e      	ldr	r1, [pc, #120]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4918      	ldr	r1, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4914      	ldr	r1, [pc, #80]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d021      	beq.n	8000de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	490e      	ldr	r1, [pc, #56]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e021      	b.n	8000df2 <HAL_GPIO_Init+0x2e2>
 8000dae:	bf00      	nop
 8000db0:	10320000 	.word	0x10320000
 8000db4:	10310000 	.word	0x10310000
 8000db8:	10220000 	.word	0x10220000
 8000dbc:	10210000 	.word	0x10210000
 8000dc0:	10120000 	.word	0x10120000
 8000dc4:	10110000 	.word	0x10110000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4909      	ldr	r1, [pc, #36]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f ae8e 	bne.w	8000b24 <HAL_GPIO_Init+0x14>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	372c      	adds	r7, #44	; 0x2c
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	611a      	str	r2, [r3, #16]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f806 	bl	8000e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e272      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8087 	beq.w	8000fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b92      	ldr	r3, [pc, #584]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b89      	ldr	r3, [pc, #548]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d168      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e24c      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x76>
 8000ef4:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a7f      	ldr	r2, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e02e      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x98>
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a77      	ldr	r2, [pc, #476]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0xbc>
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a71      	ldr	r2, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc96 	bl	8000898 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fc92 	bl	8000898 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e200      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe4>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc82 	bl	8000898 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fc7e 	bl	8000898 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1ec      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x10c>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
 8000fde:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1c0      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4939      	ldr	r1, [pc, #228]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fc37 	bl	8000898 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fc33 	bl	8000898 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1a1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4927      	ldr	r1, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc16 	bl	8000898 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc12 	bl	8000898 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e180      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03a      	beq.n	8001110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fbf6 	bl	8000898 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fbf2 	bl	8000898 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e160      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 face 	bl	8001670 <RCC_Delay>
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fbdc 	bl	8000898 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e2:	e00f      	b.n	8001104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fbd8 	bl	8000898 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d908      	bls.n	8001104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e146      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42420000 	.word	0x42420000
 8001100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b92      	ldr	r3, [pc, #584]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e9      	bne.n	80010e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a6 	beq.w	800126a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb99 	bl	8000898 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fb95 	bl	8000898 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e103      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x312>
 8001190:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e02d      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x334>
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a69      	ldr	r2, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	e01c      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x356>
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a60      	ldr	r2, [pc, #384]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b5e      	ldr	r3, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a5d      	ldr	r2, [pc, #372]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb49 	bl	8000898 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fb45 	bl	8000898 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ee      	beq.n	800120a <HAL_RCC_OscConfig+0x37e>
 800122c:	e014      	b.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb33 	bl	8000898 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fb2f 	bl	8000898 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e09b      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8087 	beq.w	8001382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d061      	beq.n	8001344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d146      	bne.n	8001316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb03 	bl	8000898 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff faff 	bl	8000898 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e06d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4921      	ldr	r1, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a19      	ldr	r1, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	430b      	orrs	r3, r1
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fad3 	bl	8000898 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff facf 	bl	8000898 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e03d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
 8001314:	e035      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fabc 	bl	8000898 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fab8 	bl	8000898 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e026      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x498>
 8001342:	e01e      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e019      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
 8001358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x500>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fa0a 	bl	8000898 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fa06 	bl	8000898 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	490a      	ldr	r1, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f968 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	08003080 	.word	0x08003080
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x30>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x36>
 8001592:	e027      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	e027      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	0c5b      	lsrs	r3, r3, #17
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e004      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	613b      	str	r3, [r7, #16]
      break;
 80015e2:	e002      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ea:	693b      	ldr	r3, [r7, #16]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	08003098 	.word	0x08003098
 8001604:	080030a8 	.word	0x080030a8
 8001608:	003d0900 	.word	0x003d0900

0800160c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_RCC_GetHCLKFreq+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001624:	f7ff fff2 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	4903      	ldr	r1, [pc, #12]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	08003090 	.word	0x08003090

08001648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800164c:	f7ff ffde 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0adb      	lsrs	r3, r3, #11
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4903      	ldr	r1, [pc, #12]	; (800166c <HAL_RCC_GetPCLK2Freq+0x24>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	08003090 	.word	0x08003090

08001670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <RCC_Delay+0x34>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <RCC_Delay+0x38>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0a5b      	lsrs	r3, r3, #9
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800168c:	bf00      	nop
  }
  while (Delay --);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f9      	bne.n	800168c <RCC_Delay+0x1c>
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000000 	.word	0x20000000
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e041      	b.n	8001742 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7fe ff0c 	bl	80004f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3304      	adds	r3, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f000 fa20 	bl	8001b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b02      	cmp	r3, #2
 800175e:	d122      	bne.n	80017a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d11b      	bne.n	80017a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0202 	mvn.w	r2, #2
 8001776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f9b4 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 8001792:	e005      	b.n	80017a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f9a7 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f9b6 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d122      	bne.n	80017fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d11b      	bne.n	80017fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f06f 0204 	mvn.w	r2, #4
 80017ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f98a 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 80017e6:	e005      	b.n	80017f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f97d 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f98c 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b08      	cmp	r3, #8
 8001806:	d122      	bne.n	800184e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b08      	cmp	r3, #8
 8001814:	d11b      	bne.n	800184e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f06f 0208 	mvn.w	r2, #8
 800181e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f960 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 800183a:	e005      	b.n	8001848 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f953 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f962 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b10      	cmp	r3, #16
 800185a:	d122      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b10      	cmp	r3, #16
 8001868:	d11b      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0210 	mvn.w	r2, #16
 8001872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2208      	movs	r2, #8
 8001878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f936 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 800188e:	e005      	b.n	800189c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f929 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f938 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10e      	bne.n	80018ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f06f 0201 	mvn.w	r2, #1
 80018c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7fe fd8f 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d8:	2b80      	cmp	r3, #128	; 0x80
 80018da:	d10e      	bne.n	80018fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	2b80      	cmp	r3, #128	; 0x80
 80018e8:	d107      	bne.n	80018fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fa7a 	bl	8001dee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d10e      	bne.n	8001926 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d107      	bne.n	8001926 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800191e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f8fc 	bl	8001b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b20      	cmp	r3, #32
 8001932:	d10e      	bne.n	8001952 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f003 0320 	and.w	r3, r3, #32
 800193e:	2b20      	cmp	r3, #32
 8001940:	d107      	bne.n	8001952 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f06f 0220 	mvn.w	r2, #32
 800194a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa45 	bl	8001ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_TIM_ConfigClockSource+0x1c>
 8001972:	2302      	movs	r3, #2
 8001974:	e0b4      	b.n	8001ae0 <HAL_TIM_ConfigClockSource+0x186>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2202      	movs	r2, #2
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001994:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800199c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d03e      	beq.n	8001a2e <HAL_TIM_ConfigClockSource+0xd4>
 80019b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b4:	f200 8087 	bhi.w	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019bc:	f000 8086 	beq.w	8001acc <HAL_TIM_ConfigClockSource+0x172>
 80019c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c4:	d87f      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019c6:	2b70      	cmp	r3, #112	; 0x70
 80019c8:	d01a      	beq.n	8001a00 <HAL_TIM_ConfigClockSource+0xa6>
 80019ca:	2b70      	cmp	r3, #112	; 0x70
 80019cc:	d87b      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019ce:	2b60      	cmp	r3, #96	; 0x60
 80019d0:	d050      	beq.n	8001a74 <HAL_TIM_ConfigClockSource+0x11a>
 80019d2:	2b60      	cmp	r3, #96	; 0x60
 80019d4:	d877      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019d6:	2b50      	cmp	r3, #80	; 0x50
 80019d8:	d03c      	beq.n	8001a54 <HAL_TIM_ConfigClockSource+0xfa>
 80019da:	2b50      	cmp	r3, #80	; 0x50
 80019dc:	d873      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019de:	2b40      	cmp	r3, #64	; 0x40
 80019e0:	d058      	beq.n	8001a94 <HAL_TIM_ConfigClockSource+0x13a>
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d86f      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019e6:	2b30      	cmp	r3, #48	; 0x30
 80019e8:	d064      	beq.n	8001ab4 <HAL_TIM_ConfigClockSource+0x15a>
 80019ea:	2b30      	cmp	r3, #48	; 0x30
 80019ec:	d86b      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d060      	beq.n	8001ab4 <HAL_TIM_ConfigClockSource+0x15a>
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d867      	bhi.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d05c      	beq.n	8001ab4 <HAL_TIM_ConfigClockSource+0x15a>
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d05a      	beq.n	8001ab4 <HAL_TIM_ConfigClockSource+0x15a>
 80019fe:	e062      	b.n	8001ac6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a10:	f000 f967 	bl	8001ce2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
      break;
 8001a2c:	e04f      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a3e:	f000 f950 	bl	8001ce2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a50:	609a      	str	r2, [r3, #8]
      break;
 8001a52:	e03c      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a60:	461a      	mov	r2, r3
 8001a62:	f000 f8c7 	bl	8001bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2150      	movs	r1, #80	; 0x50
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f91e 	bl	8001cae <TIM_ITRx_SetConfig>
      break;
 8001a72:	e02c      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a80:	461a      	mov	r2, r3
 8001a82:	f000 f8e5 	bl	8001c50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2160      	movs	r1, #96	; 0x60
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 f90e 	bl	8001cae <TIM_ITRx_SetConfig>
      break;
 8001a92:	e01c      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f000 f8a7 	bl	8001bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2140      	movs	r1, #64	; 0x40
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f8fe 	bl	8001cae <TIM_ITRx_SetConfig>
      break;
 8001ab2:	e00c      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f8f5 	bl	8001cae <TIM_ITRx_SetConfig>
      break;
 8001ac4:	e003      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8001aca:	e000      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001acc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <TIM_Base_SetConfig+0xb8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00b      	beq.n	8001b60 <TIM_Base_SetConfig+0x30>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4e:	d007      	beq.n	8001b60 <TIM_Base_SetConfig+0x30>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <TIM_Base_SetConfig+0xbc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d003      	beq.n	8001b60 <TIM_Base_SetConfig+0x30>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <TIM_Base_SetConfig+0xb8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00b      	beq.n	8001b92 <TIM_Base_SetConfig+0x62>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b80:	d007      	beq.n	8001b92 <TIM_Base_SetConfig+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <TIM_Base_SetConfig+0xbc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d003      	beq.n	8001b92 <TIM_Base_SetConfig+0x62>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d108      	bne.n	8001ba4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <TIM_Base_SetConfig+0xb8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d103      	bne.n	8001bd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800

08001bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	f023 0201 	bic.w	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f023 030a 	bic.w	r3, r3, #10
 8001c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	621a      	str	r2, [r3, #32]
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f023 0210 	bic.w	r2, r3, #16
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	031b      	lsls	r3, r3, #12
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	621a      	str	r2, [r3, #32]
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f043 0307 	orr.w	r3, r3, #7
 8001cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	609a      	str	r2, [r3, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	021a      	lsls	r2, r3, #8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	609a      	str	r2, [r3, #8]
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e046      	b.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d009      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10c      	bne.n	8001db4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800

08001ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e042      	b.n	8001e98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fb90 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f91d 	bl	8002084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d16d      	bne.n	8001f9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_UART_Transmit+0x2c>
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e066      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2221      	movs	r2, #33	; 0x21
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ede:	f7fe fcdb 	bl	8000898 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	88fa      	ldrh	r2, [r7, #6]
 8001ee8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef8:	d108      	bne.n	8001f0c <HAL_UART_Transmit+0x6c>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e003      	b.n	8001f14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f14:	e02a      	b.n	8001f6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f840 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e036      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10b      	bne.n	8001f4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e007      	b.n	8001f5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1cf      	bne.n	8001f16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f810 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b090      	sub	sp, #64	; 0x40
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb6:	e050      	b.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d04c      	beq.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fc6:	f7fe fc67 	bl	8000898 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d241      	bcs.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	e853 3f00 	ldrex	r3, [r3]
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e5      	bne.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	613b      	str	r3, [r7, #16]
   return(result);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3314      	adds	r3, #20
 8002028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800202a:	623a      	str	r2, [r7, #32]
 800202c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	69f9      	ldr	r1, [r7, #28]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	61bb      	str	r3, [r7, #24]
   return(result);
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e5      	bne.n	800200a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e00f      	b.n	800207a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	429a      	cmp	r2, r3
 8002076:	d09f      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3740      	adds	r7, #64	; 0x40
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020be:	f023 030c 	bic.w	r3, r3, #12
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <UART_SetConfig+0x114>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d103      	bne.n	80020f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020ec:	f7ff faac 	bl	8001648 <HAL_RCC_GetPCLK2Freq>
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	e002      	b.n	80020fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020f4:	f7ff fa94 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
 80020f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	4a22      	ldr	r2, [pc, #136]	; (800219c <UART_SetConfig+0x118>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	0119      	lsls	r1, r3, #4
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <UART_SetConfig+0x118>)
 8002132:	fba3 0302 	umull	r0, r3, r3, r2
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2064      	movs	r0, #100	; 0x64
 800213a:	fb00 f303 	mul.w	r3, r0, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	3332      	adds	r3, #50	; 0x32
 8002144:	4a15      	ldr	r2, [pc, #84]	; (800219c <UART_SetConfig+0x118>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002150:	4419      	add	r1, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	009a      	lsls	r2, r3, #2
 800215c:	441a      	add	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <UART_SetConfig+0x118>)
 800216a:	fba3 0302 	umull	r0, r3, r3, r2
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	fb00 f303 	mul.w	r3, r0, r3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	3332      	adds	r3, #50	; 0x32
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <UART_SetConfig+0x118>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	f003 020f 	and.w	r2, r3, #15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	440a      	add	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40013800 	.word	0x40013800
 800219c:	51eb851f 	.word	0x51eb851f

080021a0 <std>:
 80021a0:	2300      	movs	r3, #0
 80021a2:	b510      	push	{r4, lr}
 80021a4:	4604      	mov	r4, r0
 80021a6:	e9c0 3300 	strd	r3, r3, [r0]
 80021aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021ae:	6083      	str	r3, [r0, #8]
 80021b0:	8181      	strh	r1, [r0, #12]
 80021b2:	6643      	str	r3, [r0, #100]	; 0x64
 80021b4:	81c2      	strh	r2, [r0, #14]
 80021b6:	6183      	str	r3, [r0, #24]
 80021b8:	4619      	mov	r1, r3
 80021ba:	2208      	movs	r2, #8
 80021bc:	305c      	adds	r0, #92	; 0x5c
 80021be:	f000 f906 	bl	80023ce <memset>
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <std+0x58>)
 80021c4:	6224      	str	r4, [r4, #32]
 80021c6:	6263      	str	r3, [r4, #36]	; 0x24
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <std+0x5c>)
 80021ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <std+0x60>)
 80021ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <std+0x64>)
 80021d2:	6323      	str	r3, [r4, #48]	; 0x30
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <std+0x68>)
 80021d6:	429c      	cmp	r4, r3
 80021d8:	d006      	beq.n	80021e8 <std+0x48>
 80021da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80021de:	4294      	cmp	r4, r2
 80021e0:	d002      	beq.n	80021e8 <std+0x48>
 80021e2:	33d0      	adds	r3, #208	; 0xd0
 80021e4:	429c      	cmp	r4, r3
 80021e6:	d105      	bne.n	80021f4 <std+0x54>
 80021e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021f0:	f000 b966 	b.w	80024c0 <__retarget_lock_init_recursive>
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	bf00      	nop
 80021f8:	08002349 	.word	0x08002349
 80021fc:	0800236b 	.word	0x0800236b
 8002200:	080023a3 	.word	0x080023a3
 8002204:	080023c7 	.word	0x080023c7
 8002208:	20000120 	.word	0x20000120

0800220c <stdio_exit_handler>:
 800220c:	4a02      	ldr	r2, [pc, #8]	; (8002218 <stdio_exit_handler+0xc>)
 800220e:	4903      	ldr	r1, [pc, #12]	; (800221c <stdio_exit_handler+0x10>)
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <stdio_exit_handler+0x14>)
 8002212:	f000 b869 	b.w	80022e8 <_fwalk_sglue>
 8002216:	bf00      	nop
 8002218:	2000000c 	.word	0x2000000c
 800221c:	08002d61 	.word	0x08002d61
 8002220:	20000018 	.word	0x20000018

08002224 <cleanup_stdio>:
 8002224:	6841      	ldr	r1, [r0, #4]
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <cleanup_stdio+0x34>)
 8002228:	b510      	push	{r4, lr}
 800222a:	4299      	cmp	r1, r3
 800222c:	4604      	mov	r4, r0
 800222e:	d001      	beq.n	8002234 <cleanup_stdio+0x10>
 8002230:	f000 fd96 	bl	8002d60 <_fflush_r>
 8002234:	68a1      	ldr	r1, [r4, #8]
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <cleanup_stdio+0x38>)
 8002238:	4299      	cmp	r1, r3
 800223a:	d002      	beq.n	8002242 <cleanup_stdio+0x1e>
 800223c:	4620      	mov	r0, r4
 800223e:	f000 fd8f 	bl	8002d60 <_fflush_r>
 8002242:	68e1      	ldr	r1, [r4, #12]
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <cleanup_stdio+0x3c>)
 8002246:	4299      	cmp	r1, r3
 8002248:	d004      	beq.n	8002254 <cleanup_stdio+0x30>
 800224a:	4620      	mov	r0, r4
 800224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002250:	f000 bd86 	b.w	8002d60 <_fflush_r>
 8002254:	bd10      	pop	{r4, pc}
 8002256:	bf00      	nop
 8002258:	20000120 	.word	0x20000120
 800225c:	20000188 	.word	0x20000188
 8002260:	200001f0 	.word	0x200001f0

08002264 <global_stdio_init.part.0>:
 8002264:	b510      	push	{r4, lr}
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <global_stdio_init.part.0+0x30>)
 8002268:	4c0b      	ldr	r4, [pc, #44]	; (8002298 <global_stdio_init.part.0+0x34>)
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <global_stdio_init.part.0+0x38>)
 800226c:	4620      	mov	r0, r4
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	2104      	movs	r1, #4
 8002272:	2200      	movs	r2, #0
 8002274:	f7ff ff94 	bl	80021a0 <std>
 8002278:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800227c:	2201      	movs	r2, #1
 800227e:	2109      	movs	r1, #9
 8002280:	f7ff ff8e 	bl	80021a0 <std>
 8002284:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002288:	2202      	movs	r2, #2
 800228a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800228e:	2112      	movs	r1, #18
 8002290:	f7ff bf86 	b.w	80021a0 <std>
 8002294:	20000258 	.word	0x20000258
 8002298:	20000120 	.word	0x20000120
 800229c:	0800220d 	.word	0x0800220d

080022a0 <__sfp_lock_acquire>:
 80022a0:	4801      	ldr	r0, [pc, #4]	; (80022a8 <__sfp_lock_acquire+0x8>)
 80022a2:	f000 b90e 	b.w	80024c2 <__retarget_lock_acquire_recursive>
 80022a6:	bf00      	nop
 80022a8:	20000261 	.word	0x20000261

080022ac <__sfp_lock_release>:
 80022ac:	4801      	ldr	r0, [pc, #4]	; (80022b4 <__sfp_lock_release+0x8>)
 80022ae:	f000 b909 	b.w	80024c4 <__retarget_lock_release_recursive>
 80022b2:	bf00      	nop
 80022b4:	20000261 	.word	0x20000261

080022b8 <__sinit>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
 80022bc:	f7ff fff0 	bl	80022a0 <__sfp_lock_acquire>
 80022c0:	6a23      	ldr	r3, [r4, #32]
 80022c2:	b11b      	cbz	r3, 80022cc <__sinit+0x14>
 80022c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c8:	f7ff bff0 	b.w	80022ac <__sfp_lock_release>
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__sinit+0x28>)
 80022ce:	6223      	str	r3, [r4, #32]
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__sinit+0x2c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f5      	bne.n	80022c4 <__sinit+0xc>
 80022d8:	f7ff ffc4 	bl	8002264 <global_stdio_init.part.0>
 80022dc:	e7f2      	b.n	80022c4 <__sinit+0xc>
 80022de:	bf00      	nop
 80022e0:	08002225 	.word	0x08002225
 80022e4:	20000258 	.word	0x20000258

080022e8 <_fwalk_sglue>:
 80022e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022ec:	4607      	mov	r7, r0
 80022ee:	4688      	mov	r8, r1
 80022f0:	4614      	mov	r4, r2
 80022f2:	2600      	movs	r6, #0
 80022f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022f8:	f1b9 0901 	subs.w	r9, r9, #1
 80022fc:	d505      	bpl.n	800230a <_fwalk_sglue+0x22>
 80022fe:	6824      	ldr	r4, [r4, #0]
 8002300:	2c00      	cmp	r4, #0
 8002302:	d1f7      	bne.n	80022f4 <_fwalk_sglue+0xc>
 8002304:	4630      	mov	r0, r6
 8002306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800230a:	89ab      	ldrh	r3, [r5, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d907      	bls.n	8002320 <_fwalk_sglue+0x38>
 8002310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002314:	3301      	adds	r3, #1
 8002316:	d003      	beq.n	8002320 <_fwalk_sglue+0x38>
 8002318:	4629      	mov	r1, r5
 800231a:	4638      	mov	r0, r7
 800231c:	47c0      	blx	r8
 800231e:	4306      	orrs	r6, r0
 8002320:	3568      	adds	r5, #104	; 0x68
 8002322:	e7e9      	b.n	80022f8 <_fwalk_sglue+0x10>

08002324 <iprintf>:
 8002324:	b40f      	push	{r0, r1, r2, r3}
 8002326:	b507      	push	{r0, r1, r2, lr}
 8002328:	4906      	ldr	r1, [pc, #24]	; (8002344 <iprintf+0x20>)
 800232a:	ab04      	add	r3, sp, #16
 800232c:	6808      	ldr	r0, [r1, #0]
 800232e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002332:	6881      	ldr	r1, [r0, #8]
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	f000 f9e3 	bl	8002700 <_vfiprintf_r>
 800233a:	b003      	add	sp, #12
 800233c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002340:	b004      	add	sp, #16
 8002342:	4770      	bx	lr
 8002344:	20000064 	.word	0x20000064

08002348 <__sread>:
 8002348:	b510      	push	{r4, lr}
 800234a:	460c      	mov	r4, r1
 800234c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002350:	f000 f868 	bl	8002424 <_read_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	bfab      	itete	ge
 8002358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800235a:	89a3      	ldrhlt	r3, [r4, #12]
 800235c:	181b      	addge	r3, r3, r0
 800235e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002362:	bfac      	ite	ge
 8002364:	6563      	strge	r3, [r4, #84]	; 0x54
 8002366:	81a3      	strhlt	r3, [r4, #12]
 8002368:	bd10      	pop	{r4, pc}

0800236a <__swrite>:
 800236a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800236e:	461f      	mov	r7, r3
 8002370:	898b      	ldrh	r3, [r1, #12]
 8002372:	4605      	mov	r5, r0
 8002374:	05db      	lsls	r3, r3, #23
 8002376:	460c      	mov	r4, r1
 8002378:	4616      	mov	r6, r2
 800237a:	d505      	bpl.n	8002388 <__swrite+0x1e>
 800237c:	2302      	movs	r3, #2
 800237e:	2200      	movs	r2, #0
 8002380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002384:	f000 f83c 	bl	8002400 <_lseek_r>
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	4632      	mov	r2, r6
 800238c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002390:	81a3      	strh	r3, [r4, #12]
 8002392:	4628      	mov	r0, r5
 8002394:	463b      	mov	r3, r7
 8002396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800239a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800239e:	f000 b853 	b.w	8002448 <_write_r>

080023a2 <__sseek>:
 80023a2:	b510      	push	{r4, lr}
 80023a4:	460c      	mov	r4, r1
 80023a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023aa:	f000 f829 	bl	8002400 <_lseek_r>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	89a3      	ldrh	r3, [r4, #12]
 80023b2:	bf15      	itete	ne
 80023b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80023b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023be:	81a3      	strheq	r3, [r4, #12]
 80023c0:	bf18      	it	ne
 80023c2:	81a3      	strhne	r3, [r4, #12]
 80023c4:	bd10      	pop	{r4, pc}

080023c6 <__sclose>:
 80023c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ca:	f000 b809 	b.w	80023e0 <_close_r>

080023ce <memset>:
 80023ce:	4603      	mov	r3, r0
 80023d0:	4402      	add	r2, r0
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d100      	bne.n	80023d8 <memset+0xa>
 80023d6:	4770      	bx	lr
 80023d8:	f803 1b01 	strb.w	r1, [r3], #1
 80023dc:	e7f9      	b.n	80023d2 <memset+0x4>
	...

080023e0 <_close_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	2300      	movs	r3, #0
 80023e4:	4d05      	ldr	r5, [pc, #20]	; (80023fc <_close_r+0x1c>)
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	602b      	str	r3, [r5, #0]
 80023ec:	f7fe f969 	bl	80006c2 <_close>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_close_r+0x1a>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_close_r+0x1a>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	2000025c 	.word	0x2000025c

08002400 <_lseek_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4604      	mov	r4, r0
 8002404:	4608      	mov	r0, r1
 8002406:	4611      	mov	r1, r2
 8002408:	2200      	movs	r2, #0
 800240a:	4d05      	ldr	r5, [pc, #20]	; (8002420 <_lseek_r+0x20>)
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f7fe f97b 	bl	800070a <_lseek>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_lseek_r+0x1e>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_lseek_r+0x1e>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	2000025c 	.word	0x2000025c

08002424 <_read_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4604      	mov	r4, r0
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	2200      	movs	r2, #0
 800242e:	4d05      	ldr	r5, [pc, #20]	; (8002444 <_read_r+0x20>)
 8002430:	602a      	str	r2, [r5, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f7fe f90c 	bl	8000650 <_read>
 8002438:	1c43      	adds	r3, r0, #1
 800243a:	d102      	bne.n	8002442 <_read_r+0x1e>
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	b103      	cbz	r3, 8002442 <_read_r+0x1e>
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	bd38      	pop	{r3, r4, r5, pc}
 8002444:	2000025c 	.word	0x2000025c

08002448 <_write_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	2200      	movs	r2, #0
 8002452:	4d05      	ldr	r5, [pc, #20]	; (8002468 <_write_r+0x20>)
 8002454:	602a      	str	r2, [r5, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	f7fe f917 	bl	800068a <_write>
 800245c:	1c43      	adds	r3, r0, #1
 800245e:	d102      	bne.n	8002466 <_write_r+0x1e>
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	b103      	cbz	r3, 8002466 <_write_r+0x1e>
 8002464:	6023      	str	r3, [r4, #0]
 8002466:	bd38      	pop	{r3, r4, r5, pc}
 8002468:	2000025c 	.word	0x2000025c

0800246c <__errno>:
 800246c:	4b01      	ldr	r3, [pc, #4]	; (8002474 <__errno+0x8>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000064 	.word	0x20000064

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	2600      	movs	r6, #0
 800247c:	4d0c      	ldr	r5, [pc, #48]	; (80024b0 <__libc_init_array+0x38>)
 800247e:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <__libc_init_array+0x3c>)
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	f000 fdca 	bl	8003020 <_init>
 800248c:	2600      	movs	r6, #0
 800248e:	4d0a      	ldr	r5, [pc, #40]	; (80024b8 <__libc_init_array+0x40>)
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <__libc_init_array+0x44>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	080030e0 	.word	0x080030e0
 80024b4:	080030e0 	.word	0x080030e0
 80024b8:	080030e0 	.word	0x080030e0
 80024bc:	080030e4 	.word	0x080030e4

080024c0 <__retarget_lock_init_recursive>:
 80024c0:	4770      	bx	lr

080024c2 <__retarget_lock_acquire_recursive>:
 80024c2:	4770      	bx	lr

080024c4 <__retarget_lock_release_recursive>:
 80024c4:	4770      	bx	lr
	...

080024c8 <_free_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4605      	mov	r5, r0
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d040      	beq.n	8002552 <_free_r+0x8a>
 80024d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d4:	1f0c      	subs	r4, r1, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bfb8      	it	lt
 80024da:	18e4      	addlt	r4, r4, r3
 80024dc:	f000 f8dc 	bl	8002698 <__malloc_lock>
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <_free_r+0x8c>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	b933      	cbnz	r3, 80024f4 <_free_r+0x2c>
 80024e6:	6063      	str	r3, [r4, #4]
 80024e8:	6014      	str	r4, [r2, #0]
 80024ea:	4628      	mov	r0, r5
 80024ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024f0:	f000 b8d8 	b.w	80026a4 <__malloc_unlock>
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	d908      	bls.n	800250a <_free_r+0x42>
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	1821      	adds	r1, r4, r0
 80024fc:	428b      	cmp	r3, r1
 80024fe:	bf01      	itttt	eq
 8002500:	6819      	ldreq	r1, [r3, #0]
 8002502:	685b      	ldreq	r3, [r3, #4]
 8002504:	1809      	addeq	r1, r1, r0
 8002506:	6021      	streq	r1, [r4, #0]
 8002508:	e7ed      	b.n	80024e6 <_free_r+0x1e>
 800250a:	461a      	mov	r2, r3
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	b10b      	cbz	r3, 8002514 <_free_r+0x4c>
 8002510:	42a3      	cmp	r3, r4
 8002512:	d9fa      	bls.n	800250a <_free_r+0x42>
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	1850      	adds	r0, r2, r1
 8002518:	42a0      	cmp	r0, r4
 800251a:	d10b      	bne.n	8002534 <_free_r+0x6c>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	4401      	add	r1, r0
 8002520:	1850      	adds	r0, r2, r1
 8002522:	4283      	cmp	r3, r0
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	d1e0      	bne.n	80024ea <_free_r+0x22>
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4408      	add	r0, r1
 800252e:	6010      	str	r0, [r2, #0]
 8002530:	6053      	str	r3, [r2, #4]
 8002532:	e7da      	b.n	80024ea <_free_r+0x22>
 8002534:	d902      	bls.n	800253c <_free_r+0x74>
 8002536:	230c      	movs	r3, #12
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	e7d6      	b.n	80024ea <_free_r+0x22>
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	1821      	adds	r1, r4, r0
 8002540:	428b      	cmp	r3, r1
 8002542:	bf01      	itttt	eq
 8002544:	6819      	ldreq	r1, [r3, #0]
 8002546:	685b      	ldreq	r3, [r3, #4]
 8002548:	1809      	addeq	r1, r1, r0
 800254a:	6021      	streq	r1, [r4, #0]
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	6054      	str	r4, [r2, #4]
 8002550:	e7cb      	b.n	80024ea <_free_r+0x22>
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000264 	.word	0x20000264

08002558 <sbrk_aligned>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	4e0e      	ldr	r6, [pc, #56]	; (8002594 <sbrk_aligned+0x3c>)
 800255c:	460c      	mov	r4, r1
 800255e:	6831      	ldr	r1, [r6, #0]
 8002560:	4605      	mov	r5, r0
 8002562:	b911      	cbnz	r1, 800256a <sbrk_aligned+0x12>
 8002564:	f000 fcba 	bl	8002edc <_sbrk_r>
 8002568:	6030      	str	r0, [r6, #0]
 800256a:	4621      	mov	r1, r4
 800256c:	4628      	mov	r0, r5
 800256e:	f000 fcb5 	bl	8002edc <_sbrk_r>
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	d00a      	beq.n	800258c <sbrk_aligned+0x34>
 8002576:	1cc4      	adds	r4, r0, #3
 8002578:	f024 0403 	bic.w	r4, r4, #3
 800257c:	42a0      	cmp	r0, r4
 800257e:	d007      	beq.n	8002590 <sbrk_aligned+0x38>
 8002580:	1a21      	subs	r1, r4, r0
 8002582:	4628      	mov	r0, r5
 8002584:	f000 fcaa 	bl	8002edc <_sbrk_r>
 8002588:	3001      	adds	r0, #1
 800258a:	d101      	bne.n	8002590 <sbrk_aligned+0x38>
 800258c:	f04f 34ff 	mov.w	r4, #4294967295
 8002590:	4620      	mov	r0, r4
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	20000268 	.word	0x20000268

08002598 <_malloc_r>:
 8002598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800259c:	1ccd      	adds	r5, r1, #3
 800259e:	f025 0503 	bic.w	r5, r5, #3
 80025a2:	3508      	adds	r5, #8
 80025a4:	2d0c      	cmp	r5, #12
 80025a6:	bf38      	it	cc
 80025a8:	250c      	movcc	r5, #12
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	4607      	mov	r7, r0
 80025ae:	db01      	blt.n	80025b4 <_malloc_r+0x1c>
 80025b0:	42a9      	cmp	r1, r5
 80025b2:	d905      	bls.n	80025c0 <_malloc_r+0x28>
 80025b4:	230c      	movs	r3, #12
 80025b6:	2600      	movs	r6, #0
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4630      	mov	r0, r6
 80025bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002694 <_malloc_r+0xfc>
 80025c4:	f000 f868 	bl	8002698 <__malloc_lock>
 80025c8:	f8d8 3000 	ldr.w	r3, [r8]
 80025cc:	461c      	mov	r4, r3
 80025ce:	bb5c      	cbnz	r4, 8002628 <_malloc_r+0x90>
 80025d0:	4629      	mov	r1, r5
 80025d2:	4638      	mov	r0, r7
 80025d4:	f7ff ffc0 	bl	8002558 <sbrk_aligned>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	4604      	mov	r4, r0
 80025dc:	d155      	bne.n	800268a <_malloc_r+0xf2>
 80025de:	f8d8 4000 	ldr.w	r4, [r8]
 80025e2:	4626      	mov	r6, r4
 80025e4:	2e00      	cmp	r6, #0
 80025e6:	d145      	bne.n	8002674 <_malloc_r+0xdc>
 80025e8:	2c00      	cmp	r4, #0
 80025ea:	d048      	beq.n	800267e <_malloc_r+0xe6>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	4631      	mov	r1, r6
 80025f0:	4638      	mov	r0, r7
 80025f2:	eb04 0903 	add.w	r9, r4, r3
 80025f6:	f000 fc71 	bl	8002edc <_sbrk_r>
 80025fa:	4581      	cmp	r9, r0
 80025fc:	d13f      	bne.n	800267e <_malloc_r+0xe6>
 80025fe:	6821      	ldr	r1, [r4, #0]
 8002600:	4638      	mov	r0, r7
 8002602:	1a6d      	subs	r5, r5, r1
 8002604:	4629      	mov	r1, r5
 8002606:	f7ff ffa7 	bl	8002558 <sbrk_aligned>
 800260a:	3001      	adds	r0, #1
 800260c:	d037      	beq.n	800267e <_malloc_r+0xe6>
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	442b      	add	r3, r5
 8002612:	6023      	str	r3, [r4, #0]
 8002614:	f8d8 3000 	ldr.w	r3, [r8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d038      	beq.n	800268e <_malloc_r+0xf6>
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	42a2      	cmp	r2, r4
 8002620:	d12b      	bne.n	800267a <_malloc_r+0xe2>
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	e00f      	b.n	8002648 <_malloc_r+0xb0>
 8002628:	6822      	ldr	r2, [r4, #0]
 800262a:	1b52      	subs	r2, r2, r5
 800262c:	d41f      	bmi.n	800266e <_malloc_r+0xd6>
 800262e:	2a0b      	cmp	r2, #11
 8002630:	d917      	bls.n	8002662 <_malloc_r+0xca>
 8002632:	1961      	adds	r1, r4, r5
 8002634:	42a3      	cmp	r3, r4
 8002636:	6025      	str	r5, [r4, #0]
 8002638:	bf18      	it	ne
 800263a:	6059      	strne	r1, [r3, #4]
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	bf08      	it	eq
 8002640:	f8c8 1000 	streq.w	r1, [r8]
 8002644:	5162      	str	r2, [r4, r5]
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	4638      	mov	r0, r7
 800264a:	f104 060b 	add.w	r6, r4, #11
 800264e:	f000 f829 	bl	80026a4 <__malloc_unlock>
 8002652:	f026 0607 	bic.w	r6, r6, #7
 8002656:	1d23      	adds	r3, r4, #4
 8002658:	1af2      	subs	r2, r6, r3
 800265a:	d0ae      	beq.n	80025ba <_malloc_r+0x22>
 800265c:	1b9b      	subs	r3, r3, r6
 800265e:	50a3      	str	r3, [r4, r2]
 8002660:	e7ab      	b.n	80025ba <_malloc_r+0x22>
 8002662:	42a3      	cmp	r3, r4
 8002664:	6862      	ldr	r2, [r4, #4]
 8002666:	d1dd      	bne.n	8002624 <_malloc_r+0x8c>
 8002668:	f8c8 2000 	str.w	r2, [r8]
 800266c:	e7ec      	b.n	8002648 <_malloc_r+0xb0>
 800266e:	4623      	mov	r3, r4
 8002670:	6864      	ldr	r4, [r4, #4]
 8002672:	e7ac      	b.n	80025ce <_malloc_r+0x36>
 8002674:	4634      	mov	r4, r6
 8002676:	6876      	ldr	r6, [r6, #4]
 8002678:	e7b4      	b.n	80025e4 <_malloc_r+0x4c>
 800267a:	4613      	mov	r3, r2
 800267c:	e7cc      	b.n	8002618 <_malloc_r+0x80>
 800267e:	230c      	movs	r3, #12
 8002680:	4638      	mov	r0, r7
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	f000 f80e 	bl	80026a4 <__malloc_unlock>
 8002688:	e797      	b.n	80025ba <_malloc_r+0x22>
 800268a:	6025      	str	r5, [r4, #0]
 800268c:	e7dc      	b.n	8002648 <_malloc_r+0xb0>
 800268e:	605b      	str	r3, [r3, #4]
 8002690:	deff      	udf	#255	; 0xff
 8002692:	bf00      	nop
 8002694:	20000264 	.word	0x20000264

08002698 <__malloc_lock>:
 8002698:	4801      	ldr	r0, [pc, #4]	; (80026a0 <__malloc_lock+0x8>)
 800269a:	f7ff bf12 	b.w	80024c2 <__retarget_lock_acquire_recursive>
 800269e:	bf00      	nop
 80026a0:	20000260 	.word	0x20000260

080026a4 <__malloc_unlock>:
 80026a4:	4801      	ldr	r0, [pc, #4]	; (80026ac <__malloc_unlock+0x8>)
 80026a6:	f7ff bf0d 	b.w	80024c4 <__retarget_lock_release_recursive>
 80026aa:	bf00      	nop
 80026ac:	20000260 	.word	0x20000260

080026b0 <__sfputc_r>:
 80026b0:	6893      	ldr	r3, [r2, #8]
 80026b2:	b410      	push	{r4}
 80026b4:	3b01      	subs	r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	6093      	str	r3, [r2, #8]
 80026ba:	da07      	bge.n	80026cc <__sfputc_r+0x1c>
 80026bc:	6994      	ldr	r4, [r2, #24]
 80026be:	42a3      	cmp	r3, r4
 80026c0:	db01      	blt.n	80026c6 <__sfputc_r+0x16>
 80026c2:	290a      	cmp	r1, #10
 80026c4:	d102      	bne.n	80026cc <__sfputc_r+0x1c>
 80026c6:	bc10      	pop	{r4}
 80026c8:	f000 bb72 	b.w	8002db0 <__swbuf_r>
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	1c58      	adds	r0, r3, #1
 80026d0:	6010      	str	r0, [r2, #0]
 80026d2:	7019      	strb	r1, [r3, #0]
 80026d4:	4608      	mov	r0, r1
 80026d6:	bc10      	pop	{r4}
 80026d8:	4770      	bx	lr

080026da <__sfputs_r>:
 80026da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026dc:	4606      	mov	r6, r0
 80026de:	460f      	mov	r7, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	18d5      	adds	r5, r2, r3
 80026e4:	42ac      	cmp	r4, r5
 80026e6:	d101      	bne.n	80026ec <__sfputs_r+0x12>
 80026e8:	2000      	movs	r0, #0
 80026ea:	e007      	b.n	80026fc <__sfputs_r+0x22>
 80026ec:	463a      	mov	r2, r7
 80026ee:	4630      	mov	r0, r6
 80026f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026f4:	f7ff ffdc 	bl	80026b0 <__sfputc_r>
 80026f8:	1c43      	adds	r3, r0, #1
 80026fa:	d1f3      	bne.n	80026e4 <__sfputs_r+0xa>
 80026fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002700 <_vfiprintf_r>:
 8002700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002704:	460d      	mov	r5, r1
 8002706:	4614      	mov	r4, r2
 8002708:	4698      	mov	r8, r3
 800270a:	4606      	mov	r6, r0
 800270c:	b09d      	sub	sp, #116	; 0x74
 800270e:	b118      	cbz	r0, 8002718 <_vfiprintf_r+0x18>
 8002710:	6a03      	ldr	r3, [r0, #32]
 8002712:	b90b      	cbnz	r3, 8002718 <_vfiprintf_r+0x18>
 8002714:	f7ff fdd0 	bl	80022b8 <__sinit>
 8002718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800271a:	07d9      	lsls	r1, r3, #31
 800271c:	d405      	bmi.n	800272a <_vfiprintf_r+0x2a>
 800271e:	89ab      	ldrh	r3, [r5, #12]
 8002720:	059a      	lsls	r2, r3, #22
 8002722:	d402      	bmi.n	800272a <_vfiprintf_r+0x2a>
 8002724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002726:	f7ff fecc 	bl	80024c2 <__retarget_lock_acquire_recursive>
 800272a:	89ab      	ldrh	r3, [r5, #12]
 800272c:	071b      	lsls	r3, r3, #28
 800272e:	d501      	bpl.n	8002734 <_vfiprintf_r+0x34>
 8002730:	692b      	ldr	r3, [r5, #16]
 8002732:	b99b      	cbnz	r3, 800275c <_vfiprintf_r+0x5c>
 8002734:	4629      	mov	r1, r5
 8002736:	4630      	mov	r0, r6
 8002738:	f000 fb78 	bl	8002e2c <__swsetup_r>
 800273c:	b170      	cbz	r0, 800275c <_vfiprintf_r+0x5c>
 800273e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002740:	07dc      	lsls	r4, r3, #31
 8002742:	d504      	bpl.n	800274e <_vfiprintf_r+0x4e>
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	b01d      	add	sp, #116	; 0x74
 800274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274e:	89ab      	ldrh	r3, [r5, #12]
 8002750:	0598      	lsls	r0, r3, #22
 8002752:	d4f7      	bmi.n	8002744 <_vfiprintf_r+0x44>
 8002754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002756:	f7ff feb5 	bl	80024c4 <__retarget_lock_release_recursive>
 800275a:	e7f3      	b.n	8002744 <_vfiprintf_r+0x44>
 800275c:	2300      	movs	r3, #0
 800275e:	9309      	str	r3, [sp, #36]	; 0x24
 8002760:	2320      	movs	r3, #32
 8002762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002766:	2330      	movs	r3, #48	; 0x30
 8002768:	f04f 0901 	mov.w	r9, #1
 800276c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002770:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002920 <_vfiprintf_r+0x220>
 8002774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002778:	4623      	mov	r3, r4
 800277a:	469a      	mov	sl, r3
 800277c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002780:	b10a      	cbz	r2, 8002786 <_vfiprintf_r+0x86>
 8002782:	2a25      	cmp	r2, #37	; 0x25
 8002784:	d1f9      	bne.n	800277a <_vfiprintf_r+0x7a>
 8002786:	ebba 0b04 	subs.w	fp, sl, r4
 800278a:	d00b      	beq.n	80027a4 <_vfiprintf_r+0xa4>
 800278c:	465b      	mov	r3, fp
 800278e:	4622      	mov	r2, r4
 8002790:	4629      	mov	r1, r5
 8002792:	4630      	mov	r0, r6
 8002794:	f7ff ffa1 	bl	80026da <__sfputs_r>
 8002798:	3001      	adds	r0, #1
 800279a:	f000 80a9 	beq.w	80028f0 <_vfiprintf_r+0x1f0>
 800279e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027a0:	445a      	add	r2, fp
 80027a2:	9209      	str	r2, [sp, #36]	; 0x24
 80027a4:	f89a 3000 	ldrb.w	r3, [sl]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a1 	beq.w	80028f0 <_vfiprintf_r+0x1f0>
 80027ae:	2300      	movs	r3, #0
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027b8:	f10a 0a01 	add.w	sl, sl, #1
 80027bc:	9304      	str	r3, [sp, #16]
 80027be:	9307      	str	r3, [sp, #28]
 80027c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027c4:	931a      	str	r3, [sp, #104]	; 0x68
 80027c6:	4654      	mov	r4, sl
 80027c8:	2205      	movs	r2, #5
 80027ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ce:	4854      	ldr	r0, [pc, #336]	; (8002920 <_vfiprintf_r+0x220>)
 80027d0:	f000 fb94 	bl	8002efc <memchr>
 80027d4:	9a04      	ldr	r2, [sp, #16]
 80027d6:	b9d8      	cbnz	r0, 8002810 <_vfiprintf_r+0x110>
 80027d8:	06d1      	lsls	r1, r2, #27
 80027da:	bf44      	itt	mi
 80027dc:	2320      	movmi	r3, #32
 80027de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027e2:	0713      	lsls	r3, r2, #28
 80027e4:	bf44      	itt	mi
 80027e6:	232b      	movmi	r3, #43	; 0x2b
 80027e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027ec:	f89a 3000 	ldrb.w	r3, [sl]
 80027f0:	2b2a      	cmp	r3, #42	; 0x2a
 80027f2:	d015      	beq.n	8002820 <_vfiprintf_r+0x120>
 80027f4:	4654      	mov	r4, sl
 80027f6:	2000      	movs	r0, #0
 80027f8:	f04f 0c0a 	mov.w	ip, #10
 80027fc:	9a07      	ldr	r2, [sp, #28]
 80027fe:	4621      	mov	r1, r4
 8002800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002804:	3b30      	subs	r3, #48	; 0x30
 8002806:	2b09      	cmp	r3, #9
 8002808:	d94d      	bls.n	80028a6 <_vfiprintf_r+0x1a6>
 800280a:	b1b0      	cbz	r0, 800283a <_vfiprintf_r+0x13a>
 800280c:	9207      	str	r2, [sp, #28]
 800280e:	e014      	b.n	800283a <_vfiprintf_r+0x13a>
 8002810:	eba0 0308 	sub.w	r3, r0, r8
 8002814:	fa09 f303 	lsl.w	r3, r9, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	46a2      	mov	sl, r4
 800281c:	9304      	str	r3, [sp, #16]
 800281e:	e7d2      	b.n	80027c6 <_vfiprintf_r+0xc6>
 8002820:	9b03      	ldr	r3, [sp, #12]
 8002822:	1d19      	adds	r1, r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	9103      	str	r1, [sp, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	bfbb      	ittet	lt
 800282c:	425b      	neglt	r3, r3
 800282e:	f042 0202 	orrlt.w	r2, r2, #2
 8002832:	9307      	strge	r3, [sp, #28]
 8002834:	9307      	strlt	r3, [sp, #28]
 8002836:	bfb8      	it	lt
 8002838:	9204      	strlt	r2, [sp, #16]
 800283a:	7823      	ldrb	r3, [r4, #0]
 800283c:	2b2e      	cmp	r3, #46	; 0x2e
 800283e:	d10c      	bne.n	800285a <_vfiprintf_r+0x15a>
 8002840:	7863      	ldrb	r3, [r4, #1]
 8002842:	2b2a      	cmp	r3, #42	; 0x2a
 8002844:	d134      	bne.n	80028b0 <_vfiprintf_r+0x1b0>
 8002846:	9b03      	ldr	r3, [sp, #12]
 8002848:	3402      	adds	r4, #2
 800284a:	1d1a      	adds	r2, r3, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	9203      	str	r2, [sp, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	bfb8      	it	lt
 8002854:	f04f 33ff 	movlt.w	r3, #4294967295
 8002858:	9305      	str	r3, [sp, #20]
 800285a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002924 <_vfiprintf_r+0x224>
 800285e:	2203      	movs	r2, #3
 8002860:	4650      	mov	r0, sl
 8002862:	7821      	ldrb	r1, [r4, #0]
 8002864:	f000 fb4a 	bl	8002efc <memchr>
 8002868:	b138      	cbz	r0, 800287a <_vfiprintf_r+0x17a>
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	9b04      	ldr	r3, [sp, #16]
 800286e:	eba0 000a 	sub.w	r0, r0, sl
 8002872:	4082      	lsls	r2, r0
 8002874:	4313      	orrs	r3, r2
 8002876:	3401      	adds	r4, #1
 8002878:	9304      	str	r3, [sp, #16]
 800287a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800287e:	2206      	movs	r2, #6
 8002880:	4829      	ldr	r0, [pc, #164]	; (8002928 <_vfiprintf_r+0x228>)
 8002882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002886:	f000 fb39 	bl	8002efc <memchr>
 800288a:	2800      	cmp	r0, #0
 800288c:	d03f      	beq.n	800290e <_vfiprintf_r+0x20e>
 800288e:	4b27      	ldr	r3, [pc, #156]	; (800292c <_vfiprintf_r+0x22c>)
 8002890:	bb1b      	cbnz	r3, 80028da <_vfiprintf_r+0x1da>
 8002892:	9b03      	ldr	r3, [sp, #12]
 8002894:	3307      	adds	r3, #7
 8002896:	f023 0307 	bic.w	r3, r3, #7
 800289a:	3308      	adds	r3, #8
 800289c:	9303      	str	r3, [sp, #12]
 800289e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028a0:	443b      	add	r3, r7
 80028a2:	9309      	str	r3, [sp, #36]	; 0x24
 80028a4:	e768      	b.n	8002778 <_vfiprintf_r+0x78>
 80028a6:	460c      	mov	r4, r1
 80028a8:	2001      	movs	r0, #1
 80028aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80028ae:	e7a6      	b.n	80027fe <_vfiprintf_r+0xfe>
 80028b0:	2300      	movs	r3, #0
 80028b2:	f04f 0c0a 	mov.w	ip, #10
 80028b6:	4619      	mov	r1, r3
 80028b8:	3401      	adds	r4, #1
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	4620      	mov	r0, r4
 80028be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028c2:	3a30      	subs	r2, #48	; 0x30
 80028c4:	2a09      	cmp	r2, #9
 80028c6:	d903      	bls.n	80028d0 <_vfiprintf_r+0x1d0>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0c6      	beq.n	800285a <_vfiprintf_r+0x15a>
 80028cc:	9105      	str	r1, [sp, #20]
 80028ce:	e7c4      	b.n	800285a <_vfiprintf_r+0x15a>
 80028d0:	4604      	mov	r4, r0
 80028d2:	2301      	movs	r3, #1
 80028d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80028d8:	e7f0      	b.n	80028bc <_vfiprintf_r+0x1bc>
 80028da:	ab03      	add	r3, sp, #12
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	462a      	mov	r2, r5
 80028e0:	4630      	mov	r0, r6
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <_vfiprintf_r+0x230>)
 80028e4:	a904      	add	r1, sp, #16
 80028e6:	f3af 8000 	nop.w
 80028ea:	4607      	mov	r7, r0
 80028ec:	1c78      	adds	r0, r7, #1
 80028ee:	d1d6      	bne.n	800289e <_vfiprintf_r+0x19e>
 80028f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028f2:	07d9      	lsls	r1, r3, #31
 80028f4:	d405      	bmi.n	8002902 <_vfiprintf_r+0x202>
 80028f6:	89ab      	ldrh	r3, [r5, #12]
 80028f8:	059a      	lsls	r2, r3, #22
 80028fa:	d402      	bmi.n	8002902 <_vfiprintf_r+0x202>
 80028fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028fe:	f7ff fde1 	bl	80024c4 <__retarget_lock_release_recursive>
 8002902:	89ab      	ldrh	r3, [r5, #12]
 8002904:	065b      	lsls	r3, r3, #25
 8002906:	f53f af1d 	bmi.w	8002744 <_vfiprintf_r+0x44>
 800290a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800290c:	e71c      	b.n	8002748 <_vfiprintf_r+0x48>
 800290e:	ab03      	add	r3, sp, #12
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	462a      	mov	r2, r5
 8002914:	4630      	mov	r0, r6
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <_vfiprintf_r+0x230>)
 8002918:	a904      	add	r1, sp, #16
 800291a:	f000 f87d 	bl	8002a18 <_printf_i>
 800291e:	e7e4      	b.n	80028ea <_vfiprintf_r+0x1ea>
 8002920:	080030aa 	.word	0x080030aa
 8002924:	080030b0 	.word	0x080030b0
 8002928:	080030b4 	.word	0x080030b4
 800292c:	00000000 	.word	0x00000000
 8002930:	080026db 	.word	0x080026db

08002934 <_printf_common>:
 8002934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	4616      	mov	r6, r2
 800293a:	4699      	mov	r9, r3
 800293c:	688a      	ldr	r2, [r1, #8]
 800293e:	690b      	ldr	r3, [r1, #16]
 8002940:	4607      	mov	r7, r0
 8002942:	4293      	cmp	r3, r2
 8002944:	bfb8      	it	lt
 8002946:	4613      	movlt	r3, r2
 8002948:	6033      	str	r3, [r6, #0]
 800294a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800294e:	460c      	mov	r4, r1
 8002950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002954:	b10a      	cbz	r2, 800295a <_printf_common+0x26>
 8002956:	3301      	adds	r3, #1
 8002958:	6033      	str	r3, [r6, #0]
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	0699      	lsls	r1, r3, #26
 800295e:	bf42      	ittt	mi
 8002960:	6833      	ldrmi	r3, [r6, #0]
 8002962:	3302      	addmi	r3, #2
 8002964:	6033      	strmi	r3, [r6, #0]
 8002966:	6825      	ldr	r5, [r4, #0]
 8002968:	f015 0506 	ands.w	r5, r5, #6
 800296c:	d106      	bne.n	800297c <_printf_common+0x48>
 800296e:	f104 0a19 	add.w	sl, r4, #25
 8002972:	68e3      	ldr	r3, [r4, #12]
 8002974:	6832      	ldr	r2, [r6, #0]
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	42ab      	cmp	r3, r5
 800297a:	dc2b      	bgt.n	80029d4 <_printf_common+0xa0>
 800297c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002980:	1e13      	subs	r3, r2, #0
 8002982:	6822      	ldr	r2, [r4, #0]
 8002984:	bf18      	it	ne
 8002986:	2301      	movne	r3, #1
 8002988:	0692      	lsls	r2, r2, #26
 800298a:	d430      	bmi.n	80029ee <_printf_common+0xba>
 800298c:	4649      	mov	r1, r9
 800298e:	4638      	mov	r0, r7
 8002990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002994:	47c0      	blx	r8
 8002996:	3001      	adds	r0, #1
 8002998:	d023      	beq.n	80029e2 <_printf_common+0xae>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	6922      	ldr	r2, [r4, #16]
 800299e:	f003 0306 	and.w	r3, r3, #6
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf14      	ite	ne
 80029a6:	2500      	movne	r5, #0
 80029a8:	6833      	ldreq	r3, [r6, #0]
 80029aa:	f04f 0600 	mov.w	r6, #0
 80029ae:	bf08      	it	eq
 80029b0:	68e5      	ldreq	r5, [r4, #12]
 80029b2:	f104 041a 	add.w	r4, r4, #26
 80029b6:	bf08      	it	eq
 80029b8:	1aed      	subeq	r5, r5, r3
 80029ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80029be:	bf08      	it	eq
 80029c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bfc4      	itt	gt
 80029c8:	1a9b      	subgt	r3, r3, r2
 80029ca:	18ed      	addgt	r5, r5, r3
 80029cc:	42b5      	cmp	r5, r6
 80029ce:	d11a      	bne.n	8002a06 <_printf_common+0xd2>
 80029d0:	2000      	movs	r0, #0
 80029d2:	e008      	b.n	80029e6 <_printf_common+0xb2>
 80029d4:	2301      	movs	r3, #1
 80029d6:	4652      	mov	r2, sl
 80029d8:	4649      	mov	r1, r9
 80029da:	4638      	mov	r0, r7
 80029dc:	47c0      	blx	r8
 80029de:	3001      	adds	r0, #1
 80029e0:	d103      	bne.n	80029ea <_printf_common+0xb6>
 80029e2:	f04f 30ff 	mov.w	r0, #4294967295
 80029e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ea:	3501      	adds	r5, #1
 80029ec:	e7c1      	b.n	8002972 <_printf_common+0x3e>
 80029ee:	2030      	movs	r0, #48	; 0x30
 80029f0:	18e1      	adds	r1, r4, r3
 80029f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029fc:	4422      	add	r2, r4
 80029fe:	3302      	adds	r3, #2
 8002a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a04:	e7c2      	b.n	800298c <_printf_common+0x58>
 8002a06:	2301      	movs	r3, #1
 8002a08:	4622      	mov	r2, r4
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	47c0      	blx	r8
 8002a10:	3001      	adds	r0, #1
 8002a12:	d0e6      	beq.n	80029e2 <_printf_common+0xae>
 8002a14:	3601      	adds	r6, #1
 8002a16:	e7d9      	b.n	80029cc <_printf_common+0x98>

08002a18 <_printf_i>:
 8002a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1c:	7e0f      	ldrb	r7, [r1, #24]
 8002a1e:	4691      	mov	r9, r2
 8002a20:	2f78      	cmp	r7, #120	; 0x78
 8002a22:	4680      	mov	r8, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	469a      	mov	sl, r3
 8002a28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a2e:	d807      	bhi.n	8002a40 <_printf_i+0x28>
 8002a30:	2f62      	cmp	r7, #98	; 0x62
 8002a32:	d80a      	bhi.n	8002a4a <_printf_i+0x32>
 8002a34:	2f00      	cmp	r7, #0
 8002a36:	f000 80d5 	beq.w	8002be4 <_printf_i+0x1cc>
 8002a3a:	2f58      	cmp	r7, #88	; 0x58
 8002a3c:	f000 80c1 	beq.w	8002bc2 <_printf_i+0x1aa>
 8002a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a48:	e03a      	b.n	8002ac0 <_printf_i+0xa8>
 8002a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a4e:	2b15      	cmp	r3, #21
 8002a50:	d8f6      	bhi.n	8002a40 <_printf_i+0x28>
 8002a52:	a101      	add	r1, pc, #4	; (adr r1, 8002a58 <_printf_i+0x40>)
 8002a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a58:	08002ab1 	.word	0x08002ab1
 8002a5c:	08002ac5 	.word	0x08002ac5
 8002a60:	08002a41 	.word	0x08002a41
 8002a64:	08002a41 	.word	0x08002a41
 8002a68:	08002a41 	.word	0x08002a41
 8002a6c:	08002a41 	.word	0x08002a41
 8002a70:	08002ac5 	.word	0x08002ac5
 8002a74:	08002a41 	.word	0x08002a41
 8002a78:	08002a41 	.word	0x08002a41
 8002a7c:	08002a41 	.word	0x08002a41
 8002a80:	08002a41 	.word	0x08002a41
 8002a84:	08002bcb 	.word	0x08002bcb
 8002a88:	08002af1 	.word	0x08002af1
 8002a8c:	08002b85 	.word	0x08002b85
 8002a90:	08002a41 	.word	0x08002a41
 8002a94:	08002a41 	.word	0x08002a41
 8002a98:	08002bed 	.word	0x08002bed
 8002a9c:	08002a41 	.word	0x08002a41
 8002aa0:	08002af1 	.word	0x08002af1
 8002aa4:	08002a41 	.word	0x08002a41
 8002aa8:	08002a41 	.word	0x08002a41
 8002aac:	08002b8d 	.word	0x08002b8d
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	602a      	str	r2, [r5, #0]
 8002ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0a0      	b.n	8002c06 <_printf_i+0x1ee>
 8002ac4:	6820      	ldr	r0, [r4, #0]
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	0607      	lsls	r7, r0, #24
 8002aca:	f103 0104 	add.w	r1, r3, #4
 8002ace:	6029      	str	r1, [r5, #0]
 8002ad0:	d501      	bpl.n	8002ad6 <_printf_i+0xbe>
 8002ad2:	681e      	ldr	r6, [r3, #0]
 8002ad4:	e003      	b.n	8002ade <_printf_i+0xc6>
 8002ad6:	0646      	lsls	r6, r0, #25
 8002ad8:	d5fb      	bpl.n	8002ad2 <_printf_i+0xba>
 8002ada:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ade:	2e00      	cmp	r6, #0
 8002ae0:	da03      	bge.n	8002aea <_printf_i+0xd2>
 8002ae2:	232d      	movs	r3, #45	; 0x2d
 8002ae4:	4276      	negs	r6, r6
 8002ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aea:	230a      	movs	r3, #10
 8002aec:	4859      	ldr	r0, [pc, #356]	; (8002c54 <_printf_i+0x23c>)
 8002aee:	e012      	b.n	8002b16 <_printf_i+0xfe>
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	6820      	ldr	r0, [r4, #0]
 8002af4:	1d19      	adds	r1, r3, #4
 8002af6:	6029      	str	r1, [r5, #0]
 8002af8:	0605      	lsls	r5, r0, #24
 8002afa:	d501      	bpl.n	8002b00 <_printf_i+0xe8>
 8002afc:	681e      	ldr	r6, [r3, #0]
 8002afe:	e002      	b.n	8002b06 <_printf_i+0xee>
 8002b00:	0641      	lsls	r1, r0, #25
 8002b02:	d5fb      	bpl.n	8002afc <_printf_i+0xe4>
 8002b04:	881e      	ldrh	r6, [r3, #0]
 8002b06:	2f6f      	cmp	r7, #111	; 0x6f
 8002b08:	bf0c      	ite	eq
 8002b0a:	2308      	moveq	r3, #8
 8002b0c:	230a      	movne	r3, #10
 8002b0e:	4851      	ldr	r0, [pc, #324]	; (8002c54 <_printf_i+0x23c>)
 8002b10:	2100      	movs	r1, #0
 8002b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b16:	6865      	ldr	r5, [r4, #4]
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	bfa8      	it	ge
 8002b1c:	6821      	ldrge	r1, [r4, #0]
 8002b1e:	60a5      	str	r5, [r4, #8]
 8002b20:	bfa4      	itt	ge
 8002b22:	f021 0104 	bicge.w	r1, r1, #4
 8002b26:	6021      	strge	r1, [r4, #0]
 8002b28:	b90e      	cbnz	r6, 8002b2e <_printf_i+0x116>
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	d04b      	beq.n	8002bc6 <_printf_i+0x1ae>
 8002b2e:	4615      	mov	r5, r2
 8002b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b34:	fb03 6711 	mls	r7, r3, r1, r6
 8002b38:	5dc7      	ldrb	r7, [r0, r7]
 8002b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b3e:	4637      	mov	r7, r6
 8002b40:	42bb      	cmp	r3, r7
 8002b42:	460e      	mov	r6, r1
 8002b44:	d9f4      	bls.n	8002b30 <_printf_i+0x118>
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10b      	bne.n	8002b62 <_printf_i+0x14a>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	07de      	lsls	r6, r3, #31
 8002b4e:	d508      	bpl.n	8002b62 <_printf_i+0x14a>
 8002b50:	6923      	ldr	r3, [r4, #16]
 8002b52:	6861      	ldr	r1, [r4, #4]
 8002b54:	4299      	cmp	r1, r3
 8002b56:	bfde      	ittt	le
 8002b58:	2330      	movle	r3, #48	; 0x30
 8002b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b62:	1b52      	subs	r2, r2, r5
 8002b64:	6122      	str	r2, [r4, #16]
 8002b66:	464b      	mov	r3, r9
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f8cd a000 	str.w	sl, [sp]
 8002b70:	aa03      	add	r2, sp, #12
 8002b72:	f7ff fedf 	bl	8002934 <_printf_common>
 8002b76:	3001      	adds	r0, #1
 8002b78:	d14a      	bne.n	8002c10 <_printf_i+0x1f8>
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7e:	b004      	add	sp, #16
 8002b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	2778      	movs	r7, #120	; 0x78
 8002b8e:	4832      	ldr	r0, [pc, #200]	; (8002c58 <_printf_i+0x240>)
 8002b90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	6829      	ldr	r1, [r5, #0]
 8002b98:	061f      	lsls	r7, r3, #24
 8002b9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b9e:	d402      	bmi.n	8002ba6 <_printf_i+0x18e>
 8002ba0:	065f      	lsls	r7, r3, #25
 8002ba2:	bf48      	it	mi
 8002ba4:	b2b6      	uxthmi	r6, r6
 8002ba6:	07df      	lsls	r7, r3, #31
 8002ba8:	bf48      	it	mi
 8002baa:	f043 0320 	orrmi.w	r3, r3, #32
 8002bae:	6029      	str	r1, [r5, #0]
 8002bb0:	bf48      	it	mi
 8002bb2:	6023      	strmi	r3, [r4, #0]
 8002bb4:	b91e      	cbnz	r6, 8002bbe <_printf_i+0x1a6>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	f023 0320 	bic.w	r3, r3, #32
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	e7a6      	b.n	8002b10 <_printf_i+0xf8>
 8002bc2:	4824      	ldr	r0, [pc, #144]	; (8002c54 <_printf_i+0x23c>)
 8002bc4:	e7e4      	b.n	8002b90 <_printf_i+0x178>
 8002bc6:	4615      	mov	r5, r2
 8002bc8:	e7bd      	b.n	8002b46 <_printf_i+0x12e>
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	6826      	ldr	r6, [r4, #0]
 8002bce:	1d18      	adds	r0, r3, #4
 8002bd0:	6961      	ldr	r1, [r4, #20]
 8002bd2:	6028      	str	r0, [r5, #0]
 8002bd4:	0635      	lsls	r5, r6, #24
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	d501      	bpl.n	8002bde <_printf_i+0x1c6>
 8002bda:	6019      	str	r1, [r3, #0]
 8002bdc:	e002      	b.n	8002be4 <_printf_i+0x1cc>
 8002bde:	0670      	lsls	r0, r6, #25
 8002be0:	d5fb      	bpl.n	8002bda <_printf_i+0x1c2>
 8002be2:	8019      	strh	r1, [r3, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	4615      	mov	r5, r2
 8002be8:	6123      	str	r3, [r4, #16]
 8002bea:	e7bc      	b.n	8002b66 <_printf_i+0x14e>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	1d1a      	adds	r2, r3, #4
 8002bf2:	602a      	str	r2, [r5, #0]
 8002bf4:	681d      	ldr	r5, [r3, #0]
 8002bf6:	6862      	ldr	r2, [r4, #4]
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f000 f97f 	bl	8002efc <memchr>
 8002bfe:	b108      	cbz	r0, 8002c04 <_printf_i+0x1ec>
 8002c00:	1b40      	subs	r0, r0, r5
 8002c02:	6060      	str	r0, [r4, #4]
 8002c04:	6863      	ldr	r3, [r4, #4]
 8002c06:	6123      	str	r3, [r4, #16]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c0e:	e7aa      	b.n	8002b66 <_printf_i+0x14e>
 8002c10:	462a      	mov	r2, r5
 8002c12:	4649      	mov	r1, r9
 8002c14:	4640      	mov	r0, r8
 8002c16:	6923      	ldr	r3, [r4, #16]
 8002c18:	47d0      	blx	sl
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	d0ad      	beq.n	8002b7a <_printf_i+0x162>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	079b      	lsls	r3, r3, #30
 8002c22:	d413      	bmi.n	8002c4c <_printf_i+0x234>
 8002c24:	68e0      	ldr	r0, [r4, #12]
 8002c26:	9b03      	ldr	r3, [sp, #12]
 8002c28:	4298      	cmp	r0, r3
 8002c2a:	bfb8      	it	lt
 8002c2c:	4618      	movlt	r0, r3
 8002c2e:	e7a6      	b.n	8002b7e <_printf_i+0x166>
 8002c30:	2301      	movs	r3, #1
 8002c32:	4632      	mov	r2, r6
 8002c34:	4649      	mov	r1, r9
 8002c36:	4640      	mov	r0, r8
 8002c38:	47d0      	blx	sl
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d09d      	beq.n	8002b7a <_printf_i+0x162>
 8002c3e:	3501      	adds	r5, #1
 8002c40:	68e3      	ldr	r3, [r4, #12]
 8002c42:	9903      	ldr	r1, [sp, #12]
 8002c44:	1a5b      	subs	r3, r3, r1
 8002c46:	42ab      	cmp	r3, r5
 8002c48:	dcf2      	bgt.n	8002c30 <_printf_i+0x218>
 8002c4a:	e7eb      	b.n	8002c24 <_printf_i+0x20c>
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	f104 0619 	add.w	r6, r4, #25
 8002c52:	e7f5      	b.n	8002c40 <_printf_i+0x228>
 8002c54:	080030bb 	.word	0x080030bb
 8002c58:	080030cc 	.word	0x080030cc

08002c5c <__sflush_r>:
 8002c5c:	898a      	ldrh	r2, [r1, #12]
 8002c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c60:	4605      	mov	r5, r0
 8002c62:	0710      	lsls	r0, r2, #28
 8002c64:	460c      	mov	r4, r1
 8002c66:	d457      	bmi.n	8002d18 <__sflush_r+0xbc>
 8002c68:	684b      	ldr	r3, [r1, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	dc04      	bgt.n	8002c78 <__sflush_r+0x1c>
 8002c6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	dc01      	bgt.n	8002c78 <__sflush_r+0x1c>
 8002c74:	2000      	movs	r0, #0
 8002c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c7a:	2e00      	cmp	r6, #0
 8002c7c:	d0fa      	beq.n	8002c74 <__sflush_r+0x18>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c84:	682f      	ldr	r7, [r5, #0]
 8002c86:	6a21      	ldr	r1, [r4, #32]
 8002c88:	602b      	str	r3, [r5, #0]
 8002c8a:	d032      	beq.n	8002cf2 <__sflush_r+0x96>
 8002c8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	075a      	lsls	r2, r3, #29
 8002c92:	d505      	bpl.n	8002ca0 <__sflush_r+0x44>
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	1ac0      	subs	r0, r0, r3
 8002c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c9a:	b10b      	cbz	r3, 8002ca0 <__sflush_r+0x44>
 8002c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c9e:	1ac0      	subs	r0, r0, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	6a21      	ldr	r1, [r4, #32]
 8002caa:	47b0      	blx	r6
 8002cac:	1c43      	adds	r3, r0, #1
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	d106      	bne.n	8002cc0 <__sflush_r+0x64>
 8002cb2:	6829      	ldr	r1, [r5, #0]
 8002cb4:	291d      	cmp	r1, #29
 8002cb6:	d82b      	bhi.n	8002d10 <__sflush_r+0xb4>
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <__sflush_r+0x100>)
 8002cba:	410a      	asrs	r2, r1
 8002cbc:	07d6      	lsls	r6, r2, #31
 8002cbe:	d427      	bmi.n	8002d10 <__sflush_r+0xb4>
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	6062      	str	r2, [r4, #4]
 8002cc4:	6922      	ldr	r2, [r4, #16]
 8002cc6:	04d9      	lsls	r1, r3, #19
 8002cc8:	6022      	str	r2, [r4, #0]
 8002cca:	d504      	bpl.n	8002cd6 <__sflush_r+0x7a>
 8002ccc:	1c42      	adds	r2, r0, #1
 8002cce:	d101      	bne.n	8002cd4 <__sflush_r+0x78>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b903      	cbnz	r3, 8002cd6 <__sflush_r+0x7a>
 8002cd4:	6560      	str	r0, [r4, #84]	; 0x54
 8002cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cd8:	602f      	str	r7, [r5, #0]
 8002cda:	2900      	cmp	r1, #0
 8002cdc:	d0ca      	beq.n	8002c74 <__sflush_r+0x18>
 8002cde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ce2:	4299      	cmp	r1, r3
 8002ce4:	d002      	beq.n	8002cec <__sflush_r+0x90>
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f7ff fbee 	bl	80024c8 <_free_r>
 8002cec:	2000      	movs	r0, #0
 8002cee:	6360      	str	r0, [r4, #52]	; 0x34
 8002cf0:	e7c1      	b.n	8002c76 <__sflush_r+0x1a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	47b0      	blx	r6
 8002cf8:	1c41      	adds	r1, r0, #1
 8002cfa:	d1c8      	bne.n	8002c8e <__sflush_r+0x32>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0c5      	beq.n	8002c8e <__sflush_r+0x32>
 8002d02:	2b1d      	cmp	r3, #29
 8002d04:	d001      	beq.n	8002d0a <__sflush_r+0xae>
 8002d06:	2b16      	cmp	r3, #22
 8002d08:	d101      	bne.n	8002d0e <__sflush_r+0xb2>
 8002d0a:	602f      	str	r7, [r5, #0]
 8002d0c:	e7b2      	b.n	8002c74 <__sflush_r+0x18>
 8002d0e:	89a3      	ldrh	r3, [r4, #12]
 8002d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d14:	81a3      	strh	r3, [r4, #12]
 8002d16:	e7ae      	b.n	8002c76 <__sflush_r+0x1a>
 8002d18:	690f      	ldr	r7, [r1, #16]
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d0aa      	beq.n	8002c74 <__sflush_r+0x18>
 8002d1e:	0793      	lsls	r3, r2, #30
 8002d20:	bf18      	it	ne
 8002d22:	2300      	movne	r3, #0
 8002d24:	680e      	ldr	r6, [r1, #0]
 8002d26:	bf08      	it	eq
 8002d28:	694b      	ldreq	r3, [r1, #20]
 8002d2a:	1bf6      	subs	r6, r6, r7
 8002d2c:	600f      	str	r7, [r1, #0]
 8002d2e:	608b      	str	r3, [r1, #8]
 8002d30:	2e00      	cmp	r6, #0
 8002d32:	dd9f      	ble.n	8002c74 <__sflush_r+0x18>
 8002d34:	4633      	mov	r3, r6
 8002d36:	463a      	mov	r2, r7
 8002d38:	4628      	mov	r0, r5
 8002d3a:	6a21      	ldr	r1, [r4, #32]
 8002d3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002d40:	47e0      	blx	ip
 8002d42:	2800      	cmp	r0, #0
 8002d44:	dc06      	bgt.n	8002d54 <__sflush_r+0xf8>
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d50:	81a3      	strh	r3, [r4, #12]
 8002d52:	e790      	b.n	8002c76 <__sflush_r+0x1a>
 8002d54:	4407      	add	r7, r0
 8002d56:	1a36      	subs	r6, r6, r0
 8002d58:	e7ea      	b.n	8002d30 <__sflush_r+0xd4>
 8002d5a:	bf00      	nop
 8002d5c:	dfbffffe 	.word	0xdfbffffe

08002d60 <_fflush_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	690b      	ldr	r3, [r1, #16]
 8002d64:	4605      	mov	r5, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	b913      	cbnz	r3, 8002d70 <_fflush_r+0x10>
 8002d6a:	2500      	movs	r5, #0
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	b118      	cbz	r0, 8002d7a <_fflush_r+0x1a>
 8002d72:	6a03      	ldr	r3, [r0, #32]
 8002d74:	b90b      	cbnz	r3, 8002d7a <_fflush_r+0x1a>
 8002d76:	f7ff fa9f 	bl	80022b8 <__sinit>
 8002d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f3      	beq.n	8002d6a <_fflush_r+0xa>
 8002d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d84:	07d0      	lsls	r0, r2, #31
 8002d86:	d404      	bmi.n	8002d92 <_fflush_r+0x32>
 8002d88:	0599      	lsls	r1, r3, #22
 8002d8a:	d402      	bmi.n	8002d92 <_fflush_r+0x32>
 8002d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d8e:	f7ff fb98 	bl	80024c2 <__retarget_lock_acquire_recursive>
 8002d92:	4628      	mov	r0, r5
 8002d94:	4621      	mov	r1, r4
 8002d96:	f7ff ff61 	bl	8002c5c <__sflush_r>
 8002d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	07da      	lsls	r2, r3, #31
 8002da0:	d4e4      	bmi.n	8002d6c <_fflush_r+0xc>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	059b      	lsls	r3, r3, #22
 8002da6:	d4e1      	bmi.n	8002d6c <_fflush_r+0xc>
 8002da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002daa:	f7ff fb8b 	bl	80024c4 <__retarget_lock_release_recursive>
 8002dae:	e7dd      	b.n	8002d6c <_fflush_r+0xc>

08002db0 <__swbuf_r>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	460e      	mov	r6, r1
 8002db4:	4614      	mov	r4, r2
 8002db6:	4605      	mov	r5, r0
 8002db8:	b118      	cbz	r0, 8002dc2 <__swbuf_r+0x12>
 8002dba:	6a03      	ldr	r3, [r0, #32]
 8002dbc:	b90b      	cbnz	r3, 8002dc2 <__swbuf_r+0x12>
 8002dbe:	f7ff fa7b 	bl	80022b8 <__sinit>
 8002dc2:	69a3      	ldr	r3, [r4, #24]
 8002dc4:	60a3      	str	r3, [r4, #8]
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	071a      	lsls	r2, r3, #28
 8002dca:	d525      	bpl.n	8002e18 <__swbuf_r+0x68>
 8002dcc:	6923      	ldr	r3, [r4, #16]
 8002dce:	b31b      	cbz	r3, 8002e18 <__swbuf_r+0x68>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	6922      	ldr	r2, [r4, #16]
 8002dd4:	b2f6      	uxtb	r6, r6
 8002dd6:	1a98      	subs	r0, r3, r2
 8002dd8:	6963      	ldr	r3, [r4, #20]
 8002dda:	4637      	mov	r7, r6
 8002ddc:	4283      	cmp	r3, r0
 8002dde:	dc04      	bgt.n	8002dea <__swbuf_r+0x3a>
 8002de0:	4621      	mov	r1, r4
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7ff ffbc 	bl	8002d60 <_fflush_r>
 8002de8:	b9e0      	cbnz	r0, 8002e24 <__swbuf_r+0x74>
 8002dea:	68a3      	ldr	r3, [r4, #8]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	60a3      	str	r3, [r4, #8]
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	6022      	str	r2, [r4, #0]
 8002df6:	701e      	strb	r6, [r3, #0]
 8002df8:	6962      	ldr	r2, [r4, #20]
 8002dfa:	1c43      	adds	r3, r0, #1
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d004      	beq.n	8002e0a <__swbuf_r+0x5a>
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	07db      	lsls	r3, r3, #31
 8002e04:	d506      	bpl.n	8002e14 <__swbuf_r+0x64>
 8002e06:	2e0a      	cmp	r6, #10
 8002e08:	d104      	bne.n	8002e14 <__swbuf_r+0x64>
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f7ff ffa7 	bl	8002d60 <_fflush_r>
 8002e12:	b938      	cbnz	r0, 8002e24 <__swbuf_r+0x74>
 8002e14:	4638      	mov	r0, r7
 8002e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e18:	4621      	mov	r1, r4
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 f806 	bl	8002e2c <__swsetup_r>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d0d5      	beq.n	8002dd0 <__swbuf_r+0x20>
 8002e24:	f04f 37ff 	mov.w	r7, #4294967295
 8002e28:	e7f4      	b.n	8002e14 <__swbuf_r+0x64>
	...

08002e2c <__swsetup_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <__swsetup_r+0xac>)
 8002e30:	4605      	mov	r5, r0
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	460c      	mov	r4, r1
 8002e36:	b118      	cbz	r0, 8002e40 <__swsetup_r+0x14>
 8002e38:	6a03      	ldr	r3, [r0, #32]
 8002e3a:	b90b      	cbnz	r3, 8002e40 <__swsetup_r+0x14>
 8002e3c:	f7ff fa3c 	bl	80022b8 <__sinit>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e46:	0718      	lsls	r0, r3, #28
 8002e48:	d422      	bmi.n	8002e90 <__swsetup_r+0x64>
 8002e4a:	06d9      	lsls	r1, r3, #27
 8002e4c:	d407      	bmi.n	8002e5e <__swsetup_r+0x32>
 8002e4e:	2309      	movs	r3, #9
 8002e50:	602b      	str	r3, [r5, #0]
 8002e52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	e034      	b.n	8002ec8 <__swsetup_r+0x9c>
 8002e5e:	0758      	lsls	r0, r3, #29
 8002e60:	d512      	bpl.n	8002e88 <__swsetup_r+0x5c>
 8002e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e64:	b141      	cbz	r1, 8002e78 <__swsetup_r+0x4c>
 8002e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e6a:	4299      	cmp	r1, r3
 8002e6c:	d002      	beq.n	8002e74 <__swsetup_r+0x48>
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f7ff fb2a 	bl	80024c8 <_free_r>
 8002e74:	2300      	movs	r3, #0
 8002e76:	6363      	str	r3, [r4, #52]	; 0x34
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e7e:	81a3      	strh	r3, [r4, #12]
 8002e80:	2300      	movs	r3, #0
 8002e82:	6063      	str	r3, [r4, #4]
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	6923      	ldr	r3, [r4, #16]
 8002e92:	b94b      	cbnz	r3, 8002ea8 <__swsetup_r+0x7c>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	d003      	beq.n	8002ea8 <__swsetup_r+0x7c>
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f000 f85d 	bl	8002f62 <__smakebuf_r>
 8002ea8:	89a0      	ldrh	r0, [r4, #12]
 8002eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eae:	f010 0301 	ands.w	r3, r0, #1
 8002eb2:	d00a      	beq.n	8002eca <__swsetup_r+0x9e>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60a3      	str	r3, [r4, #8]
 8002eb8:	6963      	ldr	r3, [r4, #20]
 8002eba:	425b      	negs	r3, r3
 8002ebc:	61a3      	str	r3, [r4, #24]
 8002ebe:	6923      	ldr	r3, [r4, #16]
 8002ec0:	b943      	cbnz	r3, 8002ed4 <__swsetup_r+0xa8>
 8002ec2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ec6:	d1c4      	bne.n	8002e52 <__swsetup_r+0x26>
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
 8002eca:	0781      	lsls	r1, r0, #30
 8002ecc:	bf58      	it	pl
 8002ece:	6963      	ldrpl	r3, [r4, #20]
 8002ed0:	60a3      	str	r3, [r4, #8]
 8002ed2:	e7f4      	b.n	8002ebe <__swsetup_r+0x92>
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e7f7      	b.n	8002ec8 <__swsetup_r+0x9c>
 8002ed8:	20000064 	.word	0x20000064

08002edc <_sbrk_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	2300      	movs	r3, #0
 8002ee0:	4d05      	ldr	r5, [pc, #20]	; (8002ef8 <_sbrk_r+0x1c>)
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	f7fd fc1c 	bl	8000724 <_sbrk>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d102      	bne.n	8002ef6 <_sbrk_r+0x1a>
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	b103      	cbz	r3, 8002ef6 <_sbrk_r+0x1a>
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	2000025c 	.word	0x2000025c

08002efc <memchr>:
 8002efc:	4603      	mov	r3, r0
 8002efe:	b510      	push	{r4, lr}
 8002f00:	b2c9      	uxtb	r1, r1
 8002f02:	4402      	add	r2, r0
 8002f04:	4293      	cmp	r3, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	d101      	bne.n	8002f0e <memchr+0x12>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e003      	b.n	8002f16 <memchr+0x1a>
 8002f0e:	7804      	ldrb	r4, [r0, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	428c      	cmp	r4, r1
 8002f14:	d1f6      	bne.n	8002f04 <memchr+0x8>
 8002f16:	bd10      	pop	{r4, pc}

08002f18 <__swhatbuf_r>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f20:	4615      	mov	r5, r2
 8002f22:	2900      	cmp	r1, #0
 8002f24:	461e      	mov	r6, r3
 8002f26:	b096      	sub	sp, #88	; 0x58
 8002f28:	da0c      	bge.n	8002f44 <__swhatbuf_r+0x2c>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f32:	bf0c      	ite	eq
 8002f34:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002f38:	2340      	movne	r3, #64	; 0x40
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	6031      	str	r1, [r6, #0]
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	b016      	add	sp, #88	; 0x58
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	466a      	mov	r2, sp
 8002f46:	f000 f849 	bl	8002fdc <_fstat_r>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	dbed      	blt.n	8002f2a <__swhatbuf_r+0x12>
 8002f4e:	9901      	ldr	r1, [sp, #4]
 8002f50:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002f54:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002f58:	4259      	negs	r1, r3
 8002f5a:	4159      	adcs	r1, r3
 8002f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f60:	e7eb      	b.n	8002f3a <__swhatbuf_r+0x22>

08002f62 <__smakebuf_r>:
 8002f62:	898b      	ldrh	r3, [r1, #12]
 8002f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f66:	079d      	lsls	r5, r3, #30
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	d507      	bpl.n	8002f7e <__smakebuf_r+0x1c>
 8002f6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	2301      	movs	r3, #1
 8002f78:	6163      	str	r3, [r4, #20]
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	466a      	mov	r2, sp
 8002f80:	ab01      	add	r3, sp, #4
 8002f82:	f7ff ffc9 	bl	8002f18 <__swhatbuf_r>
 8002f86:	9900      	ldr	r1, [sp, #0]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	f7ff fb04 	bl	8002598 <_malloc_r>
 8002f90:	b948      	cbnz	r0, 8002fa6 <__smakebuf_r+0x44>
 8002f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f96:	059a      	lsls	r2, r3, #22
 8002f98:	d4ef      	bmi.n	8002f7a <__smakebuf_r+0x18>
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	e7e3      	b.n	8002f6e <__smakebuf_r+0xc>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	6020      	str	r0, [r4, #0]
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	9b00      	ldr	r3, [sp, #0]
 8002fb2:	6120      	str	r0, [r4, #16]
 8002fb4:	6163      	str	r3, [r4, #20]
 8002fb6:	9b01      	ldr	r3, [sp, #4]
 8002fb8:	b15b      	cbz	r3, 8002fd2 <__smakebuf_r+0x70>
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fc0:	f000 f81e 	bl	8003000 <_isatty_r>
 8002fc4:	b128      	cbz	r0, 8002fd2 <__smakebuf_r+0x70>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f023 0303 	bic.w	r3, r3, #3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	431d      	orrs	r5, r3
 8002fd6:	81a5      	strh	r5, [r4, #12]
 8002fd8:	e7cf      	b.n	8002f7a <__smakebuf_r+0x18>
	...

08002fdc <_fstat_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	2300      	movs	r3, #0
 8002fe0:	4d06      	ldr	r5, [pc, #24]	; (8002ffc <_fstat_r+0x20>)
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	f7fd fb75 	bl	80006d8 <_fstat>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d102      	bne.n	8002ff8 <_fstat_r+0x1c>
 8002ff2:	682b      	ldr	r3, [r5, #0]
 8002ff4:	b103      	cbz	r3, 8002ff8 <_fstat_r+0x1c>
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000025c 	.word	0x2000025c

08003000 <_isatty_r>:
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	2300      	movs	r3, #0
 8003004:	4d05      	ldr	r5, [pc, #20]	; (800301c <_isatty_r+0x1c>)
 8003006:	4604      	mov	r4, r0
 8003008:	4608      	mov	r0, r1
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	f7fd fb73 	bl	80006f6 <_isatty>
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d102      	bne.n	800301a <_isatty_r+0x1a>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	b103      	cbz	r3, 800301a <_isatty_r+0x1a>
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	2000025c 	.word	0x2000025c

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
